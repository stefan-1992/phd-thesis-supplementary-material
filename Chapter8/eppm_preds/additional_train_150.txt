if( or( is( building. type, housing), less than equal( building. occupied space, 300 m2))), then( apply to( nzbc h1as1, building))
if( not( and( apply to( h1as1, building), less than equal( count( building. storey), 3), adjacent( building, ground level), define( min( ground level. elevation), x0), has( building, roof), define( max( roof. elevation), x1), exclude( max( roof. elevation), or( chimney, aerial)), in between( building. height, and( x0, x1)), less than equal( building. height, 10 m), has( building, floor plan area), by( floor plan area. limit, and( seismic control joint, structural control joint)), has( building, external wall), is( external wall. orientation, vertical), has( building, roof), less than equal( roof. slope, 60 deg)))), then( or( apply to( h1as2, building), apply to( h1vm2, building), use( alternative means, to demonstrate compliance)))
if( exist( insulation)), then( not( is( insulation. type, foil)))
if( is( building. type, curtain walling)), then( not( apply to( nzbc h1as1, building))), and( or( use( verification method, h1/vm1), use( alternative means, demonstrate compliance))))
if( is( building, commercial)), then( not( apply to( nzbc h1as1, nzbc h1.3.6)), obligation( or( use( vm h1/3), demonstrate( compliance, alternative means))))
if( exist( building)), then( comply with( building. performance criteria, and( nzbc h1.3.1, nzbc h1.3.3, nzbc h1.3.4, nzbc h1.3.5)))
if( is( requirement, energy efficiency), then( comply with( options, and( nzbc h1as1 t1.1.3.2, alternative solution))))
if( comply with( nzbc h1as1 c h1.3.1(a))), then( comply with( nzbc h1as1 c h1.3.2e))
if( and( exist( building), has( building, industrial use), has( building, non-industrial use)), then( obligation( and( comply with( non-industrial use, relevant energy efficiency requirements), as per( non-industrial use, nzbc h1as1)))))
if( not( is( building. type, housing))), then( define( area, occupied space))
if( is( building. classified use, or( housing, communal residential, communal non-residential assembly care, commercial))), then( obligation( and( has( building. envelope, construction), is( construction. thermal resistance, adequate), define( r value, x0), or( as per( r value, nzbc h1as1 2.1.2), as per( r value, nzbc h1as1 2.1.3), as per( r value, h1/vm1 modelling method)))))
if( and( has( building. element, embedded heating system), part of( building. element, thermal envelope))), then( obligation( and( define( climate zone, x0), as per( building. location, nzbc h1as1 appendix c), if( in( climate zone, or( zone 1, zone 2, zone 3))), then( comply with( building. element. construction, schedule method)), not( apply( building. element. construction, calculation method, and( nzbc h1as1 2.1.3, has( building. element, heating system)))))))
if( exist( building element)), then( obligation( as per( building element. r-value, h1as1 2.1.4)))
if( has( insulation, material)), then( obligation( and( towards( insulation. performance, intended), not( compromise( insulation. durability, building safety, installer safety, occupant safety)), comply with( insulation. installation, and( nzs 4246 5, nzs 4246 6, nzs 4246 7, nzs 4246 10)))))
if( and( is( method, schedule), has( glazing, area), less than equal( glazing. area, 0.3 * wall. area), define( combined. glazing. area, sum( for each( wall. orientation), and( is( wall. orientation, or( east, south, west)), wall. glazing. area))), less than equal( combined. glazing. area, 0.3 * combined. wall. area), has( skylight, area), less than equal( skylight. area, max( 1.5 m2, 0.015 * roof. area)), has( opaque door, area), less than equal( opaque door. area, max( 6 m2, 0.06 * wall. area)))), then( use( method, schedule)))
if( part of( building element, thermal envelope)), then( obligation( and( greater than equal( construction. r-value, value), as per( value, or( nzbc h1as1 t2.1.2.2a, nzbc h1as1 t2.1.2.2b)), for( building element, heating system), in( heating system, embedded), in( value, nzbc h1as1 t2.1.2.2a), not( for( building element, heating system)), in( value, nzbc h1as1 t2.1.2.2b)))))
if( and( is( building. type, housing), before( building consent application, 1 May 2023))), then( comply with( building. requirements, or( nzbc h1as1 t2.1.2.2B, nzbc h1as1 t2.1.2.2C)))
if( and( is( building consent application, submitted before 2 November 2023), is( window or door. location, climate zone 1 or 2))), then( permission( reduce( window or door. construction r-value, to( 0.37 m²·K/W))))
if( compare( building, reference building)), then( obligation( and( is( building, insulated), as per( insulation, schedule method), or( and( is( insulation, roof), is( insulation, wall), is( insulation, floor), is( insulation, window), is( insulation, door), is( insulation, skylight)), not( equal( insulation, table)), perform( building, at least, reference building))))
if( and( is( calculation method, for( glazing, wall)), less than equal( divide( glazing. area, wall. area), 0.4))), then( obligation( use( calculation method)))
if( and( is( building element, part of thermal envelope), not( equal( construction. r-value, schedule method)), define( heat loss. proposed, HLProposed), define( heat loss. reference, HLReference), less than equal( heat loss. proposed, heat loss. reference), for( building, relevant climate zone), has( building, window area))), then( permission( use( building element, construction))))
if( is( building, housing)), then( permission( and( as per( hlreference, nzbc h1as1 t2.1.3.4b), before( building consent application, '1 May 2023')))); else( obligation( as per( hlreference, nzbc h1as1 t2.1.3.4a)))
if( and( is( building, reference), has( building, heat loss equation)), then( and( define( climate zone, x0), as per( heat loss equation, and( nzbc h1as1 t2.1.3.4a, nzbc h1as1 2.1.3.4)), is( roof. type, or( aroof 1, aroof 2)), define( roof. area, x1), define( wall. area, x2), define( slab on ground floor. area, x3), define( other floor. area, x4), define( wall. area 30%, x5), equal( heat loss equation, and( askylight, '+', 6.6, '*', x1, '+', 2.0, '*', x2, '+
if( and( before( building consent application, '2 November 2023'), in( climate zone, or( 1, 2))), then( permission( calculate( hlreference, nzbc h1as1 2.1.3.5))))
if( and( apply to( building consent application, before( '2 November 2023')), in( climate zone, or( 1, 2))), then( define( hl reference, and( sum( 0.7 * total wall area), 2.0 * slab on ground floor, 1.5 * equation 1)), where( hl reference, heat loss of reference building), where( a roof, roof area of proposed building), where( a skylight, skylight area of proposed building), where( a 70% of total wall area, 0.7 * total wall area), where( a 30% of total wall area, 0.3 * total wall area), where( a slab on ground floor, area of slab on ground floors in thermal envelope), where( a other floor, area of other floors in thermal envelope), define( equation 1, and( a skylight, 6.6 * a other floor, 2.5 * a 30% of total wall area))))
if( exist( building)), then( obligation( define( hl proposed, sum( building element. heat loss), as per( equation 2, nzbc h1as1))))
if( has( building, thermal envelope)), then( define( hl_proposed, and( glazing_area, roof_area, wall_area, floor_area, skylight_area, door_area, opaque_door_area, r_values))), where( glazing_area, is( building. area, glazing), roof_area, is( building. area, roof), wall_area, is( building. area, wall), floor_area, is( building. area, floor), skylight_area, is( building. area, skylight), door_area, is( building. area, door), opaque_door_area, is( building. area, opaque door), r_values, and( r_roof, r_wall, r_floor, r_window, r_door, r_skylight)), and( equal( hl_proposed, 'glazing_area + roof_area + wall_area + floor_area + skylight_area + door_area + opaque_door_area + r_roof + r_wall + r_floor + r_window + r_door + r_skylight')))
if( is( building. thermal envelope, true)), then( obligation( and( define( reference R-value, x0), define( proposed R-value, x1), greater than equal( proposed R-value, '0.5 * x0'))))
if( or( part of( structure, nzbc h1as1), part of( window, appendix e), part of( door, appendix e), part of( skylight, appendix e), part of( floor, appendix f))), then( apply to( nzbc h1as1))
if( exist( insulation)), then( obligation( verify( insulation. thermal resistance, nzs 4859.1)))
if( and( has( air space, unconditioned), between( air space, thermal envelope, building envelope))), then( include( construction. r value, air space. r value))
if( and( is( building. type, or( housing, communal residential, communal non-residential assembly care, commercial)), has( building. element, and( window, door, vent))), then( obligation( and( is( building. element, air movement capable), is( building. element, fixed in closed position))))
if( exist( building)), then( comply with( building. thermal resistance, h1as1 2.1))
if( and( is( hot water system. type, for sanitary fixtures and appliances), less than equal( hot water system. storage capacity, 700 litres))), then( obligation( comply with( hot water system, nzs 4305)))
if( is( toilet. gender, male)), then( obligation( and( has( toilet, wc pan), has( toilet, basin), may( have( toilet, urinal)))))
if( or( is( building. activity, or( living, accomodation)), is( building. activity, active recreation), and( is( person. age, under 5), is( person. supervision, supervised or educated)), is( building. activity, dirty work))), then( and( has( building, shower), or( has( building, bath), has( building, both))))
if( or( is( space. use, wc pan), is( space. use, urinal), is( space. use, basin))), then( obligation( and( define( count( space. fixture), x0), as per( x0, and( nzbc g1as1 f1, nzbc g1as1 t1, nzbc g1as1 t3, nzbc g1as1 t4)))))
if( exist( building), then( obligation( and( has( building, sanitary fixtures), as per( sanitary fixtures, and( nzbc g1as1 t1, nzbc g1as1 t2))))))
if( exist( male facility)), then( permission( include( male facility, urinals)))
if( is( facility. type, unisex)), then( obligation( and( has( facility, compartment), is( compartment. privacy, full), has( compartment, door), is( door. height, full), has( compartment, wall), is( wall. height, full), has( facility, wc pan), has( facility, basin), has( facility, sanitary towel disposal equipment), not( has( facility, urinal)), not( through( facility. access, restricted area, one sex))))
if( and( is( building. type, not( or( housing, preadolescent))), has( female. sanitary facility, provision)), then( obligation( or( has( provision, incinerator), has( provision, macerator), has( provision, similar disposal equipment), has( provision, portable disposal system))))
if( exist( sanitary towel disposal equipment)), then( obligation( and( not( impede( access, people with disabilities)), for( access, or( female facility, unisex facility))), if( is( access, female facility), within( equipment, facility), serve( equipment, toilet cubicle), if( is( access, unisex facility), in( equipment, toilet cubicle))))
if( exist( wc system)), then( obligation( and( has( wc system, impervious surface finish), has( wc system, water trap), greater than equal( water trap. volume, excreta from normal usage), has( water trap, minimum water seal depth), greater than equal( minimum water seal depth, 50 mm), has( wc system, pan), not( is( pan, overflow prone)), has( wc system, watertight flexible joint), is( joint. location, above floor level), is( joint. location, within room containing wc), has( wc system, flushing apparatus), is( flushing apparatus, capable of clearing all normal faecal matter), is( flushing apparatus, capable of delivering full flush within 2 minutes))))
if( has( sanitary fixture, flushing system)), then( obligation( or( is( flushing system, cistern), is( flushing system, flushing valve))))
if( exist( cistern)), then( permission( is( cistern. type, dual flush), has( cistern, 2 buttons), for( button, cistern), is( button. function, or( full flush, half flush)))))
if( has( flushing valve, backflow prevention)), then( obligation( and( has( flushing valve, water supply), is( water supply. capacity, related to( building. nature, building. usage)), capable of( water supply, several rapid flushes))))
if( exist( urinal)), then( permission( is( urinal. type, or( stall, continuous wall, trough, bowl))))
if( exist( urinal)), then( obligation( and( has( urinal, base), is( base. type, or( channel, trough)), has( channel. drainage, trap), is( trap. location, lowest point), towards( trap. drainage, discharge pipe), has( discharge pipe, grate), is( grate. type, domed), has( grate. opening area, greater than equal( discharge pipe. area)), is( grate. fixing, securely fixed), is( grate. access, removable), as per( grate, nzbc g1as1 f3))))
if( exist( urinal)), then( obligation( and( is( urinal. type, wall hung), or( less than equal( urinal. front lip height, 600 mm), is( urinal. user, men)), or( less than equal( urinal. front lip height, 400 mm), is( urinal. user, boys))), has( urinal, back surface), greater than equal( back surface. height, 'urinal. front lip height + 450 mm'))))
if( is( fixture, urinal)), then( obligation( and( has( fixture, impervious surface), is( surface. type, or( glazed ceramic ware, stainless steel)), if( is( surface. type, stainless steel), and( greater than equal( surface. thickness, 1.2 mm), is( surface. grade, or( 304, and( is( fixture. location, outside air), is( fixture. location, marine environment), is( surface. grade, 316))))))))
if( exist( urinal)), then( obligation( and( has( urinal, flushing apparatus), is( flushing apparatus. type, cleaning), greater than equal( flushing apparatus. water delivery, '2.5 l'), towards( flushing apparatus. coverage, urinal. surface), towards( flushing apparatus. coverage, stall), towards( flushing apparatus. coverage, bowl), towards( flushing apparatus. coverage, '600 mm length of urinal wall'))))
if( exist( urinal flushing system)), then( obligation( and( above( cistern. outlet, sparge pipe), greater than equal( distance, 450 mm), comply with( urinal flushing system, nzbc g1as1 t5))))
if( is( urinal. type, flushing)), then( obligation( and( comply with( water supply, nzbc g1as1 t5), comply with( backflow prevention, nzbc g12))))
if( exist( flushing system)), then( obligation( less than equal( operating control. height, 1.3 m), above( operating control. height, floor)))
if( exist( sanitary fixture)), then( comply with( sanitary fixture. installation, and( nzbc e3, firmly fixed, impervious surface finish, ventilation, water supply, foul water)))
if( and( is( space. type, spray), satisfy( space. dimension, nzbc g1as1), comply with( space. backflow prevention, nzbc g12)))
if( has( building, soil fixture)), then( obligation( and( separate( space containing( soil fixture), habitable space), has( space, wc pan), greater than equal( space. dimensions, as per( nzbc g1as1 f4)))))
if( and( is( shower, using), or( shower. fixture, shower tray), is( shower. threshold, level))), then( obligation( comply with( nzbc e3as1, internal moisture)))
if( and( is( fixture, for people with disabilities)), then( obligation( and( comply with( fixture, nzbc f8), is( fixture. location, accessible route), comply with( fixture. location, nzbc d1)))))
if( greater than( building. occupants, 300)), then( obligation( and( for( facility, sanitary), is( facility. type, accessible), at each( facility. location, group), is( group. location, or( assembly service, amusement park, shopping plaza, library, transport terminal)), comply with( facility, and( nzbc g1as1 t1, nzbc g1as1 t2)))))
if( exist( fixture) and is( fixture. for, people with disabilities)), then( comply with( fixture. layout, and( nzbc g1as1 f5, nzbc g1as1 f6, nzbc g1as1 f7, nzbc g1as1 f8, nzbc g1as1 f9)))
if( is( unit. type, household), has( unit, door), between( door, soil fixture), and( or( is( door. location, kitchen), is( door. location, place for food storage))))
if( and( not( is( building. classified use, household unit)), has( space, soil fixture)), then( obligation( and( not( open( space, food storage/preparation/sale/consumption)), not( open( space, office/work area)), as per( figure 10))))
if( exist( basin)), then( obligation( or( within( basin. location, space containing soil fixture), adjacent( basin. location, space containing soil fixture), and( within( basin. location, kitchen), within( kitchen, household unit), has( kitchen, single door), connect( kitchen, soil fixture), has( soil fixture, basin)))))
if( is( fixture. type, sanitary)), then( obligation( and( convenient( travel length, for( fixture, type)), taking into account( fixture. usage))))
if( is( area, camping ground)), then( obligation( and( define( max distance, 75 m), less than equal( distance( sanitary fixture, caravan or campsite), max distance))))
if( is( building. type, group dwelling)), then( obligation( has( building, sanitary fixtures), for( sanitary fixture, all( building. occupants)), is( sanitary fixture. location, convenient))))
if( exist( building)), then( comply with( building. accessibility, nzs 4121 s10))
if( or( is( wc pan. type, wall hung), is( cistern. type, concealed))), then( obligation( and( has( wc pan, access), is( access. type, full), on( access. side, wc pan), towards( access. detail, nzbc g1as1 f7), has( cistern. wall, support), greater than equal( height( cistern. wall), 1.0 m), has( cistern. lid, fold up))))
if( and( exist( soil fixture), not( is( soil fixture. type, water flushed))), then( obligation( not( cause( soil fixture, nuisance))))
if( is( building. use, classified), greater than equal( distance( privy, building), 3.0 m)), then( obligation( and( has( excreta receptacle, lid), is( lid. type, hinged), exclude( excreta receptacle, flies))))
if( and( exist( access route), exist( wc or urinal or bath or shower or bidet)), then( obligation( not( has( access route, direct line of sight)), as per( acceptable layout, nzbc g1as1 f10)))
if( is( shower, accessible)), then( obligation( is( shower. threshold, level)))
if( greater than equal( count( toilet compartment. for wheelchair users), 2)), then( obligation( and( has( toilet compartment, wc pan), for( wc pan, opposite hand))))
if( exist( wc)), then( obligation( and( is( wc. flushing control, easily operable), on( wc. flushing control, or( centre line, approach side)), less than equal( above( wc. flushing control, finished floor level), 1200 mm), is( wc. privacy bolt, easily operable), less than equal( above( wc. privacy bolt, floor level), 1200 mm))))
if( exist( wc pan), then( obligation( loop( for each( wc pan), and( has( wc pan, enclosure), is( enclosure. type, cubicle), or( and( has( enclosure, screen wall), greater than equal( screen wall. upper edge, 1600 mm), between( screen wall. lower edge, 150 mm, 300 mm)), has( enclosure, door), greater than equal( door. upper edge, 1600 mm), between( door. lower edge, 150 mm, 300 mm))))))
if( and( has( space, sanitary facilities), has( space, general public area))), then( obligation( and( if( is( facilities. type, single sex), independent( lobby, sex)), if( is( facilities. type, unisex), is( lobby. type, unisex)))))
if( is( fixture, tub)), then( obligation( has( fixture, cold water supply)))
if( has( space, washing machine)), then( obligation( and( has( washing machine, cold water supply), has( washing machine, discharge pipe), has( washing machine, water trap), has( adjacent space, 10 amp socket outlet))))
if( and( has( waste water, tub), has( waste water, washing machine), has( discharge pipe, tub), has( discharge pipe, washing machine))), then( obligation( comply with( nzbc g13, plumbing and drainage)))
if( exist( laundering facility)), then( obligation( and( as per( laundering facility, nzbc g2as1 t1), for( laundering facility, number of people))))
if( and( is( facility, or( utensil washing, food rinsing)), has( facility, sink))), then( obligation( and( is( sink. draining surface, free), has( sink. outlet, continuous fall), greater than equal( sink. capacity, cylinder( 300 mm diameter, 125 mm depth)))))
if( exist( food preparation surface)), then( obligation( and( comply with( food preparation surface. dimension, nzbc g3as1 f1), or( has( food preparation surface, drainer), towards( drainer, sink), is( drainer, integral))))
if( is( surface. type, food preparation)), then( obligation( is( surface. material, or( stainless steel, decorative high pressure laminate, tiles)), is( surface. maintenance, easily hygienic)))
if( has( sink, hot and cold water supply)), then( obligation( comply with( sink. installation, nzbc g12)))
if( exist( sink)), then( obligation( provide( plumbing and drainage, for( waste water, sink)), comply with( plumbing and drainage, nzbc g13)))
if( exist( cooking appliance)), then( obligation( or( and( has( cooking appliance, oven), has( cooking appliance, hot plate)), and( has( cooking appliance, wall oven), has( separate hob))))
if( exist( food storage space)), then( obligation( or( has( food storage space, refrigeration), has( food storage space, ventilation towards( ventilation, outside air)))))
if( has( storage area, ventilation)), then( and( or( is( ventilation. type, mechanical), is( ventilation. type, natural)), if( is( ventilation. type, natural), and( has( wall, vent), towards( vent, building exterior), is( vent. location, or( top, bottom)), for( vent, wall))))
if( exist( ventilation opening)), then( obligation( and( has( ventilation opening, protection), against( protection, fly), against( protection, vermin))))
if( and( connected( building, reticulated energy source), or( is( appliance. type, cooking), is( appliance. type, refrigeration))), then( obligation( or( and( connect( appliance, gas supply), comply with( gas supply, nzbc g11)), and( connect( appliance, electrical outlet), comply with( electrical outlet, nzbc g9)))))
if( exist( facility)), then( obligation( and( define( operational side, x0), towards( clear space, facility), greater than equal( clear space, 800 mm), not( within( clear space, access route)), or( and( has( facility, oven door), is( oven door. open, true), greater than equal( oven door. clearance, 600 mm)), not( within( oven door. clearance, access route))), as per( clear space, nzbc g3as1 f1))))
if( exist( facility)), then( obligation( and( for( facility, disability), has( facility, turning circle), is( turning circle. size, 1500 mm), as per( turning circle, nzbc g3as1 f1), has( facility, work surface), less than equal( work surface. height, 900 mm))))
if( adjacent( wall lining, appliance or facility)), then( obligation( has( wall lining. surface, and( easy maintenance, hygienic condition))), and( permission( is( wall lining. surface, or( stainless steel, decorative high pressure laminate, tile, wallboard with painted or applied impervious coatings or films)))))
if( is( wall. material, or( concrete, cement plaster, concrete block))), then( obligation( and( has( wall, seal), is( seal. type, synthetic coating), is( wall. surface, impervious), is( wall. surface, easily cleaned))))
if( or( is( material, wood), is( material, plasterboard))), then( not( acceptable( as( ceiling, wall lining))))
if( and( is( building element, or( exposed truss, service duct)), is( area, food processing)), then( obligation( and( is( enclosure. material, non-absorbent), is( enclosure. surface, easily cleaned), fully( building element, enclosure))))
if( exist( surface finish)), then( obligation( and( protected( surface finish, from( impact)), not( subject( surface finish, to( chipping, flaking)))))
if( and( is( material, or( lining, surface coating, sealant)), comply with( material, maf qual approvals manual mq1))), then( permission( apply to( nzbc g3as1, material)))
if( is( building, commercial or industrial)), then( apply to( nzbc g3as1))
if( or( is( building. activity, or( electroplating, lead processing, mortuary)), has( building, special attention))), then( apply to( nzbc g3as1, building))
if( is( area, equipment wash-down)), then( obligation( and( greater than equal( floor. gradient, 1/25))))
if( exist( floor drain)), then( obligation( and( for( floor area, served by( floor drain)), less than equal( floor area, if( is( floor area. type, dairy process), 20 m2, 40 m2)))))
if( is( channel, open)), then( obligation( and( define( channel. spacing, x0), less than equal( x0, 10 m), has( channel, depth), greater than( channel. depth, overflow), has( channel, gradient), greater than equal( channel. gradient, '1/60'))))
if( exist( building)), then( obligation( and( protect( building, free water), for( free water, and( washing down, premises, products, building elements))), protect( building, contaminating vapours), for( contaminating vapours, and( liquids, vapours)), prevent( contaminating vapours, unhygienic deposits), prevent( contaminating vapours, hazardous deposits))))
if( exist( building)), then( obligation( and( for( surface, and( floor, wall, ceiling, other building element)), is( surface. material, or( polyvinylchloride sheet, ceramic tile, concrete)), is( surface, impervious), is( surface, easily cleaned), for( joint, surface. construction), is( joint, impervious))))
if( has( junction, wall/floor)), then( obligation( and( is( junction. type, coved), has( floor covering, vertical extension), towards( vertical extension, junction), greater than equal( vertical extension. height, 75 mm))))
if( exist( construction method)), then( obligation( avoid( and( ledges, recesses, cracks, areas), where( or( moisture, contaminants), could accumulate), and( difficult to remove))))
if( is( building. activity, wash-down), then( obligation( prevent( water accumulation, building))))
if( exist( horizontal ledge)), then( obligation( greater than equal( slope( horizontal ledge), 45 deg), prevent( horizontal ledge, accumulation of dirt, moisture)))
if( exist( stairs, walkways)), then( obligation( towards( drainage point, stairs, walkways)))
if( has( building, floor)), then( obligation( towards( floor. grading, disposal system), comply with( disposal system, or( nzbc g13, nzbc g14))))
if( is( floor. type, self-draining)), then( obligation( and( evenly graded( floor), towards( floor. outlet, or( adequately sized, open channel))), if( is( floor. area, food processing area)), then( and( greater than equal( floor. slope, or( 1/60, 1/50)), is( floor. material, or( monolithic, tiled))))))
if( exist( pipeline), then( obligation( and( has( pipeline, condensate), greater than equal( pipeline. fall, '4 mm/m'), towards( tailpipe, pipeline), is( tailpipe. location, and( low point, nearest( outlet side, meter))), is( tailpipe. type, drip))))
if( exist( pipeline)), then( obligation( and( or( has( pipeline, tailpipe), greater than( count( pipeline. tailpipe), 1)), has( tailpipe, fall))))
if( exist( welded joint)), then( obligation( and( comply with( welded joint, tests and procedures), has( welded joint, protection), for( protection, corrosion), towards( protection, concrete), at( protection, entry), at( protection, exit))))
if( is( construction. material, concrete)), then( recommendation( and( where( practicable, has( construction, pipe)), in( construction, floor channel), covered( floor channel), protect( pipe, against corrosion))))
if( and( is( piping. location, enclosed space), not( is( piping. location, or( lift well, air duct, plenum ceiling, air handling plenum, clothes chute, rubbish chute, ventilating duct, fire hydrant cupboard, fire isolated stairway)))), then( obligation( and( or( and( is( piping. material, steel), has( piping, concrete cover), towards( concrete cover, ground), equal( concrete cover. size, 75 mm), towards( concrete cover, weather), equal( concrete cover. size, 50 mm), towards( concrete cover, indoor), equal( concrete cover. size, 35 mm)), and( not( is( piping. material, steel)), has( piping, sleeve), towards( sleeve, expansion), has( enclosed space, ventilation), comply with( ventilation, nzbc e2as1), not( and( is( piping. location, under floor), has( piping, suspension), less than equal( suspension. height, 100 mm))), and( is( piping. location, unventilated or inaccessible), not( has( piping, joint)), or( and( has( piping, joint), has( joint, inspection), has( joint, testing), is( joint. sound, true)))))))
if( or( is( space, false ceiling), and( is( space, void), within( space, or( cavity wall, partition wall))), has( space, pipework)), then( obligation( is( space. construction, ventilated duct)))
if( and( is( pipe. location, horizontal duct), has( duct, open grille type cover))), then( is( pipe. location, above ground))
if( exist( pipe), and( within( pipe, horizontal duct)), then( obligation( and( has( pipe, joint), is( joint. location, near bottom)))))
if( exist( duct)), then( obligation( or( and( has( pipe, duct), is( duct. ventilation, unventilated), has( pipe, sleeve), is( sleeve. ventilation, or( one end, both ends)), towards( sleeve. ventilation, ventilated space)), and( is( duct. ventilation, unventilated), has( duct, void), fill( duct. void, dry washed sand)))))
if( exist( gas piping), then( obligation( and( has( gas piping, isolating valve), is( isolating valve. type, emergency shut-down), has( isolating valve, location), clearly identified( location, drawing), permanently displayed( drawing), prominently displayed( drawing), near( drawing, primary meter set))))
if( exist( gas appliance)), then( obligation( and( is( appliance. valve type, '1/4 turn'), has( appliance. handle, marking), indicating( marking, direction of gas flow))))
if( is( gas meter, present)), then( permission( and( has( gas meter, inlet valve), comply with( inlet valve, gas supply authority requirements), as( inlet valve, isolating valve))))
if( and( is( pipe. material, black steel), or( is( pipe. location, underground), is( pipe. location, above ground))), then( obligation( and( is( pipe, electrically non-conducting), for( pipe. location, underground), join with( insulated component), separate( electrochemically incompatible materials), for( pipe. location, above ground), paint( pipe, as soon as practicable), unless( is( pipe, protected with anti-corrosive wrapping)))))
if( exist( breather vent)), then( and( is( breather vent. location, or( room, enclosure)), define( max( vent outlet. diameter), 'd'), less than equal( breather vent. outlet diameter, 'd'), has( vent line, extension), towards( extension, building exterior), has( extension, termination), is( termination, breather vent)))
if( exist( pipe)), then( obligation( and( has( pipe, pressure), greater than equal( pressure, or( 0.75 kPa for town gas, 1.13 kPa for natural gas, 2.75 kPa for LPG)), for( pressure, appliance inlet), when( all( appliance, in use)))))
if( and( has( gas supply, meter), less than equal( meter. outlet pressure, 1.5 kPa), for( appliance, gas supply), is( appliance. type, and( town gas, natural gas))), then( obligation( less than equal( pressure drop( meter. outlet, appliance), 0.075 kPa))))
if( exist( pipe)), then( obligation( as per( pipe. sizing, and( 'nzs 5601 1 5.2', 'nzs 5601 1 f'))))
if( and( has( building, appliance), not( has( appliance, regulator)), or( greater than( supply pressure, 1.5 kPa), and( is( gas type, or( town gas, natural gas)))), or( greater than( supply pressure, 3.5 kPa), is( gas type, lpg)))), then( obligation( fit( regulator, supply pipe)))
if( exist( appliance)), then( obligation( and( has( appliance, regulator), less than( supply pressure, regulator. maximum rated inlet pressure))))
if( and( exist( gas supply), greater than( gas supply. outlet pressure, 1.5 kPa), all( appliance, on( gas supply))), then( obligation( and( define( operating pressure, x0), define( max pressure drop, 0.1 * 'x0'), less than equal( pressure drop, max pressure drop), for( pressure drop, between( gas supply. outlet, appliance)), is( pressure drop. type, operating))))
if( exist( pipe)), then( obligation( as per( pipe. sizing, 'as/nzs 5601.1', and( 'section 5.2', 'appendix f'))))
if( or( greater than( appliance. regulator inlet pressure, 7 kPa), greater than( regulator. inlet pressure, downstream equipment. pressure rating), less than( regulator. outlet pressure, 70% of( regulator. inlet pressure)))), then( obligation( has( appliance, over-pressure protection)))
if( has( regulator, over-pressure protection device)), then( obligation( and( has( downstream equipment, rated working pressure), less than equal( over-pressure protection device. pressure, downstream equipment. rated working pressure), define( normal operating pressure, x0), less than equal( over-pressure protection device. pressure, and( x0 * 1.35, x0 + 35 percent)))))
if( exist( pipework)), then( obligation( and( has( pipework, non-return valve), comply with( non-return valve, nzbc g11as1))))
if( is( valve. type, three-way)), then( obligation( and( completely close( valve. side1), before( open( valve. side2)))))
if( exist( reverse flow detector)), then( and( has( reverse flow detector, control), has( control, positive shut-off valve)))
if( is( pressure regulator. type, air-activated positive shut-off), is( pressure regulator. activation, normally closed), is( pressure regulator. function, zero regulator)))
if( exist( flame safeguard system)), then( obligation( comply with( flame safeguard system, relevant standards)))
if( exist( contaminant)), then( obligation( and( has( protective device), towards( protective device, contaminant))))
if( and( has( mixer, gas and air combustion), has( mixer, double diaphragm zero regulator), not( connect( mixer, standby gas))), then( not( obligation( for( mixer, gas contamination protection)))))
if( exist( gas equipment)), then( obligation( and( has( gas equipment, lock-out protective device), is( device. location, between( meter, equipment)))))
if( or( is( valve. type, mechanically operated), is( valve. type, electrically operated)), is( valve. pressure, low), is( valve. reset, manual)), then( permission( valve))
if( exist( gas supply pipework)), then( permission( comply with( gas supply pipework. installation, nzbc g10/as1)))
if( exist( flue)), then( obligation( comply with( flue. material, and( nzs 5601.1, section 6.7))))
if( has( flue, and( dependent on( extractor fan), connected to( appliance))), then( obligation( and( has( flue, safety device), has( appliance, safety shut-off system), prevent( gas flow, burner), insufficient( draught, extractor fan))))
if( and( is( fire damper. type, automatic), towards( fire damper, combustion air duct), towards( combustion air duct, gas supply), interlock( fire damper, gas supply), is( interlock. action, shut off))), then( obligation( towards( gas supply, shut off)))
if( and( has( appliance, installed), beneath( automatic fire extinguisher), could( extinguish( appliance. flame, when operating))), then( obligation( and( has( appliance, flame safeguard system), is( flame safeguard system. shut-off, 100%), has( gas supply system, shut-off system), is( shut-off system. lock-out, true), when( automatic extinguisher, operates))))
if( is( acceptable solution, as/nzs 5601.1)), then( comply with( as/nzs 5601.1, and( section 1, section 3, section 4, section 5, section 6, appendix a, appendix b, appendix c, appendix d, appendix e, appendix f, appendix g, appendix h, appendix i, appendix j, appendix k, appendix l, appendix m, appendix o, appendix p, appendix q, appendix r)))
