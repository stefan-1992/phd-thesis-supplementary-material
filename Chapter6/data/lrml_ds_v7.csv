file,number,text,lrml,text_old,comments
lrml/NZ_NZBC-G4AS1#4.0.lrml,r1.2.2.1,1.2.2 Natural ventilation of occupied spaces must be achieved by providing a net openable area of windows or other openings to the outside of no less than 5% of the floor area.,"if( and( expression( function( greater than), expression( function( count), atom( relation( occupant load), variable( space))), data( 0)), expression( function( greater than), expression( function( count), atom( relation( opening), variable( wall))), data( 0)), expression( function( is), atom( relation( is external), variable( wall)), data( true)), not( expression( function( is), atom( relation( classified use), variable( building)), data( commercial))), not( expression( function( is), atom( relation( classified use), variable( building)), data( industrial))))), then( obligation( expression( function( greater than equal), atom( relation( ratio), variable( vent area to floor area)), data( 0.05))))",1.2.2 Natural ventilation of occupied spaces must be achieved by providing a net openable area of windows or other openings to the outside of no less than 5% of the floor area,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-G14AS1#2.6.lrml,r1.1.0.1,1.1.1 A fence erected to ensure security against unauthorised access to storage and treatment facilities shall comply with F5/AS1 Construction and Demolition Hazards.,"if( and( or( and( expression( function( is), atom( relation( purpose), variable( facility)), data( storage)), expression( function( is), atom( relation( type), variable( storage)), data( waste))), and( expression( function( is), atom( relation( purpose), variable( facility)), data( treatment)), expression( function( is), atom( relation( type), variable( treatment)), data( waste)))), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( has), atom( variable( facility)), data( security fence)))), then( and( obligation( expression( function( comply with), atom( relation( construction), variable( security fence)), data( nzbc f5as1))), obligation( expression( function( comply with), atom( relation( demolition), variable( security fence)), data( nzbc f5as1)))))",1.1.1 A fence erected to ensure security against unauthorised access to storage and treatment facilities shall comply with F5/AS1 Construction and Demolition Hazards.,DetailedParts
lrml/NZ_NZBC-G14AS1#2.6.lrml,r1.2.0.1,"1.2.1 Discharge to the sewer without pre-treatment – Where the network utility operator accepts the discharge of industrial liquid waste to a sewer without pre-treatment, the disposal system shall comply with Acceptable Solution G13/AS2.","if( and( expression( function( is), atom( relation( purpose), variable( system)), data( disposal)), expression( function( is), atom( relation( type), variable( disposal)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), not( expression( function( for), atom( relation( treatment), variable( waste)), data( sewer))), expression( function( is), atom( relation( method), variable( disposal)), data( discharge)), expression( function( to), atom( variable( discharge)), data( sewer)), expression( function( has), atom( relation( method), variable( disposal)), data( approval)), expression( function( by), atom( variable( approval)), data( network utility operator)))), then( obligation( expression( function( comply with), atom( variable( system)), data( nzbc g13as2))))","1.2.1 Discharge to the sewer without pre-treatment – Where the network utility operator accepts the discharge of industrial liquid waste to a sewer without pre-treatment, the disposal system shall comply with Acceptable Solution G13/AS2.",NotConnectedObligations
lrml/NZ_NZBC-G14AS1#2.6.lrml,r1.2.0.2,"1.2.1 Discharge to the sewer without pre-treatment – Where the network utility operator accepts the discharge of industrial liquid waste to a sewer without pre-treatment, that part of the discharge system used to convey the waste after treatment shall comply with Acceptable Solution G13/AS2.","if( and( permission( expression( function( is), atom( relation( type), variable( disposal)), data( waste))), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( for), atom( relation( treatment), variable( waste)), data( sewer)), expression( function( is), atom( relation( method), variable( disposal)), data( discharge)), expression( function( to), atom( variable( discharge)), data( sewer)), expression( function( has), atom( relation( method), variable( disposal)), data( approval)), expression( function( by), atom( variable( approval)), data( network utility operator)), expression( function( comply with), atom( variable( system)), data( nzbc g13as2)), expression( function( is), atom( relation( component), variable( system)), data( post treatment)))), then( obligation( expression( function( comply with), atom( relation( component), variable( system)), data( nzbc g13as2))))","1.2.1 Discharge to the sewer without pre-treatment – Where the network utility operator accepts the discharge of industrial liquid waste to a sewer without pre-treatment, the disposal system shall comply with Acceptable Solution G13/AS2.",
lrml/NZ_NZBC-CVM2#0.5.lrml,r2.3.3.1.0.1,"Calculations of fire resistance; The following parameters shall apply: a) Post-flashover species yield for soot is Ysoot = 0.14 kg/kgfuel b) Post-flashover species yield for CO is YCO = 0.40 kg/kgfuel, and c) Design FLEDs shall be as specified in Table 2.2 for activities within buildings.","if( expression( function( is), atom( relation( resistance), variable( fire)), data( required))), then( and( obligation( expression( function( equal), atom( variable( ysoot)), data( 0.14 kg/kg fuel))), expression( function( equal), atom( variable( yco)), data( 0.4 kg/kg fuel)), expression( function( comply with), atom( variable( fled)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t2.2))))","However, note that for the full burnout design fire (see Paragraph 2.4), calculations of fire resistance shall be based on burnout without sprinkler or other intervention, except that the design FLED may be modified as described in Paragraph 2.4.1 where sprinklers are installed. The following parameters shall apply: a) Post-flashover species yield for soot is Ysoot = 0.14 kg/kgfuel b) Post-flashover species yield for CO is YCO = 0.40 kg/kgfuel, and c) Design FLEDs shall be as specified in Table 2.2 for activities within buildings.","TACIT-IGNORE
Abstract"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.0.1,This Acceptable Solution is one of three Acceptable Solutions that provide a means of establishing compliance with NZBC Clauses C1 to C6 Protection from Fire. It can be used for the building activities covered by risk groups specified in Paragraph 1.1.1 and described in Table 1.1.,"if( and( or( obligation( expression( function( comply with), atom( variable( building)), data( nzbc c1))), obligation( expression( function( comply with), atom( variable( building)), data( nzbc c2))), obligation( expression( function( comply with), atom( variable( building)), data( nzbc c3))), obligation( expression( function( comply with), atom( variable( building)), data( nzbc c5))), obligation( expression( function( comply with), atom( variable( building)), data( nzbc c6)))), expression( function( as per), atom( relation( risk group), variable( building)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t1.1)), expression( function( as per), atom( relation( risk group), variable( building)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 1.1.1)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))", This Acceptable Solution is one of three Acceptable Solutions that provide a means of establishing compliance with NZBC Clauses C1 to C6 Protection from Fire. It can be used for the building activities covered by risk groups specified in Paragraph 1.1.1 and described in Table 1.1.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.0.2,"C1-C6 Protection from Fire; For risk group SH, please refer to Acceptable Solution C/AS1.","if( obligation( expression( function( is), atom( relation( risk group), variable( building)), data( sh)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas1))))","For risk group SH, please refer to Acceptable Solution C/AS1.",Tacit
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.0.3,"C1-C6 Protection from Fire; For backcountry huts, please refer to Acceptable Solution BCH/AS1.","if( obligation( expression( function( is), atom( relation( activity), variable( building)), data( backcountry hut)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc bchas1))))","For backcountry huts, please refer to Acceptable Solution BCH/AS1.",Tacit
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.1,1.1.1 The scope of this Acceptable Solution is restricted to all risk groups listed in Table 1.1 except for risk group SH (refer to C/AS1).,"if( and( expression( function( as per), atom( relation( risk group), variable( building)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t1.1)), not( expression( function( is), atom( relation( risk group), variable( building)), data( sh))))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))",1.1.1 The scope of this Acceptable Solution is restricted to all risk groups listed in Table 1.1 except for risk group SH (refer to C/AS1).,Ignore
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.2,C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Sleep (SM),"if( or( expression( function( is), atom( relation( activity), variable( building)), data( sleeping)), expression( function( equal), atom( relation( risk group), variable( building)), data( sm)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))",It covers buildings or parts of buildings where people: Sleep (SM),Tacit
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.3,"C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Are unable to self-evacuate without assistance through requiring special care or treatment, or they are restrained, or their liberties are restricted (SI)","if( or( expression( function( is), atom( relation( activity), variable( building)), data( care)), expression( function( is), atom( relation( activity), variable( building)), data( detention)), expression( function( equal), atom( relation( risk group), variable( building)), data( si)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))","It covers buildings or parts of buildings where people: a) Sleep (SM), and b) Are unable to self-evacuate without assistance through requiring special care or treatment, or they are restrained, or their liberties are restricted (SI)","Abstract
Tacit"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.4,"C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Congregate, participate in group activities or where professional services or retail are provided (CA)","if( or( expression( function( is), atom( relation( activity), variable( building)), data( crowd)), expression( function( is), atom( relation( activity), variable( building)), data( educational)), expression( function( is), atom( relation( activity), variable( building)), data( personal service)), expression( function( equal), atom( relation( risk group), variable( building)), data( ca)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))","It covers buildings or parts of buildings where people: Congregate, participate in group activities or where professional services or retail are provided (CA)","Tacit
?CrowdToGroup
Abstract"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.5,"C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Work (WB - Business, professional services, industrial)","if( or( expression( function( is), atom( relation( activity), variable( building)), data( business)), expression( function( is), atom( relation( activity), variable( building)), data( professional service)), expression( function( is), atom( relation( activity), variable( building)), data( industrial)), expression( function( equal), atom( relation( risk group), variable( building)), data( wb)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))",It covers buildings or parts of buildings where people: Work (WB),"Tacit
UnpredictableEncodingsFixed
TACIT-EXPERIMENT"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.6,C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Store goods and other materials (WS - Storage and trade service),"if( or( expression( function( is), atom( relation( activity), variable( building)), data( storage)), expression( function( is), atom( relation( activity), variable( building)), data( trade service)), expression( function( equal), atom( relation( risk group), variable( building)), data( ws)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))",It covers buildings or parts of buildings where people: Store goods and other materials (WS),"Tacit
TACIT-EXPERIMENT
Abstract"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.1.1.0.7,C1-C6 Protection from Fire; It covers buildings or parts of buildings where people: Park vehicles (VP).,"if( or( expression( function( is), atom( relation( activity), variable( building)), data( vehicle parking)), expression( function( equal), atom( relation( risk group), variable( building)), data( vp)))), then( obligation( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc cas2))))",It covers buildings or parts of buildings where people: Park vehicles (VP).,Tacit
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.2.2.0.1,"1.2.2 If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for the building shall be that of the primary risk group.","if( and( expression( function( greater than), expression( function( count), atom( relation( activity), variable( building))), data( 1)), expression( rulestatement( expression( function( in), expression( function( max), atom( relation( risk group), variable( activity))), data( building))), appliedstatement( expression( function( define), atom( relation( stringency), variable( risk group)), data( x0)))))), then( obligation( expression( function( is), atom( relation( risk group), variable( building)), data( x0))))","1.2.2 If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for a particular firecell within a building shall be that of the primary risk group.","Define
Complex
NotLogicallySound
DefineNamedVariable
NotConnectedVariables
TODO"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.2.2.0.2,"If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for a particular firecell within a building shall be that of the primary risk group.","if( and( expression( function( greater than), expression( function( count), atom( relation( activity), variable( firecell))), data( 1)), expression( rulestatement( expression( function( in), expression( function( max), atom( relation( risk group), variable( activity))), data( firecell))), appliedstatement( expression( function( define), atom( relation( stringency), variable( risk group)), data( x0)))))), then( obligation( expression( function( is), atom( relation( risk group), variable( firecell)), data( x0))))","If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for a particular firecell within a building shall be that of the primary risk group.",DomainKnowledge
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.2.2.0.3,"1.2.2 If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for a particular room within a building shall be that of the primary risk group.","if( and( expression( function( greater than), expression( function( count), atom( relation( activity), variable( space))), data( 1)), expression( rulestatement( expression( function( in), expression( function( max), atom( relation( risk group), variable( activity))), data( space))), appliedstatement( expression( function( define), atom( relation( stringency), variable( risk group)), data( x0)))))), then( obligation( expression( function( is), atom( relation( risk group), variable( space)), data( x0))))","1.2.2 If a building contains a number of different activities which individually may be categorised in different risk groups, the risk group designated for a particular firecell within a building shall be that of the primary risk group.",
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.2.2.0.4,"Other risk groups may be able to be incorporated within the same space provided these are ancillary to, and support, the primary risk groups.","if( and( expression( function( is), atom( relation( activity), variable( space)), data( ancillary)), expression( function( part of), atom( variable( space)), data( firecell)), expression( function( is), atom( relation( risk group), variable( firecell)), data( primary risk group)))), then( obligation( expression( function( is), atom( relation( risk group), variable( space)), data( primary risk group))))","Other risk groups may be able to be incorporated within the same space provided these are ancillary to, and support, the primary risk groups.",NotEncodedParts
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.2.3.0.1,"1.2.3 Depending on the particular building and the uses or activities within that building, there may be several primary risk groups, with one or more on each floor.","if( expression( function( has), atom( variable( building)), data( primary risk group))), then( permission( expression( function( greater than), expression( function( count), atom( variable( primary risk group))), data( 1))))","1.2.3 Depending on the particular building and the uses or activities within that building, there may be several primary risk groups, with one or more on each floor.","BadPrecondition
SomeDetailsNotEncoded"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.1.0.1,"1.4 Calculating occupant loads 1.4.1 The occupant load shall be determined from the risk group and number of people in each space of the building. The occupant load may need to be evaluated not only for each risk group but also for: a) A space or open floor area involving one or more activities, and b) A floor containing more than one risk group, and c) A single firecell, and d) Each floor within a firecell.","if( or( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( building storey))), data( firecell))), appliedstatement( and( expression( function( define), expression( function( count), atom( relation( occupant), variable( space))), data( x0)), expression( function( define), atom( relation( risk group), variable( space)), data( x1)), expression( function( include), atom( variable( space)), data( open floor area)), expression( function( greater than), expression( function( count), atom( relation( activities), variable( space))), data( 1))))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( space))), data( firecell))), appliedstatement( and( expression( function( define), expression( function( count), atom( relation( occupant), variable( space))), data( x2)), expression( function( define), atom( relation( risk group), variable( space)), data( x3)), expression( function( include), atom( variable( space)), data( open floor area)), expression( function( greater than), expression( function( count), atom( relation( activities), variable( space))), data( 1))))))), then( and( obligation( expression( function( include), atom( relation( calculation), variable( occupant load)), data( x0))), obligation( expression( function( include), atom( relation( calculation), variable( occupant load)), data( x2))), obligation( expression( function( include), atom( relation( calculation), variable( occupant load)), data( x1))), obligation( expression( function( include), atom( relation( calculation), variable( occupant load)), data( x3)))))","1.4.1 The occupant load shall be determined from the risk group and number of people in each space of the building The occupant load may need to be evaluated not only for each risk group but also for: a) A space or open floor area involving one or more activities, and b) A floor containing more than one risk group, and c) A single firecell, and d) Each floor within a firecell.","Define
ObligationCorrectnessUnclear"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.2.0.1,1.4.2 Occupant loads shall be calculated from the occupant densities given in Table 1.2 based on the floor area of the part of the building housing the activity. Table 1.2 Occupant densities; Activity; Occupancy density (m2/ person).,"if( and( expression( function( define), atom( relation( floor area), variable( space)), data( x0)), expression( function( define), atom( variable( occupant load density)), data( x1)), obligation( expression( function( as per), atom( variable( x1)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t1.2))))), then( obligation( expression( function( equal), atom( relation( occupant load), variable( space)), data( x0 / x1))))",1.4.2 Occupant loads shall be calculated from the occupant densities given in Table 1.2 based on the floor area of the part of the building housing the activity.,"TACIT-EXPERIMENT
SplitableEntities"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.3.0.1,"1.4 Calculating occupant loads 1.4.3 Duplication shall be avoided by: a) Ensuring that, where people may be involved in more than one activity, they are counted only once","if( and( expression( function( has), atom( variable( space)), data( occupant)), expression( function( in), atom( relation( involvement), variable( occupant)), data( activity)), expression( function( greater than), expression( function( count), atom( variable( activity))), data( 1)))), then( and( obligation( expression( function( include), atom( relation( calculation), variable( occupant load)), data( occupant))), expression( function( is), atom( relation( instance), variable( occupant)), data( distinct))))","1.4.3 Duplication shall be avoided by: a) Ensuring that, where people may be involved in more than one activity, they are counted only once, and b) Not including an occupant load for exitways, or for the occupant load determined for areas such as lift lobbies or sanitary facilities that are used intermittently by people already counted elsewhere in the building. Fixed seating",
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.4.0.1,"1.4.4 Occupant load assessment shall take account of the actual arrangement and number of seats for fixed seating (see Paragraph 3.7.4). Where additional floor area abuts the fixed seating, additional occupants are permitted in that floor area based on standing space density (see Table 1.2), provided the escape route is not obstructed.","if( and( expression( function( define), expression( function( count), atom( relation( seat), variable( fixed seating))), data( x0)), expression( function( adjoin), atom( variable( space)), data( fixed seating)), expression( function( has), atom( variable( space)), data( occupant)), expression( function( define), atom( relation( occupant load), variable( space)), data( x1)), not( expression( function( is), atom( variable( escape route)), data( obstructed))))), then( and( obligation( expression( function( is), atom( relation( activity), variable( space)), data( standing))), obligation( expression( function( as per), atom( variable( x1)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t1.2))), obligation( expression( function( equal), atom( variable( occupant load)), data( x0 + x1)))))","1.4.4 Occupant load assessment shall take account of the actual arrangement and number of seats for fixed seating (see Paragraph 3.7.4). Where additional floor area abuts the fixed seating, additional occupants are permitted in that floor area based on standing space density, provided the escape route is not obstructed.","Problems
LoadVsDensity
ObligationIsPrecondition
TacitReference
TACIT-EXPERIMENT
FromVsAsPer
"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.5.0.1,"1.4.5 The requirements of this Acceptable Solution account for the fact that other people may be present in the building or firecell and additional calculations are not required when an occupant load is derived by bed spaces (i.e. for risk groups SM and SI). 1.4.6 For the purposes of risk group SI the term ‘bed’ means the number of people that are under care or detention. It can include people on: a) Beds, or b) Recliner or lounge chairs, or c) Dentist chairs, or d) Treatment tables, or e) Any other furniture where an occupant may be for a period of treatment, in care or detention.","if( and( or( expression( function( is), atom( relation( activity), variable( space)), data( sleeping)), expression( function( is), atom( relation( risk group), variable( space)), data( sm)), expression( function( is), atom( relation( risk group), variable( space)), data( si))), expression( function( define), expression( function( count), atom( variable( bed))), data( x0)), or( expression( function( include), atom( variable( bed)), data( recliner)), expression( function( include), atom( variable( bed)), data( lounge chair)), expression( function( include), atom( variable( bed)), data( dentist chair)), expression( function( include), atom( variable( bed)), data( treatment table)), expression( function( include), atom( variable( bed)), data( treatment furniture))), expression( function( is), atom( variable( x0)), data( occupant load)), expression( function( for), atom( variable( x0)), data( fire safety design)), expression( function( define), expression( function( count), atom( relation( occupant), variable( space))), data( x1)))), then( and( expression( function( equal), atom( relation( occupant load), variable( space)), data( x0)), obligation( not( expression( function( is), atom( variable( x1)), data( calculated))))))",1.4.5 The requirements of this Acceptable Solution account for the fact that other people may be present in the building or firecell and additional calculations are not required when an occupant load is derived by bed spaces (i.e. for risk groups SM and SI).,"Define
Tacit
WrongOr
Complex
TwoClauses"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.6.0.1,"1.4.6 For the purposes of risk group SI the term 'bed' means the number of people that are under care or detention. It can include people on: a) Beds, or b) Recliner or lounge chairs, or c) Dentist chairs, or d) Treatment tables, or e) Any other furniture where an occupant may be for a period of treatment, in care or detention.","if( and( or( expression( function( is), atom( relation( activity), variable( space)), data( sleeping)), expression( function( is), atom( relation( risk group), variable( space)), data( si))), expression( function( define), expression( function( count), atom( variable( bed))), data( x0)), or( expression( function( include), atom( variable( bed)), data( recliner)), expression( function( include), atom( variable( bed)), data( lounge chair)), expression( function( include), atom( variable( bed)), data( dentist chair)), expression( function( include), atom( variable( bed)), data( treatment table)), expression( function( include), atom( variable( bed)), data( treatment furniture))))), then( and( obligation( expression( function( is), atom( variable( x0)), data( occupant load))), expression( function( for), atom( variable( x0)), data( fire safety design))))","1.4.6 For the purposes of risk group SI the term 'bed' means the number of people that are under care or detention. It can include people on: a) Beds, or b) Recliner or lounge chairs, or c) Dentist chairs, or d) Treatment tables, or e) Any other furniture where an occupant may be for a period of treatment, in care or detention.","DifferentiateFacts
Define might be correct?
WrongPrecondition
Or statement sleeping seems wrong?
Define 
Tacit"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.7.0.1,"1.4.7 If, in a particular situation, the occupant load derived from Table 1.2 is clearly more than that which will occur, the basis of any proposal for a lesser occupant load shall be substantiated to the building consent authority.","if( and( expression( function( define), atom( variable( occupant load density)), data( x0)), expression( function( as per), atom( variable( x0)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t1.2)), expression( function( define), atom( relation( occupant load), variable( space)), data( x1)), or( expression( function( is), atom( variable( x1)), data( actual)), expression( function( is), atom( variable( x1)), data( expected))), expression( function( greater than), atom( variable( x0)), data( x1)), expression( function( for), atom( variable( x1)), data( fire safety design)))), then( obligation( expression( function( is), atom( variable( x1)), data( justified))))","1.4.7 If, in a particular situation, the occupant load derived from Table 1.2 is clearly more than that which will occur, the basis of any proposal for a lesser occupant load shall be substantiated to the building consent authority.","Tacit
BuildingCodeTitle
Complex
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.8.0.1,"1.4.8 If the maximum occupant load is greater than that calculated from Table 1.2, the higher number shall be used as the basis for the fire safety design and will need to be justified to the building consent authority.","if( and( expression( function( define), atom( variable( occupant load density)), data( x0)), expression( function( from), atom( variable( x0)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t1.2)), expression( function( define), atom( relation( occupant load), variable( space)), data( x1)), or( expression( function( is), atom( variable( x1)), data( actual)), expression( function( is), atom( variable( x1)), data( expected))), expression( function( greater than), atom( variable( x1)), data( x0)))), then( and( obligation( expression( function( for), atom( variable( x1)), data( fire safety design))), obligation( expression( function( is), atom( variable( x1)), data( justified)))))","1.4.8 If the maximum occupant load is greater than that calculated from Table 1.2, the higher number shall be used as the basis for the fire safety design and will need to be justified to the building consent authority.","Define
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.1.1.0.1,2.1.1 The floor area of firecells shall be limited in accordance with Table 2.1.,"if( expression( function( is), atom( variable( space)), data( firecell))), then( and( obligation( expression( function( comply with), atom( relation( floor area), variable( firecell)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t2.1)))))",2.1.1 The floor area of firecells shall be limited in accordance with Table 2.1.,MediumData
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.1.0.5,A direct connection to Fire and Emergency New Zealand is not required if automatic heat or smoke detection systems are provided in addition to the systems required by this Acceptable Solution.,"if( and( expression( function( is), atom( relation( fire safety system), variable( space)), data( supplementary)), expression( function( is), atom( relation( type), variable( fire safety system)), data( detection)), expression( function( is), atom( relation( method), variable( detection)), data( automatic)), or( expression( function( is), atom( relation( type), variable( detection)), data( heat)), expression( function( is), atom( relation( type), variable( detection)), data( smoke))))), then( obligation( not( expression( function( has), atom( variable( fire safety system)), data( fire service direct connection)))))",A direct connection to Fire and Emergency New Zealand is not required if automatic heat or smoke detection systems are provided in addition to the systems required by this Acceptable Solution.,"ObligationVsPermission
IsVsHas
ConnectionMissing
Tacit
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.2.0.a.1,"a) In single storey early childhood centres, dedicated sleeping areas shall be protected with supplementary smoke detectors. The alarm system and any smoke detection system shall comply with NZS 4512.","if( and( expression( function( is), atom( relation( activity), variable( space)), data( early childhood)), expression( function( equal), expression( function( count), atom( variable( building storey))), data( 1)), expression( function( is), atom( relation( activity), variable( space)), data( sleeping)))), then( expression( rulestatement( expression( function( is), expression( function( for each), atom( relation( activity), variable( space))), data( sleeping))), appliedstatement( and( obligation( expression( function( has), atom( variable( space)), data( smoke detector))), obligation( expression( function( is), atom( variable( smoke detector)), data( supplementary))), obligation( expression( function( comply with), atom( variable( smoke detector)), data( nzs 4512)))))))","a) In single storey early childhood centres, dedicated sleeping areas shall be protected with supplementary smoke detectors. The alarm system and any smoke detection system shall comply with NZS 4512.",ForLoopUnnecessary
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.2.0.b.1,"2.2.2 In addition to Paragraph 2.2.1, the fire safety systems required for firecells in early childhood centres shall be as follows: Where the escape height of the early childhood centre is greater than 2.0 m, a Type 7 system shall be installed throughout the building.","if( and( expression( function( is), atom( relation( activity), variable( space)), data( early childhood)), expression( function( greater than), atom( relation( escape height), variable( space)), data( baseunit( kind( metre)), value( 2.0))))), then( obligation( expression( function( is), atom( relation( fire safety system), variable( building)), data( type 7))))","2.2.2 In addition to Paragraph 2.2.1, the fire safety systems required for firecells in early childhood centres shall be as follows: Where the escape height of the early childhood centre is greater than 2.0 m, a Type 7 system shall be installed throughout the building.",FilteringRequiredByModel
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.2.0.c.1,"2.2.2 In addition to Paragraph 2.2.1, the fire safety systems required for firecells in early childhood centres shall be as follows: If the early childhood centre is not located on the ground floor at least two separate places of safety shall be provided. Each place of safety shall be separated with fire separations designed to the property rating and have direct access to a safe path or final exit.","if( and( expression( function( is), atom( relation( activity), variable( space)), data( early childhood)), expression( function( define), atom( relation( elevation), variable( ground level)), data( x0)), expression( function( greater than), atom( relation( elevation), variable( space)), data( x0)))), then( and( obligation( expression( function( greater than equal), expression( function( count), atom( variable( place of safety))), data( 2))), obligation( expression( function( has), atom( variable( place of safety)), data( fire resistance rating))), obligation( expression( function( is), atom( relation( type), variable( fire resistance rating)), data( property rating))), or( obligation( expression( function( to), atom( relation( direct access), variable( place of safety)), data( safe path))), obligation( expression( function( to), atom( relation( direct access), variable( place of safety)), data( final exit))))))","2.2.2 In addition to Paragraph 2.2.1, the fire safety systems required for firecells in early childhood centres shall be as follows: If the early childhood centre is not located on the ground floor at least two separate places of safety shall be provided. Each place of safety shall be separated with fire separations designed to the property rating and have direct access to a safe path or final exit.","DefineVariableLong
Tacit
frrTypeVsType
SplitableEntities"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.4.0.1,"2.2.4 For risk group VP firecells that require a fire sprinkler system (refer to Table 2.2d), the fire sprinkler system does not need to be extended throughout the remainder of the building where the risk group VP firecells are fire separated from the adjacent firecells. The fire separation between adjacent firecells is required to be provided with the greater of the property rating of the adjacent firecells (refer to Table 2.4).","if( and( expression( function( is), atom( relation( risk group), variable( space)), data( vp)), expression( function( is), atom( variable( space)), data( firecell)), obligation( expression( function( has), atom( variable( firecell)), data( fire sprinkler system))), obligation( expression( function( as per), atom( relation( fire sprinkler system), variable( firecell)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.2.d)), expression( function( has), atom( variable( space)), data( fire separation)), expression( function( to), atom( variable( fire separation)), data( adjacent space)))), then( and( permission( not( expression( function( throughout), atom( relation( installation), variable( fire sprinkler system)), data( building)))), obligation( expression( function( define), expression( function( max), atom( relation( property rating), variable( adjacent space))), data( x0))), obligation( expression( function( equal), atom( relation( property rating), variable( fire separation)), data( x0)))))","2.2.4 For risk group VP firecells that require a fire sprinkler system (refer to Table 2.2d), the fire sprinkler system does not need to be extended throughout the remainder of the building where the risk group VP firecells are fire separated from the adjacent firecells. The fire separation between adjacent firecells is required to be provided with the greater of the property rating of the adjacent firecells (refer to Table 2.4).",OneSplitableEntity
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.6.0.1,"2.2.6 Where fire separations are not needed between different risk groups on the same floor level, the fire safety systems adopted for the firecell shall be those of the primary risk group (as defined in Paragraph 1.2.2).","if( and( expression( function( has), atom( variable( building storey)), data( risk group)), expression( function( greater than), expression( function( count), atom( relation( risk group), variable( building storey))), data( 1)), obligation( not( expression( function( has), atom( variable( risk group)), data( fire separation)))))), then( obligation( expression( function( for), atom( relation( type), variable( fire safety system)), data( primary risk group))))","2.2.6 Where fire separations are not needed between different risk groups on the same floor level, the fire safety systems adopted for the firecell shall be those of the primary risk group (as defined in Paragraph 1.2.2).","Tacit
Complex"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.8.0.1,2.2.8 The alarm systems required in a building shall be configured to alert all building occupants in the event of fire,"if( and( obligation( expression( function( has), atom( variable( building)), data( fire alarm system))), expression( function( is), atom( relation( activation), variable( fire alarm system)), data( true)), expression( function( has), atom( variable( fire alarm system)), data( alerting device)))), then( and( obligation( expression( function( reach), atom( relation( output), variable( alerting device)), data( occupant))), expression( function( is), atom( relation( type), variable( occupant)), data( all))))",2.2.8 The alarm systems required in a building shall be configured to alert all building occupants in the event of fire,
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.9.0.1,2.2.9 In risk group SI alerting all building occupants in the event of fire is not required where it is deemed appropriate to alert management and staff without notifying other occupants.,"if( and( expression( function( is), atom( relation( type), variable( risk group)), data( si)), expression( function( has), atom( variable( building)), data( fire alarm system)), expression( function( has), atom( variable( fire alarm system)), data( alerting device)), obligation( expression( function( reach), atom( relation( output), variable( alerting device)), data( occupant))), obligation( expression( function( is), atom( relation( type), variable( occupant)), data( staff))))), then( and( permission( expression( function( reach), atom( relation( output), variable( alerting device)), data( occupant))), permission( expression( function( is), atom( relation( type), variable( occupant)), data( all)))))",2.2.9 In risk group SI alerting all building occupants in the event of fire is not required where it is deemed appropriate to alert management and staff without notifying other occupants.,"NotObligationIsPermission
ObligationAsPrecondition
NotMissing"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.1.0.1,"2.3.1 Unless explicitly stated otherwise in this Acceptable Solution, the fire resistance ratings (FRRs) that apply for each risk group shall be in accordance with Table 2.4.","if( and( not( expression( function( has), atom( relation( fire resistance rating), variable( risk group)), data( exception))), expression( function( in), atom( variable( exception)), data( nzbc cas2)))), then( and( obligation( expression( function( comply with), atom( relation( fire resistance rating), variable( risk group)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.4))))","2.3.1 Unless explicitly stated otherwise in this Acceptable Solution, the fire resistance ratings (FRRs) that apply for each risk group shall be in accordance with Table 2.4.",
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.2.0.1,2.3.2 Structural elements in a single storey building need not be fire rated if FRRs are not required for any other reason.,"if( and( expression( function( equal), expression( function( count), atom( variable( building storey))), data( 1)), not( expression( function( is), atom( variable( fire resistance rating)), data( required))))), then( permission( not( expression( function( is), atom( relation( element), variable( structural)), data( fire rated)))))",2.3.2 Structural elements in a single storey building need not be fire rated if FRRs are not required for any other reason.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.3.0.1,"2.3 Fire resistance ratings 2.3.3 If there is more than one risk group on one floor in the building, the highest required FRR shall be applied to common spaces and shared escape routes for that floor level.","if( and( expression( function( greater than), expression( function( count), atom( relation( risk group), variable( building storey))), data( 1)), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( risk group))), data( building storey))), appliedstatement( expression( function( define), expression( function( max), atom( relation( fire resistance rating), variable( risk group))), data( x0)))), or( expression( function( is), atom( relation( type), variable( space)), data( common)), expression( function( is), atom( relation( type), variable( space)), data( shared escape route))))), then( obligation( expression( function( equal), atom( relation( fire resistance rating), variable( space)), data( x0))))","2.3.3 If there is more than one risk group on one floor in the building, the highest required FRR shall be applied to common spaces and shared escape routes for that floor level.","WrongMax
Or do risk groups have multiple fire resistance ratings, but then two max are required?
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.4.0.1,2.3 Fire resistance ratings 2.3.4 FRRs shall apply to the sides of primary elements and secondary elements which are exposed to fire.,"if( and( expression( function( has), expression( function( side of), atom( relation( element), variable( building))), data( exposure)), expression( function( is), atom( relation( type), variable( exposure)), data( fire)))), then( obligation( expression( function( has), expression( function( side of), atom( relation( element), variable( building))), data( fire resistance rating))))",2.3.4 FRRs shall apply to the sides of primary elements and secondary elements which are exposed to fire.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.6.0.1,2.3 Fire resistance ratings 2.3.6 Floors shall have an FRR for exposure from the underside.,"if( expression( function( is), atom( relation( element), variable( building)), data( floor))), then( obligation( expression( function( has), expression( function( underside of), atom( variable( floor))), data( fire resistance rating))))",2.3.6 Floors shall have an FRR for exposure from the underside.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.7.0.1,2.3 Fire resistance ratings 2.3.7 The FRR of a primary element integral with a fire separation shall be no less than that of the fire separation.,"if( and( expression( function( is), atom( relation( element), variable( building)), data( primary)), expression( function( integral with), atom( relation( element), variable( building)), data( fire separation)), expression( function( define), atom( relation( fire resistance rating), variable( fire separation)), data( x0)))), then( obligation( expression( function( greater than equal), atom( relation( element), variable( fire resistance rating)), data( x0))))",2.3.7 The FRR of a primary element integral with a fire separation shall be no less than that of the fire separation.,"Define
ObligationVsProhibition"
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.3.11.0.1,2.3.11 Structural framing members connected to building elements with an FRR shall be rated at no less than the building elements to which they are connected. Alternatively their connections and supports shall be designed so that their collapse during fire will not cause collapse of the fire rated elements.,"if( and( expression( function( define), atom( relation( element), variable( building)), data( x0)), expression( function( adjoin), atom( variable( x0)), data( structural framing member)), expression( function( define), atom( relation( fire resistance rating), variable( x0)), data( x1)))), then( obligation( expression( function( greater than equal), atom( relation( fire resistance rating), variable( structural framing member)), data( x1))))",2.3.11 Structural framing members connected to building elements with an FRR shall be rated at no less than the building elements to which they are connected. Alternatively their connections and supports shall be designed so that their collapse during fire will not cause collapse of the fire rated elements.,"NoIf
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.1.0.1,3.1.1 All buildings shall have means of escape from fire which include escape routes. An escape route (see Figure 3.1) shall provide protection to any occupant escaping to a safe place from a fire within a building.,"if( and( expression( function( in), atom( variable( fire)), data( building)), expression( function( has), atom( variable( building)), data( occupant)))), then( and( obligation( expression( function( has), atom( variable( occupant)), data( means of escape))), obligation( expression( function( include), atom( variable( means of escape)), data( escape route))), obligation( expression( function( to), atom( variable( escape route)), data( safe place)))))",3.1.1 All buildings shall have means of escape from fire which include escape routes. An escape route (see Figure 3.1) shall provide protection to any occupant escaping to a safe place from a fire within a building.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.2.0.1,"3.1.2 The components of an escape route, in ascending order of protection, are the: a) Open paths, and b) Exitways (these may comprise of smoke lobbies and safe paths), and c) Final exits (see Figure 3.1).","if( and( expression( function( include), atom( relation( component), variable( escape route)), data( open path)), expression( function( include), atom( relation( component), variable( escape route)), data( exitway)), expression( function( include), atom( relation( component), variable( escape route)), data( final exit)), expression( function( define), atom( relation( degree of protection), variable( open path)), data( x0)), expression( function( define), atom( relation( degree of protection), variable( exitway)), data( x1)), expression( function( define), atom( relation( degree of protection), variable( final exit)), data( x2)))), then( and( obligation( expression( function( less than), atom( variable( x0)), data( x1))), obligation( expression( function( less than), atom( variable( x1)), data( x2))), expression( function( greater than), expression( function( count), atom( relation( component), variable( escape route))), data( 1))))","3.1.2 The components of an escape route, in ascending order of protection, are the: a) Open paths, and b) Exitways (these may comprise of smoke lobbies and safe paths), and c) Final exits (see Figure 3.1).","Complex
MediumData"
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.2.0.2,3.1.2 The components of an escape route are the: Exitways (these may comprise of smoke lobbies and safe paths),"if( expression( function( is), atom( relation( component), variable( escape route)), data( exitway))), then( or( obligation( expression( function( is), atom( variable( exitway)), data( smoke lobby))), obligation( expression( function( is), atom( variable( exitway)), data( safe path))), and( obligation( expression( function( is), atom( variable( exitway)), data( smoke lobby))), obligation( expression( function( is), atom( variable( exitway)), data( safe path))))))","3.1.2 The components of an escape route, in ascending order of protection, are the: Exitways (these may comprise of smoke lobbies and safe paths)","Detailed
DomainKnowledge"
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.2.0.3,"3.1.2 The components of an escape route, in ascending order of protection, are from: a) Open paths, to c) Final exits (see Figure 3.1).","if( and( expression( function( define), atom( relation( origin), variable( escape route)), data( x0)), expression( function( define), atom( relation( destination), variable( escape route)), data( x1)), expression( function( define), atom( relation( degree of protection), variable( x0)), data( x2)), expression( function( define), atom( relation( degree of protection), variable( x1)), data( x3)))), then( obligation( expression( function( greater than), atom( variable( x3)), data( x2))))","3.1.2 The components of an escape route, in ascending order of protection, are the: a) Open paths, and b) Exitways (these may comprise of smoke lobbies and safe paths), and c) Final exits (see Figure 3.1).","DomainKnowledge
Abstract
Define
MediumData
Tacit
Complex"
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.3.0.1,"3.1.3 Provided the allowable lengths of open paths (Table 3.2) are not exceeded, an escape route may comprise only an open path and final exit.","if( and( expression( function( comply with), atom( relation( length), variable( open path)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t3.2)))), then( and( permission( expression( function( include), atom( relation( component), variable( escape route)), data( open path))), permission( expression( function( include), atom( relation( component), variable( escape route)), data( final exit)))))","3.1.3 Provided the allowable lengths of open paths are not exceeded, an escape route may comprise only an open path and final exit.",MediumData
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.4.0.1,3.1.4 Escape routes shall comply with NZBC D1.,"if( expression( function( in), atom( variable( escape route)), data( building))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))",3.1.4 Escape routes shall comply with NZBC D1.,
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.1.4.0.2,"Ramps, stairs, ladders, landings, handrails, doors, vision panels and openings shall comply with Acceptable Solution D1/AS1.","if( or( expression( function( is), atom( relation( element), variable( building)), data( ramp)), expression( function( is), atom( relation( element), variable( building)), data( stair)), expression( function( is), atom( relation( element), variable( building)), data( ladder)), expression( function( is), atom( relation( element), variable( building)), data( landing)), expression( function( is), atom( relation( element), variable( building)), data( handrail)), expression( function( is), atom( relation( element), variable( building)), data( door)), expression( function( is), atom( relation( element), variable( building)), data( vision panel)), expression( function( is), atom( relation( element), variable( building)), data( opening)))), then( obligation( expression( function( comply with), atom( relation( element), variable( building)), data( nzbc d1as1))))","Ramps, stairs, ladders, landings, handrails, doors, vision panels and openings shall comply with Acceptable Solution D1/AS1.","Ambiguous_IS
Rather has?
GoodSample"
lrml/NZ_NZBC-CAS2#1.1.lrml,r3.2.1.0.1,"3.2.1 Except where Paragraph 3.13 allows the use of single escape routes, every occupied space in a building shall be served by two or more escape routes (see Figure 3.2).","if( and( expression( function( define), expression( function( count), atom( variable( escape route))), data( x0)), expression( function( greater than), atom( variable( x0)), data( 1)), expression( function( comply with), atom( variable( x0)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 3.13)))), then( expression( rulestatement( expression( function( greater than equal), expression( function( for each), atom( relation( occupant load), variable( space))), data( 1))), appliedstatement( obligation( expression( function( greater than equal), expression( function( count), atom( variable( escape route))), data( 2))))))","3.2.1 Except where Paragraph 3.13 allows the use of single escape routes, every occupied space in a building shall be served by two or more escape routes (see Figure 3.2).","DefineIndicator
RuleStatementAppliedStatement
GreaterThanVsGreaterThanEqual
BadPrecondition 
UnnecessaryLoop
Wrong
if count escape route > 1 then obligation count escape route >= 2 -> Always true"
lrml/NZ_NZBC-CAS2#1.1.lrml,r4.1.1.0.1,"4.1.1 Adjoining firecells are required to be fire separated from each other by the highest: a) Life rating specified in Paragraph 2.3 if both firecells are under common ownership, or b) Property rating specified in Paragraph 2.3 if both firecells are under different ownership.","if( and( expression( function( adjoin), atom( variable( space1)), data( space2)), expression( function( is), atom( variable( space1)), data( firecell)), expression( function( is), atom( variable( space2)), data( firecell)), expression( function( define), atom( relation( owner), variable( space1)), data( x0)), expression( function( define), atom( relation( owner), variable( space2)), data( x1)))), then( and( expression( rulestatement( expression( expression( function( max), atom( relation( rating), variable( fire separation))))), appliedstatement( or( and( obligation( expression( function( is), atom( relation( rating), variable( fire separation)), data( life rating))), expression( function( equal), atom( variable( x0)), data( x1))), and( expression( function( is), atom( relation( rating), variable( fire separation)), data( property rating)), not( expression( function( equal), atom( variable( x0)), data( x1))))))), expression( function( as per), atom( variable( life rating)), data( rule)), expression( function( as per), atom( variable( property rating)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 2.3.0))))","4.1.1 Adjoining firecells are required to be fire separated from each other by the highest: a) Life rating specified in Paragraph 2.3 if both firecells are under common ownership, or b) Property rating specified in Paragraph 2.3 if both firecells are under different ownership","DomainKnowledge
Tacit
Space is firecell
DefineIndicator
NestedOrAnd
Complex
ObligationCorrectnessUnclear"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r1.0.1.0.1,1.0.1 This acceptable solution applies to below ground and above ground piped water supply systems.,"if( or( expression( function( is), atom( relation( type), variable( piped water supply system)), data( below ground)), expression( function( is), atom( relation( type), variable( piped water supply system)), data( above ground)))), then( obligation( expression( function( comply with), atom( variable( piped water supply system)), data( nzbc g12as1))))",1.0.1 This acceptable solution applies to below ground and above ground piped water supply systems.,"EntityReview
SplitableEntities"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r2.1.1.0.1,Piped water supply systems 2.1.1 Components of the water supply system shall not contaminate potable water.,"if( expression( function( has), atom( variable( piped water supply system)), data( component))), then( prohibition( not( expression( function( by), atom( relation( contamination), variable( potable water)), data( component)))))",2.1.1 Components of the water supply system shall not contaminate potable water.,"EntityReview
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r2.2.1.0.1,Piped water supply systems 2.2.1 Pipe and pipe fitting materials shall comply with Table 1.,"if( or( expression( function( is), atom( relation( component), variable( piped water supply system)), data( pipe)), expression( function( is), atom( relation( component), variable( piped water supply system)), data( pipe fitting)))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( pipe)), data( nzbc g12as1 t1))), obligation( expression( function( comply with), atom( relation( material), variable( pipe fitting)), data( nzbc g12as1 t1)))))",2.2.1 Pipe and pipe fitting materials shall comply with Table 1.,SplitableEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.4.1.0.1,3.4.1 Backflow protection shall be provided where it is possible for water or contaminants to backflow into the potable water supply system.,"if( expression( function( is), atom( relation( type), variable( water supply system)), data( potable))), then( and( obligation( expression( function( has), atom( variable( water supply system)), data( backflow protection))), or( obligation( expression( function( for), atom( variable( backflow protection)), data( water))), obligation( expression( function( for), atom( variable( backflow protection)), data( contaminant))))))",3.4.1 Backflow protection shall be provided where it is possible for water or contaminants to backflow into the potable water supply system.,"LongEntities
"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.4.5.0.1,Water supply system 3.4.5 The selection of the appropriate backflow protection for the cross connection hazard is given in Table 2.,"if( expression( function( has), atom( variable( water supply system)), data( cross connection hazard))), then( obligation( expression( function( as per), atom( relation( backflow protection), variable( water supply system)), data( nzbc g12as1 t2))))",3.4.5 The selection of the appropriate backflow protection for the cross connection hazard is given in Table 2.,SplitableEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.4.6.0.1,3.4.6 All backflow prevention devices must be testable in service to verify effective performance.,"if( expression( function( is), atom( relation( status), variable( backflow protection)), data( in service))), then( obligation( expression( function( is), atom( variable( backflow protection)), data( testable))))",3.4.6 All backflow prevention devices must be testable in service to verify effective performance.,Tacit
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.5.2.0.1,3.5.2 To ensure the air gap distance is maintained the overflow pipe discharge flow rate shall be no less than the inlet pipe flow rate.,"if( and( expression( function( define), atom( relation( flow rate), variable( overflow pipe)), data( x0)), expression( function( define), atom( relation( flow rate), variable( inlet pipe)), data( x1)))), then( obligation( expression( function( greater than equal), atom( variable( x0)), data( x1))))",3.5.2 To ensure the air gap distance is maintained the overflow pipe discharge flow rate shall be no less than the inlet pipe flow rate.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.5.4.0.1,"3.5.4 Where any fixture or tank has more than one supply pipe, the air gap separation shall be the greater of 25 mm or twice the sum of the inlet pipe diameters and shall also comply with Paragraph 3.5.2.","if( or( and( expression( function( has), atom( variable( fixture)), data( supply pipe)), expression( function( greater than), expression( function( count), atom( variable( supply pipe))), data( 1))), and( expression( function( has), atom( variable( tank)), data( supply pipe)), expression( function( greater than), expression( function( count), atom( variable( supply pipe))), data( 1))))), then( and( expression( function( define), atom( relation( diameter sum), variable( inlet pipes)), data( x0)), obligation( expression( function( greater than), atom( variable( air gap separation)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))), obligation( expression( function( greater than), atom( variable( air gap separation)), data( 2 * x0))), obligation( expression( function( comply with), atom( variable( air gap separation)), data( nzbc g12as 1.3.5.2)))))","3.5.4 Where any fixture or tank has more than one supply pipe, the air gap separation shall be the greater of 25 mm or twice the sum of the inlet pipe diameters and shall also comply with Paragraph 3.5.2.","Detailed
ConnectionMissing
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.6.2.0.1.a.1,3.6.2 Manufacture; Backflow prevention devices shall be manufactured as follows: a) Reduced pressure zone devices to AS/NZS 2845.1 Section 12 (see Figure 2 (a)),"if( expression( function( is), atom( variable( backflow prevention device)), data( reduced pressure zone device))), then( obligation( expression( function( comply with), atom( variable( reduced pressure zone device)), data( nzs 2845.1 12))))",3.6.2 Manufacture Backflow prevention devices shall be manufactured as follows: a) Reduced pressure zone devices to AS/NZS 2845.1 Section 12 (see Figure 2 (a)),LongEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.6.2.0.1.b.1,3.6.2 Manufacture; Backflow prevention devices shall be manufactured as follows: Double check valve devices to AS/NZS 2845.1 Section 10 (see Figure 2 (b)),"if( expression( function( is), atom( variable( backflow prevention device)), data( double check valve device))), then( obligation( expression( function( comply with), atom( variable( double check valve device)), data( nzs 2845.1 10))))",3.6.2 Manufacture Backflow prevention devices shall be manufactured as follows: Double check valve devices to AS/NZS 2845.1 Section 10 (see Figure 2 (b)),LongEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.6.2.0.1.c.1,"3.6.2 Manufacture; Backflow prevention devices shall be manufactured as follows: Pressure type vacuum breakers to AS/NZS 2845.1 Section 9, (see Figure 2 (c))","if( expression( function( is), atom( variable( backflow prevention device)), data( pressure type vacuum breaker))), then( obligation( expression( function( comply with), atom( variable( pressure type vacuum breaker)), data( nzs 2845.1 9))))","3.6.2 Manufacture Backflow prevention devices shall be manufactured as follows: Pressure type vacuum breakers to AS/NZS 2845.1 Section 9, (see Figure 2 (c))",LongEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.6.2.0.1.d.1,Backflow prevention devices shall be manufactured as follows: Atmospheric vacuum breakers to AS/NZS 2845.1 Section 4 for atmospheric vacuum breakers (see Figure 2 (d)).,"if( expression( function( is), atom( variable( backflow prevention device)), data( atmospheric vacuum breaker))), then( obligation( expression( function( comply with), atom( variable( atmospheric vacuum breaker)), data( nzs 2845.1 4))))","Backflow prevention devices shall be manufactured as follows: Atmospheric vacuum breakers to AS/NZS 2845.1 Section 4 for atmospheric vacuum breakers (see Figure 2 (d)), and Section 5 for hose tap vacuum breakers.",LongEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.6.2.0.1.e.1,3.6.2 Manufacture; Backflow prevention devices shall be manufactured as follows: AS/NZS 2845.1 Section 5 for hose tap vacuum breakers.,"if( expression( function( is), atom( variable( backflow prevention device)), data( hose tap vacuum breaker))), then( obligation( expression( function( comply with), atom( variable( hose tap vacuum breaker)), data( nzs 2845.1 5))))",3.6.2 Manufacture Backflow prevention devices shall be manufactured as follows: Section 5 for hose tap vacuum breakers.,"LongEntities
TACIT-IGNORE"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.7.2.0.1.1,Piped Water Supply System 3.7.2 Reduced pressure zone devices shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( expression( function( has), atom( variable( piped water supply system)), data( reduced pressure zone device))), then( or( obligation( expression( function( comply with), atom( variable( reduced pressure zone device)), data( as 2845.3))), obligation( expression( function( comply with), atom( variable( reduced pressure zone device)), data( nz backflow testing standard)))))",3.7.2 Reduced pressure zone devices shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"LongEntities
TACIT-EXPERIMENT
"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.7.2.0.1.2,Piped Water Supply System 3.7.2 Double check valves shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( expression( function( has), atom( variable( piped water supply system)), data( double check valve))), then( or( obligation( expression( function( comply with), atom( variable( double check valve)), data( as 2845.3))), obligation( expression( function( comply with), atom( variable( double check valve)), data( nz backflow testing standard)))))",3.7.2 Double check valves shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"LongEntities
TACIT-EXPERIMENT"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r3.7.2.0.1.3,Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( or( obligation( expression( function( comply with), atom( variable( pressure vacuum breaker)), data( as 2845.3))), obligation( expression( function( comply with), atom( variable( pressure vacuum breaker)), data( nz backflow testing standard)))))",3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,LongEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.1.1.0.1,"5.1.1 To ensure the health and safety of people in the event of the water main supply being interrupted, buildings having the classification of Community Care (e.g. hospitals, old people's homes, prisons) shall be provided with cold water storage of no less than 50 litres per person.","if( expression( function( is), atom( relation( type), variable( building)), data( community care))), then( and( obligation( expression( function( has), atom( variable( building)), data( cold water storage))), obligation( expression( function( greater than equal), atom( relation( capacity), variable( cold water storage)), data( 50 l/person)))))","5.1.1 To ensure the health and safety of people in the event of the water main supply being interrupted, buildings having the classification of Community Care (e.g. hospitals, old people's homes, prisons) shall be provided with cold water storage of no less than 50 litres per person.","ModelIgnoreExplanation
MediumData
Tacit"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.2.1.0.1,Water tanks in roof spaces shall be located and supported as detailed in Figure 4.,"if( expression( function( in), atom( variable( water tank)), data( roof space))), then( and( obligation( expression( function( comply with), atom( relation( location), variable( water tank)), data( nzbc g12as1 f4))), obligation( expression( function( comply with), atom( relation( support), variable( water tank)), data( nzbc g12as1 f4)))))",Water tanks in roof spaces shall be located and supported as detailed in Figure 4.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.2.4.0.1.a.1,Piped water supply system 5.2.4 Covers; Covers shall be provided to: a) Potable water tanks to prevent contamination and the entry of vermin,"if( expression( function( has), atom( variable( piped water supply system)), data( potable water tank))), then( obligation( expression( function( has), atom( variable( potable water tank)), data( cover))))",5.2.4 Covers Covers shall be provided to: a) Potable water tanks to prevent contamination and the entry of vermin,"LearnToIgnore
SplitableEntities"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.2.4.0.1.b.1,Piped water supply system; Covers shall be provided to: All tanks located in roof spaces to prevent condensation damaging building elements.,"if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( is), atom( relation( location), variable( water tank)), data( roof space)))), then( obligation( expression( function( has), atom( variable( water tank)), data( cover))))",Covers shall be provided to: All tanks located in roof spaces to prevent condensation damaging building elements.,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.2.5.0.1,Covers to water tanks shall be removable or shall contain a covered opening to allow access for inspection and maintenance. A minimum height clearance of 350 mm above the opening is necessary for easy access.,"if( expression( function( has), atom( variable( water tank)), data( cover))), then( or( obligation( expression( function( is), atom( variable( cover)), data( removable))), and( obligation( expression( function( has), atom( variable( cover)), data( covered opening))), obligation( expression( function( is), atom( relation( height clearance), variable( covered opening)), data( baseunit( prefix( milli), kind( metre)), value( 350.0)))))))",Covers to water tanks shall be removable or shall contain a covered opening to allow access for inspection and maintenance. A minimum height clearance of 350 mm above the opening is necessary for easy access.,SplitableEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.2.7.0.1,Piped water supply system; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1.,"if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1.0)))), then( expression( function( comply with), atom( variable( water tank support)), data( nzbc g12as1 f4)))",The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1.,SplitableEntities
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.3.1.0.1,"Piped water supply system; 5.3.1 Pipe sizing; Pipes shall be sized: a) To achieve the flow rates given in Table 3, b) Using the sizes given in Table 4.","if( expression( function( has), atom( variable( piped water supply system)), data( pipe))), then( or( obligation( expression( function( comply with), atom( relation( flow rate), variable( pipe)), data( nzbc g12as1 t3))), obligation( expression( function( comply with), atom( relation( size), variable( pipe)), data( nzbc g12as1 t4)))))",5.3.1 Pipe sizing Pipes shall be sized: a) To achieve the flow rates given in Table 3,"OldRev
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r5.4.3.0.1,5.4.3 Provision shall be made for draining storage water heaters in accordance with Figure 7.,"if( expression( function( is), atom( relation( type), variable( water heater)), data( storage))), then( obligation( expression( function( comply with), atom( relation( drain), variable( water heater)), data( nzbc g12as1 f7))))",5.4.3 Provision shall be made for draining storage water heaters in accordance with Figure 7.,Tacit
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.1.1.0.1,6.1.1 Water heaters shall comply with Table 5.,"if( expression( function( is), atom( variable( water heater)), data( true))), then( obligation( expression( function( comply with), atom( variable( water heater)), data( nzbc g12as1 t5))))",6.1.1 Water heaters shall comply with Table 5.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.2.1.0.1,"6.2.1 Storage water heaters shall be supplied with cold water at a pressure not exceeding their working pressure by means of a: a) Water tank, b) Pressure reducing valve, c) Pressure limiting valve, or d) Mains pressure supply.","if( expression( function( is), atom( relation( type), variable( water heater)), data( storage))), then( and( obligation( expression( function( has), atom( variable( water heater)), data( cold water supply))), obligation( expression( function( less than equal), atom( relation( pressure), variable( cold water supply)), data( working pressure))), or( obligation( expression( function( by), atom( relation( working pressure), variable( cold water supply)), data( water tank))), obligation( expression( function( by), atom( relation( working pressure), variable( cold water supply)), data( pressure reducing valve))), obligation( expression( function( by), atom( relation( working pressure), variable( cold water supply)), data( pressure limiting valve))), obligation( expression( function( is), atom( variable( cold water supply)), data( mains pressure supply))))))","6.2.1 Storage water heaters shall be supplied with cold water at a pressure not exceeding their working pressure by means of a: a) Water tank, b) Pressure reducing valve, c) Pressure limiting valve, or d) Mains pressure supply.","Tacit
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.2.2.0.1,"6.2.2 Storage water heaters supplied by other than a water tank shall include a non-return valve as shown in Figures 7, 8, 9 and 10 to prevent the storage water heater emptying and hot water flowing into the cold water supply and thence from the cold water taps.","if( and( expression( function( is), atom( relation( type), variable( water heater)), data( storage)), expression( function( has), atom( variable( water heater)), data( water supply)), not( expression( function( is), atom( variable( water supply)), data( water tank))))), then( and( obligation( expression( function( has), atom( variable( water heater)), data( non return valve))), obligation( expression( function( comply with), atom( variable( non return valve)), data( nzbc g12as1 f7))), obligation( expression( function( comply with), atom( variable( non return valve)), data( nzbc g12as1 f8))), obligation( expression( function( comply with), atom( variable( non return valve)), data( nzbc g12as1 f9))), obligation( expression( function( comply with), atom( variable( non return valve)), data( nzbc g12as1 f10)))))","6.2.2 Storage water heaters supplied by other than a water tank shall include a non-return valve as shown in Figures 7, 8, 9 and 10 to prevent the storage water heater emptying and hot water flowing into the cold water supply and thence from the cold water taps.","LearnToIgnore
MediumData"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.3.1.0.1,6.3.1 Electric and gas storage water heaters shall have their temperature controlled by a thermostat on each heating unit.,"if( or( expression( function( is), atom( relation( type), variable( water heater)), data( electric storage)), expression( function( is), atom( relation( type), variable( water heater)), data( gas storage)))), then( and( obligation( expression( function( has), atom( relation( temperature), variable( water heater)), data( controller))), expression( function( is), atom( variable( controller)), data( thermostat)), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( unit))), data( water heater))), appliedstatement( obligation( expression( function( has), atom( variable( unit)), data( thermostat)))))))",6.3.1 Electric and gas storage water heaters shall have their temperature controlled by a thermostat on each heating unit.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.3.2.0.1,6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"if( expression( function( is), atom( relation( type), variable( water heater)), data( open vented storage))), then( and( obligation( expression( function( has), atom( variable( water heater)), data( vent pipe))), obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))",6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.3.3.0.1,"Water heater system 6.3.3 Valve vented (unvented) systems shall have: a) An expansion control valve b) A vacuum relief valve to prevent collapse of the storage water heater where it is not designed to withstand a full vacuum, and c) Valves complying with Table 6.","if( or( expression( function( is), atom( relation( type), variable( water heater system)), data( valve vented)), expression( function( is), atom( relation( type), variable( water heater system)), data( unvented)))), then( and( obligation( expression( function( has), atom( variable( water heater system)), data( expansion control valve))), or( obligation( expression( function( has), atom( variable( water heater system)), data( vacuum relief valve))), obligation( expression( function( for), atom( relation( design), variable( water heater system)), data( full vacuum)))), obligation( expression( function( comply with), atom( variable( expansion control valve)), data( nzbc g12as1 t6))), obligation( expression( function( comply with), atom( variable( vacuum relief valve)), data( nzbc g12as1 t6)))))","6.3.3 Valve vented (unvented) systems shall have: a) An expansion control valve b) A vacuum relief valve to prevent collapse of the storage water heater where it is not designed to withstand a full vacuum, and c) Valves complying with Table 6.","Tacit
SplitableEntities"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.4.2.0.1,6.4.2 Free outlet (push through) water heaters shall have a relief valve,"if( or( expression( function( is), atom( relation( type), variable( water heater)), data( free outlet)), expression( function( is), atom( relation( type), variable( water heater)), data( push through)))), then( obligation( expression( function( has), atom( variable( water heater)), data( relief valve))))",6.4.2 Free outlet (push through) water heaters shall have a relief valve,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.5.1.0.1,6.5.1 Electric thermostats and energy cut-off devices shall comply with NZS 6214 or AS 1308.,"if( or( expression( function( has), atom( variable( water heater system)), data( electric thermostat)), expression( function( has), atom( variable( water heater system)), data( energy cutoff device)))), then( and( or( obligation( expression( function( comply with), atom( variable( electric thermostat)), data( nzs 6214))), obligation( expression( function( comply with), atom( variable( electric thermostat)), data( as 1308)))), or( obligation( expression( function( comply with), atom( variable( energy cutoff device)), data( nzs 6214))), obligation( expression( function( comply with), atom( variable( energy cutoff device)), data( as 1308))))))",6.5.1 Electric thermostats and energy cut-off devices shall comply with NZS 6214 or AS 1308.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.5.2.0.1,6.1 Water heaters 6.5.2 Energy cut-off devices shall be designed to: a) Be reset manually,"if( expression( function( has), atom( variable( water heater system)), data( energy cutoff device))), then( and( obligation( expression( function( has), atom( variable( energy cutoff device)), data( reset function))), obligation( expression( function( is), atom( variable( reset function)), data( manual)))))","6.5.2 Energy cut-off devices shall be designed to: a) Be reset manually, and b) Disconnect the energy supply before the water temperature exceeds 95°C.","Tacit
MediumData
"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.6.2.0.1,"6.1 Water heaters 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.","if( and( expression( function( has), atom( variable( water heater system)), data( valve)), or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control))))), then( and( obligation( expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( cold water supply rate))), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), obligation( expression( function( less than equal), atom( relation( max pressure rating), variable( valve)), data( x0)))))","6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.","SplitableEntities
DefineInObligation"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.6.3.0.1,"6.6.3 Expansion control valves shall have a pressure rating of no less than that of the water supply pressure to the storage water heater, but less than the pressure rating of the relief valve.","if( and( expression( function( is), atom( relation( type), variable( water heater)), data( storage)), expression( function( has), atom( variable( water heater)), data( expansion control valve)))), then( and( expression( function( define), atom( relation( water supply pressure), variable( water heater)), data( x0)), obligation( expression( function( greater than equal), atom( relation( pressure rating), variable( expansion control valve)), data( x0))), expression( function( define), atom( relation( pressure rating), variable( relief valve)), data( x1)), obligation( expression( function( less than), atom( relation( pressure rating), variable( expansion control valve)), data( x1)))))","6.6.3 Expansion control valves shall have a pressure rating of no less than that of the water supply pressure to the storage water heater, but less than the pressure rating of the relief valve.",MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.6.4.0.1,6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve,"if( and( expression( function( has), atom( variable( water heater)), data( valve)), expression( function( is), atom( relation( type), variable( valve)), data( temperature pressure relief)))), then( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), obligation( expression( function( greater than), atom( relation( energy rating), variable( valve)), data( x0)))))",6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.6.5.0.0.b.1,Pressure relief valves shall be located no further than 1 metre from the storage water heater,"if( and( expression( function( is), atom( relation( type), variable( water heater)), data( storage)), expression( function( has), atom( variable( water heater)), data( valve)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)))), then( and( expression( function( define), atom( relation( location), variable( water heater)), data( x0)), obligation( expression( function( less than equal), atom( relation( location), variable( valve)), data( x0 + 1 m)))))",Pressure relief valves shall be located no further than 1 metre from the storage water heater,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.7.1.0.1,"6.7.1 Relief valve drains (see Figures 12 and 13) shall be fitted to: a) Temperature/pressure relief valves, Pressure relief valves, and c) Expansion control valves.","if( and( expression( function( has), atom( variable( water heater)), data( valve)), or( expression( function( is), atom( relation( type), variable( valve)), data( temperature pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control))))), then( obligation( expression( function( has), atom( variable( valve)), data( relief valve drain))))","6.7.1 Relief valve drains (see Figures 12 and 13) shall be fitted to: a) Temperature/pressure relief valves, Pressure relief valves, and c) Expansion control valves.",
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.8.1.0.1,6.8.1 Vent pipes for open vented storage water heaters shall comply with the provisions of Paragraphs 6.8.2 and 6.8.3.,"if( and( expression( function( is), atom( relation( type), variable( water heater)), data( open vented storage)), expression( function( has), atom( variable( water heater)), data( vent pipe)))), then( and( obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8.2))), obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8.3)))))",6.8.1 Vent pipes for open vented storage water heaters shall comply with the provisions of Paragraphs 6.8.2 and 6.8.3.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.9.1.0.1,"6.9.1 NZS 4603 is an acceptable solution for open vented low pressure storage water heaters, but may exceed the performance criteria of NZBC G12.","if( and( expression( function( is), atom( relation( type), variable( water heater)), data( open vented low pressure storage)), expression( function( define), atom( relation( performance criteria), variable( nzbc g12)), data( x0)), expression( function( comply with), atom( variable( water heater)), data( x0)))), then( permission( expression( function( comply with), atom( variable( water heater)), data( nzs 4603))))","6.9.1 NZS 4603 is an acceptable solution for open vented low pressure storage water heaters, but may exceed the performance criteria of NZBC G12.","ComplexWording
SplitableEntities
DomainKnowledge"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.10.1.0.1,"6.10.1 NZS 4607 is an acceptable solution for unvented (valve vented) storage water heaters, but may exceed the performance criteria of NZBC G12.","if( and( or( expression( function( is), atom( relation( type), variable( water heater)), data( unvented storage)), expression( function( is), atom( relation( type), variable( water heater)), data( valve vented storage))), expression( function( define), atom( relation( performance criteria), variable( nzbc g12)), data( x0)), expression( function( comply with), atom( variable( water heater)), data( x0)))), then( permission( expression( function( comply with), atom( variable( water heater)), data( nzs 4607))))","6.10.1 NZS 4607 is an acceptable solution for unvented (valve vented) storage water heaters, but may exceed the performance criteria of NZBC G12.","ComplexWording
SplitableEntities
DomainKnowledge"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.11.1.0.1,6.11.1 Water heaters shall be installed in accordance with the manufacturer's instructions.,"if( expression( function( equal), atom( variable( water heater)), data( true))), then( obligation( expression( function( comply with), atom( relation( installation), variable( water heater)), data( manufacturer instruction))))",6.11.1 Water heaters shall be installed in accordance with the manufacturer's instructions.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.12.1.0.1,6.12.1 The diameter of hot water supply pipes from storage water heaters and to sanitary fixtures shall be no less than those required by Table 4.,"if( and( expression( function( is), atom( relation( type), variable( water heater)), data( storage)), expression( function( in between), atom( variable( hot water supply pipe)), data( water heater)), expression( function( in between), atom( variable( hot water supply pipe)), data( sanitary fixture)))), then( obligation( expression( function( as per), atom( relation( diameter), variable( hot water supply pipe)), data( nzbc g12as1 t4))))",6.12.1 The diameter of hot water supply pipes from storage water heaters and to sanitary fixtures shall be no less than those required by Table 4.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.13.1.0.1,"6.13.1 Wet-back water heaters shall be: a) Connected only to open vented storage water heaters, or a water storage vessel (see Figure 15), and b) Made of copper.","if( expression( function( is), atom( relation( type), variable( water heater)), data( wetback))), then( and( or( permission( expression( function( connect), atom( variable( water heater)), data( open vented storage water heater))), permission( expression( function( connect), atom( variable( water heater)), data( water storage vessel)))), prohibition( expression( function( connect), atom( variable( water heater)), data( other device))), obligation( expression( function( is), atom( relation( material), variable( water heater)), data( copper)))))","6.13.1 Wet-back water heaters shall be: a) Connected only to open vented storage water heaters, or a water storage vessel (see Figure 15), and b) Made of copper.","Complex
SplitableEntities"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.13.2.0.1,wet-back water heater 6.13.2 Copper pipework shall be used between the wet-back and the water tank.,"if( and( expression( function( is), atom( relation( type), variable( water heater)), data( wetback)), expression( function( has), atom( variable( water heater)), data( water tank)), expression( function( in between), atom( variable( pipe)), data( water heater)), expression( function( in between), atom( variable( pipe)), data( water tank)))), then( obligation( expression( function( is), atom( relation( material), variable( pipe)), data( copper))))",6.13.2 Copper pipework shall be used between the wet-back and the water tank.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.14.3.0.1,"6.14.3 Legionella bacteria; Irrespective of whether a mixing device is installed, the storage water heater control thermostat shall be set at a temperature of not less than 60°C to prevent the growth of Legionella bacteria.","if( and( expression( function( is), atom( relation( type), variable( water heater)), data( storage)), expression( function( has), atom( variable( water heater)), data( control thermostat)))), then( obligation( expression( function( greater than equal), atom( variable( control thermostat)), data( baseunit( kind( celsius)), value( 60.0)))))","6.14.3 Legionella bacteria Irrespective of whether a mixing device is installed, the storage water heater control thermostat shall be set at a temperature of not less than 60°C to prevent the growth of Legionella bacteria.",
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.14.4.0.1,6.14.4 The water temperatures within flow and return circulating systems shall be maintained at not less than 60°C.,"if( expression( function( is), atom( relation( type), variable( water heater)), data( flow and return circulating system))), then( obligation( expression( function( greater than equal), atom( relation( water temperature), variable( water heater)), data( baseunit( kind( celsius)), value( 60.0)))))",6.14.4 The water temperatures within flow and return circulating systems shall be maintained at not less than 60°C.,"DomainKnowledge
SplitableEntities"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r7.0.1.0.1,7.0.1 Water supply systems shall be installed to comply with the durability requirements of NZBC B2.,"if( expression( function( equal), atom( variable( water supply system)), data( true))), then( obligation( expression( function( comply with), atom( relation( installation), variable( water supply system)), data( nzbc b2))))",7.0.1 Water supply systems shall be installed to comply with the durability requirements of NZBC B2.,
lrml/NZ_NZBC-G12AS1#3.12.lrml,r7.1.1.0.1,7.1.1 Pipes and their supports shall be electrochemically compatible.,"if( expression( function( has), atom( variable( pipe)), data( pipe support))), then( and( expression( function( define), atom( relation( material), variable( pipe)), data( x0)), expression( function( define), atom( relation( material), variable( pipe support)), data( x1)), obligation( expression( function( in between), atom( variable( electrochemical compatibility)), data( x0))), obligation( expression( function( in between), atom( variable( electrochemical compatibility)), data( x1)))))",7.1.1 Pipes and their supports shall be electrochemically compatible.,MediumData
lrml/NZ_NZBC-G12AS1#3.12.lrml,r7.3.3.0.1,"Piped water supply system; Pipes penetrating concrete or masonry elements shall be either wrapped with a flexible material, or passed through a sleeve or duct, to permit free movement for expansion and contraction.","if( and( expression( function( has), atom( variable( piped water supply system)), data( pipe)), expression( function( into), atom( variable( pipe)), data( element)), or( expression( function( is), atom( relation( material), variable( element)), data( concrete)), expression( function( is), atom( relation( material), variable( element)), data( masonry))))), then( or( and( obligation( expression( function( has), atom( variable( pipe)), data( wrapping))), expression( function( is), atom( relation( material), variable( wrapping)), data( flexible))), and( obligation( expression( function( in between), atom( variable( sleeve)), data( element))), obligation( expression( function( in between), atom( variable( sleeve)), data( pipe)))), and( obligation( expression( function( in between), atom( variable( duct)), data( element))), obligation( expression( function( in between), atom( variable( duct)), data( pipe))))))","Pipes penetrating concrete or masonry elements shall be either wrapped with a flexible material, or passed through a sleeve or duct, to permit free movement for expansion and contraction.","Complex
DomainKnowledge"
lrml/NZ_NZBC-G12AS1#3.12.lrml,r7.4.1.0.1,Piped water supply system; 7.4.1 An acceptable method of installing uPVC pipe is given in NZS 7643.,"if( expression( function( has), atom( variable( piped water supply system)), data( u pvc pipe))), then( permission( expression( function( comply with), atom( relation( installation), variable( u pvc pipe)), data( nzs 7643))))",7.4.1 An acceptable method of installing uPVC pipe is given in NZS 7643.,MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r1.0.1.0.1,"1.0.1 This Acceptable Solution is limited to buildings and sitework having a catchment area of no more than 0.25 hectares and which are: a) Free from a history of flooding, b) Not adjacent to a watercourse, c) Not located in low lying area, and d) Not located in a secondary flow path.","if( and( or( expression( function( has), atom( variable( building)), data( catchment area)), expression( function( has), atom( variable( sitework)), data( catchment area))), expression( function( less than equal), atom( variable( catchment area)), data( baseunit( kind( hectare)), value( 0.25))), not( expression( function( is), atom( variable( catchment area)), data( floodprone))), not( expression( function( adjacent), atom( relation( location), variable( catchment area)), data( watercourse))), not( expression( function( is), atom( relation( location), variable( catchment area)), data( low lying))), not( expression( function( within), atom( relation( location), variable( catchment area)), data( secondary flow path))))), then( and( obligation( expression( function( comply with), atom( variable( building)), data( nzbc e1))), expression( function( comply with), atom( variable( sitework)), data( nzbc e1))))","1.0.1 This Acceptable Solution is limited to buildings and sitework having a catchment area of no more than 0.25 hectares and which are: a) Free from a history of flooding, b) Not adjacent to a watercourse, c) Not located in low lying area, and d) Not located in a secondary flow path.","ImplicitReference
Tacit
ObligationCorrectnessUnclear
Limited to vs obligation
WrongNot
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r2.0.1.0.1,2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building,"if( and( expression( function( define), atom( relation( elevation), variable( suspended floor)), data( x0)), expression( function( define), atom( relation( elevation), variable( slab on ground)), data( x1)), expression( function( define), atom( relation( elevation), variable( ground)), data( x2)))), then( and( obligation( expression( function( greater than equal), atom( variable( x0)), data( x2 + 150 mm))), obligation( expression( function( greater than equal), atom( variable( x1)), data( x2 + 150 mm)))))",2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building,"SomeDetailsNotEncoded
Define
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r2.0.1.0.1.a.1,"2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building, and: a) For sites level with or above the road, no less than 150 mm above the road crown on at least one cross-section through the building and roadway (see Figure 1).","if( and( expression( function( define), atom( relation( elevation), variable( suspended floor)), data( x0)), expression( function( define), atom( relation( elevation), variable( slab on ground)), data( x1)), expression( function( define), atom( relation( elevation), variable( site)), data( x2)), expression( function( define), atom( relation( elevation), variable( road)), data( x3)), expression( function( greater than equal), atom( variable( x2)), data( x3)), expression( function( define), atom( relation( elevation), variable( road crown)), data( x4)))), then( and( obligation( expression( function( greater than equal), atom( variable( x0)), data( x4 + 150 mm))), obligation( expression( function( greater than equal), atom( variable( x1)), data( x4 + 150 mm)))))","2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building, and: a) For sites level with or above the road, no less than 150 mm above the road crown on at least one cross-section through the building and roadway (see Figure 1).",MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r2.0.1.0.1.b.1,"2.0.1 Suspended floors and slabs on ground shall be, for sites below the road, no less than 150 mm above the lowest point on the site boundary (see Figure 2).","if( and( expression( function( define), atom( relation( elevation), variable( suspended floor)), data( x0)), expression( function( define), atom( relation( elevation), variable( slab on ground)), data( x1)), expression( function( define), atom( relation( elevation), variable( site)), data( x2)), expression( function( define), atom( relation( elevation), variable( road)), data( x3)), expression( function( less than), atom( variable( x2)), data( x3)), expression( function( define), atom( relation( elevation), variable( lowest point on site boundary)), data( x4)))), then( and( obligation( expression( function( greater than equal), atom( variable( x0)), data( x4 + 150 mm))), obligation( expression( function( greater than equal), atom( variable( x1)), data( x4 + 150 mm)))))","2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building, and: For sites below the road, no less than 150 mm above the lowest point on the site boundary (see Figure 2).","Define
SplitableEntities"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.1.1.0.1,3.1.1 Pipe materials shall comply with the standards given in Table 1.,"if( expression( function( equal), atom( relation( material), variable( pipe)), data( true))), then( obligation( expression( function( comply with), atom( relation( material), variable( pipe)), data( nzbc e1as1 t1))))",3.1.1 Pipe materials shall comply with the standards given in Table 1.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.2.1.0.1,Drains shall be capable of handling the rainfall during a storm. No drain shall have an internal diameter of less than 85 mm,"if( expression( function( is), atom( relation( type), variable( drain)), data( stormwater))), then( obligation( expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0)))))",No drain shall have an internal diameter of less than 85 mm.,"Abstract
TACIT-IGNORE
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.2.2.0.1.1,"3.2.2 Figure 3 provides a method for selecting the correct pipe size for a calculated modified catchment area, given as: Modified catchment area = 0.01 Al, where A = area being drained comprising plan roof area (m2) plus paved area (m2).","if( and( expression( function( define), atom( relation( area), variable( plan roof)), data( x0)), expression( function( define), atom( relation( area), variable( paved area)), data( x1)), expression( function( define), atom( variable( rainfall intensity)), data( x2)))), then( and( obligation( expression( function( equal), atom( variable( modified catchment area)), data( 0.01 * ( x0 + x1), * x2)))), permission( expression( function( as per), atom( relation( gradient), variable( drain)), data( nzbc e1as1 f3))))","3.2.2 Figure 3 provides a method for selecting the correct pipe size for a calculated modified catchment area, given as: Modified catchment area = 0.01 Al, where A = area being drained comprising plan roof area (m2) plus paved area (m2). Paved area includes paving blocks, concrete, asphalt or metalled surfaces. l = rainfall intensity for a storm with a 10% probability of occurring annually and a 10 minute duration (mm/hr).","Complex
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.3.1.0.1.1,3.3.1 Drains shall be laid on a uniform line and gradient between points of access (see Paragraph 3.7).,"if( and( expression( function( in between), atom( relation( section), variable( drain)), data( access point1)), expression( function( in between), atom( relation( section), variable( drain)), data( access point2)), expression( function( adjacent), atom( variable( access point1)), data( access point2)))), then( expression( rulestatement( expression( expression( function( for each), atom( relation( section), variable( drain))))), appliedstatement( and( obligation( not( expression( function( include), atom( variable( drain)), data( change in direction)))), obligation( not( expression( function( include), atom( variable( drain)), data( change in gradient))))))))", 3.3.1 Drains shall be laid on a uniform line and gradient between points of access (see Paragraph 3.7).,"DataAnd
Tacit - Formula
What is uniform
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.3.1.0.1.2.1,The change in direction of a drain shall not exceed 90° at any point,"if( expression( function( include), atom( variable( drain)), data( change in direction))), then( obligation( expression( function( less than), atom( variable( change in direction)), data( baseunit( kind( angle degree)), value( 90.0)))))",he change in direction of a drain shall not exceed 90° at any point,MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.3.1.0.1.2.2,The change in direction of a drain where practical should be kept to less than 45° as illustrated in Figure 4.,"if( and( expression( function( include), atom( variable( drain)), data( change in direction)), expression( function( is), atom( relation( small), variable( change in direction)), data( practical)))), then( obligation( expression( function( less than), atom( relation( change in direction), variable( drain)), data( baseunit( kind( angle degree)), value( 45.0)))))","The change in direction of a drain shall not exceed 90° at any point, and where practical should be kept to less than 45° as illustrated in Figure 4.","Abstract
MediumData
DomainKnowledge"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.3.2.0.1,"3.3.2 Where two drains intersect, the directions of flow as shown in Figure 5 shall be at an angle of 60° or less.","if( expression( function( include), atom( variable( drain)), data( drain intersection))), then( obligation( expression( function( less than equal), atom( relation( angle), variable( direction of flow)), data( baseunit( kind( angle degree)), value( 60.0)))))","3.3.2 Where two drains intersect, the directions of flow as shown in Figure 5 shall be at an angle of 60° or less.",MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.4.1.0.1,3.4.1 Minimum acceptable gradients for surface water drains are given in Table 2.,"if( expression( function( is), atom( relation( type), variable( drain)), data( surface water))), then( expression( function( comply with), expression( function( min), atom( relation( gradient), variable( drain))), data( nzbc e1as1 t2)))",3.4.1 Minimum acceptable gradients for surface water drains are given in Table 2.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.4.2.0.1,"3.0 Drainage System Materials and Construction; 3.4.2 Restricted fall to outlet; Where the surface water sewer, road channel or other outfall is at too high a level to allow the gradient required by Table 2, the bubble-up chamber system shown in Figures 6 and 7 may be used.","if( and( expression( function( greater than), atom( relation( elevation), variable( outfall)), data( value)), expression( function( as per), atom( variable( value)), data( nzbc e1as1 t2)))), then( permission( expression( function( has), atom( variable( drain)), data( bubbleup chamber))))"," 3.4.2 Restricted fall to outlet Where the surface water sewer, road channel or other outfall is at too high a level to allow the gradient required by Table 2, the bubble-up chamber system shown in Figures 6 and 7 may be used provided that","EvalTable
Abstract
OrOtherOnly
"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.4.2.0.1.a.1,3.0 Drainage System Materials and Construction; The ground level adjacent to any downpipe discharging to the bubble-up chamber is at least 150 mm higher than the level of the top of the chamber outlet.,"if( and( expression( function( has), atom( variable( drain)), data( bubbleup chamber)), expression( function( into), atom( relation( discharge), variable( downpipe)), data( bubbleup chamber)), expression( function( adjacent), atom( variable( ground)), data( downpipe)), expression( function( define), atom( relation( elevation), variable( ground)), data( x0)), expression( function( define), atom( relation( top of outlet), variable( bubbleup chamber)), data( x1)), expression( function( define), atom( relation( elevation), variable( x1)), data( x2)), expression( function( greater than equal), atom( variable( x0)), data( x2 + 150)))), then( permission( expression( function( has), atom( variable( drain)), data( bubbleup chamber))))","3.4.2 Restricted fall to outlet Where the surface water sewer, road channel or other outfall is at too high a level to allow the gradient required by Table 2, the bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The ground level adjacent to any downpipe discharging to the bubble-up chamber is at least 150 mm higher than the level of the top of the chamber outlet.","ShortenTitle
TACIT-SPLIT-AT-SEMI-COLON
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.4.2.0.1.b.1,3.0 Drainage System Materials and Construction; The bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The connections between the drain and downpipes are sealed.,"if( expression( function( has), atom( variable( drain)), data( bubbleup chamber))), then( and( obligation( expression( function( in between), atom( variable( connection)), data( drain))), obligation( expression( function( in between), atom( variable( connection)), data( downpipe))), obligation( expression( function( is), atom( variable( connection)), data( sealed)))))","3.4.2 Restricted fall to outlet Where the surface water sewer, road channel or other outfall is at too high a level to allow the gradient required by Table 2, the bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The connections between the drain and downpipes are sealed.",IfVSThen
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.4.2.0.1.c.1,3.0 Drainage System Materials and Construction; The bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The total chamber depth does not exceed 1.0 m.,"if( expression( function( has), atom( variable( drain)), data( bubbleup chamber))), then( obligation( expression( function( less than equal), atom( relation( depth), variable( bubbleup chamber)), data( baseunit( kind( metre)), value( 1.0)))))","3.4.2 Restricted fall to outlet Where the surface water sewer, road channel or other outfall is at too high a level to allow the gradient required by Table 2, the bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The total chamber depth does not exceed 1.0 m.",TACIT-SPLIT-AT-SEMI-COLON
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.5.1.0.1,3.5.1 All joints in drains shall be watertight and prevent the infiltration of groundwater and the intrusion of tree roots.,"if( expression( function( include), atom( variable( drain)), data( joint))), then( and( obligation( expression( function( is), atom( relation( joint), variable( drain)), data( watertight))), obligation( expression( function( has), atom( relation( joint), variable( drain)), data( anti groundwater infiltration))), obligation( expression( function( has), atom( relation( joint), variable( drain)), data( anti tree root intrusion)))))",3.5.1 All joints in drains shall be watertight and prevent the infiltration of groundwater and the intrusion of tree roots.,LongData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.5.2.0.1,3.5.2 Acceptable jointing methods and the relevant standards are given in Table 3. Jointing of drains shall be subject to the tests called for in Paragraph 3.8.,"if( expression( function( include), atom( variable( drain)), data( joint))), then( and( obligation( expression( function( comply with), atom( relation( joint), variable( drain)), data( nzbc e1as1 t3))), obligation( expression( function( comply with), atom( relation( joint), variable( drain)), data( nzbc e1as1 3.8.0.1)))))",3.5.2 Acceptable jointing methods and the relevant standards are given in Table 3. Jointing of drains shall be subject to the tests called for in Paragraph 3.8.,SomeDetailsNotEncoded
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.6.1.0.1,"3.6 Surface water inlets to drains; 3.6.1 All surface water, except that collected directly from a roof, shall enter the drain via a sump","if( and( expression( function( is), atom( relation( content), variable( drain inlet)), data( surface water)), not( expression( function( from), atom( variable( surface water)), data( roof))))), then( obligation( expression( function( is), atom( variable( drain inlet)), data( sump))))","3.6.1 All surface water, except that collected directly from a roof, shall enter the drain via a sump",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.6.1.0.1.a.1,"3.6 Surface water inlets to drains; Via a sump which has: a) A grating, hinged or removable for maintenance access. The grating shall comprise at least 35% openings. The smaller dimension of any individual opening shall not exceed 35 mm","if( expression( function( is), atom( variable( drain inlet)), data( sump))), then( and( obligation( expression( function( include), atom( variable( sump)), data( sump grating))), or( obligation( expression( function( is), atom( variable( sump grating)), data( hinged))), obligation( expression( function( is), atom( variable( sump grating)), data( removable)))), obligation( expression( function( equal), atom( relation( opening), variable( sump grating)), data( 35 percent))), obligation( expression( function( less than equal), expression( function( min), atom( relation( opening), variable( sump grating))), data( baseunit( prefix( milli), kind( metre)), value( 35.0))))))","3.6.1 All surface water, except that collected directly from a roof, shall enter the drain via a sump which has: a) A grating, hinged or removable for maintenance access. The grating shall comprise at least 35% openings. The smaller dimension of any individual opening shall not exceed 35 mm",MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.6.1.0.1.b.1,3.6 Surface water inlets to drains; Via a sump which has: Capacity at the bottom for settlement of silt and debris,"if( expression( function( is), atom( variable( drain inlet)), data( sump))), then( obligation( expression( function( include), atom( variable( sump)), data( settlement capacity))))","3.6.1 All surface water, except that collected directly from a roof, shall enter the drain via a sump which has: Capacity at the bottom for settlement of silt and debris","SomeDetailsNotEncoded
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.6.1.0.1.c.1,3.6 Surface water inlets to drains; Via a sump which has: A submerged (or trapped) outlet which prevents floatable solids entering the drain. ,"if( expression( function( is), atom( variable( drain inlet)), data( sump))), then( or( obligation( expression( function( include), atom( variable( sump)), data( submerged outlet))), obligation( expression( function( include), atom( variable( sump)), data( trapped outlet)))))","3.6.1 All surface water, except that collected directly from a roof, shall enter the drain via a sump which has: A submerged (or trapped) outlet which prevents floatable solids entering the drain. ","MediumData
Ignore"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.1.0.1,3.7.1 Access for maintenance shall be provided on all drains,"if( expression( function( is), atom( variable( drain)), data( true))), then( obligation( expression( function( include), atom( variable( drain)), data( access point))))",3.7.1 Access for maintenance shall be provided on all drains,Abstract
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.2.0.1.a.1,3.7.2 Points of access shall be spaced at no further than: a) 50 m where rodding points are used.,"if( expression( function( is), atom( variable( access point)), data( rodding point))), then( obligation( expression( function( less than equal), atom( relation( spacing), variable( access point)), data( baseunit( kind( metre)), value( 50.0)))))",3.7.2 Points of access shall be spaced at no further than: a) 50 m where rodding points are used.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.2.0.1.b.1,"3.7.2 Points of access shall be spaced at no further than: 100 m where inspection points, inspection chambers or access chambers are used.","if( or( expression( function( is), atom( variable( access point)), data( inspection point)), expression( function( is), atom( variable( access point)), data( inspection chamber)), expression( function( is), atom( variable( access point)), data( access chamber)))), then( obligation( expression( function( less than equal), atom( relation( spacing), variable( access point)), data( baseunit( kind( metre)), value( 100.0)))))","3.7.2 Points of access shall be spaced at no further than: 100 m where inspection points, inspection chambers or access chambers are used.",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.3.0.1.a.1,"3.7.3 Points of access are required at: Changes in direction of greater than 45°,","if( and( expression( function( include), atom( variable( drain)), data( change in direction)), expression( function( greater than), atom( variable( change in direction)), data( baseunit( kind( angle degree)), value( 45.0))))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), obligation( expression( function( is), atom( relation( location), variable( access point)), data( change in direction)))))","3.7.3 Points of access are required at: Changes in direction of greater than 45°,",MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.3.0.1.b.1,3.7.3 Points of access are required at: Changes in gradient of greater than 45°,"if( and( expression( function( include), atom( variable( drain)), data( change in gradient)), expression( function( greater than), atom( variable( change in gradient)), data( baseunit( kind( angle degree)), value( 45.0))))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), obligation( expression( function( is), atom( relation( location), variable( access point)), data( change in gradient)))))",3.7.3 Points of access are required at: Changes in gradient of greater than 45°,LongEntities
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.3.0.1.c.1,"3.7.3 Points of access are required at: Junctions of drains other than a drain, serving a single downpipe, that is less than 2.0 m long.","if( and( expression( function( include), atom( variable( drain)), data( drain junction)), expression( function( into), atom( relation( flow), variable( drain)), data( downpipe)), not( expression( function( equal), expression( function( count), atom( variable( downpipe))), data( 1))), not( expression( function( less than), atom( relation( length), variable( downpipe)), data( baseunit( kind( metre)), value( 2.0)))))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), obligation( expression( function( is), atom( relation( location), variable( access point)), data( drain junction)))))","3.7.3 Points of access are required at: Junctions of drains other than a drain, serving a single downpipe, that is less than 2.0 m long.",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.4.0.1,3.7.4 Inspection chambers or access chambers (see Figures 11 and 12) shall be provided where changes in both gradient and direction occur and where either is greater than 22.5°.,"if( and( expression( function( include), atom( variable( drain)), data( change in direction)), expression( function( include), atom( variable( drain)), data( change in gradient)), expression( function( define), atom( relation( location), variable( change in gradient)), data( x0)), expression( function( define), atom( relation( location), variable( change in direction)), data( x1)), expression( function( equal), atom( variable( x0)), data( x1)), or( expression( function( greater than), atom( variable( change in direction)), data( baseunit( kind( angle degree)), value( 22.5))), expression( function( greater than), atom( variable( change in gradient)), data( baseunit( kind( angle degree)), value( 22.5)))))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), obligation( expression( function( is), atom( relation( location), variable( access point)), data( x0))), or( obligation( expression( function( is), atom( relation( type), variable( access point)), data( inspection chamber))), obligation( expression( function( is), atom( relation( type), variable( access point)), data( access chamber))))))",3.7.4 Inspection chambers or access chambers (see Figures 11 and 12) shall be provided where changes in both gradient and direction occur and where either is greater than 22.5°.,"Tacit
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.5.0.1,"3.7.5 Where the depth to the invert of the drain exceeds 1.0 m, an inspection chamber is not acceptable and an access chamber shall be used.","if( and( expression( function( has), atom( variable( drain)), data( invert)), expression( function( greater than), atom( relation( depth), variable( invert)), data( baseunit( kind( metre)), value( 1.0))))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), prohibition( expression( function( is), atom( relation( type), variable( access point)), data( inspection chamber))), obligation( expression( function( is), atom( relation( type), variable( access point)), data( access chamber)))))","3.7.5 Where the depth to the invert of the drain exceeds 1.0 m, an inspection chamber is not acceptable and an access chamber shall be used.",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.6.0.1,3.7.6 Drain under buildings; Any drain laid under a building shall be run in a straight line from one side to the other.,"if( expression( function( below), atom( relation( section), variable( drain)), data( building))), then( obligation( not( expression( function( include), atom( relation( section), variable( drain)), data( change in direction)))))",3.7.6 Drain under buildings Any drain laid under a building shall be run in a straight line from one side to the other.,"Tacit
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.7.0.1,3.7.7 Access to a drain laid under a building shall be provided immediately outside the building. These points of access shall be located within 2.0 m of an exterior wall.,"if( expression( function( below), atom( variable( drain)), data( building))), then( and( obligation( expression( function( has), atom( variable( drain)), data( access point))), obligation( expression( function( in front of), atom( relation( location), variable( access point)), data( building))), obligation( expression( function( within), atom( relation( location), variable( access point)), data( baseunit( kind( metre)), value( 2.0))))))",3.7.7 Access to a drain laid under a building shall be provided immediately outside the building. These points of access shall be located within 2.0 m of an exterior wall.,Abstract
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.8.0.1.1,3.7.8 Under a building the only acceptable inlets to a drain are from sealed roof-water downpipes.,"if( expression( function( below), atom( variable( drain inlet)), data( building))), then( and( obligation( expression( function( is), atom( relation( type), variable( drain inlet)), data( downpipe))), expression( function( is), atom( variable( drain inlet)), data( sealed))))",3.7.8 Under a building the only acceptable inlets to a drain are from sealed roof-water downpipes,"NotEncodedParts
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.7.8.0.1.2,Inlet to a drain under a building; Access shall be provided to the drain via a sealed access point in the downpipe immediately above ground floor level.,"if( expression( function( below), atom( variable( drain inlet)), data( building))), then( and( obligation( expression( function( has), atom( variable( drain inlet)), data( access point))), obligation( expression( function( is), atom( variable( access point)), data( sealed))), obligation( expression( function( above), atom( variable( access point)), data( ground floor level))), obligation( expression( function( is), atom( relation( location), variable( access point)), data( downpipe)))))",Access shall be provided to the drain via a sealed access point in the downpipe immediately above ground floor level.,"SplitableEntities
TACIT-SPLIT-AT-SEMI-COLON"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.8.1.0.1,3.8.1 Surface water drains shall be capable of passing one of the tests described in E1/VM1 Paragraph 8.0.,"if( expression( function( is), atom( relation( type), variable( drain)), data( surface water))), then( obligation( expression( function( comply with), atom( variable( drain)), data( nzbc e1vm1 8.0))))",3.8.1 Surface water drains shall be capable of passing one of the tests described in E1/VM1 Paragraph 8.0.,Abstract
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.2.0.1,"3.9.2 Bedding and backfilling; Figure 13 gives acceptable solutions for the bedding and backfilling of the drainage pipes listed in Table 1 except where: a) The trench is located within or above peat, or b) Scouring of the trench is likely due to unstable soils, or d) The cover H to the pipe is more than 2.5 m.","if( and( expression( function( within), atom( variable( pipe)), data( trench)), or( expression( function( has), atom( variable( trench)), data( bedding)), expression( function( has), atom( variable( trench)), data( backfilling))), not( expression( function( within), atom( relation( location), variable( trench)), data( peat))), not( expression( function( above), atom( relation( location), variable( trench)), data( peat))), not( expression( function( is), atom( variable( soil)), data( unstable))), not( expression( function( greater than), atom( relation( cover), variable( pipe)), data( baseunit( kind( metre)), value( 2.5)))))), then( and( permission( expression( function( comply with), atom( variable( bedding)), data( nzbc e1as1 f13))), permission( expression( function( comply with), atom( variable( backfilling)), data( nzbc e1as1 f13)))))","3.9.2 Bedding and backfilling Figure 13 gives acceptable solutions for the bedding and backfilling of the drainage pipes listed in Table 1 except where: a) The trench is located within or above peat, or b) Scouring of the trench is likely due to unstable soils, or c) The horizontal separation between any building foundation and the underside of the pipe trench is less than that required by Paragraph 3.9.7, or d) The cover H to the pipe is more than 2.5 m.",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1,"3.9.3 Trench slope; Where the slope of the trench is 1 in 8 or greater, anti-scour blocks shall be provided.","if( expression( function( greater than equal), atom( relation( slope), variable( trench)), data( 8.0))), then( obligation( expression( function( include), atom( variable( trench)), data( anti scour blocks))))","3.9.3 Trench slope Where the slope of the trench is 1 in 8 or greater, anti-scour blocks shall be provided.",
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1.a.1,3.9.3 Trench slope; These anti-scour blocks shall be: Constructed from 150 mm thick concrete (17 MPa),"if( expression( function( include), atom( variable( trench)), data( anti scour blocks))), then( and( obligation( expression( function( is), atom( relation( material), variable( anti scour blocks)), data( concrete))), obligation( expression( function( equal), atom( relation( thickness), variable( anti scour blocks)), data( baseunit( prefix( milli), kind( metre)), value( 150.0)))), obligation( expression( function( equal), atom( relation( strength), variable( anti scour blocks)), data( baseunit( kind( pascal), prefix( mega)), value( 17.0))))))",These anti-scour blocks shall be: Constructed from 150 mm thick concrete (17 MPa),
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1.c.2,3.9.3 Trench slope; These anti-scour blocks shall be: Extended to ground level where the drain cover is less than 300 mm,"if( and( expression( function( include), atom( variable( trench)), data( anti scour blocks)), expression( function( less than), atom( relation( depth), variable( drain cover)), data( baseunit( prefix( milli), kind( metre)), value( 300.0))))), then( obligation( expression( function( is), atom( relation( height), variable( anti scour blocks)), data( ground level))))",These anti-scour blocks shall be: Extended to ground level where the drain cover is less than 300 mm,"Tacit
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1.d.i.1,3.9.3 Trench slope; These anti-scour blocks shall be: Spaced at: 7.5 m centres for trench slopes between 1 in 8 and 1 in 5,"if( and( expression( function( include), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than equal), atom( relation( slope), variable( trench)), data( 8.0)), expression( function( less than), atom( relation( slope), variable( trench)), data( 5.0)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 7.5 m centre))))",These anti-scour blocks shall be: Spaced at: 7.5 m centres for trench slopes between 1 in 8 and 1 in 5,SplitableEntities
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1.d.ii.1,3.9.3 Trench slope; These anti-scour blocks shall be: Spaced at: 5.0 m centres for trench slopes greater than 1 in 5.,"if( and( expression( function( include), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than), atom( relation( slope), variable( trench)), data( 5.0)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5.0 m centre))))",These anti-scour blocks shall be: Spaced at: 5.0 m centres for trench slopes greater than 1 in 5.,SplitableEntities
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.4.0.1.1,"3.9.4 Trench width; The width B of the trench shall be no less than the pipe diameter D plus 200 mm. Trench width at the top of the pipe shall be no more than 600 mm unless the pipe(s) in the trench are covered with concrete, as shown in Figure 13 (c).","if( and( expression( function( within), atom( variable( pipe)), data( trench)), expression( function( define), atom( relation( width), variable( trench)), data( x0)), expression( function( define), atom( relation( diameter), variable( pipe)), data( x1)), expression( function( define), atom( relation( width), variable( trench)), data( x2)), expression( function( define), expression( function( top of), atom( variable( pipe))), data( x3)), expression( function( is), atom( relation( location), variable( x2)), data( x3)))), then( and( obligation( expression( function( greater than equal), atom( relation( width), variable( x0)), data( x1 + 200 mm))), or( obligation( expression( function( less than equal), atom( relation( width), variable( bt)), data( baseunit( kind( metre), prefix( milli)), value( 600.0)))), and( obligation( expression( function( has), atom( variable( trench)), data( cover))), obligation( expression( function( is), atom( relation( material), variable( cover)), data( concrete)))))))","3.9.4 Trench width The width B of the trench shall be no less than the pipe diameter D plus 200 mm. Trench width at the top of the pipe shall be no more than 600 mm unless the pipe(s) in the trench are covered with concrete, as shown in Figure 13 (c).",Complex
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.5.0.1.a.1,Acceptable fill materials shown in Figure 13 are: Bedding material of clean granular non-cohesive material with a maximum particle size of 20 mm,"if( expression( function( include), atom( variable( trench)), data( bedding))), then( and( obligation( expression( function( is), atom( relation( material), variable( bedding)), data( clean))), obligation( expression( function( is), atom( relation( material), variable( bedding)), data( granular))), obligation( expression( function( is), atom( relation( material), variable( bedding)), data( non cohesive))), obligation( expression( function( less than equal), atom( relation( particle size), variable( bedding)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))))","Acceptable fill materials shown in Figure 13 are: Bedding material of clean granular non-cohesive material with a maximum particle size of 20 mm, or",Tacit
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.5.0.1.b.1,Acceptable fill materials shown in Figure 13 are: Selected compacted fill of any fine-grained soil or granular material which is free from topsoil and rubbish and has a maximum particle size of 20 mm,"if( and( expression( function( include), atom( variable( trench)), data( fill)), expression( function( is), atom( relation( type), variable( fill)), data( compacted)))), then( and( or( obligation( expression( function( is), atom( relation( material), variable( fill)), data( fine grained soil))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( granular)))), obligation( not( expression( function( include), atom( relation( material), variable( fill)), data( topsoil)))), obligation( not( expression( function( include), atom( relation( material), variable( fill)), data( rubbish)))), obligation( expression( function( less than equal), atom( relation( particle size), variable( fill)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))))","Acceptable fill materials shown in Figure 13 are: Selected compacted fill of any fine-grained soil or granular material which is free from topsoil and rubbish and has a maximum particle size of 20 mm, or","Tacit
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.5.0.1.c.1,Acceptable fill materials shown in Figure 13 are: Ordinary fill which may comprise any fill or excavated material.,"if( expression( function( is), atom( relation( type), variable( fill)), data( ordinary))), then( permission( expression( function( include), atom( variable( trench)), data( fill))))",Acceptable fill materials shown in Figure 13 are: Ordinary fill which may comprise any fill or excavated material.,Tacit
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.6.0.0.a.1,3.9.6 Placing and compacting a) Granular bedding and selected fill shall be placed in layers of no greater than 100 mm loose thickness and compacted.,"if( or( expression( function( include), atom( variable( trench)), data( granular bedding)), expression( function( include), atom( variable( trench)), data( selected fill)))), then( and( obligation( expression( function( in), atom( variable( granular bedding)), data( layer))), obligation( expression( function( in), atom( variable( selected fill)), data( layer))), obligation( expression( function( less than equal), atom( relation( thickness), variable( layer)), data( baseunit( prefix( milli), kind( metre)), value( 100.0)))), obligation( expression( function( is), atom( variable( layer)), data( compacted)))))",3.9.6 Placing and compacting a) Granular bedding and selected fill shall be placed in layers of no greater than 100 mm loose thickness and compacted.,"Tacit
Reference to trench in 3.9.4
Wrong
Or connection of obligations 1 and 2
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r4.1.1.0.1,4.1.1 Materials for downpipes shall comply with Table 4.,"if( expression( function( equal), atom( variable( downpipe)), data( true))), then( obligation( expression( function( comply with), atom( relation( material), variable( downpipe)), data( nzbc e1as1 t4))))",4.1.1 Materials for downpipes shall comply with Table 4.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r4.1.2.0.1,"4.1.2 Downpipes, gutters, roofing, fastenings and all adjoining components shall be of the same or a compatible material to eliminate the risk of galvanic corrosion.","if( and( expression( function( include), atom( relation( component pair), variable( roof system)), data( component1)), expression( function( include), atom( relation( component pair), variable( roof system)), data( component2)), expression( function( adjacent), atom( variable( component1)), data( component2)))), then( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( component pair))), data( roof system))), appliedstatement( obligation( expression( function( is), atom( relation( material), variable( component pair)), data( galvanically compatible))))))","4.1.2 Downpipes, gutters, roofing, fastenings and all adjoining components shall be of the same or a compatible material to eliminate the risk of galvanic corrosion.","DataAnd
Abstract
Tacit
MissingInformation
OnlyForLastCase
MediumData
Complex"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r4.2.1.0.1,"4.2.1 Downpipes sized using Table 5 are acceptable. Other downpipes are acceptable provided their cross-sectional area is no less than that required by Table 5, and they permit passage of a 50 mm diameter sphere.","if( expression( function( equal), atom( variable( downpipe)), data( true))), then( or( obligation( expression( function( comply with), atom( relation( size), variable( downpipe)), data( nzbc e1as1 t5))), and( obligation( expression( function( comply with), atom( relation( cross sectional area), variable( downpipe)), data( nzbc e1as1 t5))), obligation( expression( function( greater than), atom( relation( diameter), variable( downpipe)), data( baseunit( kind( metre), prefix( milli)), value( 50.0)))))))","4.2.1 Downpipes sized using Table 5 are acceptable. Other downpipes are acceptable provided their cross-sectional area is no less than that required by Table 5, and they permit passage of a 50 mm diameter sphere.",Abstract
lrml/NZ_NZBC-E1AS1#1.10.lrml,r4.3.1.0.1,"4.3.1 Where thermal movement of downpipes cannot be accommodated by movement of the guttering, expansion joints shall be incorporated.","if( and( expression( function( has), atom( variable( downpipe)), data( thermal expansion)), expression( function( include), atom( variable( downpipe)), data( guterring)), expression( function( less than), atom( relation( movement), variable( guttering)), data( thermal expansion)))), then( or( obligation( expression( function( include), atom( variable( downpipe)), data( expansion joint))), obligation( expression( function( include), atom( variable( guttering)), data( expansion joint)))))","4.3.1 Where thermal movement of downpipes cannot be accommodated by movement of the guttering, expansion joints shall be incorporated.","Tacit
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r4.3.2.0.1,"4.3.2 All internal downpipes shall withstand without leakage, a water test with an applied head of 1.5 m of water, or a high pressure air test as described in E1/VM1 Paragraph 8.3.","if( expression( function( is), atom( relation( location), variable( downpipe)), data( internal))), then( or( and( obligation( expression( function( comply with), atom( variable( downpipe)), data( water test))), obligation( expression( function( equal), atom( relation( applied head), variable( water test)), data( baseunit( kind( metre)), value( 1.5))))), and( obligation( expression( function( comply with), atom( variable( downpipe)), data( air test))), obligation( expression( function( comply with), atom( variable( air test)), data( nzbc e1vm1 8.3))))))","4.3.2 All internal downpipes shall withstand without leakage, a water test with an applied head of 1.5 m of water, or a high pressure air test as described in E1/VM1 Paragraph 8.3.","NotEncodedParts
MediumData"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.1.1.0.1,5.1.1 Roof gutters shall discharge to downpipes that are sized as given in Paragraph 4.2.,"if( expression( function( is), atom( relation( location), variable( gutter)), data( roof))), then( and( obligation( expression( function( into), atom( relation( discharge), variable( gutter)), data( downpipe))), obligation( expression( function( comply with), atom( relation( size), variable( downpipe)), data( 4.2)))))",5.1.1 Roof gutters shall discharge to downpipes that are sized as given in Paragraph 4.2.,LrmlReference
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.1.4.0.1,5.0 Roof Gutters 5.1.4 In no case shall the cross-sectional area of any gutter be less than 4000 mm2.,"if( expression( function( is), atom( relation( location), variable( gutter)), data( roof))), then( obligation( expression( function( greater than equal), atom( relation( cross sectional area), variable( gutter)), data( baseunit( prefix( milli), kind( metre), exponent( 2.0)), value( 4000.0)))))",5.1.4 In no case shall the cross-sectional area of any gutter be less than 4000 mm2.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.2.1.0.1,5.2.1 Roof gutter materials shall comply with the standards stated in Table 6.,"if( expression( function( is), atom( relation( location), variable( gutter)), data( roof))), then( obligation( expression( function( comply with), atom( relation( material), variable( gutter)), data( nzbc e1as1 t6))))",5.2.1 Roof gutter materials shall comply with the standards stated in Table 6.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.3.1.0.1,5.3.1 Roof gutters shall fall to an outlet.,"if( expression( function( is), atom( relation( location), variable( gutter)), data( roof))), then( obligation( expression( function( towards), atom( relation( fall direction), variable( gutter)), data( outlet))))",5.3.1 Roof gutters shall fall to an outlet.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.5.1.0.1.1,5.0 Roof Gutters 5.5.1 All internal gutters shall be fitted with overflow outlets which drain to the exterior of the building. The top of the outlet shall be set at least 50 mm below the top of the gutter.,"if( and( expression( function( is), atom( relation( location), variable( gutter)), data( roof)), expression( function( is), atom( relation( type), variable( gutter)), data( internal)), expression( function( define), atom( relation( top), variable( gutter)), data( x0)))), then( and( obligation( expression( function( include), atom( variable( gutter)), data( overflow outlet))), obligation( expression( function( towards), atom( relation( flow), variable( overflow outlet)), data( building exterior))), obligation( expression( function( less than equal), atom( relation( top), variable( overflow outlet)), data( x0 - 50 mm)))))",5.5.1 All internal gutters shall be fitted with overflow outlets which drain to the exterior of the building. The top of the outlet shall be set at least 50 mm below the top of the gutter.,MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,r5.5.2.0.1,5.0 Roof Gutters 5.5.2 External gutters do not require overflow outlets but shall be installed to ensure any overflow from the gutter spills to the outside of the building.,"if( and( expression( function( is), atom( relation( location), variable( gutter)), data( roof)), expression( function( is), atom( relation( type), variable( gutter)), data( external)))), then( and( permission( not( expression( function( include), atom( variable( gutter)), data( overflow outlet)))), obligation( expression( function( towards), atom( relation( overflow), variable( gutter)), data( building exterior)))))",5.5.2 External gutters do not require overflow outlets but shall be installed to ensure any overflow from the gutter spills to the outside of the building.,medi
lrml/NZ_NZBC-B2AS1#2.10.lrml,r1.1.1.0.1,"1.1.1 Building elements, including materials, components and systems, complying with a publication referenced in the Acceptable Solutions and Verification Methods, satisfy B2 requirements only when the conditions of use stated in the publication and Acceptable Solutions and Verification Methods prevail.","if( and( or( expression( function( has), atom( variable( nzbc as)), data( reference)), expression( function( has), atom( variable( nzbc vm)), data( reference))), expression( function( is), atom( variable( reference)), data( publication)), or( expression( function( comply with), atom( relation( element), variable( building)), data( publication)), expression( function( comply with), atom( relation( material), variable( building)), data( publication)), expression( function( comply with), atom( relation( component), variable( building)), data( publication)), expression( function( comply with), atom( relation( system), variable( building)), data( publication))), expression( function( has), atom( variable( publication)), data( condition of use)), expression( function( is), atom( variable( condition of use)), data( true)))), then( and( expression( function( comply with), atom( relation( element), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( material), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( component), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( system), variable( building)), data( nzbc b2))))","1.1.1 Building elements, including materials, components and systems, complying with a publication referenced in the Acceptable Solutions and Verification Methods, satisfy B2 requirements only when the conditions of use stated in the publication and Acceptable Solutions and Verification Methods prevail.",Complex
lrml/NZ_NZBC-B2AS1#2.10.lrml,r2.1.2.0.2,2.1.2 It is the responsibility of the person specifying the building element to determine normal maintenance requirements. These may be based on the manufacturer's recommendations and may also include periodic inspections of elements not readily observable without a specific effort (e.g. access to roof or subfloor spaces).,"if( expression( function( has), atom( relation( element), variable( building)), data( specifier))), then( and( obligation( expression( function( has), atom( relation( element), variable( building)), data( maintenance))), obligation( expression( function( by), atom( relation( requirement), variable( maintenance)), data( specifier))), permission( expression( function( include), atom( relation( requirement), variable( maintenance)), data( manufacturers recommendation))), permission( expression( function( include), atom( relation( requirement), variable( maintenance)), data( periodic inspection)))))",2.1.2 It is the responsibility of the person specifying the building element to determine normal maintenance requirements. These may be based on the manufacturer's recommendations and may also include periodic inspections of elements not readily observable without a specific effort (e.g. access to roof or subfloor spaces).,"NotEncodedParts
MediumData"
lrml/NZ_NZBC-B2AS1#2.10.lrml,r2.1.3.0.1,"2.1.3 Basic normal maintenance tasks shall include but not be limited to: a) Where applicable, following manufacturers' maintenance recommendations, b) Washing down surfaces, particularly exterior building elements subject to wind driven salt spray, c) Re-coating interior and exterior protective finishes, d) Replacing sealant, seals and gaskets in joints, e) Replacing valves, washers and similar high wear components in easily accessed service equipment and other building elements, f) Cleaning and replacing filters in building services systems, g) The regular servicing of boilers, cooling towers, lifts, escalators, emergency lighting and fire protection equipment, and h) The maintenance of signs for access, escape routes, emergency equipment and hazardous areas. COMMENT: Maintenance does not include such things as upgrading building elements to meet the demands of new technology or the increased environmental expectations of users.","if( and( expression( function( has), atom( relation( element), variable( building)), data( maintenance)), or( expression( function( is), atom( relation( type), variable( maintenance)), data( normal)), expression( function( is), atom( relation( type), variable( maintenance)), data( basic))))), then( and( obligation( expression( function( include), atom( relation( task), variable( maintenance)), data( manufacturers recommendation))), expression( function( include), atom( relation( task), variable( maintenance)), data( wash down surface)), expression( function( include), atom( relation( task), variable( maintenance)), data( recoat interior protective finish)), expression( function( include), atom( relation( task), variable( maintenance)), data( recoat exterior protective finish)), and( expression( function( include), atom( relation( task), variable( maintenance)), data( replace joint sealant)), expression( function( include), atom( relation( task), variable( maintenance)), data( replace joint seal)), expression( function( include), atom( relation( task), variable( maintenance)), data( replace joint gasket))), and( expression( function( include), atom( relation( task), variable( maintenance)), data( replace valve)), expression( function( include), atom( relation( task), variable( maintenance)), data( replacewashers)), expression( function( include), atom( relation( task), variable( maintenance)), data( replace high wear components))), and( expression( function( include), atom( relation( task), variable( maintenance)), data( clean building service system filter)), expression( function( include), atom( relation( task), variable( maintenance)), data( replace building service system filter))), and( expression( function( include), atom( relation( task), variable( maintenance)), data( regular boiler service)), expression( function( include), atom( relation( task), variable( maintenance)), data( regular cooling tower service)), expression( function( include), atom( relation( task), variable( maintenance)), data( regular lift service)), expression( function( include), atom( relation( task), variable( maintenance)), data( regular escalator service)), expression( function( include), atom( relation( task), variable( maintenance)), data( regular emergency lighting service)), expression( function( include), atom( relation( task), variable( maintenance)), data( regular fire protection equipment service))), and( expression( function( include), atom( relation( task), variable( maintenance)), data( access sign maintenance)), expression( function( include), atom( relation( task), variable( maintenance)), data( escape route maintenance)), expression( function( include), atom( relation( task), variable( maintenance)), data( emergency equipment maintenance)), expression( function( include), atom( relation( task), variable( maintenance)), data( hazardous area maintenance))), not( expression( function( include), atom( relation( task), variable( maintenance)), data( upgrade building element for new technology))), not( expression( function( include), atom( relation( task), variable( maintenance)), data( upgrade building element for increased environmental user expectation)))))","2.1.3 Basic normal maintenance tasks shall include but not be limited to: a) Where applicable, following manufacturers' maintenance recommendations, b) Washing down surfaces, particularly exterior building elements subject to wind driven salt spray, c) Re-coating interior and exterior protective finishes, d) Replacing sealant, seals and gaskets in joints, e) Replacing valves, washers and similar high wear components in easily accessed service equipment and other building elements, f) Cleaning and replacing filters in building services systems, g) The regular servicing of boilers, cooling towers, lifts, escalators, emergency lighting and fire protection equipment, and h) The maintenance of signs for access, escape routes, emergency equipment and hazardous areas.","NotEncodedParts
SplitableEntities
ObligationCorrectnessUnclear
"
lrml/NZ_NZBC-B2AS1#2.10.lrml,r2.2.1.0.1,"2.2.1 Scheduled maintenance comprises the inspection, maintenance and reporting procedures for building elements required to have a compliance schedule in terms of section 44 of the Building Act. The relevant maintenance procedures may include total replacement.","if( and( expression( function( has), atom( relation( element), variable( building)), data( maintenance)), obligation( expression( function( is), atom( relation( type), variable( maintenance)), data( scheduled))))), then( and( obligation( expression( function( include), atom( relation( task), variable( maintenance)), data( procedure))), obligation( expression( function( include), atom( variable( procedure)), data( inspection))), obligation( expression( function( include), atom( variable( procedure)), data( maintenance))), obligation( expression( function( include), atom( variable( procedure)), data( reporting))), obligation( expression( function( comply with), atom( variable( procedure)), data( building act 44))), permission( expression( function( include), atom( relation( task), variable( maintenance)), data( total replacement)))))","2.2.1 Scheduled maintenance comprises the inspection, maintenance and reporting procedures for building elements required to have a compliance schedule in terms of section 44 of the Building Act. By those procedures the building elements concerned are effectively deemed to have a durability of the life of the building because they are required to perform as designed at all times. The relevant maintenance procedures may include total replacement.","ObligationInCondition

"
lrml/NZ_NZBC-B2AS1#2.10.lrml,r3.3.1.0.1,"3.3.1 NZS 4251: Part 1 is an acceptable solution for meeting the durability requirements of cement plasters for walls, ceilings and soffits within its scope.","if( and( expression( function( is), atom( relation( material), variable( building)), data( cement plaster)), or( expression( function( is), atom( relation( element), variable( building)), data( wall)), expression( function( is), atom( relation( element), variable( building)), data( ceiling)), expression( function( is), atom( relation( element), variable( building)), data( soffit))))), then( permission( expression( function( comply with), atom( relation( element), variable( building)), data( nzs 4251.1))))","3.3.1 NZS 4251: Part 1 is an acceptable solution for meeting the durability requirements of cement plasters for walls, ceilings and soffits within its scope.","NotEncodedParts
"
lrml/NZ_NZBC-B2AS1#2.10.lrml,r3.4.1.0.1,3.4.1 NZS 4297 and NZS 4299 are acceptable solutions for meeting the durability requirements of earth buildings within their scope.,"if( expression( function( is), atom( relation( material), variable( building)), data( earth))), then( and( permission( expression( function( comply with), atom( variable( building)), data( nzs 4297))), permission( expression( function( comply with), atom( variable( building)), data( nzs 4299)))))",3.4.1 NZS 4297 and NZS 4299 are acceptable solutions for meeting the durability requirements of earth buildings within their scope.,NotEncodedParts
lrml/NZ_NZBC-B2AS1#2.10.lrml,r3.5.1.0.1,"3.5.1 NZS 4223.2 is an Acceptable Solution for meeting the durability requirements of insulating glass units, within its scope.","if( expression( function( has), atom( relation( property), variable( glazing)), data( insulation))), then( permission( expression( function( comply with), atom( variable( glazing)), data( nzs 4223.2))))","3.5.1 NZS 4223.2 is an Acceptable Solution for meeting the durability requirements of insulating glass units, within its scope.",DomainKnowledge
lrml/NZ_NZBC-B2AS1#2.10.lrml,r3.6.1.0.1,3.6.1 SNZ TS 3404: SNZ TS 3404 is an Acceptable Solution for meeting the durability requirements of steel building elements within its scope.,"if( expression( function( is), atom( relation( material), variable( building)), data( steel))), then( permission( expression( function( comply with), atom( relation( element), variable( building)), data( snz ts 3404))))",3.6.1 SNZ TS 3404: SNZ TS 3404 is an Acceptable Solution for meeting the durability requirements of steel building elements within its scope.,NotEncodedParts
lrml/NZ_NZBC-B1AS1#0.17.lrml,r1.1.0.1,"Structure Design 1.1 B1/AS1 contains Acceptable Solutions for Masonry (Paragraph 2.0), Timber (Paragraph 3.0), Earth Buildings (Paragraph 4.0) and Stucco (Paragraph 5.0), Drains (Paragraph 6.0) and Glazing (Paragraph 7.0).","if( or( expression( function( is), atom( relation( material), variable( structure)), data( masonry)), expression( function( is), atom( relation( material), variable( structure)), data( timber)), expression( function( is), atom( relation( material), variable( structure)), data( earth)), expression( function( has), atom( relation( material), variable( structure)), data( stucco)), expression( function( for), atom( variable( structure)), data( drain)), expression( function( part of), atom( variable( glazing)), data( structure)))), then( permission( expression( function( comply with), atom( relation( design), variable( structure)), data( nzbc b1as1))))","1.1 B1/AS1 contains Acceptable Solutions for Masonry (Paragraph 2.0), Timber (Paragraph 3.0), Earth Buildings (Paragraph 4.0) and Stucco (Paragraph 5.0), Drains (Paragraph 6.0) and Glazing (Paragraph 7.0).","Tacit
DomainKnowledge
Complex
ComplexityMaybeUnnecessary
BuildingCodeTitle
NotEncodedParts"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r1.2.0.1,1.2 B1/AS gives an Acceptable Solution for small chimneys (referred to in Paragraph 8.0).,"if( and( expression( function( is), atom( variable( structure)), data( chimney)), expression( function( is), atom( relation( size), variable( chimney)), data( small)))), then( permission( expression( function( comply with), atom( relation( design), variable( structure)), data( nzbc b1as1))))",1.2 B1/AS gives an Acceptable Solution for small chimneys (referred to in Paragraph 8.0).,"Detailed
Tacit"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r2.1.0.1,Structure Design 2.0 Masonry 2.1 NZS 4229 subject to the following modifications: 2.1.1 NZS 4229 Clause 7.8.3 Delete clause 7.8.3. Replace with: Rule 2.1.1.1,"if( and( expression( function( is), atom( relation( material), variable( structure)), data( masonry)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4229 7.8.3)))), then( and( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 4229))), obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 2.1.1.1)))))",2.1 NZS 4229 subject to the following modifications: 2.1.1 NZS 4229 Clause 7.8.3 Delete clause 7.8.3. Replace with:,"Complex
LrmlReference
TACIT-EXPERIMENT
"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r2.1.1.1,"All slab-on-ground reinforcing shall extend to within 75 mm of the outside edge of the slab (including the foundation wall) and shall consist of a minimum 2.27kg/m2 welded Grade 500E reinforcing mesh sheets (1.14 kg/m2 in each direction), which shall be lapped at sheet joints such that the overlap measurement between the outermost cross wires of each fabric sheet is equal to the greater of one of the following: the spacing of cross wires plus 50 mm, 150 mm, or the manufacturer's requirements. Slabs shall have a maximum dimension of 18 m between free joints.","if( and( expression( function( is), atom( relation( material), variable( slab)), data( concrete)), expression( function( is), atom( relation( construction), variable( slab)), data( slab on ground)), expression( function( has), atom( variable( slab on ground)), data( reinforcing)), expression( function( has), atom( variable( slab)), data( outside edge)))), then( and( obligation( expression( function( within), atom( relation( extension), variable( reinforcing)), data( outside edge))), obligation( expression( function( less than equal), atom( variable( extension)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( is), atom( relation( type), variable( reinforcing)), data( mesh sheet))), obligation( expression( function( is), atom( relation( type), variable( mesh sheet)), data( welded grade500e))), obligation( expression( function( greater than equal), atom( relation( weight), variable( mesh sheet)), data( derivedunit( baseunit( kind( gram), prefix( kilo)), operator( name( division)), baseunit( kind( metre), exponent( 2.0))), value( 2.27)))), obligation( expression( function( greater than equal), atom( relation( weight per direction), variable( mesh sheet)), data( derivedunit( baseunit( prefix( kilo), kind( gram)), operator( name( division)), baseunit( kind( metre), exponent( 2.0))), value( 1.14)))), obligation( expression( function( has), atom( relation( joint), variable( mesh sheet)), data( overlap))), obligation( expression( function( in between), atom( relation( measurement), variable( overlap)), data( x0))), obligation( expression( function( is), atom( relation( location), variable( x0)), data( outermost))), obligation( expression( function( part of), atom( variable( x0)), data( mesh sheet))), expression( function( define), atom( relation( spacing), variable( x0)), data( a)), expression( function( define), atom( relation( dimension), variable( manufacturer requirement)), data( b)), expression( function( define), atom( relation( collection), variable( max values)), data( new)), expression( function( include), atom( variable( a + 50 mm)), data( max values)), expression( function( include), atom( variable( 150 mm)), data( max values)), expression( function( include), atom( variable( b)), data( max values)), obligation( expression( function( equal), expression( function( max), atom( variable( max values))), data( measurement))), obligation( expression( function( in between), atom( relation( dimension), variable( slab)), data( free joints))), obligation( expression( function( equal), atom( relation( dimension), variable( slab)), data( baseunit( kind( metre)), value( 18.0))))))","All slab-on-ground reinforcing shall extend to within 75 mm of the outside edge of the slab (including the foundation wall) and shall consist of a minimum 2.27kg/m2 welded Grade 500E reinforcing mesh sheets (1.14 kg/m2 in each direction), which shall be lapped at sheet joints such that the overlap measurement between the outermost cross wires of each fabric sheet is equal to the greater of one of the following: - the spacing of cross wires plus 50 mm; - 150 mm; or - the manufacturer's requirements.","DomainKnowledge
UnpredictableParts
Detailed
Complex
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r2.1.3.0.1,"2.1.3 NZS 4229; Grade 500E welded steel mesh; Where Grade 500E welded steel mesh is specified, it shall meet the requirements of Paragraph 14.0 in B1/VM1.","if( expression( function( is), atom( relation( grade), variable( welded steel mesh)), data( 500e))), then( and( obligation( expression( function( comply with), atom( variable( welded steel mesh)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 14))), obligation( expression( function( in), atom( variable( rule)), data( nzbc b1vm1)))))","2.1.3 NZS 4229 Grade 500E welded steel mesh Where Grade 500E welded steel mesh is specified, it shall meet the requirements of Paragraph 14.0 in B1/VM1.",Detailed
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.0.1,Structure Design 3.0 Timber 3.1 NZS 3604 subject to the following modifications:,"if( expression( function( is), atom( relation( material), variable( structure)), data( timber))), then( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 3604))))",3.1 NZS 3604 subject to the following modifications:,"Tacit
LearnToIgnore
"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.1.0.1,"3.0 Timber 3.1.1 NZS 3604 Paragraph 1.3 Definitions Add (in the definition for Good Ground): ""(liquefaction, lateral spread – for the Canterbury earthquake region only)"" after ""subsidence"" in subparagraph (c).","if( and( expression( function( is), atom( relation( material), variable( structure)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 1.3.goodground.c)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( add))), obligation( expression( function( after), atom( relation( location), variable( modification)), data( 'subsidence'))), obligation( expression( function( equal), atom( relation( text), variable( modification)), data( '( liquefaction, lateral spread - for the canterbury earthquake region only)')))))","3.1.1 NZS 3604 Paragraph 1.3 Definitions Add (in the definition for Good Ground): ""(liquefaction, lateral spread – for the Canterbury earthquake region only)"" after ""subsidence"" in subparagraph (c).",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2.0.2,All the area within the Christchurch City Council boundary is within Zone 2.,"if( and( expression( function( within), atom( variable( space)), data( boundary)), expression( function( for), atom( variable( boundary)), data( christchurch city council)))), then( obligation( expression( function( within), atom( relation( location), variable( space)), data( zone 2))))","Amend Figure 5.4 Earthquake zones, so that the lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2.",MediumData
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2.0.3,The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"if( or( and( expression( function( within), atom( relation( location), variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))), expression( function( is), atom( variable( zone)), data( lowest))), and( expression( function( within), atom( variable( space)), data( selwyn district council)), expression( function( is), atom( variable( space)), data( zone 1))))), then( and( obligation( expression( function( within), atom( variable( zone)), data( zone 2))), obligation( expression( function( is), atom( variable( space)), data( zone 2)))))","Amend Figure 5.4 Earthquake zones, so that the lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.",MediumData
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2A.0.1,3.0 Timber 3.1.2A NZS 3604 Clause 7.4.1.3 Delete Subclause 7.4.1.3 (c).,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.4.1.3.c)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.2A NZS 3604 Clause 7.4.1.3 Delete Subclause 7.4.1.3 (c).,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2B.0.1,"3.0 Timber 3.1.2B NZS 3604 Figure 7.10(b) On the plan view replace the text ""2/M12 x 250 mm coach screws at 140 crs"" with ""2/M12 x 240 mm coach screws at 140 crs vertically."" On the plan view replace ""2/M12 at 400 crs"" twice with ""2 M12 bolts at 140crs vertically to capture end joist laminations and blocking, and boundary joist laminations and blocking, at post centrelines.""","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.10.b)), expression( function( has), atom( variable( x0)), data( plan view)))), then( and( obligation( expression( function( has), atom( variable( plan view)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( equal), atom( relation( old text), variable( modification)), data( '2/m12 x0 250 mm coach screws at 140 crs'))), obligation( expression( function( equal), atom( relation( new text), variable( modification)), data( '2/m12 x0 240 mm coach screws at 140 crs vertically.')))))","3.1.2B NZS 3604 Figure 7.10(b) On the plan view replace the text ""2/M12 x 250 mm coach screws at 140 crs"" with ""2/M12 x 240 mm coach screws at 140 crs vertically."" On the plan view replace ""2/M12 at 400 crs"" twice with ""2 M12 bolts at 140crs vertically to capture end joist laminations and blocking, and boundary joist laminations and blocking, at post centrelines.""",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2B.0.2,"3.0 Timber; On the plan view replace ""2/M12 at 400 crs"" twice with ""2 M12 bolts at 140crs vertically to capture end joist laminations and blocking, and boundary joist laminations and blocking, at post centrelines.""","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.10.b)), expression( function( has), atom( variable( x0)), data( plan view)))), then( and( obligation( expression( function( has), atom( variable( plan view)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace all))), obligation( expression( function( equal), atom( relation( old text), variable( modification)), data( '2/m12 at 400 crs'))), obligation( expression( function( equal), atom( relation( new text), variable( modification)), data( '2 m12 bolts at 140crs vertically to capture end joist laminations and blocking, and boundary joist laminations and blocking, at post centrelines.')))))","On the plan view replace ""2/M12 at 400 crs"" twice with ""2 M12 bolts at 140crs vertically to capture end joist laminations and blocking, and boundary joist laminations and blocking, at post centrelines.""",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2C.0.1,"3.0 Timber 3.1.2C NZS 3604 Figure 7.10(c) On the plan view insert the text ""At each strap location (at joist ends and nogging), 2/M12 x 240 mm long coach screws are required.""","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.10.c)), expression( function( has), atom( variable( x0)), data( plan view)))), then( and( obligation( expression( function( has), atom( variable( plan view)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( insert))), obligation( expression( function( equal), atom( relation( text), variable( modification)), data( 'at each strap location ( at joist ends and nogging), 2/m12 x0 240 mm long coach screws are required.')))))","3.1.2C NZS 3604 Figure 7.10(c ) On the plan view insert the text ""At each strap location (at joist ends and nogging), 2/M12 x 240 mm long coach screws are required."" On the plan view, replace the text "" 2/M12 x 250 mm coach screws at 140 crs vertically"" with "" 2/M12 x 200mm coach screws at 140 crs vertically.""",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2C.0.2,"3.0 Timber 3.1.2C NZS 3604 Figure 7.10(c) On the plan view, replace the text "" 2/M12 x 250 mm coach screws at 140 crs vertically"" with "" 2/M12 x 200mm coach screws at 140 crs vertically.""","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.10.c)), expression( function( has), atom( variable( x0)), data( plan view)))), then( and( obligation( expression( function( has), atom( variable( plan view)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( equal), atom( relation( old text), variable( plan view)), data( '2/m12 x0 250 mm coach screws at 140 crs vertically'))), obligation( expression( function( equal), atom( relation( new text), variable( plan view)), data( '2/m12 x0 200mm coach screws at 140 crs vertically.')))))","3.1.2C NZS 3604 Figure 7.10(c ) On the plan view, replace the text "" 2/M12 x 250 mm coach screws at 140 crs vertically"" with "" 2/M12 x 200mm coach screws at 140 crs vertically.""",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2C.0.3,"3.0 Timber 3.1.2C NZS 3604 Figure 7.10(c ) On the section view, replace the text ""M12 x 200 mm coach screws at 400 crs vertically"" with M12 x 240 mm coach screws at 140 crs vertically.","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.10.c)), expression( function( has), atom( variable( x0)), data( section view)), expression( function( has), atom( variable( section view)), data( modification)))), then( and( obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( equal), atom( relation( old text), variable( section view)), data( 'm12 x0 200 mm coach screws at 400 crs vertically'))), obligation( expression( function( equal), atom( relation( new text), variable( section view)), data( 'm12 x0 240 mm coach screws at 140 crs vertically.')))))","3.1.2C NZS 3604 Figure 7.10(c ) On the section view, replace the text ""M12 x 200 mm coach screws at 400 crs vertically"" with M12 x 240 mm coach screws at 140 crs vertically.",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.3.0.1,3.0 Timber 3.1.3 NZS 3604 Clause 7.5.2.3 Delete: Clause 7.5.2.3 Replace with: Rule 3.1.3.0.2 and 3.1.3.0.3,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.5.2.3)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( content), variable( x0)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.3.0.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.3.0.3)))))",3.1.3 NZS 3604 Clause 7.5.2.3 Delete: Clause 7.5.2.3 Replace with:,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.3.0.2,"3.0 Timber; The combined foundation and edge details shall be constructed as shown in Figures 7.13(B), 7.14(B) or (C)","if( expression( function( is), atom( relation( material), variable( construction)), data( timber))), then( and( or( obligation( expression( function( as per), atom( relation( foundation), variable( construction)), data( nzbc b1as1 f7.13.b))), obligation( expression( function( as per), atom( relation( foundation), variable( construction)), data( nzbc b1as1 f7.14.b))), obligation( expression( function( as per), atom( relation( foundation), variable( construction)), data( nzbc b1as1 f7.14.c)))), or( obligation( expression( function( as per), atom( relation( edge), variable( construction)), data( nzbc b1as1 f7.13.b))), obligation( expression( function( as per), atom( relation( edge), variable( construction)), data( nzbc b1as1 f7.14.b))), obligation( expression( function( as per), atom( relation( edge), variable( construction)), data( nzbc b1as1 f7.14.c))))))","Replace with: ""Clause 7.5.2.3 The combined foundation and edge details shall be constructed as shown in Figures 7.13(B), 7.14(B) or (C)","AddedTacit
TACIT-SPLIT-AT-SEMI-COLON"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.3.0.3,The combined foundation and edge details shall be constructed as shown in Figures 7.15(B) and 7.16(B) or (C) for foundations supporting a masonry veneer.,"if( expression( function( is), atom( variable( masonry veneer)), data( true))), then( and( or( obligation( expression( function( as per), atom( relation( foundation), variable( masonry veneer)), data( nzbc b1as1 f7.15.b))), obligation( expression( function( as per), atom( relation( foundation), variable( masonry veneer)), data( nzbc b1as1 f7.16.b))), obligation( expression( function( as per), atom( relation( foundation), variable( masonry veneer)), data( nzbc b1as1 f7.16.c)))), or( obligation( expression( function( as per), atom( relation( edge), variable( masonry veneer)), data( nzbc b1as1 f7.15.b))), obligation( expression( function( as per), atom( relation( edge), variable( masonry veneer)), data( nzbc b1as1 f7.16.b))), obligation( expression( function( as per), atom( relation( edge), variable( masonry veneer)), data( nzbc b1as1 f7.16.c))))))",(and Figures 7.15(B) and 7.16(B) or (C) for foundations supporting a masonry veneer).,
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.4.0.1,3.0 Timber 3.1.4 NZS 3604 Figure 7.13 Delete: Figure 7.13(A) – Foundation edge details – In situ concrete – Dimensions & reinforcing for single storey.,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.13.a)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.4 NZS 3604 Figure 7.13 Delete: Figure 7.13(A) – Foundation edge details – In situ concrete – Dimensions & reinforcing for single storey.,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.4.0.2,"3.0 Timber; Amend title of Figure 7.13(B) to ""Dimensions & reinforcing for 1 or 2 storeys"".","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.13.b)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( variable( modification)), data( amend))), obligation( expression( function( is), atom( relation( location), variable( modification)), data( title))), or( obligation( expression( function( is), atom( relation( text), variable( modification)), data( 'dimensions and reinforcing for 1))), obligation( expression( function( is), atom( relation( text), variable( modification)), data( 2 storeys'))))))","Amend title of Figure 7.13(B) to ""Dimensions & reinforcing for 1 or 2 storeys"".",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.5.0.1,3.0 Timber 3.1.5 NZS 3604 Figure 7.14 Delete: Figure 7.14(A) – Foundation edge details – Concrete masonry – Single storey,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.14.a)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.5 NZS 3604 Figure 7.14 Delete: Figure 7.14(A) – Foundation edge details – Concrete masonry – Single storey,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.5.0.2,"3.0 Timber; Amend title of Figure 7.14(B) to ""1 or 2 storeys"", and add a note: Rule 3.1.5.0.3","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.14.b)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( amend))), obligation( expression( function( is), atom( relation( location), variable( modification)), data( title))), or( obligation( expression( function( is), atom( relation( text), variable( modification)), data( '1))), obligation( expression( function( is), atom( relation( text), variable( modification)), data( 2 storeys')))), obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( note))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.5.0.3)))))","Amend title of Figure 7.14(B) to ""1 or 2 storeys"", and add a note:",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.5.0.3,"for a single storey foundation, 15 Series masonry may be used and the minimum footing width may be 190 mm","if( expression( function( is), atom( relation( height), variable( foundation)), data( 1 storey))), then( and( permission( expression( function( is), atom( relation( material), variable( foundation)), data( masonry))), expression( function( is), atom( relation( type), variable( masonry)), data( 15 series)), permission( expression( function( equal), expression( function( min), atom( relation( width), variable( footing))), data( baseunit( prefix( milli), kind( metre)), value( 190.0))))))","for a single storey foundation, 15 Series masonry may be used and the minimum footing width may be 190 mm",DomainKnowledge
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.6.0.1,3.0 Timber 3.1.6 NZS 3604 Figure 7.15 Delete: Figure 7.15(A) – Masonry veneer foundation edge details – Dimensions and reinforcement for single storeys.,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.15.a)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.6 NZS 3604 Figure 7.15 Delete: Figure 7.15(A) – Masonry veneer foundation edge details – Dimensions and reinforcement for single storeys.,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.7.0.1,3.0 Timber 3.1.7 NZS 3604 Figure 7.16 Delete: Figure 7.16 (A) – Masonry veneer foundation edge details – Concrete masonry – Single storey.,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.16.a)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.7 NZS 3604 Figure 7.16 Delete: Figure 7.16 (A) – Masonry veneer foundation edge details – Concrete masonry – Single storey.,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.8.0.1,3.0 Timber 3.1.8 NZS 3604 Clause 7.5.8.1 Delete: Clause 7.5.8.1 Replace with: Rule 3.1.8.0.2,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.5.8.1)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.8.0.2)))))"," 3.1.8 NZS 3604 Clause 7.5.8.1 Delete: Clause 7.5.8.1 Replace with: ""Clause 7.5.8.1 All slab-on-ground floors shall be reinforced concrete in accordance with Clauses 7.5.8.3, 7.5.8.4 and 7.5.8.6.4. All reinforcing steel, including welded mesh, shall be Ductility Class E in accordance with NZS 4671.""",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.8.0.2,"Clause 7.5.8.1 All slab-on-ground floors shall be reinforced concrete in accordance with Clauses 7.5.8.3, 7.5.8.4 and 7.5.8.6.4. All reinforcing steel, including welded mesh, shall be Ductility Class E in accordance with NZS 4671.","if( and( expression( function( is), atom( relation( construction), variable( floor)), data( slab on ground)), expression( function( has), atom( variable( slab on ground)), data( reinforcing)), expression( function( is), atom( relation( material), variable( reinforcing)), data( concrete)), expression( function( has), atom( variable( reinforcing)), data( reinforced steel)), expression( function( include), atom( variable( reinforced steel)), data( welded mesh)))), then( and( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzbc b1as1 7.5.8.3))), obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzbc b1as1 7.5.8.4))), obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzbc b1as1 7.5.8.6.4))), obligation( expression( function( is), atom( relation( type), variable( reinforced steel)), data( ductlity class e))), obligation( expression( function( comply with), atom( variable( reinforced steel)), data( nzs 4671)))))","Clause 7.5.8.1 All slab-on-ground floors shall be reinforced concrete in accordance with Clauses 7.5.8.3, 7.5.8.4 and 7.5.8.6.4. All reinforcing steel, including welded mesh, shall be Ductility Class E in accordance with NZS 4671.",MediumData
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.8.0.3,"Where Grade 500E welded steel mesh is specified, it shall meet the requirements of Paragraph 14.0 in B1/VM1.","if( and( expression( function( is), atom( relation( material), variable( mesh sheet)), data( steel)), expression( function( is), atom( relation( type), variable( mesh sheet)), data( welded grade500e)))), then( obligation( expression( function( comply with), atom( variable( mesh sheet)), data( nzbc b1vm1 14))))","Where Grade 500E welded steel mesh is specified, it shall meet the requirements of Paragraph 14.0 in B1/VM1.",MediumData
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.9.0.1,3.0 Timber 3.1.9 NZS 3604 Clause 7.5.8.3 Delete: Clause 7.5.8.3 Replace with: Rule 3.1.9.0.2,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.5.8.3)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( content), variable( x0)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.9.0.2)))))",3.1.9 NZS 3604 Clause 7.5.8.3 Delete: Clause 7.5.8.3 Replace with:,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.9.0.2,"Clause 7.5.8.3 All slab-on-ground reinforcing shall extend to within 75 mm of the outside edge of the slab (including the foundation wall) and shall consist of a minimum 2.27 kg/m2 welded reinforcing mesh sheets (1.14 kg/m2 in each direction), which shall be lapped at sheet joints such that the overlap measurement between the outmost cross wires of each fabric sheet is equal to the greater of one of the following: - the spacing of cross wires plus 50 mm, - 150 mm or - the manufacturer's requirements. Slabs shall have a maximum dimension of 24 m between free joints.","if( and( expression( function( is), atom( relation( material), variable( slab)), data( concrete)), expression( function( is), atom( relation( construction), variable( slab)), data( slab on ground)), expression( function( has), atom( variable( slab on ground)), data( reinforcing)), expression( function( has), atom( variable( slab)), data( outside edge)))), then( and( obligation( expression( function( within), atom( relation( extension), variable( reinforcing)), data( outside edge))), obligation( expression( function( less than equal), atom( variable( extension)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( is), atom( relation( type), variable( reinforcing)), data( mesh sheet))), obligation( expression( function( is), atom( relation( type), variable( mesh sheet)), data( welded))), obligation( expression( function( greater than equal), atom( relation( weight), variable( mesh sheet)), data( derivedunit( baseunit( kind( gram), prefix( kilo)), operator( name( division)), baseunit( exponent( 2.0), kind( metre))), value( 2.27)))), obligation( expression( function( greater than equal), atom( relation( weight per direction), variable( mesh sheet)), data( derivedunit( baseunit( kind( gram), prefix( kilo)), operator( name( division)), baseunit( exponent( 2.0), kind( metre))), value( 1.14)))), obligation( expression( function( has), atom( relation( joint), variable( mesh sheet)), data( overlap))), obligation( expression( function( in between), atom( relation( measurement), variable( overlap)), data( x0))), obligation( expression( function( is), atom( relation( location), variable( x0)), data( outermost))), obligation( expression( function( part of), atom( variable( x0)), data( mesh sheet))), expression( function( define), atom( relation( spacing), variable( x0)), data( a)), expression( function( define), atom( relation( dimension), variable( manufacturer requirement)), data( b)), expression( function( define), atom( relation( collection), variable( max values)), data( new)), expression( function( include), atom( variable( a + 50 mm)), data( max values)), expression( function( include), atom( variable( 150 mm)), data( max values)), expression( function( include), atom( variable( b)), data( max values)), obligation( expression( function( equal), expression( function( max), atom( variable( max values))), data( measurement))), obligation( expression( function( in between), atom( relation( dimension), variable( slab)), data( free joints))), obligation( expression( function( equal), atom( relation( dimension), variable( slab)), data( baseunit( kind( metre)), value( 24.0))))))","3.1.9 NZS 3604 Clause 7.5.8.3 Replace with: ""Clause 7.5.8.3 All slab-on-ground reinforcing shall extend to within 75 mm of the outside edge of the slab (including the foundation wall) and shall consist of a minimum 2.27 kg/m2 welded reinforcing mesh sheets (1.14 kg/m2 in each direction), which shall be lapped at sheet joints such that the overlap measurement between the outmost cross wires of each fabric sheet is equal to the greater of one of the following: - the spacing of cross wires plus 50 mm, - 150 mm or - the manufacturer's requirements. Slabs shall have a maximum dimension of 24 m between free joints.""","DomainKnowledge
NearlyDuplicate
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.10.0.1,3.0 Timber 3.1.10 NZS 3604 Clause 7.5.8.6.2 Delete: Clause 7.5.8.6.2,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.5.8.6.2)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.0 Timber 3.1.10 NZS 3604 Clause 7.5.8.6.2 Delete: Clause 7.5.8.6.2,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.11.0.1,"3.0 Timber 3.1.11 NZS 3604 Figure 7.18 Delete title: Figure 7.18 – Irregular slab (plan view) (see 7.5.8.6.2) Replace with: ""Figure 7.18 – Irregular slab (plan view) (see 7.5.8.6.4)"".","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f7.18)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( location), variable( modification)), data( title))), obligation( expression( function( equal), atom( relation( old text), variable( modification)), data( 'figure 7.18 – irregular slab ( plan view) ( see 7.5.8.6.2)'))), obligation( expression( function( equal), atom( relation( new text), variable( modification)), data( 'figure 7.18 - irregular slab ( plan view) ( see 7.5.8.6.4)')))))","3.1.11 NZS 3604 Figure 7.18 Delete title: Figure 7.18 – Irregular slab (plan view) (see 7.5.8.6.2) Replace with: ""Figure 7.18 – Irregular slab (plan view) (see 7.5.8.6.4)"".",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.12.0.1,3.0 Timber 3.1.12 NZS 3604 Clause 7.5.8.6.3 Delete: Clause 7.5.8.6.3.,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 7.5.8.6.3)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( delete)))))",3.1.12 NZS 3604 Clause 7.5.8.6.3 Delete: Clause 7.5.8.6.3.,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.13.0.1,"3.0 Timber 3.1.13 NZS 3604 New Clause Add new: Title: ""Clause 7.5.8.8 Free Joints."" Rule 3.1.13.0.2 ","if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( add clausage))), obligation( expression( function( equal), atom( relation( title), variable( modification)), data( 'clausage 7.5.8.8 free joints'))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.13.0.2)))))","3.1.13 NZS 3604 New Clause Add new: ""Clause 7.5.8.8 Free Joints.",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.13.0.2,"At free joints, slab reinforcement shall be terminated and there shall be no bonding between vertical concrete faces (prevented by using building paper or a bituminous coating). ","if( and( expression( function( has), atom( variable( slab)), data( joint)), expression( function( is), atom( relation( type), variable( joint)), data( free)), expression( function( has), atom( variable( slab)), data( reinforcement)), expression( function( has), atom( variable( reinforcement)), data( vertical face)), expression( function( is), atom( relation( material), variable( vertical face)), data( concrete)))), then( and( obligation( expression( function( at), atom( relation( termination), variable( reinforcement)), data( joint))), obligation( not( expression( function( has), atom( variable( vertical face)), data( bonding)))), or( expression( function( by), atom( relation( prevention), variable( bonding)), data( building paper)), expression( function( by), atom( relation( prevention), variable( bonding)), data( bituminous coating)))))","At free joints, slab reinforcement shall be terminated and there shall be no bonding between vertical concrete faces (prevented by using building paper or a bituminous coating).",MediumData
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.0.1,Structure Design 4.0 Earth Buildings 4.1 NZS 4299 subject to the following modifications:,"if( expression( function( is), atom( relation( material), variable( construction)), data( earth))), then( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 4299))))",4.1 NZS 4299 subject to the following modifications:,Tacit
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.1.0.1,"4.0 Earth Buildings 4.1.1 NZS 4299, Paragraph 1.3 Definitions Add (in the definition for Good Ground): ""(liquefaction, lateral spread – for the Canterbury earthquake region only)"" after ""subsidence"" in subparagraph (c).","if( and( expression( function( is), atom( relation( material), variable( construction)), data( earth)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4299 1.3.goodground.c)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( add))), obligation( expression( function( after), atom( relation( location), variable( modification)), data( 'subsidence'))), obligation( expression( function( equal), atom( relation( text), variable( modification)), data( '( liquefaction, lateral spread - for the canterbury earthquake region only)')))))","4.1.1 NZS 4299, Paragraph 1.3 Definitions Add (in the definition for Good Ground): ""(liquefaction, lateral spread – for the Canterbury earthquake region only)"" after ""subsidence"" in subparagraph (c).",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.2.0.1,"4.0 Earth Buildings 4.1.2 NZS 4299, Clause 2.3 Earthquake zones Add to the end of Clause 2.3: Rule 4.1.2.0.2","if( and( expression( function( is), atom( relation( material), variable( construction)), data( earth)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4299 2.3)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( location), variable( modification)), data( end))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.1.2.0.2)))))","4.1.2 NZS 4299, Clause 2.3 Earthquake zones Add to the end of Clause 2.3: ",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.2.0.2,The earthquake zone factor > 0.6 shall apply to the Canterbury earthquake region.,"if( expression( function( is), atom( variable( canterbury earth quake region)), data( true))), then( and( obligation( expression( function( has), atom( variable( canterbury earth quake region)), data( earth quake zone factor))), obligation( expression( function( greater than), atom( variable( earth quake zone factor)), data( 0.6)))))",The earthquake zone factor > 0.6 shall apply to the Canterbury earthquake region.,SplitableEntities
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.3.0.1,"4.0 Earth Buildings 4.1.3 NZS 4299, Figure 2.1 Earthquake zones On the map shown in NZS 4299 Figure 2.1 Earthquake zones, the Canterbury earthquake region shall be interpreted as having an earthquake zone factor of > 0.6.","if( and( expression( function( is), atom( relation( material), variable( construction)), data( earth)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4299 f2.1)))), then( and( obligation( expression( function( has), atom( variable( x0)), data( canterbury earth quake region))), obligation( expression( function( has), atom( variable( canterbury earth quake region)), data( earth quake zone factor))), obligation( expression( function( greater than), atom( variable( earth quake zone factor)), data( 0.6)))))","4.1.3 NZS 4299, Figure 2.1 Earthquake zones On the map shown in NZS 4299 Figure 2.1 Earthquake zones, the Canterbury earthquake region shall be interpreted as having an earthquake zone factor of > 0.6.",SplitableEntities
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.4.0.1,"4.0 Earth Buildings 4.1.4 NZS 4299, Clause 4.8.6. Delete: Clause 4.8.6 Replace with: Rule 4.1.4.0.2","if( and( expression( function( is), atom( relation( material), variable( construction)), data( earth)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4299 4.8.6)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), expression( function( is), atom( relation( type), variable( modification)), data( replace)), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), expression( function( equal), atom( relation( key), variable( rule)), data( 4.1.4.0.2))))","4.1.4 NZS 4299, Clause 4.8.6. Delete: Clause 4.8.6 Replace with:",ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r4.1.4.0.2,Clause 4.8.6 The thickness and reinforcement and detail of concrete slabs shall comply with the requirements of NZS 3604 as modified in B1/AS1 Paragraph 3.1.,"if( expression( function( is), atom( relation( material), variable( slab)), data( concrete))), then( and( obligation( expression( function( comply with), atom( relation( thickness), variable( slab)), data( nzs 3604))), obligation( expression( function( comply with), atom( relation( reinforcement), variable( slab)), data( nzs 3604))), obligation( expression( function( comply with), atom( relation( detail), variable( slab)), data( nzs 3604))), obligation( expression( function( has), atom( variable( nzs 3604)), data( modification))), obligation( expression( function( by), atom( variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1)))))",Clause 4.8.6 The thickness and reinforcement and detail of concrete slabs shall comply with the requirements of NZS 3604 as modified in B1/AS1 Paragraph 3.1.,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r5.1.0.1,Structure Design 5.0 Stucco 5.1 NZS 4251,"if( expression( function( is), atom( relation( material), variable( construction)), data( stucco))), then( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 4251)))",5.0 Stucco 5.1 NZS 4251,Tacit
lrml/NZ_NZBC-B1AS1#0.17.lrml,r6.1.0.1,Structure Design 6.0 Drains 6.1 AS/NZS 2566.1 6.2 AS/NZS 2566.2 6.3 AS/NZS 2032 6.4 AS/NZS 2033,"if( expression( function( is), atom( variable( structure)), data( drain))), then( and( expression( function( comply with), atom( relation( design), variable( structure)), data( asnzs 2566.1)), expression( function( comply with), atom( relation( design), variable( structure)), data( asnzs 2566.2)), expression( function( comply with), atom( relation( design), variable( structure)), data( asnzs 2032)), expression( function( comply with), atom( relation( design), variable( structure)), data( asnzs 2033))))",6.0 Drains 6.1 AS/NZS 2566.1 6.2 AS/NZS 2566.2 6.3 AS/NZS 2032 6.4 AS/NZS 2033,"ComplexNumbering
DomainKnowledge"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.1,Structure Design 7.0 Glazing 7.3 NZS 4223.3 7.3.1 Clause 22.4.3 modified; Delete clause 22.4.3; Replace with: Rules 7.3.1.0.2 and 7.3.1.0.3 and 7.3.1.0.4 and 7.3.1.0.5 and 7.3.1.0.6,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 4223.3 22.4.3)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( replace))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.5))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.6)))))",7.3.1 Clause 22.4.3 modified Delete clause 22.4.3 Replace with:,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.2a,Structure Design 7.0 Glazing 22.4.3 Structural glass barriers; Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 14 - Structural balustrade – cantilevered glass;,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), expression( function( is), atom( relation( type), variable( structure)), data( ballustrade)), expression( function( is), atom( relation( design), variable( ballustrade)), data( cantilevered glass)))), then( and( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t14))))",22.4.3 Structural glass barriers Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 14 - Structural balustrade – cantilevered glass;,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.2b,Structure Design 7.0 Glazing 22.4.3 Structural glass barriers; Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 15 - Structural balustrade – two-edge point fixed;,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), expression( function( is), atom( relation( type), variable( structure)), data( ballustrade)), expression( function( is), atom( relation( design), variable( ballustrade)), data( two edge point fixed)))), then( and( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t15)))))",22.4.3 Structural glass barriers Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 15 - Structural balustrade – two-edge point fixed;,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.2c,Structure Design 7.0 Glazing 22.4.3 Structural glass barriers; Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), expression( function( is), atom( relation( type), variable( structure)), data( ballustrade)), expression( function( is), atom( relation( design), variable( ballustrade)), data( two edge support)))), then( and( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t16)))))",22.4.3 Structural glass barriers Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.2d,Structure Design 7.0 Glazing 22.4.3 Structural glass barriers; Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 17 - Structural balustrade – three-edge support.,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), expression( function( is), atom( relation( type), variable( structure)), data( ballustrade)), expression( function( is), atom( relation( design), variable( ballustrade)), data( three edge support)))), then( and( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t17)))))",22.4.3 Structural glass barriers Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 17 - Structural balustrade – three-edge support.,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.3,Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"if( and( expression( function( in), atom( relation( application), variable( glazing)), data( structure)), or( not( expression( function( is), atom( relation( design), variable( structure)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( structure)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( structure)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( structure)), data( three edge support)))))), then( obligation( expression( function( has), atom( relation( system), variable( glazing)), data( specific design))))",22.4.3 Structural glass barriers Structural glass barriers use glass as a structural element and are normally classified by the following types. Glass design for these types shall comply with the following tables (see note 1): Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support.,"Complex
LearnToIgnore
NotEncodedParts
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.4,Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails,"if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( relation( purpose), variable( structure)), data( barrier)), expression( function( is), atom( relation( purpose), variable( barrier)), data( safeguard)), expression( function( for), atom( variable( safeguard)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( and( obligation( expression( function( has), atom( variable( structure)), data( rail))), obligation( expression( function( is), atom( variable( rail)), data( interlinked)))))",All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails,Detailed
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.5,"Rule 7.3.1.0.4 for rails, which in the event a glass pane breaks, spans the broken pane at the required barrier height and, i) resists Line and Concentrated design loads (SLS) specified in Tables 14 to 17, and ii) does not deflect more than 100 mm, in any direction, under the design loads.","if( and( expression( function( comply with), atom( variable( rail)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 7.3.1.0.4)), expression( function( is), atom( relation( material), variable( pane)), data( glass)), expression( function( is), atom( variable( pane)), data( broken)), expression( function( define), atom( relation( height), variable( barrier)), data( x0)))), then( and( obligation( expression( function( by), atom( relation( span), variable( pane)), data( rail))), obligation( expression( function( equal), atom( relation( span), variable( pane)), data( x0))), obligation( expression( function( has), atom( variable( rail)), data( resistance))), obligation( expression( function( is), atom( relation( resistance), variable( rail)), data( line design load))), obligation( expression( function( is), atom( relation( resistance), variable( rail)), data( concentrated design load))), obligation( expression( function( as per), atom( variable( line design load)), data( table))), obligation( expression( function( as per), atom( variable( concentrated design load)), data( table))), and( obligation( expression( function( equal), atom( relation( key), variable( table)), data( t14))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t15))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t16))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t17)))), obligation( expression( function( has), atom( variable( rail)), data( deflection))), obligation( expression( function( less than equal), atom( relation( deflection), variable( rail)), data( baseunit( prefix( milli), kind( metre)), value( 100.0)))), obligation( expression( function( is), atom( relation( measurement), variable( deflection)), data( any direction))), obligation( expression( function( is), atom( relation( reason), variable( deflection)), data( design load)))))","All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails, which in the event a glass pane breaks, spans the broken pane at the required barrier height and, i) resists Line and Concentrated design loads (SLS) specified in Tables 14 to 17, and ii) does not deflect more than 100 mm, in any direction, under the design loads.","Define
LrmlReference
TACIT-IGNORE
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.6.a.1,"Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a top capping, corner brackets or a proprietary system and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2)","if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( relation( purpose), variable( structure)), data( safety barrier)), expression( function( is), atom( relation( class), variable( glass)), data( safety)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( has), atom( variable( glass)), data( top capping)), expression( function( has), atom( variable( glass)), data( corner bracket)), expression( function( has), atom( variable( glass)), data( proprietary protection system))), expression( function( is), atom( variable( pane)), data( fractured)), expression( function( has), atom( variable( pane)), data( resistance)), expression( function( greater than equal), atom( relation( strength), variable( resistance)), data( baseunit( kind( newton), prefix( kilo)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( kind( metre), prefix( milli)), value( 250.0))))), then( permission( not( expression( function( for), atom( variable( interlinked rail)), data( structure)))))","Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a top capping, corner brackets or a proprietary system and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2)","Complex
OrderDifficulties
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.6.b.1,"Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2)","if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( relation( purpose), variable( structure)), data( safety barrier)), or( expression( function( is), atom( variable( structure)), data( heat strengthened)), expression( function( is), atom( variable( structure)), data( toughened))), expression( function( is), atom( variable( structure)), data( laminated)), expression( function( has), atom( variable( structure)), data( edge)), or( expression( function( equal), expression( function( count), atom( variable( edge))), data( 2)), expression( function( equal), expression( function( count), atom( variable( edge))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( variable( pane)), data( fractured)), expression( function( has), atom( variable( pane)), data( resistance)), expression( function( greater than equal), atom( relation( strength), variable( resistance)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( structure)), data( baseunit( kind( metre), prefix( milli)), value( 250.0))))), then( permission( not( expression( function( for), atom( variable( interlinked rail)), data( structure)))))","Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2)","Complex
OrderDifficulties
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.6.c.1,"Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a stiff interlayer and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2).","if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), or( expression( function( is), atom( variable( structure)), data( heat strengthened)), expression( function( is), atom( variable( structure)), data( toughened))), expression( function( is), atom( variable( structure)), data( laminated)), expression( function( has), atom( variable( structure)), data( stiff interlayer)), expression( function( is), atom( variable( pane)), data( fractured)), expression( function( has), atom( variable( pane)), data( resistance)), expression( function( greater than equal), atom( relation( strength), variable( resistance)), data( baseunit( kind( newton), prefix( kilo)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( structure)), data( baseunit( kind( metre), prefix( milli)), value( 250.0))))), then( permission( not( expression( function( for), atom( variable( interlinked rail)), data( structure)))))","Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a stiff interlayer and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2).","Complex
OrderDifficulties
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.7,"Physical testing of glass barriers must include all components of the barrier system, including all structural connections. Loads and deflections must be applied and measured horizontally, at midspan, at the required barrier height. The concentrated load shall be applied over an area of 100 mm x 100 mm and for at least one minute.","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( glass)), expression( function( has), atom( relation( system), variable( barrier)), data( component)))), then( and( obligation( expression( function( is), atom( variable( physical testing)), data( true))), obligation( expression( function( include), atom( relation( physical testing), variable( barrier)), data( component))), obligation( expression( function( include), atom( variable( component)), data( structural connection))), obligation( expression( function( is), atom( relation( type), variable( physical testing)), data( load))), obligation( expression( function( is), atom( relation( type), variable( physical testing)), data( deflection))), and( obligation( expression( function( is), atom( relation( method), variable( physical testing)), data( application))), obligation( expression( function( is), atom( relation( method), variable( physical testing)), data( measurement)))), and( obligation( expression( function( is), atom( relation( location), variable( physical testing)), data( horizontal))), obligation( expression( function( is), atom( relation( location), variable( physical testing)), data( midspan))), obligation( expression( function( is), atom( relation( location), variable( physical testing)), data( required barrier height)))), obligation( expression( function( is), atom( relation( application area), variable( load)), data( 100 mm x 100 mm))), obligation( expression( function( greater than equal), atom( relation( application duration), variable( load)), data( 1 minute)))))","Physical testing of glass barriers must include all components of the barrier system, including all structural connections. Loads and deflections must be applied and measured horizontally, at midspan, at the required barrier height. The concentrated load shall be applied over an area of 100 mm x 100 mm and for at least one minute.","Complex
MediumData"
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.7.a.1,"Structure Design; The design of structural connections, fasteners and mounting hardware, that are part of the glass barrier, is outside the scope of this Standard and must be specifically designed.","if( and( expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( has), atom( variable( structure)), data( glass)), or( expression( function( include), atom( variable( structure)), data( connection)), expression( function( include), atom( variable( structure)), data( fastener)), expression( function( include), atom( variable( structure)), data( mounting hardware))))), then( and( prohibition( expression( function( comply with), atom( relation( design), variable( connection)), data( nzbc b1as1))), prohibition( expression( function( comply with), atom( relation( design), variable( fastener)), data( nzbc b1as1))), prohibition( expression( function( comply with), atom( relation( design), variable( mounting hardware)), data( nzbc b1as1))), obligation( expression( function( is), atom( relation( design), variable( connection)), data( specific))), obligation( expression( function( is), atom( relation( design), variable( fastener)), data( specific))), obligation( expression( function( is), atom( relation( design), variable( mounting hardware)), data( specific)))))","NOTE – (1) The design of structural connections, fasteners and mounting hardware, that are part of the glass barrier, is outside the scope of this Standard and must be specifically designed.",
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.7.b.1,"22.4.3 Structural glass barriers; NOTE - (2) Laminated glass is susceptible to minor edge delamination, depending on the interlayer type and laminating process. Normally this will not affect the mechanical properties but can be noticeable on exposed edges.","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( glass)), expression( function( is), atom( variable( glass)), data( laminated)), expression( function( has), atom( variable( barrier)), data( properties)), expression( function( is), atom( relation( type), variable( properties)), data( mechanical)), expression( function( has), atom( variable( glass)), data( exposed edge)))), then( and( expression( function( has), atom( relation( edge), variable( glass)), data( susceptibility)), expression( function( is), atom( relation( type), variable( susceptibility)), data( delamination)), expression( function( is), atom( variable( delamination)), data( minor)), expression( function( is), atom( relation( dependency), variable( delamination)), data( interlayer)), expression( function( is), atom( relation( dependency), variable( delamination)), data( lamination process)), not( expression( function( on), atom( relation( effect), variable( delamination)), data( properties))), expression( function( is), atom( relation( delamination), variable( exposed edge)), data( noticeable))))","NOTE - (2) Laminated glass is susceptible to minor edge delamination, depending on the interlayer type and laminating process. Normally this will not affect the mechanical properties but can be noticeable on exposed edges.","Abstract
Tacit
OrderDifficulties
NoObligations
TACIT-SPLIT-AT-SEMI-COLON
Fact"
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.1.1.a,1.1.1 Accessible routes shall be provided to give direct access to the principal entrance to the building where practical,"if( and( expression( function( has), atom( variable( building)), data( entrance)), expression( function( is), atom( relation( type), variable( entrance)), data( principal)), expression( function( is), atom( variable( accessible route)), data( practical)))), then( obligation( expression( function( by), atom( relation( direct access), variable( entrance)), data( accessible route))))",1.1.1 Accessible routes shall be provided to give direct access to the principal entrance to the building where practical,
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.1.1.b,"If it is not practical, the alternative most direct practical route to the space served by the principal entrance shall be used.","if( and( expression( function( has), atom( variable( building)), data( entrance)), expression( function( is), atom( variable( entrance)), data( principal)), not( expression( function( is), atom( variable( accessible route)), data( practical))))), then( obligation( expression( function( by), atom( relation( alternative access), variable( entrance)), data( accessible route))))","If it is not practical, the alternative most direct practical route to the space served by the principal entrance shall be used.",Tacit
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.1.3,"1.1.3 Where accessible units of Community service buildings are provided, an accessible route shall connect all accessible units to reception areas, offices, shops, dining rooms, kitchens, laundries, ablution blocks, recreation rooms and any other communal facilities.","if( and( expression( function( is), atom( relation( usage type), variable( building)), data( community service)), expression( function( has), atom( variable( building)), data( accessible unit)), or( expression( function( is), atom( variable( service area)), data( reception)), expression( function( is), atom( variable( service area)), data( office)), expression( function( is), atom( variable( service area)), data( shop)), expression( function( is), atom( variable( service area)), data( dining room)), expression( function( is), atom( variable( service area)), data( kitchen)), expression( function( is), atom( variable( service area)), data( laundry)), expression( function( is), atom( variable( service area)), data( ablution block)), expression( function( is), atom( variable( service area)), data( recreation room))))), then( and( obligation( expression( function( connect), atom( variable( accessible route)), data( service area))), obligation( expression( function( connect), atom( variable( accessible route)), data( accessible unit)))))","1.1.3 Where accessible units of Community service buildings are provided, an accessible route shall connect all accessible units to reception areas, offices, shops, dining rooms, kitchens, laundries, ablution blocks, recreation rooms and any other communal facilities.",
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.1.4,1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"if( expression( function( has), atom( relation( occupant), variable( building)), data( disabilities))), then( and( obligation( expression( function( comply with), atom( relation( access), variable( building)), data( figure))), expression( function( equal), atom( relation( key), variable( figure)), data( f1.1))))",1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.1.5,1.1.5 Access routes which are part of an escape route shall also comply with NZBC C4.,"if( expression( function( part of), atom( variable( access route)), data( escape route))), then( obligation( expression( function( comply with), atom( variable( access route)), data( nzbc c4))))",1.1.5 Access routes which are part of an escape route shall also comply with NZBC C4.,
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.2,1.2.1 Slope in direction of travel; Acceptable slopes for different types of access routes are shown in Figure 2.,"if( expression( function( has), atom( variable( building)), data( access route))), then( and( obligation( expression( function( comply with), atom( relation( slope), variable( access route)), data( figure))), expression( function( equal), atom( relation( key), variable( figure)), data( f2.1))))",1.2.1 Slope in direction of travel Acceptable slopes for different types of access routes are shown in Figure 2.,
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.3.1,"1.3.1 Except in household units (risk group SH1) or where permitted by Paragraph 1.3.2, a single isolated step shall not be permitted.","if( not( expression( function( is), atom( relation( classified use), variable( building)), data( housing)))), then( prohibition( expression( function( is), atom( relation( is exist), variable( single isolated step)), data( true))))","1.3.1 Except in household units or where permitted by Paragraph 1.3.2, a single isolated step shall not be permitted but the change of level shall be constructed as a ramp complying with Paragraph 3.0.","Tacit
MissingInformation
LearnToIgnore
TACIT-REMOVE-BRACKETS
SplitableEntities
"
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.3.2,1.3.2 Threshold weather stops projecting no more than 20 mm above the threshold finished surface are acceptable.,"if( and( expression( function( has), atom( variable( access route)), data( single isolated step)), expression( function( is), atom( relation( purpose), variable( single isolated step)), data( threshold weather stop)))), then( and( permission( expression( function( has), atom( variable( access route)), data( single isolated step))), obligation( expression( function( less than equal), atom( relation( height), variable( single isolated step)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))))",1.3.2 Threshold weather stops projecting no more than 20 mm above the threshold finished surface are acceptable.,SplitableEntities
lrml/NZ_NZBC-D1AS1#2.6.lrml,r1.4,1.4.1 Access routes shall have height clearances complying with Table 1 and as shown in Figure 3.,"if( expression( function( has), atom( variable( building)), data( access route))), then( and( obligation( expression( function( comply with), atom( relation( height clearance), variable( access route)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t1.1)), expression( function( comply with), atom( relation( height clearance), variable( access route)), data( figure)), expression( function( equal), atom( relation( key), variable( figure)), data( f3.1))))",1.4.1 Access routes shall have height clearances complying with Table 1 and as shown in Figure 3.,Tacit
lrml/NZ_NZBC-D1AS1#2.6.lrml,r2.1.2.0.1,"2.1.2 For level access routes (including level accessible routes) expected to become wet with water in normal use, walking surfaces shall either: a) Have an SRV classification of not less than 39 from the wet pendulum test method of AS 4586 Appendix A using the Slider 96 rubber, or b) Use the materials listed in Table 2 as ‘acceptable wet slip’.","if( and( or( expression( function( is), atom( relation( activity), variable( space)), data( access route)), expression( function( is), atom( relation( activity), variable( space)), data( walking))), expression( function( is), atom( relation( type), variable( access route)), data( level)), expression( function( is), expression( function( risk of), atom( relation( floor), variable( space))), data( wet)))), then( or( obligation( expression( function( greater than equal), atom( relation( srv), variable( floor)), data( 39))), and( expression( function( comply with), atom( relation( surface type), variable( floor)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t2)), expression( function( is), atom( relation( column), variable( table)), data( acceptable wet slip resistance)))))","2.1.2 For level access routes (including level accessible routes) expected to become wet with water in normal use, walking surfaces shall either: in areas that are primarily used barefoot, such as around swimming pools and adjacent to communal showers, Classification 'B' from the ramp method of AS 4586 Appendix C gives an acceptable slip resistance for walking surfaces.","Tacit
Abstract"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.1.1.0.1,Attached garages that are integral with the weathertightness envelope of the building are included within the scope of this Acceptable Solution,"if( and( expression( function( has), atom( variable( building)), data( weathertightness envelope)), expression( function( part of), atom( variable( attached garage)), data( weathertightness envelope)))), then( permission( expression( function( comply with), atom( variable( attached garage)), data( nzbc e2as1))))",Attached garages that are integral with the weathertightness envelope of the building are included within the scope of this Acceptable Solution,SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.2.1.0.1,"Outbuildings, such as stand-alone garages and other structures that are unlined, are outside the scope of this Acceptable Solution.","if( and( expression( function( include), atom( variable( outbuilding)), data( stand alone garage)), expression( function( include), atom( variable( outbuilding)), data( unlined structure)))), then( prohibition( expression( function( comply with), atom( variable( outbuilding)), data( nzbc e2as1))))","Outbuildings, such as stand-alone garages and other structures that are unlined, are outside the scope of this Acceptable Solution.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.1.0.1,2.1 Weathertightness; Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7,"if( expression( function( is), atom( variable( cladding system)), data( true))), then( and( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.1))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.2))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.3))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.4))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.5))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.6))), obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.7)))))",2.1 Weathertightness Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7,"Tacit
ListReferences"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.3.0.1,3.3 Wall claddings; The following wall cladding systems are covered in this Acceptable Solution: a) Masonry veneer Paragraph 9.2 b) Stucco Paragraph 9.3 c) Timber weatherboards Paragraph 9.4 d) Fibre cement weatherboards Paragraph 9.5 e) Profiled metal wall claddings Paragraph 9.6 f) Fibre cement sheet Paragraph 9.7 g) Plywood sheet Paragraph 9.8 h) EIFS Paragraph 9.9.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), or( expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer)), expression( function( is), atom( relation( system), variable( cladding)), data( stucco)), expression( function( is), atom( relation( system), variable( cladding)), data( timber weatherboard)), expression( function( is), atom( relation( system), variable( cladding)), data( fibre cement weatherboard)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal wall cladding)), expression( function( is), atom( relation( system), variable( cladding)), data( fibre cement sheet)), expression( function( is), atom( relation( system), variable( cladding)), data( plywood sheet)), expression( function( is), atom( relation( system), variable( cladding)), data( eifs))))), then( obligation( expression( function( comply with), atom( relation( system), variable( cladding)), data( nzbc e2as1))))",3.3 Wall claddings The following wall cladding systems are covered in this Acceptable Solution: a) Masonry veneer Paragraph 9.2 b) Stucco Paragraph 9.3 c) Timber weatherboards Paragraph 9.4 d) Fibre cement weatherboards Paragraph 9.5 e) Profiled metal wall claddings Paragraph 9.6 f) Fibre cement sheet Paragraph 9.7 g) Plywood sheet Paragraph 9.8 h) EIFS Paragraph 9.9.,"SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.3.0.2,a) Masonry veneer b) Stucco c) Timber weatherboards d) Fibre cement weatherboards e) Profiled metal wall claddings f) Fibre cement sheet g) Plywood sheet h) EIFS. Other wall claddings are outside the scope of this Acceptable Solution.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), not( expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer))), not( expression( function( is), atom( relation( system), variable( cladding)), data( stucco))), not( expression( function( is), atom( relation( system), variable( cladding)), data( timber weatherboard))), not( expression( function( is), atom( relation( system), variable( cladding)), data( fibre cement weatherboard))), not( expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal wall cladding))), not( expression( function( is), atom( relation( system), variable( cladding)), data( fibre cement sheet))), not( expression( function( is), atom( relation( system), variable( cladding)), data( plywood sheet))), not( expression( function( is), atom( relation( system), variable( cladding)), data( eifs))))), then( prohibition( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))",Other wall claddings are outside the scope of this Acceptable Solution.,"DataOr
ImplicitReference
TACIT-IGNORE
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.4.1.1.0.0.a.1,3.4.1.1 Cladding options; a) Direct fixed claddings: i) Timber weatherboards – all types shown ii) Fibre cement weatherboards iii) Vertical profiled metal – corrugated and symmetrical trapezoidal only iv) Fibre cement sheet – not flush-finished v) Plywood sheet,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( has), atom( variable( cladding)), data( fixing)), or( expression( function( is), atom( relation( type), variable( cladding)), data( timber weatherboard)), expression( function( is), atom( relation( type), variable( cladding)), data( fibre cement weatherboard)), expression( function( is), atom( relation( type), variable( cladding)), data( vertical profiled metal)), expression( function( is), atom( relation( type), variable( cladding)), data( fibre cement sheet)), expression( function( is), atom( relation( type), variable( cladding)), data( plywood sheet))))), then( obligation( expression( function( is), atom( relation( method), variable( fixing)), data( direct))))","3.4.1.1 Cladding options As all faces score low, cladding options from Table 3 are: a) Direct fixed claddings: i) Timber weatherboards – all types shown ii) Fibre cement weatherboards iii) Vertical profiled metal – corrugated and symmetrical trapezoidal only iv) Fibre cement sheet – not flush-finished v) Plywood sheet","Tacit
EncodeReverse
SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.1.0.1,Cladding system 4.1 Materials for flashings; Acceptable materials for flashing junctions and penetrations are described in Paragraph 4.3.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( for), atom( relation( material), variable( flashing)), data( cladding)), expression( function( for), atom( relation( material), variable( junction)), data( cladding)), expression( function( for), atom( relation( material), variable( penetration)), data( cladding)))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( flashing)), data( rule))), obligation( expression( function( comply with), atom( relation( material), variable( junction)), data( rule))), obligation( expression( function( comply with), atom( relation( material), variable( penetration)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.0.1)))))",4.1 Materials for flashings Acceptable materials for flashing junctions and penetrations are described in Paragraph 4.3.,"DefinitionInformation
Complex"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.2.2.0.1,"4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","if( and( expression( function( is), atom( relation( material), variable( object)), data( metal)), expression( function( to), atom( relation( exposure), variable( object)), data( moisture)))), then( and( obligation( expression( function( as per), atom( relation( selection), variable( object)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( relation( selection), variable( object)), data( nzbc e2as1 t22)))))","4.2.2 Surrounding materials Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","Tacit
NotEncodedParts
Abstract"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.0.1,"4.3 Acceptable flashing materials; Tables 20, 21 and 22 shall be used to assess suitability of flashing materials for the required durability.","if( obligation( expression( function( has), atom( relation( material), variable( flashing)), data( durability)))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( flashing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22)))))","4.3 Acceptable flashing materials Tables 20, 21 and 22 shall be used to assess suitability of flashing materials for the required durability.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.1.0.2,"Where uPVC flashings are exposed to the weather, they shall also comply with Section 8 of AS/NZS 4256: Part 2.
","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( u pvc)), expression( function( to), atom( relation( exposure), variable( flashing)), data( weather)))), then( obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 4256.2 8))))","uPVC flashings shall comply with the requirements of the following Clauses of AS/NZS 4256: Part 2: a) Clause 9.2 Impact resistance, b) Clause 9.3 Tensile strength, and c) Clause 9.4 Colourfastness and impact resistance following ultraviolet light exposure.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.1.0.3,"uPVC flashings shall have a finish colour with a reflectance of 40% or more, as outlined in Paragraph 2.4.","if( expression( function( is), atom( relation( material), variable( flashing)), data( u pvc))), then( and( obligation( expression( function( has), atom( variable( flashing)), data( finish colour))), obligation( expression( function( greater than equal), atom( relation( reflectance), variable( finish colour)), data( 40 percent)))))","uPVC flashings shall have a finish colour with a reflectance of 40% or more, as outlined in Paragraph 2.4.",LearnToIgnore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.5.0.1,"4.3.5 Stainless steel flashings Stainless steel flashings shall be: a) Minimum thickness of 0.45 mm, and b) 304 or 316 stainless steel in accordance with Table 1 of ISO/TS 15510.","if( expression( function( is), atom( relation( material), variable( flashing)), data( stainless steel))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 0.45)))), or( obligation( expression( function( equal), atom( relation( grade), variable( stainless steel)), data( 304))), obligation( expression( function( equal), atom( relation( grade), variable( stainless steel)), data( 316)))), obligation( expression( function( as per), atom( relation( grade), variable( stainless steel)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t1))), obligation( expression( function( in), atom( variable( table)), data( isots 15510)))))","4.3.5 Stainless steel flashings Stainless steel flashings shall be: a) Minimum thickness of 0.45 mm, and b) 304 or 316 stainless steel in accordance with Table 1 of ISO/TS 15510.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.6.0.1,"4.3.6 Copper flashings; Copper flashings shall be: a) A minimum thickness of 0.5 mm, b) In compliance with AS 1566, and c) Alloy, designation C11000 or C12200.","if( expression( function( is), atom( relation( material), variable( flashing)), data( copper))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( kind( metre), prefix( milli)), value( 0.5)))), obligation( expression( function( comply with), atom( variable( flashing)), data( as 1566))), or( obligation( expression( function( equal), atom( relation( type), variable( flashing)), data( alloy c11000))), obligation( expression( function( equal), atom( relation( type), variable( flashing)), data( alloy c12200))))))","4.3.6 Copper flashings Copper flashings shall be: a) A minimum thickness of 0.5 mm, b) In compliance with AS 1566, and c) Alloy, designation C11000 or C12200.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.7.0.1,"Lead sheet flashings shall: a) Comply with AS 1804, and b) Have a minimum unit mass of 17 kg/m2.","if( expression( function( is), atom( relation( material), variable( flashing)), data( lead sheet))), then( and( obligation( expression( function( comply with), atom( variable( flashing)), data( as 1804))), obligation( expression( function( greater than equal), atom( relation( unit mass), variable( flashing)), data( derivedunit( baseunit( kind( gram), prefix( kilo)), operator( name( division)), baseunit( kind( metre), exponent( 2.0))), value( 17.0))))))","Lead sheet flashings shall: a) Comply with AS 1804, and b) Have a minimum unit mass of 17 kg/m2.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.9.0.1,"4.3.9 Butyl rubber and EPDM flashings Butyl rubber flashings shall only be used in accordance with Tables 20, 21 and 22.","if( expression( function( is), atom( relation( material), variable( flashing)), data( butyl rubber))), then( and( obligation( expression( function( comply with), atom( relation( application), variable( flashing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22)))))","4.3.9 Butyl rubber and EPDM flashings Butyl rubber flashings shall only be used in accordance with Tables 20, 21 and 22.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.9.0.2,"Butyl rubber and EPDM flashings shall be a minimum thickness of 1.0 mm, and shall comply with the following parts of Table 1 in ASTM D6134: a) Tensile strength, b) Elongation, c) Water absorption, d) Water vapour permeance, and e) Heat aging followed by: i) tensile strength ii) elongation.","if( or( expression( function( is), atom( relation( material), variable( flashing)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( flashing)), data( epdm)))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 1.0)))), obligation( expression( function( comply with), atom( variable( flashing)), data( table))), obligation( expression( function( in), atom( variable( table)), data( astm d6134))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t1))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( tensile strength))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( elongation))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( water absorption))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( water vapour permeance))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( heat aging followed by tensile strength))), obligation( expression( function( is), atom( relation( topic), variable( table)), data( heat aging followed by elongation)))))","Butyl rubber and EPDM flashings shall be a minimum thickness of 1.0 mm, and shall comply with the following parts of Table 1 in ASTM D6134: a) Tensile strength, b) Elongation, c) Water absorption, d) Water vapour permeance, and e) Heat aging followed by: i) tensile strength ii) elongation.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.10.0.1,4.3.10 Bituminous flashings; Bituminous flashings shall only be used in accordance with Table 20.,"if( expression( function( is), atom( relation( material), variable( flashing)), data( bituminous))), then( obligation( expression( function( comply with), atom( relation( application), variable( flashing)), data( nzbc e2as1 t20))))",4.3.10 Bituminous flashings Bituminous flashings shall only be used in accordance with Table 20.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.10.0.2,"4.3.10 Bituminous flashings; Flashings made from bitumen-impregnated material shall: a) Comply with AS/NZS 2904, and b) Be used only in fully concealed applications.","if( expression( function( has), atom( relation( material), variable( flashing)), data( bituminous))), then( and( obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 2904))), obligation( expression( function( in), atom( relation( application), variable( flashing)), data( environment))), obligation( expression( function( is), atom( variable( environment)), data( fully concealed)))))","Flashings made from bitumen-impregnated material shall: a) Comply with AS/NZS 2904, and b) Be used only in fully concealed applications.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.4.0.1,"4.4 Fixings; Fixings of metal flashings shall comply with Tables 20, 21 and 22.","if( and( expression( function( has), atom( variable( flashing)), data( fixing)), expression( function( is), atom( relation( material), variable( fixing)), data( metal)))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22)))))","4.4 Fixings Fixings of metal flashings shall comply with Tables 20, 21 and 22.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.1.0.1,4.5.1 Edge treatments for flashings; Flashings shall be to the dimensions shown throughout this Acceptable Solution.,"if( expression( function( has), atom( variable( flashing)), data( dimension))), then( obligation( expression( function( comply with), atom( variable( dimension)), data( nzbc e2as1))))",4.5.1 Edge treatments for flashings Flashings shall be to the dimensions shown throughout this Acceptable Solution.,RemovableContext
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.c.1,"Joins of metal flashings shall have the following features: Where both ends of a flashing are constrained, allowance shall be made for expansion","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( join)), expression( function( is), atom( relation( end), variable( flashing)), data( constrained)))), then( obligation( expression( function( has), atom( variable( flashing)), data( expansion joint))))","Joins of metal flashings shall have the following features: Where both ends of a flashing are constrained, allowance shall be made for expansion","Abstract
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.d.1,"Joins of metal flashings shall have the following features: d) Where necessary, expansion joints shall be formed as shown in Figure 6, with: i) minimum 200 mm laps, and ii) sliding clips at both sides of the lap","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( expansion joint)))), then( and( obligation( expression( function( has), atom( variable( expansion joint)), data( overlap))), obligation( expression( function( greater than equal), atom( relation( length), variable( overlap)), data( baseunit( prefix( milli), kind( metre)), value( 200.0)))), obligation( expression( function( has), atom( relation( side), variable( overlap)), data( sliding clip)))))","Joins of metal flashings shall have the following features: d) Where necessary, expansion joints shall be formed as shown in Figure 6, with: i) minimum 200 mm laps, and ii) sliding clips at both sides of the lap",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.e.1,"Joins of metal flashings shall have the following features: When using uncoated galvanized steel, zinc, stainless steel or copper flashings, joints shall be riveted or soldered as described in the New Zealand Metal Roof and Wall Cladding Code of Practice","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( expansion joint)), or( expression( function( is), atom( relation( material), variable( flashing)), data( uncoated galvanized steel)), expression( function( is), atom( relation( material), variable( flashing)), data( uncoated galvanized zinc)), expression( function( is), atom( relation( material), variable( flashing)), data( uncoated galvanized stainless steel)), expression( function( is), atom( relation( material), variable( flashing)), data( uncoated galvanized copper))))), then( and( obligation( expression( function( comply with), atom( relation( method), variable( expansion joint)), data( new zealand metal roof and wall cladding code of practice))), or( obligation( expression( function( is), atom( relation( method), variable( expansion joint)), data( riveted))), obligation( expression( function( is), atom( relation( method), variable( expansion joint)), data( soldered))))))","Joins of metal flashings shall have the following features: When using uncoated galvanized steel, zinc, stainless steel or copper flashings, joints shall be riveted or soldered as described in the New Zealand Metal Roof and Wall Cladding Code of Practice",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.4,Where a notched turn-down is used there shall be a gap between the edge of the flashing and the pan of the roof cladding. The gap shall be a maximum of 5 mm.,"if( and( expression( function( has), atom( variable( flashing)), data( notched turn down)), expression( function( has), atom( variable( flashing)), data( edge)), expression( function( has), atom( variable( roof cladding)), data( pan)))), then( and( obligation( expression( function( in between), atom( variable( gap)), data( edge))), obligation( expression( function( in between), atom( variable( gap)), data( pan))), obligation( expression( function( less than equal), atom( relation( size), variable( gap)), data( baseunit( kind( metre), prefix( milli)), value( 5.0))))))",Where a notched turn-down is used there shall be a gap between the edge of the flashing and the pan of the roof cladding. The gap shall be a maximum of 5 mm.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.1.0.1,"6.1 Limitations; This Acceptable Solution does not cover parapet cappings that use stucco, EIFS and flush-finished fibre cement materials.","if( and( expression( function( has), atom( variable( parapet)), data( capping)), or( expression( function( is), atom( relation( material), variable( capping)), data( stucco)), expression( function( is), atom( relation( material), variable( capping)), data( eifs)), expression( function( is), atom( relation( material), variable( capping)), data( flush finished fibre cement))))), then( prohibition( expression( function( comply with), atom( variable( capping)), data( nzbc e2as1))))","6.1 Limitations This Acceptable Solution does not cover parapet cappings that use stucco, EIFS and flush-finished fibre cement materials.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.4.0.4,"Metal cappings installed over parapets and enclosed balustrades. j) Where necessary, expansion joints shall be formed as shown in Figure 9 (g), and with: i) minimum 200 mm laps ii) sliding clips at both sides of the lap.","if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), expression( function( over), atom( relation( installation), variable( capping)), data( parapet)), expression( function( over), atom( relation( installation), variable( capping)), data( balustrade)), expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( has), atom( variable( capping)), data( expansion joint)))), then( and( obligation( expression( function( has), atom( variable( expansion joint)), data( overlap))), obligation( expression( function( greater than equal), atom( relation( length), variable( overlap)), data( baseunit( prefix( milli), kind( metre)), value( 200.0)))), obligation( expression( function( has), atom( relation( side), variable( overlap)), data( sliding clip)))))",and with: i) minimum 200 mm laps ii) sliding clips at both sides of the lap.,"NoIf
BaseUnit
Tacit
TACIT-IGNORE"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.5.0.1.a.1,"6.5 Membrane cappings; Butyl rubber and EPDM cappings shall be in accordance with Paragraph 4.3.9, and comply with the following requirements: a) Tops of membrane cappings shall be free of any penetrations, and shall have a minimum slope of 10° (1:6)","if( and( or( expression( function( is), atom( relation( material), variable( capping)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( capping)), data( epdm))), expression( function( define), expression( function( top of), atom( variable( capping))), data( x0)))), then( and( obligation( expression( function( comply with), atom( variable( capping)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.9))), prohibition( expression( function( has), atom( variable( x0)), data( penetration))), obligation( expression( function( greater than equal), atom( relation( slope), variable( x0)), data( baseunit( kind( angle degree)), value( 10.0))))))"," 6.5 Membrane cappings Butyl rubber and EPDM cappings shall be in accordance with Paragraph 4.3.9, and comply with the following requirements: a) Tops of membrane cappings shall be free of any penetrations, and shall have a minimum slope of 10° (1:6)",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.5.0.1.c.1,Butyl rubber and EPDM cappings shall comply with the following requirements: Joints shall be in accordance with Paragraph 8.5.5.2.,"if( and( or( expression( function( is), atom( relation( material), variable( capping)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( capping)), data( epdm))), expression( function( has), atom( variable( capping)), data( expansion joint)))), then( and( obligation( expression( function( comply with), atom( variable( expansion joint)), data( rule))), expression( function( equal), atom( relation( key), variable( rule)), data( 8.5.5.2))))","6.5 Membrane cappings Butyl rubber and EPDM cappings shall be in accordance with Paragraph 4.3.9, and comply with the following requirements: Joints shall be in accordance with Paragraph 8.5.5.2.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.1.1.0.1.b.1,7.1.1 Slatted decks; The level of the upper surface of the slatted deck: May be at the same level as the threshold for non-cantilevered decks that are formed as shown in Figure 14(c).,"if( and( expression( function( is), atom( variable( deck)), data( slatted)), not( expression( function( is), atom( variable( deck)), data( cantilevered))), expression( function( define), atom( relation( upper surface level), variable( deck)), data( x0)), expression( function( define), atom( relation( threshold level), variable( deck)), data( x1)))), then( permission( expression( function( equal), atom( variable( x0)), data( x1))))",7.1.1 Slatted decks The level of the upper surface of the slatted deck: May be at the same level as the threshold for non-cantilevered decks that are formed as shown in Figure 14(c).,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.1.2.0.1,"7.1.2 Enclosed decks; This Acceptable Solution is limited to enclosed decks with a maximum area of 40 m2. For enclosed decks, the vertical separation between the opening threshold level and the upper surface of the finished deck surface shall be a minimum of 100 mm.","if( and( expression( function( is), atom( variable( deck)), data( enclosed)), expression( function( is), atom( relation( surface), variable( deck)), data( finished)), expression( function( less than equal), atom( relation( area), variable( deck)), data( baseunit( exponent( 2.0), kind( metre)), value( 40.0))), expression( function( define), atom( relation( upper surface level), variable( deck)), data( x0)), expression( function( define), atom( relation( threshold level), variable( deck)), data( x1)))), then( and( permission( expression( function( comply with), atom( variable( deck)), data( nzbc e2as1))), obligation( expression( function( in between), atom( variable( separation)), data( x0))), obligation( expression( function( in between), atom( variable( separation)), data( x1))), obligation( expression( function( greater than equal), atom( variable( separation)), data( baseunit( kind( metre), prefix( milli)), value( 100.0))))))","7.1.2 Enclosed decks This Acceptable Solution is limited to enclosed decks with a maximum area of 40 m2. For enclosed decks, the vertical separation between the opening threshold level and the upper surface of the finished deck surface shall be a minimum of 100 mm.","Define
BaseUnit
ImplicitReference
Complex
Order
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.2.1.0.1,7.2.1 Slatted timber decks to walls; Junctions of slatted timber decks with walls shall be made weathertight as shown in Figures 15 and 16.,"if( and( expression( function( is), atom( variable( deck)), data( slatted)), expression( function( is), atom( relation( material), variable( deck)), data( timber)), expression( function( adjoin), atom( variable( wall)), data( deck)), expression( function( in between), atom( variable( junction)), data( deck)), expression( function( in between), atom( variable( junction)), data( wall)))), then( obligation( expression( function( is), atom( variable( junction)), data( weathertight))))",7.2.1 Slatted timber decks to walls Junctions of slatted timber decks with walls shall be made weathertight as shown in Figures 15 and 16.,"ReferenceNotTranslated
"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.1.0.1,"8.1.1 Weathertightness; Roof claddings shall meet the requirements of NZBC E2.2, and be specified and constructed in accordance with the provisions of Paragraph 8.1.2 to Paragraph 8.5.","if( expression( function( is), atom( relation( application), variable( cladding)), data( roof))), then( and( obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 2))), obligation( expression( function( comply with), atom( relation( specification), variable( cladding)), data( rule))), obligation( expression( function( comply with), atom( relation( construction), variable( cladding)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.5)))))","8.1.1 Weathertightness Roof claddings shall meet the requirements of NZBC E2.2, and be specified and constructed in accordance with the provisions of Paragraph 8.1.2 to Paragraph 8.5.",ContextIgnore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.2.0.1,8.1.2 Limitations; The following roof cladding systems are covered in this Acceptable Solution: a) Masonry tiles Paragraph 8.2 b) Pressed metal tiles Paragraph 8.3 c) Profiled metal roof claddings Paragraph 8.4 d) Membrane roofing Paragraph 8.5.,"if( and( or( expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)), expression( function( is), atom( relation( system), variable( cladding)), data( pressed metal tile)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal roof cladding)), expression( function( is), atom( relation( system), variable( cladding)), data( membrane roofing))), expression( function( is), atom( relation( application), variable( cladding)), data( roof)))), then( permission( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))",8.1.2 Limitations The following roof cladding systems are covered in this Acceptable Solution: a) Masonry tiles Paragraph 8.2 b) Pressed metal tiles Paragraph 8.3 c) Profiled metal roof claddings Paragraph 8.4 d) Membrane roofing Paragraph 8.5.,SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.2.0.2,a) Masonry tiles Paragraph 8.2 b) Pressed metal tiles Paragraph 8.3 c) Profiled metal roof claddings Paragraph 8.4 d) Membrane roofing Paragraph 8.5. Other roof claddings are beyond the scope of this Acceptable Solution.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), not( expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile))), not( expression( function( is), atom( relation( system), variable( cladding)), data( pressed metal tile))), not( expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal roof cladding))), not( expression( function( is), atom( relation( system), variable( cladding)), data( membrane roofing))))), then( prohibition( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))",Other roof claddings are beyond the scope of this Acceptable Solution.,"TACIT-IGNORE
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.3.1.0.1,8.0 Roof Claddings 8.1.3.1 Projecting eaves; Soffits and verges of all projecting eaves shall be closed in.,"if( and( expression( function( has), atom( variable( roof)), data( eave)), expression( function( is), atom( variable( eave)), data( projecting)), or( expression( function( has), atom( variable( eave)), data( soffit)), expression( function( has), atom( variable( eave)), data( verge))))), then( and( obligation( expression( function( is), atom( variable( soffit)), data( closed in))), obligation( expression( function( is), atom( variable( verge)), data( closed in)))))",8.1.3.1 Projecting eaves Soffits and verges of all projecting eaves shall be closed in.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.4.0.1,"8.0 Roof Claddings 8.1.4 Fixings; Fixings shall be as specified in Paragraph 8.2 to Paragraph 8.5. Materials for fixing roof claddings and flashings, where necessary, shall be selected from Tables 20, 21 and 22 to minimise corrosion.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), or( expression( function( has), atom( variable( cladding)), data( fixing)), and( expression( function( for), atom( variable( flashing)), data( cladding)), expression( function( has), atom( variable( flashing)), data( fixing)))))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.5))), obligation( expression( function( as per), atom( relation( material), variable( fixing)), data( table))), obligation( expression( function( as per), atom( relation( material), variable( flashing)), data( table))), and( obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22))))))","8.1.4 Fixings Fixings shall be as specified in Paragraph 8.2 to Paragraph 8.5. Materials for fixing roof claddings and flashings, where necessary, shall be selected from Tables 20, 21 and 22 to minimise corrosion.",Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.5.0.1,"8.1.5 Roof underlays; Roof underlays shall be to Table 23 and NZS 2295, and be either: R1 heavy weight kraft, or R2 self supporting kraft.","if( expression( function( is), atom( relation( application), variable( underlay)), data( roof))), then( and( obligation( expression( function( comply with), atom( variable( underlay)), data( nzs 2295))), obligation( expression( function( as per), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), or( obligation( expression( function( is), atom( relation( type), variable( underlay)), data( r1 heavy weight kraft))), obligation( expression( function( is), atom( relation( type), variable( underlay)), data( r2 self supporting kraft))))))","8.1.5 Roof underlays Roof underlays shall be to Table 23 and NZS 2295, and be either: • R1 heavy weight kraft, or • R2 self supporting kraft.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.5.0.2,"8.1.5 Roof underlays; Underlays shall be: • Layed with minimum numbers of laps • Lapped at all side and end laps by minimum 150 mm • Run horizontally for roof pitches below 10° • Run horizontally or vertically for roof pitches above 10° • Have anti-ponding boards at lower edges of masonry tiles, refer Figure 25(b) and Paragraph 8.2.5.","if( and( expression( function( is), atom( relation( application), variable( underlay)), data( roof)), expression( function( has), atom( variable( underlay)), data( overlap)))), then( and( obligation( expression( function( is), expression( function( count), atom( variable( overlap))), data( minimum))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( side))), data( underlay))), appliedstatement( obligation( expression( function( has), atom( variable( side)), data( overlap))))), obligation( expression( function( greater than equal), atom( relation( width), variable( overlap)), data( baseunit( prefix( milli), kind( metre)), value( 150.0)))), or( and( obligation( expression( function( is), atom( relation( orientation), variable( underlay)), data( horizontal))), obligation( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 10.0))))), and( or( obligation( expression( function( is), atom( relation( orientation), variable( underlay)), data( horizontal))), obligation( expression( function( is), atom( relation( orientation), variable( underlay)), data( vertical)))), obligation( expression( function( greater than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 10.0)))))), obligation( expression( function( is), atom( relation( cladding system), variable( roof)), data( masonry tile))), obligation( expression( function( has), atom( relation( lower edge), variable( masonry tile)), data( anti ponding board)))))","Underlays shall be: • Layed with minimum numbers of laps • Lapped at all side and end laps by minimum 150 mm • Run horizontally for roof pitches below 10° • Run horizontally or vertically for roof pitches above 10° • Have anti-ponding boards at lower edges of masonry tiles, refer Figure 25(b) and Paragraph 8.2.5.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.1,"8.1.6 Gutters general; Gutters, downpipes and spreaders, including eaves gutters/spoutings are required for the drainage of roof water","if( obligation( expression( function( has), atom( variable( roof)), data( drainage)))), then( and( obligation( expression( function( has), atom( relation( drainage), variable( roof)), data( gutter))), obligation( expression( function( has), atom( relation( drainage), variable( roof)), data( downpipe))), obligation( expression( function( has), atom( relation( drainage), variable( roof)), data( spreader))), or( obligation( expression( function( has), atom( relation( drainage), variable( roof)), data( eave gutter))), obligation( expression( function( has), atom( relation( drainage), variable( roof)), data( eave spouting))))))","8.1.6 Gutters general Gutters, downpipes and spreaders, including eaves gutters/spoutings are required for the drainage of roof water",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.1.a.1,"8.1.6 Gutters general; Gutters, downpipes and spreaders required for the drainage of roof water shall: a) Be to the minimum dimensions shown in this Acceptable Solution, or calculated to E1/AS1, whichever is the greater","if( and( obligation( expression( function( has), atom( variable( roof)), data( drainage))), or( obligation( expression( function( include), atom( relation( drainage), variable( roof)), data( gutter))), obligation( expression( function( include), atom( relation( drainage), variable( roof)), data( downpipe))), obligation( expression( function( include), atom( relation( drainage), variable( roof)), data( spreader)))))), then( and( obligation( expression( function( comply with), atom( relation( dimension), variable( gutter)), data( nzbc e1as1))), obligation( expression( function( comply with), atom( relation( dimension), variable( downpipe)), data( nzbc e1as1))), obligation( expression( function( comply with), atom( relation( dimension), variable( spreader)), data( nzbc e1as1))), obligation( expression( function( comply with), atom( relation( dimension), variable( gutter)), data( nzbc e2as1))), obligation( expression( function( comply with), atom( relation( dimension), variable( downpipe)), data( nzbc e2as1))), obligation( expression( function( comply with), atom( relation( dimension), variable( spreader)), data( nzbc e2as1)))))","8.1.6 Gutters general Gutters, downpipes and spreaders, including eaves gutters/spoutings are required for the drainage of roof water, and shall: a) Be to the minimum dimensions shown in this Acceptable Solution, or calculated to E1/AS1, whichever is the greater","DomainKnowledge
Abstract

"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.1.0.0.a.1,"8.1.6.1 Internal gutters; Internal gutters shall: a) Be formed with continuous butyl or EPDM strip complying with Paragraph 4.3.9, with no cross-joints in the gutter, or aluminium, copper, stainless steel, or zinc sheet to Paragraph 4.3, with joints that are welded","if( expression( function( is), atom( relation( type), variable( gutter)), data( internal))), then( or( and( obligation( not( expression( function( has), atom( variable( gutter)), data( cross joint)))), or( obligation( expression( function( is), atom( relation( material), variable( gutter)), data( butyl))), obligation( expression( function( is), atom( relation( material), variable( gutter)), data( epdm)))), obligation( expression( function( comply with), atom( relation( material), variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.9)))), and( obligation( expression( function( has), atom( variable( gutter)), data( joint))), obligation( expression( function( is), atom( variable( joint)), data( welded))), or( obligation( expression( function( is), atom( relation( material), variable( gutter)), data( aluminium))), obligation( expression( function( is), atom( relation( material), variable( gutter)), data( copper))), obligation( expression( function( is), atom( relation( material), variable( gutter)), data( stainless steel))), obligation( expression( function( is), atom( relation( material), variable( gutter)), data( zinc)))))))","8.1.6.1 Internal gutters Internal gutters shall: a) Be formed with continuous butyl or EPDM strip complying with Paragraph 4.3.9, with no cross-joints in the gutter, or aluminium, copper, stainless steel, or zinc sheet to Paragraph 4.3, with joints that are welded","OrderDifficulties
SomeDetailsNotEncoded"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.1.0.0.b.1,"8.1.6.1 Internal gutters; Internal gutters shall: b) Where butyl or EPDM, be minimum 1.5 mm membrane thickness, or 1.0 mm thickness for gutters less than 1 metre wide","if( and( expression( function( is), atom( relation( type), variable( gutter)), data( internal)), or( expression( function( is), atom( relation( material), variable( gutter)), data( butyl)), expression( function( is), atom( relation( material), variable( gutter)), data( epdm))))), then( or( obligation( expression( function( greater than equal), atom( relation( thickness), variable( gutter)), data( baseunit( prefix( milli), kind( metre)), value( 1.5)))), and( obligation( expression( function( less than), atom( relation( width), variable( gutter)), data( baseunit( kind( metre)), value( 1.0)))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( gutter)), data( baseunit( kind( metre), prefix( milli)), value( 1.0)))))))","8.1.6.1 Internal gutters Internal gutters shall: b) Where butyl or EPDM, be minimum 1.5 mm membrane thickness, or 1.0 mm thickness for gutters less than 1 metre wide",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.1.0.0.c.1, 8.1.6.1 Internal gutters; Internal gutters shall: c) Have a minimum slope of 1:100,"if( expression( function( is), atom( relation( type), variable( gutter)), data( internal))), then( obligation( expression( function( greater than equal), atom( relation( slope), variable( gutter)), data( 100.0))))", 8.1.6.1 Internal gutters Internal gutters shall: c) Have a minimum slope of 1:100,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.1.0.0.e.1,Drainage of roof water 8.1.6.1 Internal gutters; Internal gutters shall: For roofs other than membrane roofs: e) Discharge into a rainwater head as shown in Figure 63 (a) and (b),"if( and( expression( function( include), atom( relation( drainage), variable( roof)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( internal)), not( expression( function( is), atom( relation( type), variable( roof)), data( membrane))))), then( obligation( expression( function( into), atom( relation( discharge), variable( gutter)), data( rainwater head))))","8.1.6.1 Internal gutters Internal gutters shall: Be constructed to at least the minimum dimensions shown in Figure 52, or the capacity calculated to E1/AS1 plus an additional freeboard depth of 20 mm minimum.",Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.2.0.2,In addition: f) Have minimum slopes of 8° for hidden gutters g) Hidden gutters receive no discharge from downpipes or spreaders,"if( expression( function( is), atom( relation( type), variable( gutter)), data( hidden))), then( and( obligation( expression( function( greater than equal), atom( relation( slope), variable( gutter)), data( baseunit( kind( angle degree)), value( 8.0)))), prohibition( expression( function( into), atom( relation( discharge), variable( downpipe)), data( gutter))), prohibition( expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))))","In addition: f) Have minimum slopes of 8° for hidden gutters, and to Table 8 for valley gutters g) Hidden gutters receive no discharge from downpipes or spreaders",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.7.0.1,8.1.7 Roof penetrations; Roof penetrations shall be made weathertight in accordance with Paragraph 8.2 to Paragraph 8.5.,"if( expression( function( is), atom( relation( application), variable( penetration)), data( roof))), then( and( obligation( expression( function( is), atom( variable( penetration)), data( weathertight))), obligation( expression( function( comply with), atom( variable( penetration)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.5)))))",8.1.7 Roof penetrations Roof penetrations shall be made weathertight in accordance with Paragraph 8.2 to Paragraph 8.5.,DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.7.0.2,"Where roof penetrations are required for large openings such as roof lights and chimneys, this Acceptable Solution is limited to the following requirements: Rules 8.1.7.0.2.a.1 and 8.1.7.0.2.b.1","if( and( expression( function( is), atom( relation( application), variable( penetration)), data( roof)), expression( function( include), atom( variable( opening)), data( roof light)), expression( function( include), atom( variable( opening)), data( chimney)), expression( function( is), atom( relation( size), variable( opening)), data( large)), obligation( expression( function( has), atom( variable( opening)), data( penetration))), and( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.7.0.2.a.1)), expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.7.0.2.b.1))))), then( permission( expression( function( comply with), atom( variable( penetration)), data( nzbc e2as1))))","Where roof penetrations are required for large openings such as roof lights and chimneys, this Acceptable Solution is limited to the following requirements:",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.7.0.2.b.1,"For the catchment area of the roof above the penetration as shown in Figure 22, the roof length shall be limited to: i) for profiled metal roofing, Table 17 ii) for other roof claddings, the areas shown in Table 9.","if( and( expression( function( is), atom( relation( application), variable( penetration)), data( roof)), expression( function( above), atom( relation( catchment area), variable( roof)), data( penetration)), expression( function( is), atom( relation( application), variable( cladding)), data( roof)))), then( or( and( obligation( expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal))), obligation( expression( function( as per), atom( relation( length), variable( catchment area)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t17)))), and( obligation( not( expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)))), obligation( expression( function( as per), atom( relation( length), variable( catchment area)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t9))))))","Where roof penetrations are required for large openings such as roof lights and chimneys, this Acceptable Solution is limited to the following requirements:For the catchment area of the roof above the penetration as shown in Figure 22, the roof length shall be limited to: i) for profiled metal roofing, Table 17 ii) for other roof claddings, the areas shown in Table 9.",Tacit
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.1.0.1,8.2.1 Materials; Concrete tiles shall meet the requirements of NZS 4206 or AS 2049.,"if( expression( function( is), atom( relation( material), variable( tile)), data( concrete))), then( or( obligation( expression( function( comply with), atom( variable( tile)), data( nzs 4206))), obligation( expression( function( comply with), atom( variable( tile)), data( as 2049)))))",8.2.1 Materials Concrete tiles shall meet the requirements of NZS 4206 or AS 2049.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.1.0.2,8.2.1 Materials; Clay tiles shall meet the requirements of AS 2049.,"if( expression( function( is), atom( relation( material), variable( tile)), data( clay))), then( obligation( expression( function( comply with), atom( variable( tile)), data( as 2049))))",8.2.1 Materials Clay tiles shall meet the requirements of AS 2049.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.1.1.0.0.a.1,"8.2.1.1 Tile profiles; For the purposes of this paragraph, tiles shall be divided into three types as listed below: a) Type I: Double profile tiles having two distinct watercourses with a minimum watercourse depth of 18 mm","if( expression( function( is), atom( relation( type), variable( tile)), data( double profile))), then( and( expression( function( equal), expression( function( count), atom( relation( watercourse), variable( tile))), data( 2)), expression( function( greater than equal), atom( relation( depth), variable( watercourse)), data( baseunit( prefix( milli), kind( metre)), value( 18.0)))))","8.2.1.1 Tile profiles For the purposes of this paragraph, tiles shall be divided into three types as listed below: a) Type I: Double profile tiles having two distinct watercourses with a minimum watercourse depth of 18 mm","Fact
ContextIgnore"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.1.1.0.0.b.1,"8.2.1.1 Tile profiles; For the purposes of this paragraph, tiles shall be divided into three types as listed below: Type II: Single profile tiles having one water- course depth of a minimum of 25 mm","if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( and( expression( function( equal), expression( function( count), atom( relation( watercourse), variable( tile))), data( 1)), expression( function( greater than equal), atom( relation( depth), variable( watercourse)), data( baseunit( kind( metre), prefix( milli)), value( 25.0)))))","8.2.1.1 Tile profiles For the purposes of this paragraph, tiles shall be divided into three types as listed below: Type II: Single profile tiles having one water- course depth of a minimum of 25 mm","Fact
ContextIgnore"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.1.1.0.0.c.1,"8.2.1.1 Tile profiles; For the purposes of this paragraph, tiles shall be divided into three types as listed below: c) Type III: Tiles not fitting the Type I (Double profile) or Type II (Single profile) categories, and includes flat tiles and those resembling slates, shakes and shingles.","if( expression( function( is), atom( relation( type), variable( tile)), data( iii))), then( and( or( not( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), not( expression( function( is), atom( relation( type), variable( tile)), data( double profile)))), expression( function( include), atom( variable( tile)), data( flat tile)), expression( function( include), atom( variable( tile)), data( resembling slate)), expression( function( include), atom( variable( tile)), data( resembling shake)), expression( function( include), atom( variable( tile)), data( resembling shingle))))","For the purposes of this paragraph, tiles shall be divided into three types as listed below: c) Type III: Tiles not fitting the Type I or Type II categories, and includes flat tiles and those resembling slates, shakes and shingles.","Fact
ContextIgnore
TACIT-SPLIT-AT-SEMI-COLON
TACIT-REMOVE-BRACKETS
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.1,"8.2.3 Installation; Masonry tile roof cladding shall be installed in accordance with NZS 4206 or AS 2050 onto minimum H1.2 treated timber battens, except the minimum pitch shall be as specified in Table 10.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)))), then( and( or( obligation( expression( function( comply with), atom( relation( installation), variable( cladding)), data( nzs 4206))), obligation( expression( function( comply with), atom( relation( installation), variable( cladding)), data( as 2050)))), obligation( expression( function( onto), atom( relation( installation), variable( cladding)), data( batten))), obligation( expression( function( is), atom( relation( material), variable( batten)), data( timber))), obligation( expression( function( greater than equal), atom( relation( treatment class), variable( timber)), data( h1.2))), obligation( expression( function( as per), expression( function( min), atom( relation( pitch), variable( cladding))), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t10)))))","8.2.3 Installation Masonry tile roof cladding shall be installed in accordance with NZS 4206 or AS 2050 onto minimum H1.2 treated timber battens, except the minimum pitch shall be as specified in Table 10.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.2,"Roof cladding; Where required in AS 2050 and Table 20, underlay shall comply with Table 23. ","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( application), variable( underlay)), data( roof)), expression( function( comply with), atom( variable( cladding)), data( as 2050)), expression( function( comply with), atom( variable( cladding)), data( table)), and( obligation( expression( function( as per), atom( variable( underlay)), data( as 2050))), obligation( expression( function( as per), atom( variable( underlay)), data( table)))), expression( function( equal), atom( relation( key), variable( table)), data( t20)))), then( and( obligation( expression( function( comply with), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23)))))",underlay shall comply with Table 23.,"Tacit
TACIT-SPLIT-AT-SEMI-COLON"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.3,"8.0 Roof claddings 8.2.3 Installation; Fixing and fixing patterns shall be to NZS 4206, with the exception that nails shall penetrate a minimum of 35 mm into timber battens, and the minimum pitches and roof underlay shall be as described in Table 10 and Table 23.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( onto), atom( relation( installation), variable( cladding)), data( batten)), expression( function( has), atom( variable( cladding)), data( fixing)), expression( function( include), atom( variable( fixing)), data( nail)), expression( function( is), atom( relation( material), variable( batten)), data( timber)), expression( function( is), atom( relation( application), variable( underlay)), data( roof)))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzs 4206))), obligation( expression( function( comply with), atom( relation( pattern), variable( fixing)), data( nzs 4206))), obligation( expression( function( into), atom( relation( penetration), variable( nail)), data( batten))), obligation( expression( function( greater than equal), atom( relation( penetration), variable( nail)), data( baseunit( kind( metre), prefix( milli)), value( 35.0)))), obligation( expression( function( as per), expression( function( min), atom( relation( pitch), variable( cladding))), data( nzbc e2as1 t10))), obligation( expression( function( as per), atom( variable( underlay)), data( nzbc e2as1 t23)))))","8.2.3 Installation Fixing and fixing patterns shall be to NZS 4206, with the exception that nails shall penetrate a minimum of 35 mm into timber battens, and the minimum pitches and roof underlay shall be as described in Table 10 and Table 23.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.4,"Use 304 or 316 stainless steel fixings for corrosion zones B, C or hot dip galvanised fixings at 450 g/m2 for Zone B and Zone C.","if( and( or( expression( function( is), atom( relation( type), variable( corrosion zone)), data( b)), expression( function( is), atom( relation( type), variable( corrosion zone)), data( c))), expression( function( for), atom( variable( fixing)), data( corrosion zone)))), then( or( and( obligation( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel))), or( obligation( expression( function( is), atom( relation( type), variable( stainless steel)), data( 304))), obligation( expression( function( is), atom( relation( type), variable( stainless steel)), data( 306))))), and( obligation( expression( function( is), atom( relation( material), variable( fixing)), data( hot dip galvanized))), obligation( expression( function( is), atom( relation( weight), variable( fixing)), data( derivedunit( baseunit( kind( gram)), operator( name( division)), baseunit( kind( metre), exponent( 2.0))), value( 450.0)))))))","Use 304 or 316 stainless steel fixings for corrosion zones B, C, D and E, or hot dip galvanised fixings at 450 g/m2 for Zone B and Zone C.","DerivedUnit
EncodeException
Complex"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.5,Use 304 or 316 stainless steel fixings for corrosion zones D and E.,"if( and( expression( function( for), atom( variable( fixing)), data( corrosion zone)), or( expression( function( is), atom( relation( type), variable( corrosion zone)), data( d)), expression( function( is), atom( relation( type), variable( corrosion zone)), data( e))))), then( and( obligation( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel))), or( obligation( expression( function( is), atom( relation( type), variable( stainless steel)), data( 304))), obligation( expression( function( is), atom( relation( type), variable( stainless steel)), data( 306))))))","Use 304 or 316 stainless steel fixings for corrosion zones B, C, D and E, or hot dip galvanised fixings at 450 g/m2 for Zone B and Zone C.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.3.0.6,"8.2.3 Installation; Where masonry tiles have been shown to comply with the dynamic weathertightness test requirements of AS 4046: Part 9, a lower pitch (as in Table 10) may be used providing it is not less than 15°.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)), expression( function( comply with), atom( variable( cladding)), data( wathertightness test requirement)), expression( function( in), atom( variable( wathertightness test requirement)), data( as 4046.9)), expression( function( define), atom( relation( pitch), variable( cladding)), data( x0)), expression( function( as per), atom( variable( x0)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t10)))), then( and( permission( expression( function( less than), atom( relation( pitch), variable( cladding)), data( x0))), obligation( expression( function( greater than equal), atom( relation( pitch), variable( cladding)), data( baseunit( kind( angle degree)), value( 15.0))))))","8.2.3 Installation Where masonry tiles have been shown to comply with the dynamic weathertightness test requirements of AS 4046: Part 9, a lower pitch may be used providing it is not less than 15°.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.5.0.1,"8.0 Roof claddings; Masonry tile roofs with underlays shall have anti-ponding boards installed to Figure 25. Where anti-ponding boards are used, these shall be set to a minimum fall of 5° (1:12), and shall be treated minimum H1.2 for solid timber and H3 for plywood.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)), expression( function( has), atom( variable( roof)), data( underlay)))), then( and( obligation( expression( function( has), atom( variable( roof)), data( anti ponding board))), obligation( expression( function( greater than equal), atom( relation( fall), variable( anti ponding board)), data( baseunit( kind( angle degree)), value( 5.0)))), or( and( obligation( expression( function( is), atom( relation( material), variable( anti ponding board)), data( timber))), obligation( expression( function( greater than equal), atom( relation( treatment class), variable( timber)), data( h1.2)))), and( obligation( expression( function( is), atom( relation( material), variable( anti ponding board)), data( plywood))), obligation( expression( function( greater than equal), atom( relation( treatment class), variable( plywood)), data( h3)))))))","Masonry tile roofs with underlays shall have anti-ponding boards installed to Figure 25. Where anti-ponding boards are used, these shall be set to a minimum fall of 5° (1:12), and shall be treated minimum H1.2 for solid timber and H3 for plywood.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.7.0.1,8.0 Roof Claddings 8.2 Masonry Tiles 8.2.7 Penetrations; Holes in tiles for pipe penetrations shall be machine-cut to minimise the size of the hole.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)), expression( function( has), atom( variable( masonry tile)), data( hole)), expression( function( for), atom( variable( hole)), data( penetration)), expression( function( is), atom( relation( purpose), variable( penetration)), data( pipe)))), then( and( obligation( expression( function( is), atom( variable( hole)), data( machine cut))), obligation( expression( function( is), atom( relation( size), variable( hole)), data( minimum)))))",Holes in tiles for pipe penetrations shall be machine-cut to minimise the size of the hole.,"DomainKnowledge
TACIT-SPLIT-AT-SEMI-COLON"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.1.0.1,8.0 Roof claddings; This Acceptable Solution is limited to pressed metal tile roofs.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)))), then( obligation( expression( function( comply with), atom( relation( system), variable( cladding)), data( nzbc e2as1))))",This Acceptable Solution is limited to pressed metal tile roofs.,"ImplicitReference
Tacit
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.3.0.1,8.0 Roof Claddings 8.3 Pressed Metal Tiles 8.3.3 Tiles and accessories; Tiles and their accessories shall meet the requirements of NZS 4217.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)))), then( and( obligation( expression( function( comply with), atom( variable( metal tile)), data( nzs 4217))), obligation( expression( function( comply with), atom( relation( accessory), variable( metal tile)), data( nzs 4217)))))",8.3.3 Tiles and accessories Tiles and their accessories shall meet the requirements of NZS 4217.,TACIT-SPLIT-AT-SEMI-COLON
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.4.2.0.2,8.0 Roof Claddings 8.3 Pressed Metal Tiles 8.3.4.2 Steel; Paint coatings may include factory-applied finishes complying with AS/NZS 2728.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( is), atom( relation( material), variable( metal tile)), data( steel)), expression( function( has), atom( variable( metal tile)), data( paint coating)))), then( and( permission( expression( function( include), atom( variable( paint coating)), data( factory applied finish))), obligation( expression( function( comply with), atom( variable( factory applied finish)), data( asnzs 2728)))))","Paint coatings may include factory-applied finishes complying with AS/NZS 2728, or factory-painted or bonded resin and chip finishes of minimum 15 year durability.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.4.3.0.1,"8.0 Roof Claddings 8.3 Pressed Metal Tiles 8.3.4.3 Aluminium; Aluminium for the manufacture of pressed metal tiles and flashing systems shall comply with AS/NZS 1734, and shall: a) Have a base metal thickness (BMT) of 0.7 mm minimum, b) Be minimum 5000 series, c) For pre-painted aluminium, have a factory-applied finish complying with AS/NZS 2728.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( for), atom( variable( flashing)), data( cladding)), expression( function( is), atom( relation( material), variable( metal tile)), data( aluminium)), expression( function( is), atom( relation( material), variable( flashing)), data( aluminium)))), then( and( obligation( expression( function( comply with), atom( variable( aluminium)), data( asnzs 1734))), obligation( expression( function( greater than equal), atom( relation( base metal thickness), variable( aluminium)), data( baseunit( prefix( milli), kind( metre)), value( 0.7)))), obligation( expression( function( is), expression( function( min), atom( relation( grade), variable( aluminium))), data( 5000 series))), or( and( expression( function( is), atom( variable( aluminium)), data( pre painted)), obligation( expression( function( has), atom( variable( aluminium)), data( factory applied finish))), obligation( expression( function( comply with), atom( variable( factory applied finish)), data( asnzs 2728)))), obligation( not( expression( function( is), atom( variable( aluminium)), data( pre painted)))))))","8.3.4.3 Aluminium Aluminium for the manufacture of pressed metal tiles and flashing systems shall comply with AS/NZS 1734, and shall: a) Have a base metal thickness (BMT) of 0.7 mm minimum, b) Be minimum 5000 series, c) For pre-painted aluminium, have a factory- applied finish complying with AS/NZS 2728.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.5.0.3,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; The minimum roof pitches for metal tiles where rafter length exceeds 12 m, increase minimum pitch (Rule 8.3.5.0.2) by 1° per additional 0.5 m.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( define), atom( relation( rafter length), variable( roof)), data( x0)), expression( function( greater than), atom( variable( x0)), data( baseunit( kind( metre)), value( 12.0))), expression( function( equal), atom( relation( key), variable( rule)), data( 8.3.5.0.2)), expression( function( define), atom( relation( value), variable( rule)), data( x1)))), then( obligation( expression( function( equal), expression( function( min), atom( relation( pitch), variable( roof))), data( x1 + ( x0 - 12), * 2))))","Where rafter length exceeds 12 m, increase minimum pitch by 1° per additional 0.5 m.","Define
LrmlReference
Complex
TACIT-SPLIT-AT-SEMI-COLON
TACIT-REMOVE-BRACKETS"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.6.0.1,8.0 Roof Claddings 8.3 Pressed Metal Tiles; All metal tile roofing shall have a roof underlay installed. Roof underlay shall be to Table 23. Refer to Paragraph 8.1.5 for installation details.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)))), then( and( obligation( expression( function( has), atom( variable( roof)), data( underlay))), obligation( expression( function( comply with), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), obligation( expression( function( comply with), atom( relation( installation), variable( underlay)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.5)))))",All metal tile roofing shall have a roof underlay installed. Roof underlay shall be to Table 23. Refer to Paragraph 8.1.5 for installation details.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.7.0.1.a.2,"8.0 Roof Claddings; Pressed metal tiles; For fixings through the top of the tiles, use neoprene washers containing no more than 15% by weight carbon black content","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( has), atom( variable( metal tile)), data( fixing)), expression( function( define), expression( function( top of), atom( variable( metal tile))), data( x0)), expression( function( into), atom( variable( fixing)), data( x0)))), then( and( obligation( expression( function( include), atom( variable( fixing)), data( neoprene washer))), obligation( expression( function( less than equal), atom( relation( carbon black content), variable( neoprene washer)), data( 15 percent)))))","Pressed metal tiles; For fixings through the top of the tiles, use neoprene washers containing no more than 15% by weight carbon black content","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.8.0.1,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; The roof shall be flashed at all boundaries, except at the discharge to a gutter, using the details shown in Figure 34 to Figure 37.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)))), then( and( obligation( expression( function( has), atom( relation( boundary), variable( roof)), data( flashing))), prohibition( expression( function( has), atom( relation( discharge), variable( gutter)), data( flashing)))))","The roof shall be flashed at all boundaries, except at the discharge to a gutter, using the details shown in Figure 34 to Figure 37. Metal flashings are generally supplied by the metal tile manufacturer, and shall comply with Paragraph 8.3.4.2 and Table 7, unless specifically shown otherwise in the details.",Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.10.0.1,"8.0 Roof Claddings 8.3 Pressed Metal Tiles 8.3.10 Roof penetrations; Pipe penetrations shall be flashed using EPDM flashings similar to that shown for masonry tiles, Figure 29.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( has), atom( variable( metal tile)), data( pipe penetration)))), then( and( obligation( expression( function( has), atom( variable( pipe penetration)), data( flashing))), obligation( expression( function( is), atom( relation( material), variable( flashing)), data( epdm)))))","8.3.10 Roof penetrations Pipe penetrations shall be flashed using EPDM flashings similar to that shown for masonry tiles, Figure 29.","Ignore
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.1.0.2,8.4.1 Limitations; This Acceptable Solution is limited to the following types of profiled metal roof cladding: Rule 8.4.1.0.1,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), not( expression( function( equal), atom( relation( key), variable( rule)), data( 8.4.1.0.1))))), then( prohibition( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))",8.4.1 Limitations; This Acceptable Solution is limited to the following types of profiled metal roof cladding:,EncodeException
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.3.3.0.1,"8.4 Profiled Metal Roof Cladding 8.4.3.3 Aluminium; Aluminium for the manufacture of profiled aluminium roofing shall comply with AS/NZS 1734, and be a minimum: a) Base metal thickness (BMT) of 0.7 mm, b) 5000 series.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( cladding)), data( aluminium)))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( cladding)), data( asnzs 1734))), obligation( expression( function( greater than equal), atom( relation( bmt), variable( aluminium)), data( baseunit( prefix( milli), kind( metre)), value( 0.7)))), obligation( expression( function( is), expression( function( min), atom( relation( type), variable( aluminium))), data( 5000 series)))))","8.4.3.3 Aluminium] Aluminium for the manufacture of profiled aluminium roofing shall comply with AS/NZS 1734, and be a minimum: a) Base metal thickness (BMT) of 0.7 mm, b) 5000 series.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.3.3.0.2,8.4 Profiled Metal Roof Cladding; Pre-painted aluminium roofing shall have a factory-applied finish complying with AS/NZS 2728.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( cladding)), data( aluminium)), expression( function( is), atom( relation( material), variable( cladding)), data( pre painted)))), then( and( obligation( expression( function( has), atom( relation( material), variable( cladding)), data( factory applied finish))), obligation( expression( function( comply with), atom( variable( factory applied finish)), data( asnzs 2728)))))",Pre-painted aluminium roofing shall have a factory-applied finish complying with AS/NZS 2728.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.4.0.1,"8.4 Profiled Metal Roof Cladding 8.4.4 Profiles; Profiles covered in this Acceptable Solution are shown in Figure 38, and consist of: a) Corrugated – curved with a crest height of 16.5 mm minimum, b) Trapezoidal – symmetrical or asymmetrical with a minimum crest height of 19 mm, and for asymmetrical a flat or lightly profiled pan width of 210 mm maximum between crests, and c) Trough profile – with vertical ribs at a minimum height of 38 mm, and flat or lightly profiled pans of 210 mm maximum between crests.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( and( expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated)), expression( function( is), atom( relation( profile), variable( cladding)), data( curved)), expression( function( has), atom( relation( profile), variable( cladding)), data( crest)), expression( function( greater than equal), atom( relation( height), variable( crest)), data( baseunit( prefix( milli), kind( metre)), value( 16.5)))), and( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( cladding)), data( symmetrical)), expression( function( has), atom( relation( profile), variable( cladding)), data( crest)), expression( function( greater than equal), atom( relation( height), variable( crest)), data( baseunit( kind( metre), prefix( milli)), value( 19.0)))), and( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( cladding)), data( asymmetrical)), expression( function( has), atom( relation( profile), variable( cladding)), data( crest)), expression( function( greater than equal), atom( relation( height), variable( crest)), data( baseunit( prefix( milli), kind( metre)), value( 19.0))), expression( function( has), atom( relation( profile), variable( cladding)), data( pan)), or( expression( function( is), atom( variable( pan)), data( flat)), expression( function( is), atom( variable( pan)), data( lightly profiled))), expression( function( in between), atom( variable( pan)), data( crest)), expression( function( less than equal), atom( relation( width), variable( pan)), data( baseunit( prefix( milli), kind( metre)), value( 210.0)))), and( expression( function( is), atom( relation( profile), variable( cladding)), data( trough)), expression( function( has), atom( relation( profile), variable( cladding)), data( vertical rib)), expression( function( greater than equal), atom( relation( height), variable( vertical rib)), data( baseunit( prefix( milli), kind( metre)), value( 38.0))), expression( function( has), atom( relation( profile), variable( cladding)), data( pan)), or( expression( function( is), atom( variable( pan)), data( flat)), expression( function( is), atom( variable( pan)), data( lightly profiled))), expression( function( in between), atom( variable( pan)), data( crest)), expression( function( less than equal), atom( relation( width), variable( pan)), data( baseunit( prefix( milli), kind( metre)), value( 210.0))))))), then( permission( expression( function( comply with), atom( relation( profile), variable( cladding)), data( nzbc e2as1))))","8.4.4 Profiles Profiles covered in this Acceptable Solution are shown in Figure 38, and consist of: a) Corrugated – curved with a crest height of 16.5 mm minimum, b) Trapezoidal – symmetrical or asymmetrical with a minimum crest height of 19 mm, and for asymmetrical a flat or lightly profiled pan width of 210 mm maximum between crests, and c) Trough profile – with vertical ribs at a minimum height of 38 mm, and flat or lightly profiled pans of 210 mm maximum between crests.","BaseUnit
ImplicitReference
Complex
Tacit"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.5.0.1,"8.4 Profiled Metal Roof Cladding 8.4.5 Roof pitch; For roofs up to 18 metres in length without end laps, pitches shall be: a) Corrugated – not less than 8° (1:7). b) Trapezoidal – not less than: i) 4° (1:14) where the crest height is less than 27 mm, or ii) 3° (1:20) where the crest height is 27 mm or higher. c) Trough profile – not less than 3° (1:20).","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( less than equal), atom( relation( length), variable( roof)), data( baseunit( kind( metre)), value( 18.0))), not( expression( function( include), atom( relation( length), variable( roof)), data( end lap))))), then( or( and( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated))), obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 8.0))))), and( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal))), obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 4.0)))), obligation( expression( function( has), atom( relation( profile), variable( cladding)), data( crest))), obligation( expression( function( less than), atom( relation( height), variable( crest)), data( baseunit( prefix( milli), kind( metre)), value( 27.0))))), and( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal))), obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 3.0)))), obligation( expression( function( has), atom( relation( profile), variable( cladding)), data( crest))), obligation( expression( function( greater than equal), atom( relation( height), variable( crest)), data( baseunit( kind( metre), prefix( milli)), value( 27.0))))), and( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( trough))), obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 3.0)))))))","8.4.5 Roof pitch For roofs up to 18 metres in length without end laps, pitches shall be: a) Corrugated – not less than 8° (1:7). b) Trapezoidal – not less than: i) 4° (1:14) where the crest height is less than 27 mm, or ii) 3° (1:20) where the crest height is 27 mm or higher. c) Trough profile – not less than 3° (1:20).",Complex
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.6.0.1,"Steel 8.4.6 Structure; The maximum span and fixing patterns of profiled metal roof cladding between purlins to comply with this Acceptable Solution are given in Table 11, Table 12 or Table 13, 14 and 15.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( cladding)), data( steel)), expression( function( in between), atom( relation( span), variable( cladding)), data( purlin)), expression( function( in between), atom( relation( fixing pattern), variable( cladding)), data( purlin)), expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1)))), then( and( obligation( expression( function( as per), expression( function( max), atom( relation( span), variable( cladding))), data( table))), obligation( expression( function( as per), atom( relation( fixing pattern), variable( cladding)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t11))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t12))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t13))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t14))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t15)))))","8.4.6 Structure The maximum span and fixing patterns of profiled metal roof cladding between purlins to comply with this Acceptable Solution are given in Table 11, Table 12 or Table 13, 14 and 15.","Tacit
ComplexWording"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.7.0.1,8.4 Profiled Metal Roof Cladding 8.4.7 Underlay; All profiled metal long-run roofing shall have a roof underlay installed to Table 23. See Paragraph 8.1.5 for installation details.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( type), variable( cladding)), data( long run)))), then( and( obligation( expression( function( has), atom( variable( roof)), data( underlay))), obligation( expression( function( comply with), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), obligation( expression( function( comply with), atom( relation( installation), variable( underlay)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.5)))))",8.4.7 Underlay All profiled metal long-run roofing shall have a roof underlay installed to Table 23. See Paragraph 8.1.5 for installation details.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.8.0.1,"8.4 Profiled Metal Roof Cladding 8.4.8 Fixings: corrugated and trapezoidal; Fixings shall be as shown in Tables 11, 12, 14 and 15, and shall be a minimum 12-gauge screw, as shown in Figure 39, which complies with Class 4 of AS 3566: Part 2.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated)), expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal))), expression( function( has), atom( variable( cladding)), data( fixing)))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t11))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t12))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t14))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t15))), obligation( expression( function( is), expression( function( min), atom( relation( size), variable( screw))), data( 12 gauge))), obligation( expression( function( comply with), atom( variable( screw)), data( class 4))), obligation( expression( function( in), atom( variable( class 4)), data( as 3566.2)))))","8.4.8 Fixings: corrugated and trapezoidal Fixings shall be as shown in Tables 11, 12, 14 and 15, and shall be a minimum 12-gauge screw, as shown in Figure 39, which complies with Class 4 of AS 3566: Part 2.","DomainKnowledge
LearnToIgnoreFigure"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.8.1.0.2,Fixings shall: Include sealing washers of: ii) profiled washer and EPDM washer where required to allow for expansion of the profiled metal roof cladding.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( fixing)), expression( function( is), atom( relation( requirement), variable( cladding)), data( expansion)))), then( and( obligation( expression( function( include), atom( variable( fixing)), data( sealing washer))), obligation( expression( function( is), atom( relation( type), variable( sealing washer)), data( profiled washer))), obligation( expression( function( is), atom( relation( type), variable( sealing washer)), data( epdm washer)))))",Include sealing washers of: profiled washer and EPDM washer,"Tacit
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.10.0.1,8.4 Profiled Metal Roof Cladding 8.4.10 Allowance for expansion; Allowance shall be made for expansion of corrugated and trapezoidal roof cladding as shown in Table 16.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated)), expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal))))), then( and( obligation( expression( function( has), atom( variable( cladding)), data( expansion joint))), obligation( expression( function( as per), atom( relation( expansion), variable( cladding)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t16)))))",8.4.10 Allowance for expansion Allowance shall be made for expansion of corrugated and trapezoidal roof cladding as shown in Table 16.,DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.11.1.1.a.1,"8.4 Profiled Metal Roof Cladding 8.4.11.1 Fixing flashings a) When fixing flashings to the structure, use screws as for roofing (see Paragraph 8.4.8).","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( roof)), expression( function( has), atom( variable( flashing)), data( fixing)))), then( obligation( expression( function( is), atom( relation( type), variable( fixing)), data( screw))))","8.4.11.1 Fixing flashings a) When fixing flashings to the structure, use screws as for roofing (see Paragraph 8.4.8).","Tacit
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.11.1.1.b.1,"8.4 Profiled Metal Roof Cladding 8.4.11.1 Fixing flashings b) When fixing flashings to other flashings or to roofing use: i) for galvanized steel, 4 mm diameter monel metal or stainless steel rivets, where compatible as per Table 21, ii) for aluminium-zinc coated steel, 4 mm diameter aluminium rivets, iii) for aluminium, 4 mm diameter aluminium rivets.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( object)), or( expression( function( is), atom( variable( object)), data( flashing)), expression( function( is), atom( variable( object)), data( roof))), expression( function( has), atom( variable( flashing)), data( fixing)))), then( or( and( obligation( expression( function( is), atom( relation( material), variable( object)), data( galvanised steel))), obligation( expression( function( is), atom( relation( type), variable( fixing)), data( rivet))), or( obligation( expression( function( is), atom( relation( material), variable( fixing)), data( monel metal))), obligation( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel)))), obligation( expression( function( equal), atom( relation( diameter), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 4.0)))), obligation( expression( function( as per), atom( variable( fixing)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t21))), and( or( obligation( expression( function( is), atom( relation( material), variable( object)), data( aluminium zinc coated steel))), obligation( expression( function( is), atom( relation( material), variable( object)), data( aluminium)))), obligation( expression( function( is), atom( relation( type), variable( fixing)), data( rivet))), obligation( expression( function( is), atom( relation( material), variable( fixing)), data( aluminium))), obligation( expression( function( equal), atom( relation( diameter), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 4.0)))))))","8.4.11.1 Fixing flashings b) When fixing flashings to other flashings or to roofing use: i) for galvanized steel, 4 mm diameter monel metal or stainless steel rivets, where compatible as per Table 21, ii) for aluminium-zinc coated steel, 4 mm diameter aluminium rivets, iii) for aluminium, 4 mm diameter aluminium rivets.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.11.1.1.c.1,"8.4 Profiled Metal Roof Cladding 8.4.11.1 Fixing flashings c) Flashing joins, including expansion joints where required, shall be in accordance with Paragraph 4.5.2 and as shown in Figure 6.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( cladding)), expression( function( has), atom( variable( flashing)), data( join)), expression( function( include), atom( variable( join)), data( expansion joint)))), then( and( obligation( expression( function( comply with), atom( variable( join)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.5.2))), obligation( expression( function( as per), atom( variable( join)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f6)))))","8.4.11.1 Fixing flashings c) Flashing joins, including expansion joints where required, shall be in accordance with Paragraph 4.5.2 and as shown in Figure 6.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.13.0.1,"8.4.13 Stopends; The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 25.0))), expression( function( is), atom( relation( zone), variable( wind)), data( high)), expression( function( is), atom( relation( zone), variable( wind)), data( very high)), expression( function( is), atom( relation( zone), variable( wind)), data( extra high))))), then( obligation( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend))))","8.4.13 Stopends The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.14.0.1,"8.4 Profiled Metal Roof Cladding; 8.4.14 Turn-downs at gutters; The lower ends of trapezoidal and trough profile roofing shall be turned down at gutters, where the roof pitch is less than 10°. The turn-down shall be 30° from the plane of the sheet.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( cladding)), data( trough))), expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 10.0))))), then( and( obligation( expression( function( has), atom( relation( profile), variable( cladding)), data( lower end))), obligation( expression( function( has), atom( variable( lower end)), data( turn down))), obligation( expression( function( at), atom( relation( turn down), variable( cladding)), data( gutter))), obligation( expression( function( in between), atom( variable( angle)), data( turn down))), obligation( expression( function( in between), atom( variable( angle)), data( cladding))), obligation( expression( function( equal), atom( variable( angle)), data( baseunit( kind( angle degree)), value( 30.0))))))","8.4.14 Turn-downs at gutters The lower ends of trapezoidal and trough profile roofing shall be turned down at gutters, where the roof pitch is less than 10°. The turn-down shall be 30° from the plane of the sheet.",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.16.0.1,"8.4 Profiled Metal Roof Cladding 8.4.16 Hidden, valley and internal gutters Hidden, valley and internal gutters shall be in accordance with Paragraph 8.1.6.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( gutter)), or( expression( function( is), atom( relation( type), variable( gutter)), data( hidden)), expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( is), atom( relation( type), variable( gutter)), data( internal))))), then( and( obligation( expression( function( comply with), atom( variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.6)))))","8.4.16 Hidden, valley and internal gutters Hidden, valley and internal gutters shall be in accordance with Paragraph 8.1.6.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.16.1.0.1,8.4 Profiled Metal Roof Cladding 8.4.16.1 Hidden gutters; Parallel hidden gutters shall be as shown in Figure 50 and Paragraph 8.1.6.2.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( hidden)), expression( function( is), atom( variable( gutter)), data( parallel)))), then( and( obligation( expression( function( as per), atom( variable( gutter)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f50))), obligation( expression( function( comply with), atom( variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.6.2)))))",8.4.16.1 Hidden gutters Parallel hidden gutters shall be as shown in Figure 50 and Paragraph 8.1.6.2.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.16.3.0.1,8.4 Profiled Metal Roof Cladding 8.4.16.3 Internal gutters; Internal gutters shall be as shown in Figure 52 and Paragraph 8.1.6.1.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( internal)))), then( and( obligation( expression( function( comply with), atom( variable( gutter)), data( figure))), obligation( expression( function( comply with), atom( variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f52))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.6.1)))))",8.4.16.3 Internal gutters Internal gutters shall be as shown in Figure 52 and Paragraph 8.1.6.1.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.17.0.1,8.4 Profiled Metal Roof Cladding 8.4.17 Roof penetrations; The maximum length of profiled roof cladding above penetrations shall be as shown in Table 17.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( penetration)))), then( and( obligation( expression( function( above), expression( function( max), atom( relation( length), variable( cladding))), data( penetration))), obligation( expression( function( as per), expression( function( max), atom( relation( length), variable( cladding))), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t17)))))",8.4.17 Roof penetrations The maximum length of profiled roof cladding above penetrations shall be as shown in Table 17.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.17.0.3,"8.4 Profiled Metal Roof Cladding 8.4.17 Roof penetrations; Roof penetrations shall be flashed as follows: a) Pipe penetrations up to 85 mm shall be flashed using an EPDM boot flashing as shown in Figure 53, b) Pipe penetrations up to 500 mm shall be flashed using a soaker flashing and EPDM boot flashing as shown in Figure 54, c) Rectangular penetrations up to 1200 mm wide shall be flashed using a soaker type flashing as shown in Figure 55.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( penetration)))), then( or( and( obligation( expression( function( is), atom( relation( type), variable( penetration)), data( pipe))), obligation( expression( function( less than equal), atom( relation( width), variable( penetration)), data( baseunit( kind( metre), prefix( milli)), value( 85.0)))), obligation( expression( function( has), atom( variable( penetration)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( epdm boot)))), and( obligation( expression( function( is), atom( relation( type), variable( penetration)), data( pipe))), obligation( expression( function( less than equal), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 500.0)))), obligation( expression( function( has), atom( variable( penetration)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( soaker))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( epdm boot)))), and( obligation( expression( function( is), atom( relation( type), variable( penetration)), data( rectangular))), obligation( expression( function( less than equal), atom( relation( width), variable( penetration)), data( baseunit( kind( metre), prefix( milli)), value( 1200.0)))), obligation( expression( function( has), atom( variable( penetration)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( soaker))))))","8.4.17 Roof penetrations Roof penetrations shall be flashed as follows: a) Pipe penetrations up to 85 mm shall be flashed using an EPDM boot flashing as shown in Figure 53, b) Pipe penetrations up to 500 mm shall be flashed using a soaker flashing and EPDM boot flashing as shown in Figure 54, c) Rectangular penetrations up to 1200 mm wide shall be flashed using a soaker type flashing as shown in Figure 55.","BaseUnit
LearnToIgnoreFigure
"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.5.1.0.1,Membranes composed of butyl or EPDM installed over plywood substrates 8.5.5 Installation 8.5.5.1 Plywood Substrates must be dry when membranes are applied. The plywood and timber substructure must be a maximum moisture content of 20% when a membrane is adhered.,"if( and( or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( over), atom( relation( installation), variable( membrane)), data( substrate)), expression( function( is), atom( relation( material), variable( substrate)), data( plywood)))), then( and( obligation( expression( function( less than equal), atom( relation( moisture content), variable( plywood)), data( 20 percent))), obligation( expression( function( less than equal), atom( relation( moisture content), variable( substructure)), data( 20 percent)))))",8.5.5 Installation 8.5.5.1 Plywood Substrates must be dry when membranes are applied. The plywood and timber substructure must be a maximum moisture content of 20% when a membrane is adhered.,"Abstract
Ignore"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.6.0.1.a.1,8.5.6 Roof and deck drainage; Membrane roofs shall be constructed to provide: a) Falls as shown in Figure 56 and details in Figures 57–64,"if( expression( function( is), atom( relation( type), variable( roof)), data( membrane))), then( and( obligation( expression( function( comply with), atom( relation( slope), variable( roof)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f56))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f57))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f58))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f59))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f60))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f61))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f62))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f63))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f64)))))",8.5.6 Roof and deck drainage Membrane roofs and decks shall be constructed to provide: a) Falls as shown in Figure 56 and details in Figures 57–64,"EnumeratesAll
Abstract"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.9.0.1,8.5.4 Butyl and EPDM 8.5.9 Penetrations; Penetrations through membrane roofs and decks shall be as shown in Figure 59 and Figure 60.,"if( and( or( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( is), atom( relation( application), variable( membrane)), data( deck))), or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( has), atom( variable( membrane)), data( penetration)))), then( and( obligation( expression( function( comply with), atom( variable( penetration)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f59))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f60)))))",8.5.9 Penetrations Penetrations through membrane roofs and decks shall be as shown in Figure 59 and Figure 60.,"DomainKnowledge
"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.9.1.0.1,8.5.4 Butyl and EPDM 8.5.9.1 Handrails; Fixing of posts for handrails into membrane roofs or decks is not covered by this Acceptable Solution.,"if( and( or( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( is), atom( relation( application), variable( membrane)), data( deck))), or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( has), atom( variable( membrane)), data( post)), expression( function( for), atom( variable( post)), data( handrail)))), then( prohibition( expression( function( comply with), atom( relation( fixing), variable( post)), data( nzbc e2as1))))",8.5.9.1 Handrails Fixing of posts for handrails into membrane roofs or decks is not covered by this Acceptable Solution.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.0.1,"9.1 General; Wall claddings shall meet the requirements of NZBC E2.3.2 to E2.3.7, and comply with the provisions of Paragraph 9.1.1 to Paragraph 9.9.","if( expression( function( is), atom( relation( application), variable( cladding)), data( wall))), then( and( obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.2))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.3))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.4))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.5))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.6))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2 3.7))), obligation( expression( function( comply with), atom( variable( cladding)), data( rule))), and( obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.1))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.5))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.6))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.7))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.8))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.9))))))","9.1 General Wall claddings shall meet the requirements of NZBC E2.3.2 to E2.3.7, and comply with the provisions of Paragraph 9.1.1 to Paragraph 9.9.","EnumeratesAll
ParagraphAsRule"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.0.2,9.0 Wall Claddings; Claddings in Extra High wind zones require: a) Rigid underlays to Paragraph 9.1.7.2 b) Drained cavities to Paragraph 9.1.8 c) Hooks and hems on flashing upstands,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( type), variable( wind zone)), data( extra high)))), then( and( obligation( expression( function( has), atom( variable( cladding)), data( underlay))), obligation( expression( function( is), atom( variable( underlay)), data( rigid))), obligation( expression( function( comply with), atom( variable( underlay)), data( nzbc e2as1 9.1.7.2))), obligation( expression( function( has), atom( variable( cladding)), data( drained cavity))), obligation( expression( function( comply with), atom( variable( drained cavity)), data( nzbc e2as1 9.1.8))), obligation( expression( function( has), atom( relation( upstand), variable( flashing)), data( hook))), obligation( expression( function( has), atom( relation( upstand), variable( flashing)), data( hem))), obligation( expression( function( for), atom( variable( flashing)), data( cladding)))))","Claddings in Extra High wind zones require: a) Rigid underlays to Paragraph 9.1.7.2 b) Drained cavities to Paragraph 9.1.8 c) Hooks and hems on flashing upstands, and additional 25 mm height to Paragraph 4.6.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.1.0.1,9.1.1 Limitations; This Acceptable Solution is limited to the wall cladding systems listed in Paragraph 3.3.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( as per), atom( relation( system), variable( cladding)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 3.3)))), then( permission( expression( function( comply with), atom( relation( system), variable( cladding)), data( nzbc e2as1))))",9.1.1 Limitations This Acceptable Solution is limited to the wall cladding systems listed in Paragraph 3.3.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.2.0.1,9.1.2 Maintenance; Maintenance of wall claddings shall be carried out as necessary to achieve the expected durability of the material – refer to Paragraph 2.5.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( has), atom( relation( material), variable( cladding)), data( durability)))), then( and( obligation( expression( function( include), atom( variable( cladding)), data( maintenance))), obligation( expression( function( comply with), atom( relation( task), variable( maintenance)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 2.5.0)))))",9.1.2 Maintenance Maintenance of wall claddings shall be carried out as necessary to achieve the expected durability of the material – refer to Paragraph 2.5.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.0.1,"9.0 Wall Claddings 9.1.3 Bottom of cladding; Separations, clearances to ground level, and overlaps shall be as shown in Figure 65 and Table 18.","if( expression( function( is), atom( relation( application), variable( cladding)), data( wall))), then( and( obligation( expression( function( comply with), atom( relation( separation), variable( cladding)), data( figure))), obligation( expression( function( comply with), atom( relation( separation), variable( cladding)), data( table))), expression( function( to), atom( relation( clearance), variable( cladding)), data( ground level)), and( obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( figure))), obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( table)))), and( obligation( expression( function( comply with), atom( relation( overlap), variable( cladding)), data( figure))), obligation( expression( function( comply with), atom( relation( overlap), variable( cladding)), data( table)))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f65))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18)))))","9.1.3 Bottom of cladding Separations, clearances to ground level, and overlaps shall be as shown in Figure 65 and Table 18.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.0.2,9.0 Wall Claddings; Clearances to roof claddings and decks shall be minimum 35 mm – refer to Table 7 and Figure 18.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( to), atom( relation( clearance), variable( cladding)), data( roof cladding)), expression( function( to), atom( relation( clearance), variable( cladding)), data( deck)))), then( and( obligation( expression( function( greater than equal), atom( relation( clearance), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 35.0)))), and( obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( table))), obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( figure)))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t7))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f18)))))",Clearances to roof claddings and decks shall be minimum 35 mm – refer to Table 7 and Figure 18.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.0.4,9.0 Wall Claddings; 9.1.3 Bottom of cladding; Clearances shall be measured to: b) The top surface of any adjacent sloped or horizontal apron flashing.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( define), expression( function( bottom of), atom( variable( cladding))), data( x0)), expression( function( adjacent), atom( variable( flashing)), data( wall)), expression( function( is), atom( relation( type), variable( flashing)), data( apron)), or( expression( function( is), atom( variable( flashing)), data( sloped)), expression( function( is), atom( variable( flashing)), data( horizontal))), expression( function( has), atom( variable( flashing)), data( top surface)))), then( and( obligation( expression( function( has), atom( relation( clearance), variable( cladding)), data( measurement))), obligation( expression( function( from), atom( variable( measurement)), data( x0))), obligation( expression( function( to), atom( variable( measurement)), data( top surface)))))",9.1.3 Bottom of cladding Clearances shall be measured to: b) The top surface of any adjacent sloped or horizontal apron flashing.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.4.0.1,"9.1.3.4 Garages and openings to garages; Garage spaces within, or attached to, the building envelope shall have: a) Openings provided with a 50 mm minimum total level change between the interior and the exterior paving, b) Provision to drain water away from the threshold of the opening c) Rigid wall underlays, to Table 23, where external garage walls are unlined d) linings to garage walls adjoining habitable spaces e) weather resisting garage doors f) window and door details (where included) to Paragraphs 9.2 to 9.9.","if( or( expression( function( connect), atom( variable( garage)), data( building)), expression( function( within), atom( variable( garage)), data( building)))), then( and( expression( function( define), atom( relation( interior paving), variable( garage)), data( x0)), expression( function( define), atom( relation( exterior paving), variable( garage)), data( x1)), obligation( expression( function( from), atom( relation( measurement), variable( level change)), data( x0))), obligation( expression( function( to), atom( relation( measurement), variable( level change)), data( x1))), obligation( expression( function( greater than equal), atom( variable( level change)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))), expression( function( has), atom( variable( garage)), data( opening)), obligation( expression( function( has), atom( variable( garage)), data( water drainage))), obligation( expression( function( away from), atom( relation( direction), variable( water drainage)), data( opening))), expression( function( is), atom( relation( wall), variable( garage)), data( external)), not( expression( function( has), atom( relation( wall), variable( garage)), data( lining))), obligation( expression( function( has), atom( relation( wall), variable( garage)), data( underlay))), obligation( expression( function( is), atom( variable( underlay)), data( rigid))), obligation( expression( function( comply with), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), expression( function( adjoin), atom( relation( wall), variable( garage)), data( habitable space)), obligation( expression( function( has), atom( relation( wall), variable( garage)), data( lining))), obligation( expression( function( is), atom( relation( door), variable( garage)), data( weather resistant))), obligation( expression( function( comply with), atom( relation( window), variable( garage)), data( rule))), obligation( expression( function( comply with), atom( relation( door), variable( garage)), data( rule))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.2))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.3))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.4))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.5))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.6))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.7))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.8))), obligation( expression( function( include), atom( relation( key), variable( rule)), data( 9.9)))))","9.1.3.4 Garages and openings to garages Refer to Figure 65 and Table 18 for overall level change requirements. Garage spaces within, or attached to, the building envelope shall have: a) Openings provided with a 50 mm minimum total level change between the interior and the exterior paving, b) Provision to drain water away from the threshold of the opening c) Rigid wall underlays, to Table 23, where external garage walls are unlined d) linings to garage walls adjoining habitable spaces e) weather resisting garage doors f) window and door details (where included) to Paragraphs 9.2 to 9.9.","SomeDetailsNotEncoded
Abstract
ConditionsInThen
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.5.0.1,"9.1.3.5 Bottom of wall claddings for timber floor framing; Suspended timber floors shall meet the requirements of NZS 3604. Clearances from paved and unpaved surfaces to the wall framing shall be in accordance with NZS 3604, and Table 18.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( adjacent), atom( variable( floor)), data( cladding)), expression( function( is), atom( variable( floor)), data( suspended)), expression( function( is), atom( relation( material), variable( floor)), data( timber)))), then( and( obligation( expression( function( comply with), atom( variable( floor)), data( nzs 3604))), obligation( expression( function( from), atom( relation( clearance), variable( cladding)), data( floor))), obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( nzs 3604))), obligation( expression( function( comply with), atom( relation( clearance), variable( cladding)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18)))))","9.1.3.5 Bottom of wall claddings for timber floor framing Suspended timber floors shall meet the requirements of NZS 3604. Clearances from paved and unpaved surfaces to the wall framing shall be in accordance with NZS 3604, and Table 18.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.2.2.0.0.a.1,9.0 Wall claddings; 9.2.2 General 1) The materials and workmanship of masonry veneer shall be in accordance with SNZ HB 4236 and have a maximum mass of veneer of 220 kg/m2 and minimum veneer thickness of 70 mm,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer)))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( masonry veneer)), data( snz hb 4236))), obligation( expression( function( comply with), atom( relation( workmanship), variable( masonry veneer)), data( snz hb 4236))), obligation( expression( function( less than equal), atom( relation( mass), variable( masonry veneer)), data( derivedunit( baseunit( prefix( kilo), kind( gram)), operator( name( division)), baseunit( kind( metre), exponent( 2.0))), value( 220.0)))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( masonry veneer)), data( baseunit( kind( metre), prefix( milli)), value( 70.0))))))",9.2.2 General 1) The materials and workmanship of masonry veneer shall be in accordance with SNZ HB 4236 and have a maximum mass of veneer of 220 kg/m2 and minimum veneer thickness of 70 mm,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.7.1.0.1,"9.0 Wall Claddings 9.7.1 Limitations; This Acceptable Solution is limited to the following types of fibre cement sheet cladding systems: a) Flush-finished systems over a drained cavity using sheets of 7.5 mm minimum thickness, with i) fibre cement sheets manufactured with a rebated edge for this purpose, ii) if necessary for part sheets, rebated on site using a purpose-made tool, and iii) have all edges sealed, iv) joints, comprising a bedding compound and reinforcing tape, that are finished in accordance with Paragraph 9.7.10.4","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( form), variable( cladding)), data( sheet)), expression( function( is), atom( relation( material), variable( cladding)), data( fibre cement)))), then( and( obligation( expression( function( is), atom( relation( finish), variable( cladding)), data( flush))), obligation( expression( function( over), atom( variable( cladding)), data( drained cavity))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( cladding)), data( baseunit( kind( metre), prefix( milli)), value( 7.5)))), obligation( expression( function( has), atom( relation( sheet), variable( cladding)), data( rebated edge))), or( obligation( expression( function( is), atom( variable( rebated edge)), data( manufactured))), obligation( expression( function( is), atom( variable( rebated edge)), data( formed insitu)))), obligation( expression( function( is), atom( variable( rebated edge)), data( sealed))), obligation( expression( function( has), atom( relation( sheet), variable( cladding)), data( joint))), obligation( expression( function( include), atom( relation( joint), variable( cladding)), data( bedding compound))), obligation( expression( function( include), atom( relation( joint), variable( cladding)), data( reinforcing tape))), obligation( expression( function( comply with), atom( relation( joint), variable( cladding)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.7.10.4)))))","9.7.1 Limitations This Acceptable Solution is limited to the following types of fibre cement sheet cladding systems: a) Flush-finished systems over a drained cavity using sheets of 7.5 mm minimum thickness, with i) fibre cement sheets manufactured with a rebated edge for this purpose, ii) if necessary for part sheets, rebated on site using a purpose-made tool, and iii) have all edges sealed, iv) joints, comprising a bedding compound and reinforcing tape, that are finished in accordance with Paragraph 9.7.10.4","EncodeReverse
DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.7.2.0.1,9.0 Wall Claddings; 9.7 Fibre Cement Sheet 9.7.2 Material and installation – both systems; Fibre cement shall comply with AS/NZS 2908: Part 2.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( form), variable( cladding)), data( sheet)), expression( function( is), atom( relation( material), variable( cladding)), data( fibre cement)))), then( obligation( expression( function( comply with), atom( variable( fibre cement)), data( asnzs 2903.2))))",9.7.2 Material and installation – both systems Fibre cement shall comply with AS/NZS 2908: Part 2.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.9.7.0.1,The bottom of the EIFS cladding shall be as shown in Figure 125.,"if( expression( function( is), atom( relation( type), variable( cladding)), data( eifs))), then( and( obligation( expression( function( comply with), expression( function( bottom of), atom( variable( cladding))), data( figure))), expression( function( equal), atom( relation( key), variable( figure)), data( f125))))",9.9.7 EIFS/floor slab junction The bottom of the EIFS cladding shall be as shown in Figure 125.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.9.8.0.1,9.9.8 Pipes and service penetrations; All pipes and service penetrations through the EIFS shall be made weatherproof,"if( and( expression( function( is), atom( relation( type), variable( cladding)), data( eifs)), expression( function( has), atom( variable( cladding)), data( penetration)))), then( obligation( expression( function( has), atom( variable( penetration)), data( weather proofing protection))))",9.9.8 Pipes and service penetrations All pipes and service penetrations through the EIFS shall be made weatherproof,"Abstract
SplitableEntities
SomeDetailsNotEncoded"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.9.10.0.1,Parapets shall comply with Paragraph 6.0.,"if( expression( function( is), atom( variable( parapet)), data( true))), then( and( obligation( expression( function( comply with), atom( variable( parapet)), data( rule))), expression( function( equal), atom( relation( key), variable( rule)), data( 6))))",9.9.10 Parapets and enclosed balustrades Parapets shall comply with Paragraph 6.0.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.9.10.0.2,9.9.10 Parapets and enclosed balustrades; Enclosed balustrades shall comply with Paragraph 7.4.,"if( expression( function( is), atom( variable( balustrade)), data( enclosed))), then( and( obligation( expression( function( comply with), atom( variable( balustrade)), data( rule))), expression( function( equal), atom( relation( key), variable( rule)), data( 7.4))))",9.9.10 Parapets and enclosed balustrades; Enclosed balustrades shall comply with Paragraph 7.4.,
lrml/NZ_NZBC-G12AS2#3.12.lrml,r1.0.1.0.1,1.0.1 This Acceptable Solution applies to solar water heaters installed in or on buildings.,"if( or( expression( function( in), atom( relation( installation), variable( solar water heater)), data( building)), expression( function( on), atom( relation( installation), variable( solar water heater)), data( building)))), then( obligation( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2))))",1.0.1 This Acceptable Solution applies to solar water heaters installed in or on buildings.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r1.0.2.0.1,1.0.2 To comply with this Acceptable Solution solar water heaters must also comply with the appropriate requirements of G12/AS1.,"if( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2))), then( obligation( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as1))))",1.0.2 To comply with this Acceptable Solution solar water heaters must also comply with the appropriate requirements of G12/AS1.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r1.0.2.0.2,"Solar water heater; This Acceptable Solution meets the requirements of NZBC Clauses B1, B2, E2, G12 and H1.","if( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2))), then( and( expression( function( comply with), atom( variable( solar water heater)), data( nzbc b1)), expression( function( comply with), atom( variable( solar water heater)), data( nzbc b2)), expression( function( comply with), atom( variable( solar water heater)), data( nzbc e2)), expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12)), expression( function( comply with), atom( variable( solar water heater)), data( nzbc h1))))","This Acceptable Solution meets the requirements of NZBC Clauses B1, B2, E2, G12 and H1.","ImplicitReference
Questionable
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r1.1.1.0.1,"1.1.1 Where a building has not been specifically designed to support a solar water heater, this Acceptable Solution can be used for the support and fixing of a solar collector on buildings that meet the structural requirements specified in any one of the following: • NZS 3604: 1990 • NZS 3604: 1999 • NZS 3604: 2011 • NZS 4203 • AS/NZS 1170: Parts 0, 1, 2, 3 and NZS 1170: Part 5. But only when all of the following requirements are met: a) the weight of solar collector, including frames, fittings, and heat transfer fluid, has a combined weight of no more than 22 kg per square metre (based on the gross area of the solar collector), and b) the hot water storage tank is not installed on or above the roof","if( and( not( expression( function( for), atom( relation( design), variable( building)), data( solar water heater))), expression( function( on), atom( relation( installation), variable( solar collector)), data( building)), or( expression( function( comply with), atom( relation( structure), variable( building)), data( nzs 3604 1990)), expression( function( comply with), atom( relation( structure), variable( building)), data( nzs 3604 1999)), expression( function( comply with), atom( relation( structure), variable( building)), data( nzs 3604 2011)), expression( function( comply with), atom( relation( structure), variable( building)), data( nzs 4203)), expression( function( comply with), atom( relation( structure), variable( building)), data( asnzs 1170.0)), expression( function( comply with), atom( relation( structure), variable( building)), data( asnzs 1170.1)), expression( function( comply with), atom( relation( structure), variable( building)), data( asnzs 1170.2)), expression( function( comply with), atom( relation( structure), variable( building)), data( asnzs 1170.3)), expression( function( comply with), atom( relation( structure), variable( building)), data( asnzs 1170.5))), expression( function( define), atom( relation( weight), variable( solar collector)), data( x0)), expression( function( define), atom( relation( weight), variable( frame)), data( x1)), expression( function( define), atom( relation( weight), variable( fitting)), data( x2)), expression( function( define), atom( relation( weight), variable( heat transfer fluid)), data( x3)), expression( function( equal), atom( variable( combined weight)), data( x0 + x1 + x2 + x3)), expression( function( define), atom( relation( gross area), variable( solar collector)), data( x4)), expression( function( equal), atom( relation( per unit area), variable( weight)), data( combined weight / x4)), expression( function( less than equal), atom( relation( per unit area), variable( weight)), data( baseunit( prefix( kilo), kind( gram)), value( 22.0))), not( expression( function( on), atom( relation( installation), variable( hot water storage tank)), data( roof))), not( expression( function( above), atom( relation( installation), variable( hot water storage tank)), data( roof))))), then( and( permission( expression( function( comply with), atom( relation( support), variable( solar collector)), data( nzbc g12as2))), permission( expression( function( comply with), atom( relation( fixing), variable( solar collector)), data( nzbc g12as2)))))","1.1.1 Where a building has not been specifically designed to support a solar water heater, this Acceptable Solution can be used for the support and fixing of a solar collector on buildings that meet the structural requirements specified in any one of the following: • NZS 3604: 1990 • NZS 3604: 1999 • NZS 3604: 2011 • NZS 4203 • AS/NZS 1170: Parts 0, 1, 2, 3 and NZS 1170: Part 5. But only when all of the following requirements are met: a) the weight of solar collector, including frames, fittings, and heat transfer fluid, has a combined weight of no more than 22 kg per square metre (based on the gross area of the solar collector), and b) the hot water storage tank is not installed on or above the roof","WrongNot
Complex
SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r2.1.1.0.1,"2.1.1 All material used to install the solar water heater must: a) meet the durability requirements of NZBC Clause B2, and b) be suitable for their use, location and environment as shown in Table 1, and c) be compatible with adjoining materials as shown in Table 2, and d) be compatible with materials subject to run-off as shown in Table 3 (except as described in Paragraph 2.1.2).","if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( material))), then( and( obligation( expression( function( comply with), atom( variable( material)), data( nzbc b2))), obligation( expression( function( comply with), atom( variable( material)), data( nzbc g12as2 t1))), obligation( expression( function( comply with), atom( variable( material)), data( nzbc g12as2 t2))), obligation( expression( function( comply with), atom( variable( material)), data( nzbc g12as2 t3)))))","2.1.1 All material used to install the solar water heater must: a) meet the durability requirements of NZBC Clause B2, and b) be suitable for their use, location and environment as shown in Table 1, and c) be compatible with adjoining materials as shown in Table 2, and d) be compatible with materials subject to run-off as shown in Table 3 (except as described in Paragraph 2.1.2).","EqualTrue
Abstract
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r2.1.3.0.1,Solar Water Heaters 2.1.3 If the requirements described in Paragragh 2.1.2 are not met then either the EPDM boots or the galvanised roofing must be painted with a suitable protective coating.,"if( not( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2 2.1.2)))), then( or( obligation( expression( function( is), atom( relation( paint), variable( epdm boots)), data( protective))), obligation( expression( function( is), atom( relation( paint), variable( galvanised roofing)), data( protective)))))",2.1.3 If the requirements described in Paragragh 2.1.2 are not met then either the EPDM boots or the galvanised roofing must be painted with a suitable protective coating.,"protective coating
MissingInformation
ConnectionMissing
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r2.1.4.0.1,Solar Water Heaters 2.1.4 Table 2 shows that galvanized fixings must be used rather than stainless steel when in contact with galvanized cladding and zinc-aluminium-magnesium (combinations) coated cladding. (This includes mounting brackets and straps.),"if( and( expression( function( has), atom( variable( solar water heater)), data( fixing)), or( expression( function( adjoin), atom( variable( fixing)), data( galvanised cladding)), expression( function( adjoin), atom( variable( fixing)), data( zinc aluminium magnesium coated cladding))))), then( obligation( expression( function( is), atom( relation( material), variable( fixing)), data( galvanised))))",2.1.4 Table 2 shows that galvanized fixings must be used rather than stainless steel when in contact with galvanized cladding and zinc-aluminium-magnesium (combinations) coated cladding. (This includes mounting brackets and straps.),"UselessInfoInBrackets
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.1.1.0.1,3.1.1 Solar water heaters must comply with AS/NZS 2712,"if( expression( function( is), atom( variable( solar water heater)), data( true))), then( obligation( expression( function( comply with), atom( variable( solar water heater)), data( nzs 2712))))",3.1.1 Solar water heaters must comply with AS/NZS 2712,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.1.2.0.1,3.1.2 Tanks installed as part of a pumped solar water heater where the tank is separately mounted from the collector must comply with the minimum tank insulation requirements of AS/NZS 4692.2.,"if( and( expression( function( is), atom( relation( type), variable( solar water heater)), data( pumped)), expression( function( part of), atom( variable( tank)), data( solar water heater)), expression( function( away from), atom( variable( tank)), data( collector)))), then( obligation( expression( function( comply with), atom( variable( tank)), data( nzs 4692.2))))",3.1.2 Tanks installed as part of a pumped solar water heater where the tank is separately mounted from the collector must comply with the minimum tank insulation requirements of AS/NZS 4692.2.,"ConnectionMissing
Abstract
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.2.1.0.1,"3.2.1 Where a solar water heater has a controller, the controller must meet the requirements specified in AS/NZS 2712: clause 6.3.","if( expression( function( has), atom( variable( solar water heater)), data( controller))), then( obligation( expression( function( comply with), atom( variable( controller)), data( nzs 2712 6.3))))","3.2.1 Where a solar water heater has a controller, the controller must meet the requirements specified in AS/NZS 2712: clause 6.3.",MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.2.3.0.1,3.2.3 A solar water heater which meets the requirements described in Paragraphs 3.2.1 and/or 3.2.2 satisfies NZBC Clause H1.3.4.,"if( or( expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2 3.2.1)), expression( function( comply with), atom( variable( solar water heater)), data( nzbc g12as2 3.2.2)))), then( expression( function( comply with), atom( variable( solar water heater)), data( nzbc h1 3.4)))",3.2.3 A solar water heater which meets the requirements described in Paragraphs 3.2.1 and/or 3.2.2 satisfies NZBC Clause H1.3.4.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.3.1.0.1,3.3.1 Solar water heaters must have a minimum of 50 litres of hot water storage per square metre of collector area.,"if( expression( function( has), atom( variable( solar water heater)), data( controller))), then( and( obligation( expression( function( has), atom( variable( solar water heater)), data( hot water storage))), expression( function( define), atom( relation( area), variable( controller)), data( x0)), expression( function( is), atom( relation( unit), variable( x0)), data( m^2)), obligation( expression( function( greater than equal), atom( relation( capacity), variable( hot water storage)), data( 50 l * x0)))))",3.3.1 Solar water heaters must have a minimum of 50 litres of hot water storage per square metre of collector area.,"Tacit
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.4.1.0.1,3.4.1 Storage tanks in solar water heaters must have operating and safety devices that meet the requirements of G12/AS1 Paragraph 6.,"if( expression( function( has), atom( variable( solar water heater)), data( storage tank))), then( obligation( expression( function( comply with), atom( variable( storage tank)), data( nzbc g12as1 6))))",3.4.1 Storage tanks in solar water heaters must have operating and safety devices that meet the requirements of G12/AS1 Paragraph 6.,"Abstract
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.4.2.0.1,3.0 Solar Water Heater Requirements; Vent pipes and outlets from pressure relief valves must be plumbed to a suitable drain point.,"if( and( expression( function( has), atom( variable( solar water heater)), data( pressure relief valve)), or( expression( function( has), atom( variable( pressure relief valve)), data( vent pipe)), expression( function( has), atom( variable( pressure relief valve)), data( outlet))))), then( and( obligation( expression( function( has), atom( variable( vent pipe)), data( plumbing))), obligation( expression( function( has), atom( variable( outlet)), data( plumbing))), obligation( expression( function( into), atom( variable( plumbing)), data( drain point)))))",Vent pipes and outlets from pressure relief valves must be plumbed to a suitable drain point.,SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r4.2.1.0.1,4.2.1 Solar collectors must face within +/- 90 degrees of geographic north (ie between east and west) to satisfy the requirements of NZBC Clause H1.3.4(a).,"if( expression( function( is), atom( relation( installation), variable( solar collector)), data( true))), then( obligation( expression( function( within), atom( relation( orientation), variable( solar collector)), data( +/- 90 degrees of geographical north))))",4.2.1 Solar collectors must face within +/- 90 degrees of geographic north (ie between east and west) to satisfy the requirements of NZBC Clause H1.3.4(a).,"NotEncodedParts
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r4.2.2.0.1,4.2.2 Solar collectors must be inclined at an angle within +/- 20 degrees of the angle of latitude (from the horizontal) to satisfy the requirements of NZBC Clause H1.3.4(a).,"if( expression( function( is), atom( relation( installation), variable( solar collector)), data( true))), then( obligation( expression( function( equal), atom( relation( inclination angle), variable( solar collector)), data( +/- 20 degrees of the angle of latitude))))",4.2.2 Solar collectors must be inclined at an angle within +/- 20 degrees of the angle of latitude (from the horizontal) to satisfy the requirements of NZBC Clause H1.3.4(a).,"NotEncodedParts
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.0.1.0.1,"5.0.1 Solar water heaters must be installed in accordance with the requirements of AS/NZS 3500 Part 4, unless modified by this Acceptable Solution.","if( expression( function( is), atom( relation( installation), variable( solar water heater)), data( true))), then( or( obligation( expression( function( comply with), atom( relation( installation), variable( solar water heater)), data( nzs 3500.4))), obligation( expression( function( by), atom( relation( modification), variable( nzs 3500.4)), data( nzbc g12as2)))))","5.0.1 Solar water heaters must be installed in accordance with the requirements of AS/NZS 3500 Part 4, unless modified by this Acceptable Solution.",MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.0.2.0.1,"5.0.2 Water storage tanks that form part of a solar water heater must have drain pipes that: a) have an easily reached isolating valve, and terminate with a cap or plug to empty the vessel for maintenance, or b) terminate outside the building with a cap only.","if( expression( function( has), atom( relation( component), variable( solar water heater)), data( water storage tank))), then( and( obligation( expression( function( has), atom( variable( water storage tank)), data( drain pipe))), or( and( obligation( expression( function( has), atom( variable( drain pipes)), data( isolating valve))), obligation( expression( function( is), atom( relation( property), variable( isolating valve)), data( easily reached))), or( obligation( expression( function( by), atom( relation( termination), variable( drain pipes)), data( cap))), obligation( expression( function( by), atom( relation( termination), variable( drain pipes)), data( plug))))), and( obligation( expression( function( by), atom( relation( termination), variable( drain pipes)), data( cap))), obligation( expression( function( outside), atom( relation( termination), variable( drain pipes)), data( building)))))))",5.0.2 Water storage tanks that form part of a solar water heater must have drain pipes,"Complex
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.0.3.0.1,"5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.","if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))","5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.1.1.0.1,"5.1.1 Where water is heated by a wetback water heater and a solar collector, independent water pipe circuits must be installed for each heat source.","if( and( expression( function( is), atom( relation( heating method), variable( water)), data( wetback water heater)), expression( function( is), atom( relation( heating method), variable( water)), data( solar collector)))), then( and( obligation( expression( function( has), atom( variable( wetback water heater)), data( water pipe circuits))), expression( function( define), atom( relation( water pipe circuits), variable( wetback water heater)), data( x0)), obligation( expression( function( has), atom( variable( solar collector)), data( water pipe circuits))), expression( function( define), atom( relation( water pipe circuits), variable( solar collector)), data( x1)), obligation( not( expression( function( equal), atom( variable( x0)), data( x1))))))","5.1.1 Where water is heated by a wetback water heater and a solar collector, independent water pipe circuits must be installed for each heat source.","Tacit
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.3.0.1,5.2.3 Penetrations through masonry tile roofs must be as shown in Figure 5.,"if( and( expression( function( is), atom( relation( type), variable( roof)), data( masonry tile)), expression( function( has), atom( variable( roof)), data( penetration)))), then( obligation( expression( function( comply with), atom( relation( penetration), variable( roof)), data( nzbc g12as2 f5))))",5.2.3 Penetrations through masonry tile roofs must be as shown in Figure 5.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.4.0.1,5.2.4 Pipe penetrations in pressed metal tile roofs must be flashed using EPDM or silicone rubber boot flashings as shown in Figure 6.,"if( and( expression( function( is), atom( relation( type), variable( roof)), data( pressed metal tile)), expression( function( has), atom( variable( roof)), data( penetration)))), then( and( obligation( expression( function( has), atom( relation( penetration), variable( roof)), data( flashing))), or( obligation( expression( function( is), atom( relation( type), variable( flashing)), data( epdm boot))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( silicone rubber boot))))))",5.2.4 Pipe penetrations in pressed metal tile roofs must be flashed using EPDM or silicone rubber boot flashings as shown in Figure 6.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.5.0.1.a.1,5.2.5 Roof penetrations in profiled metal roofs must be flashed as follows. Pipe penetrations up to 60 mm diameter must be flashed using an EPDM boot flashing as shown in Figure 6,"if( and( expression( function( is), atom( relation( type), variable( roof)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( penetration)), expression( function( is), atom( relation( type), variable( penetration)), data( pipe)), expression( function( less than equal), atom( relation( diameter), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 60.0))))), then( and( obligation( expression( function( has), atom( relation( penetration), variable( roof)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( epdm boot)))))",5.2.5 Roof penetrations in profiled metal roofs must be flashed as follows. Pipe penetrations up to 60 mm diameter must be flashed using an EPDM boot flashing as shown in Figure 6,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.5.0.1.b.1,5.2.5 Roof penetrations in profiled metal roofs must be flashed as follows. b) Rectangular penetrations up to 1200 mm wide must be flashed using a soaker type flashing as shown in Figure 7.,"if( and( expression( function( is), atom( relation( type), variable( roof)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( penetration)), expression( function( is), atom( relation( type), variable( penetration)), data( rectangular)), expression( function( less than equal), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 1200.0))))), then( and( obligation( expression( function( has), atom( relation( penetration), variable( roof)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( soaker)))))",5.2.5 Roof penetrations in profiled metal roofs must be flashed as follows. b) Rectangular penetrations up to 1200 mm wide must be flashed using a soaker type flashing as shown in Figure 7.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.7.0.1,5.2.7 Penetrations through membrane roofs must be as shown in Figure 8.,"if( and( expression( function( is), atom( relation( type), variable( roof)), data( membrane)), expression( function( has), atom( variable( roof)), data( penetration)))), then( obligation( expression( function( comply with), atom( relation( penetration), variable( roof)), data( nzbc g12as2 f8))))",5.2.7 Penetrations through membrane roofs must be as shown in Figure 8.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.9.0.1,"5.2.9 Sealant used in the installation of solar water heaters must be a neutral cure silicone sealant and must be used in conjunction with mechanical fasteners. The sealant must comply with: a) Type F, Class 2OLM or 25LM of ISO 11600, or b) low modulus Type II Class A of Federal Specification TT-S-00230C.","if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( sealant))), then( and( obligation( expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure silicone))), obligation( expression( function( adjoin), atom( variable( sealant)), data( mechanical fastener))), or( obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 20lm))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 25lm))), obligation( expression( function( comply with), atom( variable( sealant)), data( tts 00230c low modulus type ii class a))))))",5.2.9 Sealant used in the installation of solar water heaters must be a neutral cure silicone sealant and must be used in conjunction with mechanical fasteners.,"ComplexReference
OldRev
SplitableEntities"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.10.0.1,5.2.10 Acetic cured silicone sealants may be used with stainless steel but must not be used on zinc or aluminium-zinc coatings.,"if( and( expression( function( include), atom( relation( installation), variable( solar water heater)), data( sealant)), expression( function( is), atom( relation( type), variable( sealant)), data( acetic cured silicone)))), then( and( permission( expression( function( for), atom( variable( sealant)), data( stainless steel))), or( prohibition( expression( function( for), atom( variable( sealant)), data( zinc coating))), prohibition( expression( function( for), atom( variable( sealant)), data( aluminium zinc coating))))))",5.2.10 Acetic cured silicone sealants may be used with stainless steel but must not be used on zinc or aluminium-zinc coatings.,SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.2.12.0.1,5.2.12 All fixings or penetrations through the roof must be through the crests of the roof cladding.,"if( or( expression( function( has), atom( variable( roof)), data( fixing)), expression( function( has), atom( variable( roof)), data( penetration)))), then( and( obligation( expression( function( is), atom( relation( location), variable( fixing)), data( roof cladding crest))), expression( function( is), atom( relation( location), variable( penetration)), data( roof cladding crest))))",5.2.12 All fixings or penetrations through the roof must be through the crests of the roof cladding.,"LongEntities
"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.3.1.0.1,5.3.1 Pipes and their supports must be electrochemically compatible or be electrolytically separated (refer to Table 2).,"if( expression( function( has), atom( variable( pipe)), data( pipe support))), then( or( and( expression( function( define), atom( relation( material), variable( pipe)), data( x0)), expression( function( define), atom( relation( material), variable( pipe support)), data( x1)), obligation( expression( function( in between), atom( variable( electrochemical compatibility)), data( x0))), obligation( expression( function( in between), atom( variable( electrochemical compatibility)), data( x1)))), and( and( obligation( expression( function( in between), atom( variable( separation)), data( pipe))), obligation( expression( function( in between), atom( variable( separation)), data( pipe support)))), obligation( expression( function( is), atom( relation( type), variable( separation)), data( electrolytical))))))",5.3.1 Pipes and their supports must be electrochemically compatible or be electrolytically separated (refer to Table 2).,"DomainKnowledge
Complex
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.3.2.0.1,"5.3.2 Pipes must be installed and supported to permit thermal movement, except where anchor points are necessary.","if( or( not( expression( function( has), atom( variable( pipe)), data( anchor point))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( anchor point))), data( pipe))), appliedstatement( not( expression( function( is), atom( variable( anchor point)), data( necessary))))))), then( and( obligation( expression( function( has), atom( variable( pipe)), data( thermal movement allowance))), obligation( expression( function( has), atom( variable( pipe support)), data( thermal movement allowance)))))","5.3.2 Pipes must be installed and supported to permit thermal movement, except where anchor points are necessary.","Complex
DomainKnowledge
SplitableEntities
Bad"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.4.1.0.1,"5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device.","if( not( expression( function( connect), atom( variable( hot water pipe)), data( heat dissipation device)))), then( obligation( expression( function( comply with), atom( variable( hot water pipe)), data( nzbc h1 3.4))))","5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device.",SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.2.0.1,"6.2.2 The installation of solar collectors must not dent, bend or distort the roof cladding or damage any protective coatings.","if( and( expression( function( is), atom( relation( installation), variable( solar collector)), data( true)), expression( function( is), atom( relation( location), variable( solar collector)), data( roof cladding)))), then( and( prohibition( expression( function( is), atom( variable( roof cladding)), data( dented))), prohibition( expression( function( is), atom( variable( roof cladding)), data( bent))), prohibition( expression( function( is), atom( variable( roof cladding)), data( distorted))), prohibition( expression( function( is), atom( variable( protective coating)), data( damaged)))))","6.2.2 The installation of solar collectors must not dent, bend or distort the roof cladding or damage any protective coatings.","Tacit
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.3.0.1,6.2.3 All fixings that penetrate metal cladding must be provided with sealing washers or boots to prevent leakage in accordance with Paragraph 5.2.,"if( and( expression( function( has), atom( variable( metal cladding)), data( penetration)), expression( function( is), atom( relation( type), variable( penetration)), data( fixing)))), then( and( or( obligation( expression( function( has), atom( variable( fixing)), data( sealing washer))), obligation( expression( function( has), atom( variable( fixing)), data( boot)))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 5.2)))))",6.2.3 All fixings that penetrate metal cladding must be provided with sealing washers or boots to prevent leakage in accordance with Paragraph 5.2.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.4.0.1,6.2.4 Solar collectors must be supported at no less than four points. ,"if( expression( function( is), atom( relation( installation), variable( solar collector)), data( true))), then( and( obligation( expression( function( has), atom( relation( installation), variable( solar collector)), data( support))), obligation( expression( function( greater than equal), expression( function( count), atom( relation( point), variable( support))), data( 4)))))",6.2.4 Solar collectors must be supported at no less than four points. The outermost support points must be within 200 mm of the outside edge of the solar collector.,DomainKnowledge
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.4.0.2,Solar collectors; The outermost support points must be within 200 mm of the outside edge of the solar collector.,"if( and( expression( function( has), atom( relation( installation), variable( solar collector)), data( support)), expression( function( is), atom( relation( location), variable( support)), data( outermost)), expression( function( define), atom( relation( centreline), variable( support)), data( x0)), expression( function( define), atom( relation( outside edge), variable( solar collector)), data( x1)))), then( and( obligation( expression( function( in between), atom( relation( dimension), variable( installation)), data( x0))), obligation( expression( function( in between), atom( relation( dimension), variable( installation)), data( x1))), obligation( expression( function( less than equal), atom( relation( dimension), variable( installation)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))))",The outermost support points must be within 200 mm of the outside edge of the solar collector.,"DomainKnowledge
FineGrained"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.6.0.1.a.1,6.2.6 All screw fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: a) 20 mm for 8 gauge screws,"if( and( expression( function( has), atom( variable( roof)), data( framing)), expression( function( is), atom( relation( material), variable( framing)), data( timber)), expression( function( has), atom( relation( framing), variable( roof)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( equal), atom( relation( size), variable( screw)), data( 8 gauge)), expression( function( define), atom( relation( centreline), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( timber)), data( x1)))), then( and( obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x0))), obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x1))), expression( function( greater than equal), atom( relation( dimension), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 20.0)))))",6.2.6 All screw and bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: a) 20 mm for 8 gauge screws,"DomainKnowledge
FineGrained"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.6.0.1.b.1,6.2.6 All screw fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 25 mm for 14 gauge screws,"if( and( expression( function( has), atom( variable( roof)), data( framing)), expression( function( is), atom( relation( material), variable( framing)), data( timber)), expression( function( has), atom( relation( framing), variable( roof)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( equal), atom( relation( size), variable( screw)), data( 14 gauge)), expression( function( define), atom( relation( centreline), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( timber)), data( x1)))), then( and( obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x0))), obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x1))), expression( function( greater than equal), atom( relation( dimension), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))",6.2.6 All screw and bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 25 mm for 14 gauge screws,"Define
Tacit
DomainKnowledge
DomainKnowledge
FineGrained
"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.6.0.1.c.1,6.2.6 All bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 40 mm for 10 mm bolts.,"if( and( expression( function( has), atom( variable( roof)), data( framing)), expression( function( is), atom( relation( material), variable( framing)), data( timber)), expression( function( has), atom( relation( framing), variable( roof)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( bolt)), expression( function( equal), atom( relation( size), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))), expression( function( define), atom( relation( centreline), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( timber)), data( x1)))), then( and( obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x0))), obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x1))), expression( function( greater than equal), atom( relation( dimension), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 40.0)))))",6.2.6 All screw and bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 40 mm for 10 mm bolts.,"DomainKnowledge
FineGrained"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.2.7.0.1,Roof Framing 6.2.7 The centre of all fixings must be no closer than 10 fixing diameters from the end of a piece of timber.,"if( and( expression( function( has), atom( variable( roof)), data( framing)), expression( function( is), atom( relation( material), variable( framing)), data( timber)), expression( function( has), atom( relation( framing), variable( roof)), data( fixing)), expression( function( define), atom( relation( diameter), variable( fixing)), data( x0)), expression( function( define), atom( relation( centreline), variable( fixing)), data( x1)), expression( function( define), atom( relation( end), variable( timber)), data( x2)))), then( and( obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x1))), obligation( expression( function( in between), atom( relation( dimension), variable( fixing)), data( x2))), expression( function( greater than equal), atom( relation( dimension), variable( fixing)), data( 10 * x0))))",6.2.7 The centre of all fixings must be no closer than 10 fixing diameters from the end of a piece of timber.,"DomainKnowledge
FineGrained"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.3.1.0.1,"6.3.1 Solar collectors can be fixed directly to the roof as shown in Figures 10 and 11 or Figures 12 and 13, where the requirements described in Paragraph 6.3 are met.","if( expression( function( comply with), atom( variable( solar collector)), data( nzbc g12as2 6.3))), then( or( and( permission( expression( function( as per), atom( variable( solar collector)), data( nzbc g12as2 f10))), permission( expression( function( as per), atom( variable( solar collector)), data( nzbc g12as2 f10)))), and( permission( expression( function( as per), atom( variable( solar collector)), data( nzbc g12as2 f12))), permission( expression( function( as per), atom( variable( solar collector)), data( nzbc g12as2 f13))))))","6.3.1 Solar collectors can be fixed directly to the roof as shown in Figures 10 and 11 or Figures 12 and 13, where the requirements described in Paragraph 6.3 are met.",Abstract
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.3.2.0.1,6.3.2 Solar collectors mounted on the roof cladding must meet the materials requirements described in Paragraph 2.,"if( and( expression( function( on), atom( relation( mounting), variable( solar collector)), data( roof)), expression( function( is), atom( relation( location), variable( solar collector)), data( roof cladding)))), then( obligation( expression( function( comply with), atom( relation( material), variable( solar collector)), data( nzbc g12as2 2))))",6.3.2 Solar collectors mounted on the roof cladding must meet the materials requirements described in Paragraph 2.,Tacit
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.4.2.0.1,"6.4.2 Solar collectors mounted parallel to the roof that are elevated up to 50 mm above the roof cladding must be supported by: a) underlying purlins conforming to Paragraph 6.4.1 (a) or (b), or b) underlying rafters or trusses with connections conforming with Paragraphs 6.4.1 (a) or (c), or c) collector support rails conforming to Paragraph 6.5.","if( and( expression( function( on), atom( relation( mounting), variable( solar collector)), data( roof)), expression( function( is), atom( relation( orientation), variable( solar collector)), data( parallel to roof)), expression( function( above), atom( relation( location), variable( solar collector)), data( roof cladding)), expression( function( less than equal), atom( relation( elevation), variable( solar collector)), data( baseunit( kind( metre), prefix( milli)), value( 50.0))))), then( or( and( obligation( expression( function( is), atom( relation( support), variable( solar collector)), data( underlying purlins))), or( obligation( expression( function( comply with), atom( variable( underlying purlins)), data( nzbc g12as2 6.4.1.a))), obligation( expression( function( comply with), atom( variable( underlying purlins)), data( nzbc g12as2 6.4.1.b))))), and( or( obligation( expression( function( is), atom( relation( support), variable( solar collector)), data( underlying rafters))), obligation( expression( function( is), atom( relation( support), variable( solar collector)), data( underlying trusses)))), or( obligation( expression( function( comply with), atom( relation( connections), variable( underlying rafters)), data( nzbc g12as2 6.4.1.a))), obligation( expression( function( comply with), atom( relation( connections), variable( underlying rafters)), data( nzbc g12as2 6.4.1.c)))), or( obligation( expression( function( comply with), atom( relation( connections), variable( underlying trusses)), data( nzbc g12as2 6.4.1.a))), obligation( expression( function( comply with), atom( relation( connections), variable( underlying trusses)), data( nzbc g12as2 6.4.1.c))))), and( obligation( expression( function( is), atom( relation( support), variable( solar collector)), data( collector support rails))), obligation( expression( function( comply with), atom( variable( collector support rails)), data( nzbc g12as2 6.5))))))","6.4.2 Solar collectors mounted parallel to the roof that are elevated up to 50 mm above the roof cladding must be supported by: a) underlying purlins conforming to Paragraph 6.4.1 (a) or (b), or b) underlying rafters or trusses with connections conforming with Paragraphs 6.4.1 (a) or (c), or c) collector support rails conforming to Paragraph 6.5.","SplitableEntities
Complex"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.5.1.0.1,"Solar collector 6.5.1 Collector support rails may either: a) run horizontally across the slope of the roof as provided for in Paragraph 6.5.2 and Figure 17, or b) run up the slope of the roof as provided for in Paragraph 6.5.3 and Figure 18.","if( expression( function( has), atom( variable( solar collector)), data( collector support rails))), then( or( and( obligation( expression( function( comply with), atom( variable( collector support rails)), data( nzbc g12as2 6.5.2))), obligation( expression( function( comply with), atom( variable( collector support rails)), data( nzbc g12as2 f17)))), and( obligation( expression( function( comply with), atom( variable( collector support rails)), data( nzbc g12as2 6.5.3))), obligation( expression( function( comply with), atom( variable( collector support rails)), data( nzbc g12as2 f18))))))","6.5.1 Collector support rails may either: a) run horizontally across the slope of the roof as provided for in Paragraph 6.5.2 and Figure 17, or b) run up the slope of the roof as provided for in Paragraph 6.5.3 and Figure 18.","Tacit
ReferenceOverDescription
Abstract
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.6.1.0.1,6.6.1 Solar collectors mounted at a different pitch to the pitch of the roof must be installed with no less than 8 fixing points and must meet all the requirements described in Paragraph 6.6 and Figure 19.,"if( not( expression( function( is), atom( relation( mounting pitch), variable( solar collector)), data( roof pitch)))), then( and( obligation( expression( function( has), atom( relation( installation), variable( solar collector)), data( fixing point))), obligation( expression( function( greater than equal), expression( function( count), atom( variable( fixing point))), data( 8))), obligation( expression( function( comply with), atom( relation( installation), variable( solar collector)), data( nzbc g12as2 6.6))), obligation( expression( function( comply with), atom( relation( installation), variable( solar collector)), data( nzbc g12as2 f19)))))",6.6.1 Solar collectors mounted at a different pitch to the pitch of the roof must be installed with no less than 8 fixing points and must meet all the requirements described in Paragraph 6.6 and Figure 19.,MediumData
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.6.3.0.1.a.1,6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: a) 25 x 25 x 3 mm angle for struts up to 1.0 m long,"if( and( expression( function( is), atom( relation( edge), variable( panel)), data( elevated)), expression( function( above), atom( relation( edge), variable( panel)), data( roof)), expression( function( less than equal), atom( relation( length), variable( angle strut)), data( baseunit( kind( metre)), value( 1.0))))), then( and( obligation( expression( function( has), atom( relation( edge), variable( panel)), data( support))), obligation( expression( function( is), atom( relation( type), variable( support)), data( angle strut))), or( obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( hot dip galvanised steel))), obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( stainless steel)))), obligation( expression( function( equal), atom( relation( width), variable( angle strut)), data( baseunit( kind( metre), prefix( milli)), value( 25.0)))), obligation( expression( function( equal), atom( relation( length), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))), obligation( expression( function( equal), atom( relation( thickness), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 3.0))))))",6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: a) 25 x 25 x 3 mm angle for struts up to 1.0 m long,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.6.3.0.1.a.2,6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: 30 x 30 x 3 mm angle for struts up to 1.4 m long,"if( and( expression( function( is), atom( relation( edge), variable( panel)), data( elevated)), expression( function( above), atom( relation( edge), variable( panel)), data( roof)), expression( function( less than equal), atom( relation( length), variable( angle strut)), data( baseunit( kind( metre)), value( 1.4))))), then( and( obligation( expression( function( has), atom( relation( edge), variable( panel)), data( support))), obligation( expression( function( is), atom( relation( type), variable( support)), data( angle strut))), or( obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( hot dip galvanised steel))), obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( stainless steel)))), obligation( expression( function( equal), atom( relation( width), variable( angle strut)), data( baseunit( kind( metre), prefix( milli)), value( 30.0)))), obligation( expression( function( equal), atom( relation( length), variable( angle strut)), data( baseunit( kind( metre), prefix( milli)), value( 30.0)))), obligation( expression( function( equal), atom( relation( thickness), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 3.0))))))",6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: 30 x 30 x 3 mm angle for struts up to 1.4 m long,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.6.3.0.2,Cuts or holes made in steel after galvanizing are to be protected from corrosion.,"if( and( expression( function( has), atom( variable( steel)), data( penetration)), expression( function( after), atom( variable( penetration)), data( galvanising)))), then( obligation( expression( function( has), atom( variable( penetration)), data( corrosion protection))))",Cuts or holes made in steel after galvanizing are to be protected from corrosion.,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r7.1.1.0.1,Solar Water Heating System 7.1.1 A permanent label must be fixed to a prominent part of the system which includes all markings required in the appropriate Standard identified in Paragraph 3.1.1.,"if( and( expression( function( has), atom( variable( solar water heating system)), data( part)), expression( function( is), atom( variable( part)), data( prominent)))), then( and( obligation( expression( function( has), atom( variable( part)), data( label))), obligation( expression( function( is), atom( relation( type), variable( label)), data( permanent))), obligation( expression( function( is), atom( relation( content), variable( label)), data( marking))), obligation( expression( function( as per), atom( variable( markings)), data( nzbc g12as2 3.1.1)))))",7.1.1 A permanent label must be fixed to a prominent part of the system which includes all markings required in the appropriate Standard identified in Paragraph 3.1.1.,"Tacit
DomainKnowledge
Detailed
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r7.2.1.0.1,7.2.1 Solar water heaters and their components must meet the durability requirements specified in NZBC Clause B2.,"if( or( expression( function( equal), atom( variable( solar water heater)), data( true)), expression( function( part of), atom( variable( component)), data( solar water heater)))), then( and( obligation( expression( function( comply with), atom( variable( solar water heater)), data( nzbc b2))), obligation( expression( function( comply with), atom( variable( component)), data( nzbc b2)))))",7.2.1 Solar water heaters and their components must meet the durability requirements specified in NZBC Clause B2.,"NotEncodedParts
MediumData"
lrml/NZ_NZBC-G12AS2#3.12.lrml,r7.2.2.0.1,7.2.2 A solar water heater is easy to access and moderately difficult to replace and therefore the durability requirement is 15 years.,"if( expression( function( is), atom( variable( solar water heater)), data( true))), then( obligation( expression( function( greater than equal), atom( relation( durability), variable( solar water heater)), data( 15 years))))",7.2.2 A solar water heater is easy to access and moderately difficult to replace and therefore the durability requirement is 15 years.,"LearnToIgnore
MediumData"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r1.0.1.1,"1.0.1 This Acceptable Solution applies to above-ground non-pressure (gravity flow) sanitary plumbing for buildings having 3 levels or less and includes all pipework for foul water within, or on the building, including any basements.","if( and( expression( function( less than equal), atom( relation( building storey), variable( building)), data( 3)), expression( function( has), atom( variable( building)), data( sanitary plumbing)), expression( function( is), atom( relation( type), variable( sanitary plumbing)), data( non pressure)), expression( function( above), atom( relation( location), variable( sanitary plumbing)), data( ground)), or( expression( function( within), atom( variable( foul water pipework)), data( building)), expression( function( on), atom( variable( foul water pipework)), data( building))))), then( and( obligation( expression( function( comply with), atom( variable( sanitary plumbing)), data( nzbc g13as1))), obligation( expression( function( comply with), atom( variable( foul water pipework)), data( nzbc g13as1)))))","1.0.1 This Acceptable Solution applies to above-ground non-pressure (gravity flow) sanitary plumbing for buildings having 3 levels or less and includes all pipework for foul water within, or on the building, including any basements.","ImplicitReference
SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r1.0.2.1,"1.0.2 The solution does not include: a) Specialised types of sanitary fixtures or sanitary appliances used within buildings such as hospitals, laboratories and factories","if( and( or( expression( function( include), atom( variable( building)), data( sanitary fixture)), expression( function( include), atom( variable( building)), data( sanitary appliance))), or( expression( function( is), atom( relation( type), variable( sanitary fixture)), data( specialised)), expression( function( is), atom( relation( type), variable( sanitary appliance)), data( specialised))), or( expression( function( similar to), atom( relation( type), variable( building)), data( hospital)), expression( function( similar to), atom( relation( type), variable( building)), data( laboratory)), expression( function( similar to), atom( relation( type), variable( building)), data( factory))))), then( and( prohibition( expression( function( comply with), atom( variable( sanitary fixture)), data( nzbc g13as1))), prohibition( expression( function( comply with), atom( variable( sanitary appliance)), data( nzbc g13as1)))))","1.0.2 The solution does not include: a) Specialised types of sanitary fixtures or sanitary appliances used within buildings such as hospitals, laboratories and factories",MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r1.0.2.2,"1.0.2 The solution does not include: The conveyance of industrial liquid wastes, chemical or toxic wastes and other wastes which cannot be discharged to a sewer without pretreatment.","if( or( expression( function( is), atom( relation( conveyance), variable( sanitary plumbing)), data( ind.liquid waste)), expression( function( is), atom( relation( conveyance), variable( sanitary plumbing)), data( chemical waste)), expression( function( is), atom( relation( conveyance), variable( sanitary plumbing)), data( toxic waste)), and( expression( function( is), atom( relation( conveyance), variable( sanitary plumbing)), data( waste)), expression( function( has), atom( relation( discharge), variable( waste)), data( requirement)), expression( function( is), atom( variable( requirement)), data( pretreatment))))), then( prohibition( expression( function( comply with), atom( relation( conveyance), variable( sanitary plumbing)), data( nzbc g13as1))))","1.0.2 The solution does not include: The conveyance of industrial liquid wastes, chemical or toxic wastes and other wastes which cannot be discharged to a sewer without pretreatment.",MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r2.1.1.1,2.1.1 Materials for sanitary plumbing systems using gravity flow shall comply with Table 1.,"if( expression( function( is), atom( relation( type), variable( sanitary plumbing system)), data( gravity flow))), then( obligation( expression( function( comply with), atom( relation( material), variable( sanitary plumbing system)), data( nzbc g13as1 t1))))",2.1.1 Materials for sanitary plumbing systems using gravity flow shall comply with Table 1.,MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.1.1.1,3.1.1 Discharge points from sanitary fixtures and sanitary appliances shall have a water trap to prevent foul air from the plumbing system entering the building.,"if( or( expression( function( from), atom( variable( discharge point)), data( sanitary fixture)), expression( function( from), atom( variable( discharge point)), data( sanitary appliance)))), then( obligation( expression( function( has), atom( variable( discharge point)), data( water trap))))",3.1.1 Discharge points from sanitary fixtures and sanitary appliances shall have a water trap to prevent foul air from the plumbing system entering the building.,MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.1.2.1,"3.1.2 Water traps shall be: a) Removable, b) Able to be dismantled, or c) Fitted with a cleaning eye.","if( expression( function( is), atom( variable( water trap)), data( true))), then( or( obligation( expression( function( is), atom( relation( feature), variable( water trap)), data( removable))), expression( function( is), atom( relation( feature), variable( water trap)), data( dismantleable)), expression( function( is), atom( relation( feature), variable( water trap)), data( cleaning eye))))","3.1.2 Water traps shall be: a) Removable, b) Able to be dismantled, or c) Fitted with a cleaning eye.",
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.2.1.0.1,"3.2.1 Under normal operating conditions, fixture traps shall retain a water seal depth of not less than 25 mm (see Figure 1).","if( and( expression( function( is), atom( relation( type), variable( trap)), data( fixture)), expression( function( is), atom( relation( operating condition), variable( trap)), data( normal)))), then( obligation( expression( function( greater than equal), atom( relation( water seal depth), variable( trap)), data( baseunit( kind( metre), prefix( milli)), value( 25.0)))))","3.2.1 Under normal operating conditions, fixture traps shall retain a water seal depth of not less than 25 mm (see Figure 1).",SplitableEntities
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.2.2.0.1,3.2.2 The diameter of the water trap shall be not less than that given in Table 2.,"if( expression( function( is), atom( variable( water trap)), data( true))), then( obligation( expression( function( as per), atom( relation( diameter), variable( water trap)), data( nzbc g13as1 t2))))",3.2.2 The diameter of the water trap shall be not less than that given in Table 2.,
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.1.0.1,3.4.1 Floor waste outlets shall have a removable grating that is flush with the floor.,"if( expression( function( is), atom( relation( type), variable( outlet)), data( floor waste))), then( and( obligation( expression( function( has), atom( variable( outlet)), data( removable grating))), obligation( expression( function( is), atom( relation( location), variable( removable grating)), data( flush withfloor)))))",3.4.1 Floor waste outlets shall have a removable grating that is flush with the floor.,SplitableEntities
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.2.0.1,3.4.2 The floor waste shall have a minimum diameter of 40 mm.,"if( expression( function( is), atom( variable( floor waste)), data( true))), then( obligation( expression( function( greater than equal), atom( relation( diameter), variable( floor waste)), data( baseunit( kind( metre), prefix( milli)), value( 40.0)))))",3.4.2 The floor waste shall have a minimum diameter of 40 mm.,
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.2.0.2,"3.4.2 The floor waste, and the water trap if used, shall have a minimum diameter of 40 mm.","if( or( expression( function( is), atom( variable( floor waste)), data( true)), expression( function( is), atom( variable( water trap)), data( true)))), then( and( obligation( expression( function( greater than equal), atom( relation( diameter), variable( floor waste)), data( baseunit( kind( metre), prefix( milli)), value( 40.0)))), expression( function( greater than equal), atom( relation( diameter), variable( water trap)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))))","3.4.2 The floor waste, and the water trap if used, shall have a minimum diameter of 40 mm.",
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.4.0.2,Individual floor waste pipes connected to a floor waste stack need not be vented (see Figure 3).,"if( and( expression( function( has), atom( variable( floor waste)), data( pipe)), expression( function( has), atom( variable( floor waste)), data( stack)), expression( function( connect), atom( variable( pipe)), data( stack)))), then( permission( not( expression( function( is), atom( variable( pipe)), data( vented)))))",3.4.4 Floor waste pipes may be combined to form a floor waste stack and shall have a diameter not less than that given in Table 3 (see Figure 3).,Detailed
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.6.0.3,All trap charging systems shall incorporate backflow prevention in accordance with G12/AS1.,"if( expression( function( is), atom( variable( trap charging system)), data( true))), then( and( obligation( expression( function( has), atom( variable( trap charging system)), data( backflow prevention))), obligation( expression( function( comply with), atom( variable( backflow prevention)), data( nzbc g12as1)))))",All trap charging systems shall incorporate backflow prevention in accordance with G12/AS1.,MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.2.1.0.1,4.2.1 Access points shall be provided in discharge pipes to allow the easy clearance of blockages.,"if( expression( function( is), atom( variable( discharge pipe)), data( true))), then( and( obligation( expression( function( has), atom( variable( discharge pipe)), data( access point))), obligation( expression( function( greater than equal), expression( function( count), atom( variable( access point))), data( 1)))))",4.2.1 Access points shall be provided in discharge pipes to allow the easy clearance of blockages.,"Tacit
Detailed
"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.4.1.0.1,4.4.1 The gradient of discharge pipes shall be not less than that required in Table 4 for the relevant discharge unit loading.,"if( expression( function( is), atom( variable( discharge pipe)), data( true))), then( and( obligation( expression( function( greater than equal), atom( relation( gradient), variable( discharge pipe)), data( value))), obligation( expression( function( as per), atom( variable( value)), data( nzbc g13as1 t4)))))",4.4.1 The gradient of discharge pipes shall be not less than that required in Table 4 for the relevant discharge unit loading.,"NotEncodedParts
"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.5.1.0.1,"4.5.1 Waste water fixture discharge pipes shall discharge either to: a) A gully trap, in accordance with Figure 5 of G13/AS1 and Figure 3 of G13/AS2, or b) A discharge stack as in Paragraph 4.7 and Figures 7 and 8.","if( and( expression( function( is), atom( relation( type), variable( discharge pipe)), data( waste water)), expression( function( is), atom( relation( type), variable( discharge pipe)), data( fixture)))), then( or( and( obligation( expression( function( to), atom( relation( discharge), variable( discharge pipe)), data( gully trap))), obligation( expression( function( comply with), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f5))), obligation( expression( function( comply with), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as2 f3)))), and( obligation( expression( function( to), atom( relation( discharge), variable( discharge pipe)), data( discharge stack))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 4.7))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f7))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f8))))))","4.5.1 Waste water fixture discharge pipes shall discharge either to: a) A gully trap, in accordance with Figure 5 of G13/AS1 and Figure 3 of G13/AS2, or b) A discharge stack as in Paragraph 4.7 and Figures 7 and 8.",MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.5.2.0.1,4.5.2 Water seal protection: Waste water fixture discharge pipes shall be vented to comply with Paragraph 5.0 and as required in Table 5.,"if( and( expression( function( is), atom( relation( type), variable( discharge pipe)), data( waste water)), expression( function( is), atom( relation( type), variable( waste water)), data( fixture)))), then( and( obligation( expression( function( has), atom( variable( discharge pipe)), data( vent))), obligation( expression( function( comply with), atom( relation( vent), variable( discharge pipe)), data( nzbc g13as1 5.0))), obligation( expression( function( as per), atom( relation( vent), variable( discharge pipe)), data( nzbc g13as1 t5)))))",4.5.2 Water seal protection: Waste water fixture discharge pipes shall be vented to comply with Paragraph 5.0 and as required in Table 5.,
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.6.1.0.1,"4.6.1 Fixture discharge pipes serving soil fixtures shall discharge either: a) Directly to the drain, as shown in Figure 6(1), or b) To a stack, as in Paragraph 4.7 and as shown in Figures 7 and 8.","if( expression( function( is), atom( relation( type), variable( discharge pipe)), data( soil fixture))), then( or( and( obligation( expression( function( to), atom( relation( discharge), variable( discharge pipe)), data( drain))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f6.1)))), and( obligation( expression( function( to), atom( relation( discharge), variable( discharge pipe)), data( stack))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 4.7))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f7))), obligation( expression( function( as per), atom( relation( discharge), variable( discharge pipe)), data( nzbc g13as1 f8))))))","4.6.1 Fixture discharge pipes serving soil fixtures shall discharge either: a) Directly to the drain, as shown in Figure 6(1), or b) To a stack, as in Paragraph 4.7 and as shown in Figures 7 and 8.",MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r4.6.2.0.1,4.6.2 Water seal protection: Soil fixture discharge pipes shall be vented to comply with Paragraph 5.0 and as required in Table 5 (see Figure 6(2)).,"if( expression( function( is), atom( relation( type), variable( discharge pipe)), data( soil fixture))), then( and( obligation( expression( function( has), atom( variable( discharge pipe)), data( vent))), obligation( expression( function( comply with), atom( relation( vent), variable( discharge pipe)), data( nzbc g13as1 5.0))), obligation( expression( function( as per), atom( relation( vent), variable( discharge pipe)), data( nzbc g13as1 t5)))))",4.6.2 Water seal protection: Soil fixture discharge pipes shall be vented to comply with Paragraph 5.0 and as required in Table 5 (see Figure 6(2)).,MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.1.1.0.1,5.1.1 Discharge pipes shall be vented where required by Table 5.,"if( and( expression( function( is), atom( relation( requirement), variable( discharge pipe)), data( vent)), expression( function( as per), atom( relation( requirement), variable( discharge pipe)), data( nzbc g13as1 t5)))), then( obligation( expression( function( has), atom( variable( discharge pipe)), data( vent))))",5.1.1 Discharge pipes shall be vented where required by Table 5.,
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.3.1.0.1,"5.3.1 Fixture vent pipes, branch vent pipes, discharge stack vents and relief vents shall have a diameter of no less than that given in Table 6.","if( or( expression( function( is), atom( relation( type), variable( vent pipe)), data( fixture)), expression( function( is), atom( relation( type), variable( vent pipe)), data( branch)), or( expression( function( is), atom( relation( type), variable( vent)), data( discharge stack)), expression( function( is), atom( relation( type), variable( vent)), data( relief))))), then( or( obligation( expression( function( comply with), atom( relation( diameter), variable( vent pipe)), data( nzbc g13as1 t6))), obligation( expression( function( comply with), atom( relation( diameter), variable( vent)), data( nzbc g13as1 t6)))))","5.3.1 Fixture vent pipes, branch vent pipes, discharge stack vents and relief vents shall have a diameter of no less than that given in Table 6.",Abstract
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.6.1.0.1,"5.6.1 The discharge stack vent, if also acting as a drain vent pipe shall have a diameter of not less than 80 mm.","if( expression( function( include), atom( relation( purpose), variable( discharge stack vent)), data( drain vent pipe))), then( obligation( expression( function( greater than equal), atom( relation( diameter), variable( discharge stack vent)), data( baseunit( prefix( milli), kind( metre)), value( 80.0)))))","5.6.1 The discharge stack vent, if also acting as a drain vent pipe shall have a diameter of not less than 80 mm.",SplitableEntities
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.6.1.0.2,Where not acting as a drain vent the discharge stack vent pipe shall have a diameter of not less than that required in Table 6.,"if( not( expression( function( include), atom( relation( purpose), variable( discharge stack vent)), data( drain vent pipe)))), then( obligation( expression( function( comply with), atom( relation( diameter), variable( discharge stack vent)), data( nzbc g13as1 t6))))",Where not acting as a drain vent the discharge stack vent pipe shall have a diameter of not less than that required in Table 6.,"Abstract
SplitableEntities"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.7.1.0.1,5.7.1 Open vent pipes shall terminate outside the building in accordance with Paragraphs 5.7.2 and 5.7.3 or 5.7.4.,"if( expression( function( is), atom( relation( type), variable( vent pipe)), data( open))), then( and( obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g13as1 5.7.2))), or( obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g13as1 5.7.3))), obligation( expression( function( comply with), atom( variable( vent pipe)), data( nzbc g13as1 5.7.4))))))",5.7.1 Open vent pipes shall terminate outside the building in accordance with Paragraphs 5.7.2 and 5.7.3 or 5.7.4.,"Abstract
DomainKnowledge"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.8.1.0.1,5.8.1 General; Air admittance valves may be used as venting where specified in accordance with Table 5.,"if( expression( function( comply with), atom( variable( vent)), data( nzbc g13as1 t5))), then( and( permission( expression( function( has), atom( variable( vent)), data( air admittance valve))), obligation( expression( function( as per), atom( variable( air admittance valve)), data( nzbc g13as1 t5)))))",5.8.1 General Air admittance valves may be used as venting where specified in accordance with Table 5.,"ComplexWording
MediumData"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.8.2.0.1,"5.8.2 Air admittance valves shall be manufactured to ASSE 1050, ASSE 1051, EN 12380 or AS/NZS 4936.","if( expression( function( is), atom( variable( air admittance valve)), data( true))), then( or( obligation( expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( asse 1050))), obligation( expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( asse 1051))), obligation( expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( en 12380))), obligation( expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( asnzs 4936)))))","5.8.2 Air admittance valves shall be manufactured to ASSE 1050, ASSE 1051, EN 12380 or AS/NZS 4936.",MediumData
lrml/NZ_NZBC-G13AS1#2.7.lrml,r5.8.3.0.2,Air admittance valves that form an integral part of a fixture trap shall only be used as a trap vent.,"if( and( expression( function( part of), atom( variable( air admittance valve)), data( fixture trap)), expression( function( is), atom( relation( importance), variable( air admittance valve)), data( integral)))), then( obligation( expression( function( is), atom( relation( purpose), variable( air admittance valve)), data( trap vent))))",Air admittance valves that form an integral part of a fixture trap shall only be used as a trap vent.,"Detailed
MediumData"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r6.1.1.0.1,6.1.1 Jointing methods for PVC-U pipe shall comply with AS/NZS 2032.,"if( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u))), then( obligation( expression( function( comply with), atom( relation( jointing method), variable( pipe)), data( asnzs 2032))))",6.1.1 Jointing methods for PVC-U pipe shall comply with AS/NZS 2032.,
lrml/NZ_NZBC-G13AS1#2.7.lrml,r6.2.1.0.1,6.2.1 Pipes shall be supported at centres not exceeding those in Table 7.,"if( expression( function( is), atom( variable( pipe)), data( true))), then( and( obligation( expression( function( has), atom( variable( pipe)), data( support))), expression( function( at), atom( relation( location), variable( support)), data( centre)), expression( function( comply with), atom( relation( span), variable( support)), data( nzbc g13as1 t7))))",6.2.1 Pipes shall be supported at centres not exceeding those in Table 7.,"DomainKnowledge
Abstract"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r6.4.1.0.1,6.4.1 Fire stopping shall be fitted to pipes passing through fire separations in accordance with C/AS2 Paragraph 4.4.,"if( and( expression( function( has), atom( variable( pipe)), data( penetration)), expression( function( within), atom( variable( penetration)), data( fire separation)))), then( and( obligation( expression( function( has), atom( variable( penetration)), data( fire stop))), or( obligation( expression( function( comply with), atom( variable( fire stop)), data( nzbc cas2))), obligation( expression( function( comply with), atom( variable( fire stop)), data( nzbc cas3))), obligation( expression( function( comply with), atom( variable( fire stop)), data( nzbc cas4))), obligation( expression( function( comply with), atom( variable( fire stop)), data( nzbc cas5))), obligation( expression( function( comply with), atom( variable( fire stop)), data( nzbc cas6))))))",6.4.1 Fire stopping shall be fitted to pipes passing through fire separations in accordance with C/AS2 Paragraph 4.4.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r1.0.1.0.1,1.0.1 This Acceptable Solution is for below ground non-pressure (gravity flow) foul water drains having a diameter of no greater than 150 mm.,"if( and( expression( function( is), atom( relation( medium), variable( drain)), data( foul water)), expression( function( below), atom( relation( elevation), variable( drain)), data( ground)), expression( function( is), atom( relation( type), variable( drain)), data( gravity flow)), expression( function( less than equal), atom( relation( diameter), variable( drain)), data( baseunit( kind( metre), prefix( milli)), value( 150.0))))), then( permission( expression( function( comply with), atom( variable( drain)), data( nzbc g13as2))))",1.0.1 This Acceptable Solution is for below ground non-pressure (gravity flow) foul water drains having a diameter of no greater than 150 mm.,Tacit
lrml/NZ_NZBC-G13AS2#2.7.lrml,r1.0.2.0.1,"1.0.2 It does not apply to foul water drainage systems where it is necessary to dispose of industrial liquid wastes, chemical or toxic wastes and other wastes which cannot be discharged to a sewer without pre-treatment. ","if( and( expression( function( is), atom( relation( medium), variable( drain)), data( foul water)), or( expression( function( is), atom( relation( medium), variable( drain)), data( ind.liquid waste)), expression( function( is), atom( relation( medium), variable( drain)), data( chemical waste)), expression( function( is), atom( relation( medium), variable( drain)), data( toxic waste)), and( expression( function( is), atom( relation( medium), variable( drain)), data( waste)), obligation( expression( function( has), atom( relation( medium), variable( drain)), data( treatment))), obligation( expression( function( into), atom( relation( discharge), variable( drain)), data( sewer))))))), then( prohibition( expression( function( comply with), atom( variable( drain)), data( nzbc g13as2))))","1.0.2 It does not apply to foul water drainage systems where it is necessary to dispose of industrial liquid wastes, chemical or toxic wastes and other wastes which cannot be discharged to a sewer without pre-treatment. See G14/VM1.","ImplicitReference
MediumData
"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r2.0.1.0.1,2.0.1 Materials for drainage pipes and joints shall comply with the appropriate standards shown in Table 1.,"if( expression( function( is), atom( relation( type), variable( pipe)), data( drainage))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( pipe)), data( nzbc g13as2 t1))), expression( function( has), atom( variable( pipe)), data( joint)), obligation( expression( function( comply with), atom( relation( material), variable( joint)), data( nzbc g13as2 t1)))))",2.0.1 Materials for drainage pipes and joints shall comply with the appropriate standards shown in Table 1.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.1.1.0.1,"3.1.1 To reduce the risk of blockages, the foul water drainage system shall: a) Have a simple layout that incorporates the least number of changes of direction, b) Use bends having a radius of the practical maximum, and c) Be laid only in straight lines between bends or junctions (both horizontally and vertically).","if( and( expression( function( is), atom( relation( medium), variable( drain)), data( foul water)), or( expression( function( has), atom( relation( system), variable( drain)), data( change in direction)), expression( function( has), atom( relation( pipe), variable( drain)), data( bend)), expression( function( in between), atom( relation( section), variable( pipe)), data( bends)), expression( function( in between), atom( relation( section), variable( pipe)), data( junctions))))), then( and( obligation( expression( function( is), expression( function( min), atom( relation( quantity), variable( change in direction))), data( true))), obligation( expression( function( is), expression( function( max), atom( relation( radius), variable( bend))), data( true))), obligation( expression( function( is), atom( relation( section), variable( pipe)), data( straight)))))","3.1.1 To reduce the risk of blockages, the foul water drainage system shall: a) Have a simple layout that incorporates the least number of changes of direction, b) Use bends having a radius of the practical maximum, and c) Be laid only in straight lines between bends or junctions (both horizontally and vertically).","Tacit
Abstract
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.2.1.0.1,"3.2.1 Any connection to a drain, excluding vent pipe connections, shall be made by means of sweep or oblique junctions. The angle that the branch makes at the point of entry with the main drain, shall be no greater than 60° (see Figure 1).","if( and( expression( function( has), atom( relation( system), variable( drain)), data( connection)), not( expression( function( is), atom( variable( connection)), data( vent pipe))))), then( and( or( obligation( expression( function( is), atom( relation( type), variable( connection)), data( sweep junction))), obligation( expression( function( is), atom( relation( type), variable( connection)), data( oblique junction)))), obligation( expression( function( less than equal), atom( relation( angle), variable( connection)), data( baseunit( kind( angle degree)), value( 60.0))))))","3.2.1 Any connection to a drain, excluding vent pipe connections, shall be made by means of sweep or oblique junctions. The angle that the branch makes at the point of entry with the main drain, shall be no greater than 60° (see Figure 1).","Abstract
SplitableEntities
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1,"Drainage 3.3.1 All gully traps shall be constructed to prevent the ingress of surface water and foreign bodies likely to cause a blockage, shall be located within the legal boundary of the land on which the building is erected","if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( and( obligation( expression( function( for), atom( relation( prevention), variable( gully trap)), data( ingress))), obligation( expression( function( is), atom( relation( type), variable( ingress)), data( surface water))), obligation( expression( function( is), atom( relation( type), variable( ingress)), data( foreign bodies))), obligation( expression( function( within), atom( relation( location), variable( gully trap)), data( site boundary)))))","3.3.1 All gully traps shall be constructed to prevent the ingress of surface water and foreign bodies likely to cause a blockage, shall be located within the legal boundary of the land on which the building is erected","DomainKnowledge
Abstract
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.a.i.1,Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): The overflow level of the gully dish no less than: 25 mm above paved surfaces,"if( and( expression( function( has), atom( relation( system), variable( drain)), data( gully trap)), expression( function( is), atom( relation( type), variable( surface)), data( paved)), expression( function( define), expression( function( top of), atom( relation( overflow), variable( gully trap))), data( x0)), expression( function( define), expression( function( top of), atom( variable( surface))), data( x1)))), then( obligation( expression( function( greater than equal), atom( variable( x0 - x1)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))",3.3.1 All gully traps shall have (see Figures 2 and 3): The overflow level of the gully dish no less than: 100 mm above unpaved surfaces,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.b.1,Drainage; All gully traps shall have: b) A grating that will allow surcharge,"if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( obligation( expression( function( include), atom( variable( gully trap)), data( grating))))",b) A grating that will allow surcharge,"Tacit
TACIT-SPLIT-AT-SEMI-COLON"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.c.1,Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): A minimum outlet pipe diameter of 100 mm,"if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( and( obligation( expression( function( has), atom( variable( gully trap)), data( outlet pipe))), obligation( expression( function( greater than equal), atom( relation( diameter), variable( outlet pipe)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))))))",3.3.1 All gully traps shall have (see Figures 2 and 3): A minimum outlet pipe diameter of 100 mm,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.d.1,Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): A water seal depth of at least 65 mm,"if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( and( obligation( expression( function( has), atom( variable( gully trap)), data( water seal))), obligation( expression( function( greater than equal), atom( relation( depth), variable( water seal)), data( baseunit( kind( metre), prefix( milli)), value( 65.0))))))",3.3.1 All gully traps shall have (see Figures 2 and 3): A water seal depth of at least 65 mm,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.g.1,"Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): Waste pipe outlets located at least 20 mm above water seal level, and at least 20 mm below the grating","if( and( expression( function( to), atom( relation( discharge), variable( waste pipe)), data( gully trap)), expression( function( define), atom( relation( elevation), variable( waste pipe outlet)), data( x0)), expression( function( define), atom( relation( elevation), variable( water seal)), data( x1)), expression( function( define), atom( relation( elevation), variable( grating)), data( x2)))), then( and( obligation( expression( function( greater than equal), atom( variable( x0)), data( x1 + 20 mm))), obligation( expression( function( less than equal), atom( variable( x0)), data( x2 - 20 mm)))))","3.3.1 All gully traps shall have (see Figures 2 and 3): Waste pipe outlets located at least 20 mm above water seal level, and at least 20 mm below the grating","UselessInfoInBrackets
Define
Tacit
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.i.1,"Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): i) Adequate support from bedding and backfilling with: i) concrete no less than 75 mm thick surrounding the entire gully dish and which is separated from the building foundation, where the gully trap is likely to be damaged, and j) A minimum of 600 mm clear access space above the gully dish.","if( and( expression( function( has), atom( relation( system), variable( drain)), data( gully trap)), expression( function( has), atom( variable( gully trap)), data( gully dish)))), then( and( obligation( expression( function( has), atom( variable( gully trap)), data( support))), obligation( expression( function( is), atom( relation( type), variable( support)), data( bedding))), obligation( expression( function( is), atom( relation( type), variable( support)), data( backfilling))), obligation( expression( function( include), atom( variable( support)), data( separation))), and( obligation( expression( function( in between), atom( variable( separation)), data( gully dish))), obligation( expression( function( in between), atom( variable( separation)), data( building foundation)))), obligation( expression( function( include), atom( variable( support)), data( concrete surround))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( concrete surround)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( has), atom( variable( gully dish)), data( access space))), obligation( expression( function( is), atom( variable( access space)), data( vertical))), obligation( expression( function( above), atom( variable( access space)), data( gully dish))), obligation( expression( function( greater than equal), atom( variable( access space)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))))))","3.3.1 All gully traps shall have (see Figures 2 and 3): The top of the water seal no more than 600 mm below the top of the gully dish, and i) Adequate support from bedding and backfilling with: i) concrete no less than 75 mm thick surrounding the entire gully dish and which is separated from the building foundation, where the gully trap is likely to be damaged","DomainKnowledge
Tacit
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.2.0.1,"3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall:","if( expression( function( is), atom( relation( purpose), variable( building)), data( housing))), then( obligation( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))))","3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall:",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.2.0.1.a.1,3.3.2 Gully trap which shall: a) Be positioned so that the top of the gully dish is no less than 150 mm below the overflow level of the lowest sanitary fixture served by the drainage system,"if( and( expression( function( has), atom( variable( gully trap)), data( gully dish)), expression( function( define), expression( function( top of), atom( relation( elevation), variable( gully dish))), data( x0)), expression( function( for), atom( relation( service), variable( gully trap)), data( sanitary fixture)), expression( function( is), expression( function( min), atom( relation( elevation), variable( sanitary fixture))), data( true)), expression( function( define), expression( function( top of), atom( relation( overflow), variable( sanitary fixture))), data( x1)), expression( function( in between), atom( variable( dimension)), data( x0)), expression( function( in between), atom( variable( dimension)), data( x1)))), then( obligation( expression( function( greater than equal), atom( variable( dimension)), data( baseunit( kind( metre), prefix( milli)), value( 150.0)))))","3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall: a) Be positioned so that the top of the gully dish is no less than 150 mm below the overflow level of the lowest sanitary fixture served by the drainage system","NestedExpr
Define"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.2.0.1.b.1,Drainage 3.3.2 Gully trap which shall: Have a grating that will allow surcharge,"if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( and( obligation( expression( function( has), atom( variable( gully trap)), data( grating))), obligation( expression( function( is), atom( relation( purpose), variable( grating)), data( surcharge)))))","3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall: Have a grating that will allow surcharge","
"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.2.0.1.c.1,Drainage 3.3.2 Gully trap which shall: Be located in a visible position,"if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( obligation( expression( function( is), atom( relation( location), variable( gully trap)), data( visible))))","3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall: Be located in a visible position",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.2.0.1.d.1,Drainage 3.3.2 Gully trap which shall: Be installed so that surcharge cannot enter into or under buildings.,"if( and( expression( function( has), atom( relation( system), variable( drain)), data( gully trap)), expression( function( has), atom( variable( drain)), data( surcharge)))), then( and( prohibition( expression( function( into), atom( relation( flow), variable( surcharge)), data( building))), prohibition( expression( function( below), atom( relation( flow), variable( surcharge)), data( building)))))","3.3.2 In order to provide overflow relief for the drainage system, every building used for Housing shall be provided with at least one gully trap which shall: Be installed so that surcharge cannot enter into or under buildings.",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.1.0.1,3.4.1 Grease traps shall be provided for any discharge pipe serving a sink(s) where the foul water discharges to a soak pit.,"if( and( expression( function( has), atom( variable( sink)), data( discharge pipe)), expression( function( is), atom( relation( medium), variable( drain)), data( foul water)), expression( function( into), atom( relation( discharge), variable( drain)), data( soak pit)))), then( obligation( expression( function( has), atom( variable( discharge pipe)), data( grease trap))))",3.4.1 Grease traps shall be provided for any discharge pipe serving a sink(s) where the foul water discharges to a soak pit.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.2.0.1,"3.4.2 In buildings other than Housing, grease traps shall be provided where waste water is likely to convey grease.","if( and( not( expression( function( is), atom( relation( purpose), variable( building)), data( housing))), expression( function( include), atom( variable( waste water)), data( grease)))), then( obligation( expression( function( include), atom( variable( drain)), data( grease trap))))","3.4.2 In buildings other than Housing, grease traps shall be provided where waste water is likely to convey grease.",ConnectionMissing
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.3.0.1,"3.4.3 The capacity of a grease trap shall be at least twice the capacity of all sanitary fixtures and sanitary appliances discharging to it, and in no case less than 100 litres as shown in Figure 4.","if( and( expression( rulestatement( expression( function( into), expression( function( for each), atom( relation( discharge), variable( sanitary fixture))), data( grease trap))), appliedstatement( expression( function( define), atom( relation( capacity), variable( sanitary fixture)), data( x0)))), expression( rulestatement( expression( function( into), expression( function( for each), atom( relation( discharge), variable( sanitary appliance))), data( grease trap))), appliedstatement( expression( function( define), atom( relation( capacity), variable( sanitary appliance)), data( x1)))))), then( and( obligation( expression( function( greater than equal), atom( relation( capacity), variable( grease trap)), data( 2 * ( x0 + x1)))), obligation( expression( function( greater than equal), atom( relation( capacity), variable( grease trap)), data( baseunit( kind( litre)), value( 100.0))))))","3.4.3 The capacity of a grease trap shall be at least twice the capacity of all sanitary fixtures and sanitary appliances discharging to it, and in no case less than 100 litres as shown in Figure 4.",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.4.0.1,"3.4.4 For restaurants and cafés, the capacity of the grease trap shall be at least 5 litres for each person for whom seating is provided, and in no case less than that required by Paragraph 3.4.3.","if( and( or( expression( function( is), atom( relation( activity), variable( building)), data( restaurant)), expression( function( is), atom( relation( activity), variable( building)), data( café))), expression( function( has), atom( variable( building)), data( seating)), expression( function( define), atom( relation( quantity), variable( seating)), data( x0)))), then( and( obligation( expression( function( greater than equal), atom( relation( capacity), variable( grease trap)), data( x0 * 5 l))), obligation( expression( function( comply with), expression( function( min), atom( relation( capacity), variable( grease trap))), data( nzbc g13as2 3.4.3)))))","3.4.4 For restaurants and cafés, the capacity of the grease trap shall be at least 5 litres for each person for whom seating is provided, and in no case less than that required by Paragraph 3.4.3.",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.5.0.1,3.4.5 Grease traps located outside a building shall be configured as shown in Figure 4.,"if( expression( function( outside), atom( relation( location), variable( grease trap)), data( building))), then( obligation( expression( function( comply with), atom( relation( configuration), variable( grease trap)), data( nzbc g13as2 f4))))",3.4.5 Grease traps located outside a building shall be configured as shown in Figure 4.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.6.0.1,3.4 Grease traps 3.4.6 The top of the outlet junction shall be extended to finished ground level and fitted with a watertight rodding point access cover as shown in Figures 4 and 10.,"if( expression( function( is), atom( variable( grease trap)), data( true))), then( and( obligation( expression( function( include), atom( variable( grease trap)), data( outlet junction))), obligation( expression( function( is), atom( relation( elevation), variable( outlet junction)), data( finished ground level))), obligation( expression( function( has), atom( variable( outlet junction)), data( rodding point))), obligation( expression( function( include), atom( relation( fixture), variable( rodding point)), data( access cover))), obligation( expression( function( is), atom( variable( access cover)), data( watertight)))))",3.4.6 The top of the outlet junction shall be extended to finished ground level and fitted with a watertight rodding point access cover as shown in Figures 4 and 10.,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.5.1.0.1,"3.5.1 Drains shall: a) Be laid at an even grade, and b) Have no obstructions to flow.","if( expression( function( is), atom( relation( installation), variable( drain)), data( true))), then( and( obligation( expression( function( is), atom( relation( grade), variable( drain)), data( even))), obligation( not( expression( function( include), atom( variable( drain)), data( obstruction))))))","3.5.1 Drains shall: a) Be laid at an even grade, and b) Have no obstructions to flow.",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.5.2.0.1,3.5.2 Drains shall be installed at the maximum practicable gradient.,"if( expression( function( is), atom( relation( installation), variable( drain)), data( true))), then( obligation( expression( function( is), atom( relation( gradient), variable( drain)), data( maximum practicable))))",3.5.2 Drains shall be installed at the maximum practicable gradient.,MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.5.3.0.1,3.5.3 The gradient of drainage pipes shall be not less than that required in Table 2 for the relevant discharge unit loading.,"if( expression( function( has), atom( relation( system), variable( drain)), data( pipe))), then( and( obligation( expression( function( greater than equal), atom( relation( gradient), variable( pipe)), data( value))), obligation( expression( function( as per), atom( variable( value)), data( nzbc g13as2 t2)))))",3.5.3 The gradient of drainage pipes shall be not less than that required in Table 2 for the relevant discharge unit loading.,SomeDetailsNotEncoded
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.6.1.0.1,3.6.1 The diameter of a drain shall not decrease in size in the direction of flow.,"if( expression( function( is), atom( relation( installation), variable( drain)), data( true))), then( and( prohibition( expression( function( has), atom( relation( diameter), variable( drain)), data( reduction))), prohibition( expression( function( is), atom( relation( direction), variable( reduction)), data( flow)))))",3.6.1 The diameter of a drain shall not decrease in size in the direction of flow.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.6.2.0.1,3.6.2 Drains shall have a diameter of not less than 80 mm where the drain serves only waste water fixtures.,"if( and( expression( function( is), atom( relation( installation), variable( drain)), data( true)), expression( function( is), atom( relation( service), variable( drain)), data( waste water fixture)))), then( obligation( expression( function( greater than equal), atom( relation( diameter), variable( drain)), data( baseunit( kind( metre), prefix( milli)), value( 80.0)))))","3.6.2 Drains shall have a diameter of not less than 100 mm, except that 80 mm is acceptable where the drain serves only waste water fixtures.",MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.6.2.0.2,3.6.2 Drains shall have a diameter of not less than 100 mm where the drain does not serve only waste water fixtures.,"if( and( expression( function( is), atom( relation( installation), variable( drain)), data( true)), not( expression( function( is), atom( relation( service), variable( drain)), data( waste water fixture))))), then( obligation( expression( function( greater than equal), atom( relation( diameter), variable( drain)), data( baseunit( kind( metre), prefix( milli)), value( 100.0)))))","3.6.2 Drains shall have a diameter of not less than 100 mm, except that 80 mm is acceptable where the drain serves only waste water fixtures.",MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r4.1.1.0.1,4.1.1 The drainage system shall be ventilated to allow a flow of air and to minimise the build up of foul air.,"if( expression( function( is), atom( relation( installation), variable( drain)), data( true))), then( obligation( expression( function( has), atom( variable( drain)), data( vent))))",4.1.1 The drainage system shall be ventilated to allow a flow of air and to minimise the build up of foul air.,"Abstract
NotEncodedParts"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r4.1.2.0.1,"4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( expression( function( comply with), atom( variable( drain)), data( nzbc g13as2 t3))))","4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.",SomeDetailsNotEncoded
lrml/NZ_NZBC-G13AS2#2.7.lrml,r4.2.1.0.1,"4.2.1 A main drain vent shall have a minimum diameter of 80 mm, and shall comply with termination requirements of Paragraph 5.7.3 of G13/AS1 ""Sanitary Plumbing"".","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( has), atom( variable( drain)), data( vent)))), then( and( obligation( expression( function( greater than equal), atom( relation( diameter), variable( vent)), data( baseunit( prefix( milli), kind( metre)), value( 80.0)))), obligation( expression( function( comply with), atom( relation( termination), variable( vent)), data( nzbc g13as1 5.7.3)))))","4.2.1 A main drain vent shall have a minimum diameter of 80 mm, and shall comply with termination requirements of Paragraph 5.7.3 of G13/AS1 ""Sanitary Plumbing"".",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r4.2.2.0.1,4.2.2 Branch drain vents shall be sized in accordance with Table 6 in G13/AS1.,"if( and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( has), atom( variable( drain)), data( vent)))), then( obligation( expression( function( comply with), atom( relation( size), variable( vent)), data( nzbc g13as1 t6))))",4.2.2 Branch drain vents shall be sized in accordance with Table 6 in G13/AS1.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.1.1.0.1,5.1.1 Rigid pipes shall have flexible joints to resist damage from differential settlement.,"if( expression( function( is), atom( relation( material), variable( pipe)), data( rigid))), then( and( obligation( expression( function( has), atom( variable( pipe)), data( pipe joint))), obligation( expression( function( is), atom( relation( material), variable( pipe joint)), data( flexible)))))",5.1.1 Rigid pipes shall have flexible joints to resist damage from differential settlement.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.1.2.0.1,5.1.2 Jointing for PVC-U pipes and fittings shall be in accordance with the methods described in AS/NZS 2032.,"if( or( and( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u)), expression( function( has), atom( variable( pipe)), data( pipe joint))), and( expression( function( is), atom( relation( material), variable( pipe fitting)), data( pvc u)), expression( function( has), atom( variable( pipe fitting)), data( pipe joint))))), then( obligation( expression( function( comply with), atom( variable( pipe joint)), data( asnzs 2032))))",5.1.2 Jointing for PVC-U pipes and fittings shall be in accordance with the methods described in AS/NZS 2032.,MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.3.1.0.1,"5.3.1 Figure 7 gives acceptable methods for the bedding and backfilling of the drainage pipes listed in Table 1 except where: a) The trench is located within or above peat, b) Scouring of the trench is likely due to unstable soils, or d) The cover H to the pipe is more than 2.5 m.","if( and( expression( function( has), atom( relation( system), variable( drain)), data( pipe)), not( expression( function( within), atom( relation( location), variable( trench)), data( peat))), not( expression( function( above), atom( relation( location), variable( trench)), data( peat))), not( expression( function( is), atom( relation( type), variable( soil)), data( unstable))), expression( function( define), atom( relation( elevation), variable( ground)), data( x0)), expression( function( define), expression( function( top of), atom( relation( elevation), variable( pipe))), data( x1)), expression( function( greater than), atom( variable( x0 - x1)), data( baseunit( kind( metre)), value( 2.5))))), then( obligation( expression( function( comply with), atom( relation( system), variable( drain)), data( nzbc g13as2 f7))))","5.3.1 Figure 7 gives acceptable methods for the bedding and backfilling of the drainage pipes listed in Table 1 except where: a) The trench is located within or above peat, b) Scouring of the trench is likely due to unstable soils, c) The horizontal separation between any building foundation and the underside of the pipe trench is less than that required by Paragraph 5.7.1, or d) The cover H to the pipe is more than 2.5 m.","Tacit
NotEncodedParts"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.4.1.0.1.1,The width B of the trench shall be no less than the pipe diameter D plus 200 mm. ,"if( and( expression( function( in), atom( relation( location), variable( pipe)), data( trench)), expression( function( define), atom( relation( diameter), variable( pipe)), data( x0)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( trench)), data( x0 + 200 mm))))","The width of the trench at the top of the pipe shall be no more than 600 mm unless the pipes in the trench are covered with concrete, as shown in Figure 7 (c).",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.8.2.0.1.b.1,Drainage; Junctions beneath the building joining at an angle of not more than 45o (see Figure 13).,"if( and( expression( function( has), atom( variable( drain junction)), data( junction)), expression( function( below), atom( relation( location), variable( junction)), data( building)))), then( obligation( expression( function( less than equal), atom( relation( angle), variable( junction)), data( baseunit( kind( angle degree)), value( 45.0)))))",Junctions beneath the building joining at an angle of not more than 45o (see Figure 13).,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.9.1.0.1,"5.9.1 Where two or more soil fixtures are connected to a branch drain beneath the building, access for cleaning shall be provided by a sealed floor level rodding point located downstream of the highest fixture connection to the branch drain (see Figures 10 and 13).","if( and( expression( function( greater than equal), atom( relation( count), variable( soil fixture)), data( 2)), expression( function( connect), atom( variable( soil fixture)), data( drain)), expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( below), atom( relation( location), variable( drain)), data( building)))), then( and( obligation( expression( function( has), atom( variable( drain)), data( cleaning access))), obligation( expression( function( is), atom( variable( cleaning access)), data( rodding point))), obligation( expression( function( is), atom( relation( elevation), variable( rodding point)), data( floor level))), obligation( expression( function( is), atom( relation( type), variable( rodding point)), data( sealed))), obligation( expression( function( equal), atom( relation( location), variable( rodding point)), data( highest fixture connection)))))","5.9.1 Where two or more soil fixtures are connected to a branch drain beneath the building, access for cleaning shall be provided by a sealed floor level rodding point located downstream of the highest fixture connection to the branch drain (see Figures 10 and 13).","DomainKnowledge
SplitableEntities
NotEncodedParts"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.9.3.0.1,5.9.3 Access points may be located in a space containing a soil fixture.,"if( expression( function( in), atom( variable( soil fixture)), data( space))), then( permission( expression( function( in), atom( relation( location), variable( access point)), data( space))))",5.9.3 Access points may be located in a space containing a soil fixture.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.10.1.0.1,"5.10.1 Where a drain or part of a drain is no longer required, it shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary.","if( or( not( expression( function( is), atom( variable( drain)), data( required))), not( expression( function( is), atom( variable( drain section)), data( required))))), then( or( obligation( expression( function( at), atom( relation( disconnection), variable( drain)), data( live drain junction))), obligation( expression( function( at), atom( relation( disconnection), variable( drain)), data( property boundary))), or( obligation( expression( function( at), atom( relation( disconnection), variable( drain section)), data( live drain junction))), obligation( expression( function( at), atom( relation( disconnection), variable( drain section)), data( property boundary))))))","5.10.1 Where a drain or part of a drain is no longer required, it shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary.",MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r6.1.1.0.1,6.1.1 All sections of the drainage system shall be tested by water test or air test to ensure watertightness.,"if( expression( function( part of), atom( variable( drain section)), data( drainage system))), then( or( obligation( expression( function( has), atom( relation( watertightness), variable( drain section)), data( verification))), obligation( expression( function( is), atom( relation( method), variable( verification)), data( water test))), obligation( expression( function( is), atom( relation( method), variable( verification)), data( air test)))))",6.1.1 All sections of the drainage system shall be tested by water test or air test to ensure watertightness.,MediumData
lrml/NZ_NZBC-G13AS2#2.7.lrml,r6.1.3.0.1,6.1.3 Air tests may be carried out in accordance with either clause 15.3 of AS/NZS 3500.2 or paragraph 8.3 of E1/VM1.,"if( expression( function( is), atom( variable( air test)), data( true))), then( or( obligation( expression( function( comply with), atom( variable( air test)), data( asnzs 3500.2 15.3))), obligation( expression( function( comply with), atom( variable( air test)), data( nzbc e1vm1 8.3)))))",6.1.3 Air tests may be carried out in accordance with either clause 15.3 of AS/NZS 3500.2 or paragraph 8.3 of E1/VM1.,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r6.1.5.0.1,"6.1.5 Where a building is proposed to be built over an existing drain, the drain shall be verified as being sound both before and after construction.","if( expression( function( above), atom( variable( building)), data( existing drain))), then( and( obligation( expression( function( has), atom( relation( soundness), variable( existing drain)), data( verification))), obligation( expression( function( before), atom( variable( verification)), data( construction))), obligation( expression( function( after), atom( variable( verification)), data( construction)))))","6.1.5 Where a building is proposed to be built over an existing drain, the drain shall be verified as being sound both before and after construction.",SplitableEntities
lrml/NZ_NZBC-G15AS1#2.7.lrml,r1.0.1,1.0.1 The method of solid waste disposal in multi-unit and group dwellings shall be by the provision of moveable containers having a capacity of at least 80 litres for each dwelling unit.,"if( and( or( expression( function( is), atom( relation( type), variable( building)), data( multi unit dwelling)), expression( function( is), atom( relation( type), variable( building)), data( group dwelling))), expression( function( has), atom( variable( building)), data( solid waste)), expression( function( define), expression( function( count), atom( relation( unit), variable( dwelling))), data( x0)))), then( and( obligation( expression( function( is), atom( relation( disposal method), variable( solid waste)), data( moveable container))), expression( function( greater than equal), atom( relation( volume), variable( moveable container)), data( 80 l * x0))))",1.0.1 The method of solid waste disposal in multi-unit and group dwellings shall be by the provision of moveable containers having a capacity of at least 80 litres for each dwelling unit.,"Tacit
SplitableEntities"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r1.0.2,"G15 Solid waste 1.0.2 Where containers are stored in a common area within a building or part of a building, a space of at least 0.5 m x 0.5 m by 1 m high shall be provided for each dwelling unit.","if( and( expression( function( is), atom( relation( type), variable( waste storage area)), data( common)), expression( function( in), atom( relation( location), variable( waste storage area)), data( building)), expression( function( define), expression( function( count), atom( relation( unit), variable( dwelling))), data( x0)))), then( and( obligation( expression( function( greater than equal), expression( function( count), atom( variable( waste storage area))), data( x0))), expression( function( greater than equal), atom( relation( length), variable( waste storage area)), data( baseunit( kind( metre)), value( 0.5))), expression( function( greater than equal), atom( relation( width), variable( waste storage area)), data( baseunit( kind( metre)), value( 0.5))), expression( function( greater than equal), atom( relation( height), variable( waste storage area)), data( baseunit( kind( metre)), value( 1.0)))))","1.0.2 Where containers are stored in a common area within a building or part of a building, a space of at least 0.5 m x 0.5 m by 1 m high shall be provided for each dwelling unit.",SplitableEntities
lrml/NZ_NZBC-G15AS1#2.7.lrml,r1.0.3,"G15 Solid waste 1.0.3 If a common storage area such as a ground floor rubbish area is provided within the building, it shall be adequately ventilated to the open air in compliance with NZBC G4.","if( and( expression( function( has), atom( variable( building)), data( waste storage area)), expression( function( is), atom( variable( type)), data( common)))), then( obligation( expression( function( comply with), atom( relation( standard), variable( ventilation)), data( nzbc g4))))","1.0.3 If a common storage area such as a ground floor rubbish area is provided within the building, it shall be adequately ventilated to the open air in compliance with NZBC G4.",MediumData
lrml/NZ_NZBC-G15AS1#2.7.lrml,r2.0.1,"2.0.1 In multi-unit and group dwellings, the maximum carry distance between any occupancy and a common solid waste storage area or chute shall be 30 m.","if( or( expression( function( is), atom( relation( type), variable( building)), data( multi unit dwelling)), expression( function( is), atom( relation( type), variable( building)), data( group dwelling)))), then( prohibition( expression( function( greater than), atom( relation( distance), variable( travel)), data( baseunit( kind( metre)), value( 30.0)))))","2.0.1 In multi-unit and group dwellings, the maximum carry distance between any occupancy and a common solid waste storage area or chute shall be 30 m.",MediumData
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.1.1,3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: a) Have interior surfaces which are easily cleaned,"if( and( expression( function( has), atom( variable( space)), data( waste storage area)), expression( function( is), atom( variable( type)), data( common)))), then( obligation( expression( function( is), atom( variable( interior surface)), data( easily cleaned))))",3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: a) Have interior surfaces which are easily cleaned,"SplitableEntities
NotConnectedVariables"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.1.2,3.0 Solid waste Storage Areas 3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be totally enclosed and separated from habitable spaces and food preparation areas,"if( and( expression( function( is), atom( variable( waste storage area)), data( true)), expression( function( is), atom( variable( type)), data( common)))), then( and( obligation( expression( function( is), atom( variable( enclosure)), data( fully enclosed))), not( expression( function( adjacent), atom( variable( location)), data( habitable space))), not( expression( function( adjacent), atom( variable( location)), data( food preparation area)))))",3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be totally enclosed and separated from habitable spaces and food preparation areas,"SplitableEntities
ShortPrecondition"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.1.3,3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be protected from high temperatures which could hasten putrification,"if( and( expression( function( is), atom( relation( function), variable( space)), data( storage)), expression( function( is), atom( relation( content), variable( storage)), data( solid waste)), expression( function( is), atom( relation( type), variable( storage)), data( common)))), then( prohibition( expression( function( to), atom( relation( exposure), variable( storage)), data( high temperature))))",3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be protected from high temperatures which could hasten putrification,MediumData
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.1.4,3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be screened from habitable spaces to reduce visual impact.,"if( and( expression( function( is), atom( variable( space)), data( storage)), expression( function( is), atom( relation( content), variable( storage)), data( solid waste)), expression( function( is), atom( relation( type), variable( storage)), data( common)))), then( obligation( expression( function( is), atom( relation( visibility), variable( storage)), data( false))))",3.0.1 An acceptable common storage area for solid waste (see Figure 1) shall: Be screened from habitable spaces to reduce visual impact.,Tacit
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.2,3.0 Solid waste Storage Areas 3.0.2 Concrete floors are acceptable if they have a U5 trowelled finish complying with NZS 3114 and are graded at 1 in 50 to a floor drain. Floor drains shall comply with NZBC G13.,"if( and( expression( function( is), atom( relation( material), variable( floor)), data( concrete)), expression( function( is), atom( relation( location), variable( floor)), data( waste storage area)))), then( and( obligation( expression( function( is), atom( relation( surface finish), variable( floor)), data( u5))), obligation( expression( function( equal), atom( relation( slope), variable( floor)), data( 50.0))), obligation( expression( function( towards), atom( relation( slope), variable( floor)), data( floor waste))), obligation( expression( function( comply with), atom( variable( floor waste)), data( nzbc g13)))))",3.0.2 Concrete floors are acceptable if they have a U5 trowelled finish complying with NZS 3114 and are graded at 1 in 50 to a floor drain. Floor drains shall comply with NZBC G13.,"SomeDetailsNotEncoded
MediumData"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.3,"3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material.","if( and( expression( function( has), atom( variable( space)), data( storage bins)), expression( function( has), atom( variable( storage bins)), data( food waste)))), then( or( obligation( expression( function( has), atom( variable( space)), data( wall))), obligation( expression( function( is), atom( relation( material), variable( wall)), data( concrete))), obligation( expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet))), obligation( expression( function( is), atom( relation( material), variable( wall)), data( vinyl))), obligation( expression( function( similar to), atom( relation( material), variable( wall)), data( concrete))), obligation( expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet))), obligation( expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))","3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material.","Good
Complex
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.4,3.0.4 Windows facing north in any food waste storage area shall be screened from direct sunlight in order to reduce the likelihood of putrification.,"if( and( expression( function( is), atom( relation( function), variable( space)), data( storage)), expression( function( is), atom( relation( type), variable( storage)), data( food waste)), expression( function( has), atom( variable( space)), data( window)), expression( function( is), atom( relation( orientation), variable( window)), data( north)))), then( prohibition( expression( function( to), atom( relation( exposure), variable( storage)), data( direct sunlight))))",3.0.4 Windows facing north in any food waste storage area shall be screened from direct sunlight in order to reduce the likelihood of putrification.,
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.5,3.0.5 An alternative solution is for perishable wastes to be stored within a refrigerated store room.,"if( expression( function( is), atom( relation( type), variable( waste)), data( perishable))), then( permission( expression( function( has), atom( relation( storage), variable( waste)), data( refrigeration))))",3.0.5 An alternative solution is for perishable wastes to be stored within a refrigerated store room.,
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.6,Waste Storage Area 3.0.6 opening windows shall be screened to prevent entry by insects and other vermin.,"if( and( expression( function( has), atom( variable( waste storage area)), data( window)), expression( function( is), atom( relation( operation), variable( window)), data( openable)))), then( prohibition( expression( function( by), atom( relation( access), variable( waste storage area)), data( vermin))))",3.0.6 opening windows shall be screened to prevent entry by insects and other vermin.,Questionable
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.7,"3.0.7 A water supply tap, complying with NZBC G12, shall be provided for washing down common waste storage areas.","if( expression( function( is), atom( relation( type), variable( waste storage area)), data( common))), then( and( obligation( expression( function( greater than), expression( function( count), atom( variable( water supply tap))), data( 1))), obligation( expression( function( comply with), atom( variable( water supply tap)), data( nzbc g12)))))","3.0.7 A water supply tap, complying with NZBC G12, shall be provided for washing down common waste storage areas.",MediumData
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.8,3.0.8 Ventilation: Storage areas located indoors shall be adequately ventilated to open air in compliance with NZBC G4.,"if( expression( function( has), atom( variable( building)), data( waste storage area))), then( and( obligation( expression( function( has), atom( variable( waste storage area)), data( ventilation))), obligation( expression( function( comply with), atom( relation( standard), variable( ventilation)), data( nzbc g4)))))",3.0.8 Ventilation: Storage areas located indoors shall be adequately ventilated to open air in compliance with NZBC G4.,
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.9,"3.0.9 Mechanical ventilation: Where mechanical ventilation is used, it shall: a) Provide no less than 6 air changes per hour, b) Maintain a negative pressure within the storage area relative to adjacent areas (if any), and c) Discharge foul air to a safe place to avoid the likelihood of exhaust air entering any building.","if( expression( function( is), atom( relation( type), variable( ventilation)), data( mechanical))), then( and( obligation( expression( function( greater than equal), atom( relation( rate), variable( ventilation)), data( 6 air changes per hour))), obligation( expression( function( is), atom( relation( relative air pressure), variable( storage)), data( negative))), obligation( expression( function( towards), atom( relation( discharge), variable( storage)), data( safe place)))))","3.0.9 Mechanical ventilation: Where mechanical ventilation is used, it shall: a) Provide no less than 6 air changes per hour, b) Maintain a negative pressure within the storage area relative to adjacent areas (if any), and c) Discharge foul air to a safe place to avoid the likelihood of exhaust air entering any building.","ModelIgnoreExplanation
SplitableEntities"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.0.10,3.0.10 Access between the storage area and collection vehicle shall comply with NZBC D1.,"if( and( expression( function( has), atom( variable( waste storage)), data( access route)), expression( function( from), atom( relation( location), variable( access route)), data( waste storage area)), expression( function( to), atom( relation( location), variable( access route)), data( collection vehicle)))), then( obligation( expression( function( comply with), atom( variable( access route)), data( nzbc d1))))",3.0.10 Access between the storage area and collection vehicle shall comply with NZBC D1.,MediumData
lrml/NZ_NZBC-G15AS1#2.7.lrml,r3.1.1,"3.1.1 NZS 4304 Section 6.2 is another Acceptable Solution for storage areas, but may exceed the performance criteria of NZBC G15.","if( expression( function( has), atom( variable( room)), data( waste storage))), then( permission( expression( function( comply with), atom( relation( standard), variable( waste storage)), data( nzs 4304 6.2))))","3.1.1 NZS 4304 Section 6.2 is another Acceptable Solution for storage areas, but may exceed the performance criteria of NZBC G15.",
lrml/NZ_NZBC-G15AS1#2.7.lrml,r4.0.1,"4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9.","if( expression( function( has), atom( variable( waste chute)), data( site entry hopper))), then( and( obligation( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0)))), obligation( expression( function( is), atom( relation( cleaning mode), variable( waste chute)), data( self cleaning))), obligation( expression( function( is), atom( relation( position), variable( waste chute)), data( vertical))), obligation( expression( function( is), atom( relation( joint), variable( waste chute)), data( smooth))), obligation( expression( function( has), atom( variable( waste chute)), data( vent))), obligation( expression( function( is), atom( relation( location), variable( vent)), data( above roof line))), obligation( expression( function( is), atom( relation( location), variable( vent)), data( bottom of chute))), obligation( expression( function( is), atom( relation( location), variable( vent)), data( bottom above container))), obligation( expression( function( into), atom( relation( discharge mode), variable( waste chute)), data( container))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.1))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.2))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.3))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.4))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.5))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.6))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.7))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.8))), obligation( expression( function( comply with), atom( variable( room)), data( nzbc g15as1 3.0.9)))))","4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9.","PartlyAbstract
EnumeratesAll
SplitableEntities"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r4.0.2.1,"4.0.2 Side-entry hoppers (see Figure 2) shall: a) Have a maximum opening diameter of 250 mm, b) Have self-closing, tight-fitting doors to prevent odours escaping, c) Have an easily cleaned wall surface surrounding the opening for 300 mm (this may be galvanised steel, ceramic tiles or similar material), d) Be located outside any dwelling or enclosed stair access, and away from any habitable space or food preparation area, and e) Have adequate ventilation, preferably by being located in the open air (e.g. on an outside balcony). Where hoppers are inside buildings, they shall be located in separate ventilated compartments complying with NZBC G4.","if( expression( function( has), atom( variable( side entry hopper)), data( opening))), then( and( obligation( expression( function( less than equal), atom( relation( diameter), variable( opening)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))), obligation( expression( function( has), atom( variable( side entry hopper)), data( door))), obligation( expression( function( is), atom( relation( operation type), variable( door)), data( self closing))), obligation( expression( function( is), atom( relation( installation type), variable( door)), data( tight fitting))), obligation( expression( function( is), atom( relation( surface finish), variable( wall)), data( easily cleaned))), permission( expression( function( is), atom( relation( material), variable( surface)), data( galvanised steel sheet))), obligation( not( expression( function( is), atom( relation( location), variable( side entry hopper)), data( dwelling)))), obligation( not( expression( function( is), atom( relation( location), variable( side entry hopper)), data( enclosed stair access)))), obligation( not( expression( function( adjacent), atom( relation( location), variable( side entry hopper)), data( habitable space)))), obligation( not( expression( function( adjacent), atom( relation( location), variable( side entry hopper)), data( food preparation area)))), obligation( expression( function( is), atom( relation( level), variable( ventilation)), data( adequate))), or( obligation( expression( function( is), atom( relation( location), variable( side entry hopper)), data( open air))), and( obligation( expression( function( is), atom( relation( location), variable( side entry hopper)), data( ventilated compartment))), expression( rulestatement( expression( expression( function( for each), atom( variable( ventilated compartment))))), appliedstatement( obligation( expression( function( is), expression( function( count), atom( variable( side entry hopper))), data( 1))))), obligation( expression( function( comply with), atom( variable( side entry hopper)), data( nzbc g4)))))))","4.0.2 Side-entry hoppers (see Figure 2) shall: a) Have a maximum opening diameter of 250 mm, b) Have self-closing, tight-fitting doors to prevent odours escaping, c) Have an easily cleaned wall surface surrounding the opening for 300 mm (this may be galvanised steel, ceramic tiles or similar material), d) Be located outside any dwelling or enclosed stair access, and away from any habitable space or food preparation area, and e) Have adequate ventilation, preferably by being located in the open air (e.g. on an outside balcony).","Complex
OldRev
SplitableEntities"
lrml/NZ_NZBC-G15AS1#2.7.lrml,r4.0.3,"4.0.3 Buildings incorporating waste chutes, shall be provided with a water supply tap on every second floor, adjacent to the chute, to facilitate cleaning.","if( expression( function( has), atom( variable( building)), data( waste chute))), then( and( obligation( expression( function( has), atom( variable( building)), data( water supply tap))), obligation( expression( function( is), atom( relation( location), variable( water supply tap)), data( 1 per every second floor))), obligation( expression( function( adjacent), atom( relation( location), variable( water supply tap)), data( waste chute)))))","4.0.3 Buildings incorporating waste chutes, shall be provided with a water supply tap on every second floor, adjacent to the chute, to facilitate cleaning.","LongEntities
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.1.0.1,"1.1.1 Type; The acceptable solutions described in this document are for chimneys built of brickwork, concrete or precast pumice concrete, that are connected to timber frame or masonry buildings complying with NZS 3604 or NZS 4229.","if( and( or( expression( function( is), atom( relation( material), variable( chimney)), data( brickwork)), expression( function( is), atom( relation( material), variable( chimney)), data( concrete)), expression( function( is), atom( relation( material), variable( chimney)), data( precast pumice concrete))), expression( function( connect), atom( variable( chimney)), data( building)), or( expression( function( is), atom( relation( construction), variable( building)), data( timber frame)), expression( function( is), atom( relation( construction), variable( building)), data( masonry))), or( expression( function( comply with), atom( relation( construction), variable( building)), data( nzs 3604)), expression( function( comply with), atom( relation( construction), variable( building)), data( nzs 4229))))), then( permission( expression( function( comply with), atom( variable( chimney)), data( nzbc b1as3))))","1.1.1 Type The acceptable solutions described in this document are for chimneys built of brickwork, concrete or precast pumice concrete, that are connected to timber frame or masonry buildings complying with NZS 3604 or NZS 4229.",MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.2.0.1,1.1.2 Height; The height of any chimney measured from the top of the chimney foundation slab to the top of the chimney stack shall not exceed 9 m.,"if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( define), expression( function( top of), atom( relation( slab), variable( foundation))), data( x0)), expression( function( define), expression( function( top of), atom( relation( stack), variable( chimney))), data( x1)), expression( function( in between), atom( relation( height), variable( chimney)), data( x0)), expression( function( in between), atom( relation( height), variable( chimney)), data( x1)))), then( obligation( expression( function( less than equal), atom( relation( height), variable( chimney)), data( baseunit( kind( metre)), value( 9.0)))))",1.1.2 Height The height of any chimney measured from the top of the chimney foundation slab to the top of the chimney stack shall not exceed 9 m.,Define
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.2.0.2,Chimneys shall not cantilever more than 2.4 m above the fixing at roof level (refer Paragraph 1.7).,"if( and( expression( function( is), atom( variable( chimney)), data( cantilevered)), expression( function( at), atom( relation( base), variable( chimney)), data( roof)))), then( obligation( expression( function( less than equal), atom( relation( height), variable( chimney)), data( baseunit( kind( metre)), value( 2.4)))))",Chimneys shall not cantilever more than 2.4 m above the fixing at roof level (refer Paragraph 1.7).,DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.3.0.1.a.1,1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: a) For the foundation and chimney base – precast pumice concrete 1600 mm wide x 1050 mm deep,"if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( define), atom( relation( width), variable( foundation)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( foundation)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( perpendicular building line)), expression( function( is), atom( relation( material), variable( chimney)), data( precast pumice concrete)))), then( and( obligation( expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 1600.0)))), obligation( expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 1050.0))))))",1.1.3 Size The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: a) For the foundation and chimney base – precast pumice concrete 1600 mm wide x 1050 mm deep,"SplitableEntities
"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.3.0.1.a.2,1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: a) For the foundation and chimney base – brickwork or concrete 1200 mm wide x 1050 mm deep,"if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( define), atom( relation( width), variable( foundation)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( foundation)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( perpendicular building line)), or( expression( function( is), atom( relation( material), variable( chimney)), data( brickwork)), expression( function( is), atom( relation( material), variable( chimney)), data( concrete))))), then( and( obligation( expression( function( less than equal), atom( variable( x0)), data( baseunit( kind( metre), prefix( milli)), value( 1200.0)))), obligation( expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 1050.0))))))",1.1.3 Size The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: a) For the foundation and chimney base – brickwork or concrete 1200 mm wide x 1050 mm deep,SplitableEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.3.0.1.a.3,1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a brick chimney stack – single skin (see Figure 2) 500 mm wide x 500 mm deep,"if( and( expression( function( has), atom( variable( chimney)), data( stack)), expression( function( define), atom( relation( width), variable( stack)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( stack)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( perpendicular building line)), expression( function( is), atom( relation( material), variable( stack)), data( single skin brick)))), then( and( obligation( expression( function( less than equal), atom( variable( x0)), data( baseunit( kind( metre), prefix( milli)), value( 500.0)))), obligation( expression( function( less than equal), atom( variable( x1)), data( baseunit( kind( metre), prefix( milli)), value( 500.0))))))",1.1.3 Size The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed:   For a brick chimney stack – single skin (see Figure 2) 500 mm wide x 500 mm deep,SplitableEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.3.0.1.b.1,1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a brick chimney stack – double skin (see Figure 3) - 1200 mm wide x 680 mm deep,"if( and( expression( function( has), atom( variable( chimney)), data( stack)), expression( function( define), atom( relation( width), variable( stack)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( stack)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( perpendicular building line)), expression( function( is), atom( relation( material), variable( stack)), data( double skin brick)))), then( and( obligation( expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 1200.0)))), obligation( expression( function( less than equal), atom( variable( x1)), data( baseunit( kind( metre), prefix( milli)), value( 680.0))))))",1.1.3 Size The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed:   For a brick chimney stack – double skin (see Figure 3) - 1200 mm wide x 680 mm deep,SplitableEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.3.0.1.b.2,1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a concrete or precast pumice concrete chimney stack - 1200 mm wide x 700 mm deep,"if( and( expression( function( has), atom( variable( chimney)), data( stack)), expression( function( define), atom( relation( width), variable( stack)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( stack)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( perpendicular building line)), or( expression( function( is), atom( relation( material), variable( stack)), data( concrete)), expression( function( is), atom( relation( material), variable( stack)), data( precast pumice concrete))))), then( and( obligation( expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 1200.0)))), obligation( expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 700.0))))))",1.1.3 Size The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a concrete or precast pumice concrete chimney stack - 1200 mm wide x 700 mm deep,SplitableEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.1.4.0.1,1.1.4 Chimney liners; Where chimney liners are used they are to be separated from the chimney to ensure free thermal movement. This shall be achieved by coating the liner with a suitable debonding agent or by wrapping it in a combustible material no less than 0.25 mm thick.,"if( expression( function( has), atom( variable( chimney)), data( chimney liner))), then( or( and( obligation( expression( function( has), atom( variable( chimney liner)), data( coating))), obligation( expression( function( is), atom( relation( material), variable( coating)), data( debonding agent)))), and( obligation( expression( function( has), atom( variable( chimney liner)), data( wrapping))), obligation( expression( function( is), atom( relation( type), variable( wrapping)), data( combustible))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( wrapping)), data( baseunit( prefix( milli), kind( metre)), value( 0.25)))))))",1.1.4 Chimney liners Where chimney liners are used they are to be separated from the chimney to ensure free thermal movement. This shall be achieved by coating the liner with a suitable debonding agent or by wrapping it in a combustible material no less than 0.25 mm thick.,LearnToIgnore
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.2.1.0.1.a.1,1.2.1 Chimney wall thicknesses shall be no less than: a) Brick – single skin (see Figure 2) 155 mm,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( is), atom( relation( type), variable( brick)), data( single skin)), expression( function( has), atom( variable( chimney)), data( wall)))), then( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 155.0)))))",1.2.1 Chimney wall thicknesses shall be no less than: a) Brick – single skin (see Figure 2) 155 mm,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.2.1.0.1.a.2,1.2.1 Chimney wall thicknesses shall be no less than: a) Brick – double skin (see Figure 3) 245 mm,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( is), atom( relation( type), variable( brick)), data( double skin)), expression( function( has), atom( variable( chimney)), data( wall)))), then( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 245.0)))))",1.2.1 Chimney wall thicknesses shall be no less than: a) Brick – single skin (see Figure 2) 155 mm – double skin (see Figure 3) 245 mm,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.2.1.0.1.b.1,1.2.1 Chimney wall thicknesses shall be no less than: Concrete 170 mm,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( concrete)), expression( function( has), atom( variable( chimney)), data( wall)))), then( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 170.0)))))",1.2.1 Chimney wall thicknesses shall be no less than: Concrete 170 mm,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.2.1.0.1.c.1,1.2.1 Chimney wall thicknesses shall be no less than: Precast pumice concrete 85 mm,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( precast pumice concrete)), expression( function( has), atom( variable( chimney)), data( wall)))), then( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 85.0)))))",1.2.1 Chimney wall thicknesses shall be no less than: Precast pumice concrete 85 mm,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.3.3.0.1,"1.3.3 The chimney foundation walls shall be 150 mm thick reinforced concrete, 190 mm thick concrete masonry, or brick construction complying with Figures 2 or 3. Vertical and horizontal reinforcing steel shall be as given in Paragraph 1.6. ","if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( part of), atom( variable( wall)), data( foundation)))), then( and( or( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 150.0)))), obligation( expression( function( is), atom( relation( material), variable( wall)), data( reinforced concrete)))), and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 190.0)))), obligation( expression( function( is), atom( relation( material), variable( wall)), data( concrete masonry)))), and( obligation( expression( function( is), atom( relation( material), variable( wall)), data( brick))), obligation( expression( function( comply with), atom( variable( wall)), data( figure))), or( obligation( expression( function( equal), atom( variable( figure)), data( f2))), obligation( expression( function( equal), atom( variable( figure)), data( f3)))))), obligation( expression( function( comply with), atom( relation( reinforcing steel), variable( wall)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.6)))))",1.3.3 The chimney foundation walls shall be 150 mm thick reinforced concrete.  Vertical and horizontal reinforcing steel shall be as given in Paragraph 1.6.,"DomainKnowledge
Complex
OldRev"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.4.1.0.1,"1.4.1 Hearth slabs shall be of concrete no less than 75 mm thick, reinforced with D10 bars located centrally at 225 mm centres each way. See Figure 1.","if( and( expression( function( has), atom( variable( chimney)), data( hearth)), expression( function( part of), atom( variable( slab)), data( hearth)))), then( and( obligation( expression( function( is), atom( relation( material), variable( slab)), data( concrete))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( slab)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( has), atom( variable( slab)), data( reinforcing steel))), obligation( expression( function( is), atom( relation( type), variable( reinforcing steel)), data( d10 bar))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( way))), data( slab))), appliedstatement( obligation( expression( function( is), atom( relation( placement), variable( reinforcing steel)), data( 225 mm centre)))))))","1.4.1 Hearth slabs shall be of concrete no less than 75 mm thick, reinforced with D10 bars located centrally at 225 mm centres each way. See Figure 1.",DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.5.1.0.1,"1.5.1 The widths of openings in chimney breasts, and their supporting lintels, shall comply with Table 1.","if( and( expression( function( has), atom( variable( chimney)), data( breast)), expression( function( has), atom( variable( breast)), data( opening)), expression( function( has), atom( variable( opening)), data( lintel)))), then( and( obligation( expression( function( comply with), atom( relation( width), variable( opening)), data( table))), obligation( expression( function( comply with), atom( variable( lintel)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t1)))))","1.5.1 The widths of openings in chimney breasts, and their supporting lintels, shall comply with Table 1.",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.6.1.0.1,1.6.1 Reinforcing of foundation walls and chimney bases (including the gathers) (see Figures 2 to 5 inclusive) shall comprise: a) D12 bars at 400 mm maximum centres vertically. Laps in bars shall be no less than 300 mm. b) R6 bars at 200 mm centres horizontally. These will be in the form of U bars.,"if( and( or( expression( function( has), atom( variable( chimney)), data( foundation wall)), expression( function( has), atom( variable( chimney)), data( base)), expression( function( has), atom( variable( chimney)), data( gather))), or( expression( function( part of), atom( variable( reinforcing)), data( foundation wall)), expression( function( part of), atom( variable( reinforcing)), data( base)), expression( function( part of), atom( variable( reinforcing)), data( gather))))), then( and( obligation( expression( function( include), atom( relation( type), variable( reinforcing)), data( vertical reinforcing bar))), obligation( expression( function( include), atom( relation( type), variable( reinforcing)), data( horizontal reinforcing bar))), obligation( expression( function( is), atom( relation( size), variable( vertical reinforcing bar)), data( d12))), obligation( expression( function( less than equal), atom( relation( spacing), variable( vertical reinforcing bar)), data( 400 mm centre))), obligation( expression( function( greater than equal), atom( relation( lap), variable( vertical reinforcing bar)), data( baseunit( kind( metre), prefix( milli)), value( 300.0)))), obligation( expression( function( greater than equal), atom( relation( size), variable( horizontal reinforcing bar)), data( r6))), obligation( expression( function( less than equal), atom( relation( spacing), variable( horizontal reinforcing bar)), data( 200 mm centre))), obligation( expression( function( is), atom( relation( type), variable( horizontal reinforcing bar)), data( u bar)))))","1.6.1 Reinforcing of foundation walls, chimney bases (including the gathers) and chimney stacks (see Figures 2 to 5 inclusive) shall comprise: a) D12 bars at 400 mm maximum centres vertically. Laps in bars shall be no less than 300 mm. b) R6 bars at 200 mm centres horizontally. These will be in the form of closed stirrups in the stack and U bars elsewhere.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.6.1.0.2,1.6.1 Reinforcing of chimney stacks (see Figures 2 to 5 inclusive) shall comprise: a) D12 bars at 400 mm maximum centres vertically. Laps in bars shall be no less than 300 mm. b) R6 bars at 200 mm centres horizontally. These will be in the form of closed stirrups in the stack.,"if( and( expression( function( has), atom( variable( chimney)), data( stack)), expression( function( part of), atom( variable( reinforcing)), data( stack)))), then( and( obligation( expression( function( is), atom( relation( type), variable( reinforcing)), data( vertical reinforcing bar))), obligation( expression( function( is), atom( relation( type), variable( reinforcing)), data( horizontal reinforcing bar))), obligation( expression( function( is), atom( relation( size), variable( vertical reinforcing bar)), data( d12))), obligation( expression( function( less than equal), atom( relation( spacing), variable( vertical reinforcing bar)), data( 400 mm centre))), obligation( expression( function( greater than equal), atom( relation( lap), variable( vertical reinforcing bar)), data( baseunit( prefix( milli), kind( metre)), value( 300.0)))), obligation( expression( function( greater than equal), atom( relation( size), variable( horizontal reinforcing bar)), data( r6))), obligation( expression( function( less than equal), atom( relation( spacing), variable( horizontal reinforcing bar)), data( 200 mm centre))), obligation( expression( function( is), atom( relation( type), variable( horizontal reinforcing bar)), data( stirrup))), obligation( expression( function( is), atom( relation( type), variable( stirrup)), data( closed)))))","1.6.1 Reinforcing of foundation walls, chimney bases (including the gathers) and chimney stacks (see Figures 2 to 5 inclusive) shall comprise: a) D12 bars at 400 mm maximum centres vertically. Laps in bars shall be no less than 300 mm. b) R6 bars at 200 mm centres horizontally. These will be in the form of closed stirrups in the stack and U bars elsewhere.","DomainKnowledge
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.6.1.0.3,"1.6.1 Reinforcing of foundation walls, chimney bases (including the gathers) and chimney stacks (see Figures 2 to 5 inclusive) shall comprise: Double horizontal reinforcing at any change in direction of the vertical steel (e.g. at the gather/stack intersection).","if( and( or( expression( function( has), atom( variable( chimney)), data( foundation wall)), expression( function( has), atom( variable( chimney)), data( base)), expression( function( has), atom( variable( chimney)), data( gather)), expression( function( has), atom( variable( chimney)), data( stack))), or( expression( function( part of), atom( variable( reinforcing)), data( foundation wall)), expression( function( part of), atom( variable( reinforcing)), data( base)), expression( function( part of), atom( variable( reinforcing)), data( gather)), expression( function( part of), atom( variable( reinforcing)), data( stack))), expression( function( is), atom( relation( type), variable( reinforcing)), data( vertical reinforcing bar)))), then( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( change in direction))), data( vertical reinforcing bar))), appliedstatement( and( obligation( expression( function( is), atom( relation( type), variable( reinforcing)), data( horizontal reinforcing bar))), obligation( expression( function( equal), expression( function( count), atom( variable( horizontal reinforcing bar))), data( 2)))))))","1.6.1 Reinforcing of foundation walls, chimney bases (including the gathers) and chimney stacks (see Figures 2 to 5 inclusive) shall comprise: a) D12 bars at 400 mm maximum centres vertically. Laps in bars shall be no less than 300 mm. b) R6 bars at 200 mm centres horizontally. These will be in the form of closed stirrups in the stack and U bars elsewhere. c) Double horizontal reinforcing at any change in direction of the vertical steel (e.g. at the gather/stack intersection).","Complex
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.2.0.1,"1.7.2 Where a packer (see Figures 2, 3, 6 and 7(b)) is shown between the chimney and building it shall be: a) Concrete, brick, steel (angle, channel or Z section), or any insulating material which has a long term operating temperature of no less than 150°C, b) Secured in place to prevent it dislodging, and c) Capable of withstanding a compressive force of 10 kN without shortening by more than 1.5 mm.","if( and( expression( function( in between), atom( relation( is exist), variable( packer)), data( chimney)), expression( function( in between), atom( relation( is exist), variable( packer)), data( building)))), then( and( or( obligation( expression( function( is), atom( relation( material), variable( packer)), data( concrete))), obligation( expression( function( is), atom( relation( material), variable( packer)), data( brick))), obligation( expression( function( is), atom( relation( material), variable( packer)), data( steel angle))), obligation( expression( function( is), atom( relation( material), variable( packer)), data( steel channel))), obligation( expression( function( is), atom( relation( material), variable( packer)), data( steel z section))), and( obligation( expression( function( is), atom( relation( material), variable( packer)), data( insulating))), obligation( expression( function( has), atom( relation( material), variable( packer)), data( operating temperature))), obligation( expression( function( greater than equal), atom( variable( operating temperature)), data( baseunit( kind( celsius)), value( 150.0)))))), obligation( expression( function( is), atom( relation( location), variable( packer)), data( fixed))), obligation( expression( function( has), atom( variable( packer)), data( resistance))), obligation( expression( function( is), atom( relation( application), variable( resistance)), data( force))), obligation( expression( function( is), atom( relation( type), variable( force)), data( compression))), obligation( expression( function( is), atom( relation( strength), variable( force)), data( baseunit( prefix( kilo), kind( newton)), value( 10.0)))), obligation( expression( function( is), atom( relation( allowance), variable( resistance)), data( shortening))), obligation( expression( function( less than equal), atom( variable( shortening)), data( baseunit( prefix( milli), kind( metre)), value( 1.5))))))","1.7.2 Where a packer (see Figures 2, 3, 6 and 7(b)) is shown between the chimney and building it shall be: a) Concrete, brick, steel (angle, channel or Z section), or any insulating material which has a long term operating temperature of no less than 150°C, b) Secured in place to prevent it dislodging, and c) Capable of withstanding a compressive force of 10 kN without shortening by more than 1.5 mm.","Detailed
"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.3.0.1,1.7.3 Floor and roof brackets; The brackets shall comprise a 50 mm x 4 mm hot dip galvanised steel strap placed around the chimney.,"if( expression( function( has), atom( variable( chimney)), data( bracket))), then( and( obligation( expression( function( include), atom( variable( bracket)), data( strap))), obligation( expression( function( equal), atom( relation( length), variable( strap)), data( baseunit( kind( metre), prefix( milli)), value( 50.0)))), obligation( expression( function( equal), atom( relation( depth), variable( strap)), data( baseunit( kind( metre), prefix( milli)), value( 4.0)))), obligation( expression( function( is), atom( relation( material), variable( strap)), data( steel))), obligation( expression( function( is), atom( relation( type), variable( steel)), data( hot dip galvanised))), obligation( expression( function( is), atom( relation( placement), variable( strap)), data( chimney)))))",1.7.3 Floor and roof brackets The brackets shall comprise a 50 mm x 4 mm hot dip galvanised steel strap placed around the chimney.,"Detailed
DomainKnowledge"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.6.0.1,1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties.,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( expression( function( has), atom( variable( chimney)), data( fixing))), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( location), variable( fixing)), data( roof level)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( size), variable( u strap)), data( 50 x 1.0 mm)), expression( function( greater than equal), atom( relation( spacing), variable( u strap)), data( baseunit( kind( metre), prefix( milli)), value( 50.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))",1.7.6 Brick chimneys Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties.,Order
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.7.0.1,1.7.7 Wall ties (see Figure 7(a)) shall be located in mortar joints at 225 mm maximum centres up each side of the chimney for chimneys not wider than 600 mm.,"if( and( expression( function( less than equal), atom( relation( width), variable( chimney)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))), expression( function( has), atom( variable( chimney)), data( wall tie)))), then( and( obligation( expression( function( in), atom( relation( location), variable( wall tie)), data( mortar joint))), obligation( expression( function( at), atom( relation( location), variable( wall tie)), data( 225 mm maximum centres up each side of the chimney)))))","1.7.7 Wall ties (see Figure 7(a)) shall be located in mortar joints at 225 mm maximum centres up each side of the chimney, except that pairs of ties shall be used for chimneys wider than 600 mm.",LongEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.7.0.2,"1.7.7 Wall ties (see Figure 7(a)) shall be located in mortar joints at 225 mm maximum centres up each side of the chimney, except that pairs of ties shall be used for chimneys wider than 600 mm.","if( and( expression( function( greater than), atom( relation( width), variable( chimney)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))), expression( function( has), atom( variable( chimney)), data( wall tie)))), then( and( obligation( expression( function( in), atom( relation( location), variable( wall tie)), data( mortar joint))), obligation( expression( function( at), atom( relation( location), variable( wall tie)), data( 225 mm maximum centres up each side of the chimney))), obligation( expression( function( in), atom( relation( usage), variable( wall tie)), data( pairs)))))","1.7.7 Wall ties (see Figure 7(a)) shall be located in mortar joints at 225 mm maximum centres up each side of the chimney, except that pairs of ties shall be used for chimneys wider than 600 mm.","LongEntities
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.8.0.1,1.7.8 Wall ties shall be constructed from either 4 mm diameter galvanised bar or 25 x 1.5 mm zinc coated steel strip capable of withstanding a load of 1.2 kN without elongating or shortening by more than 1.5 mm.,"if( expression( function( equal), atom( variable( wall tie)), data( true))), then( or( and( obligation( expression( function( is), atom( relation( material), variable( wall tie)), data( bar))), obligation( expression( function( equal), atom( relation( diameter), variable( bar)), data( baseunit( kind( metre), prefix( milli)), value( 4.0)))), obligation( expression( function( is), atom( relation( type), variable( bar)), data( galavanised)))), and( obligation( expression( function( is), atom( relation( material), variable( wall tie)), data( strip))), obligation( expression( function( equal), atom( relation( size), variable( strip)), data( 25 x 1.5 mm))), obligation( expression( function( is), atom( relation( material), variable( strip)), data( steel))), obligation( expression( function( is), atom( relation( type), variable( steel)), data( zinc coated))), obligation( expression( function( has), atom( variable( strip)), data( resistance))), obligation( expression( function( is), atom( relation( application), variable( resistance)), data( load))), obligation( expression( function( equal), atom( relation( strength), variable( load)), data( baseunit( prefix( kilo), kind( newton)), value( 1.2)))), obligation( expression( function( is), atom( relation( allowance), variable( resistance)), data( shortening))), obligation( expression( function( is), atom( relation( allowance), variable( resistance)), data( elongating))), obligation( expression( function( less than equal), atom( variable( shortening)), data( baseunit( prefix( milli), kind( metre)), value( 1.5)))), obligation( expression( function( less than equal), atom( variable( elongating)), data( baseunit( prefix( milli), kind( metre)), value( 1.5)))))))",1.7.8 Wall ties shall be constructed from either 4 mm diameter galvanised bar or 25 x 1.5 mm zinc coated steel strip capable of withstanding a load of 1.2 kN without elongating or shortening by more than 1.5 mm.,DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.9.0.1,1.7.9 Where zinc coating of components is required it shall be no less than 300 g/m2 in accordance with AS 1397.,"if( obligation( expression( function( has), atom( variable( component)), data( zinc coating)))), then( and( obligation( expression( function( greater than equal), atom( relation( density), variable( zinc coating)), data( 300 g/m2))), obligation( expression( function( comply with), atom( relation( density), variable( zinc coating)), data( as 1397)))))",1.7.9 Where zinc coating of components is required it shall be no less than 300 g/m2 in accordance with AS 1397.,MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.10.0.1,1.7.10 Nails used to fix straps to roof or ceiling framing shall be spaced at no less than 35 m in Radiata Pine,"if( and( or( expression( function( part of), atom( variable( framing)), data( roof)), expression( function( part of), atom( variable( framing)), data( ceiling))), expression( function( has), atom( variable( framing)), data( fixture)), expression( function( is), atom( variable( framing)), data( strap)), expression( function( is), atom( relation( method), variable( fixture)), data( nail)), expression( function( is), atom( relation( material), variable( framing)), data( radiata pine)))), then( obligation( expression( function( greater than equal), atom( relation( spacing), variable( nail)), data( baseunit( prefix( milli), kind( metre)), value( 35.0)))))",1.7.10 Nails used to fix straps to roof or ceiling framing shall be spaced at no less than 35 mm in Radiata Pine,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.10.0.2,1.7.10 Nails used to fix straps to roof or ceiling framing shall be spaced at no less than 70 mm in other timbers than Radiata Pine.,"if( and( or( expression( function( part of), atom( variable( framing)), data( roof)), expression( function( part of), atom( variable( framing)), data( ceiling))), expression( function( has), atom( variable( framing)), data( fixture)), expression( function( is), atom( variable( framing)), data( strap)), expression( function( is), atom( relation( method), variable( fixture)), data( nail)), expression( function( is), atom( relation( material), variable( framing)), data( timber)), not( expression( function( is), atom( relation( type), variable( timber)), data( radiata pine))))), then( obligation( expression( function( greater than equal), atom( relation( spacing), variable( nail)), data( baseunit( kind( metre), prefix( milli)), value( 70.0)))))",1.7.10 Nails used to fix straps to roof or ceiling framing shall be spaced at no less than 70 mm in other timbers.,DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.13.0.1,"1.7.13 Precast pumice concrete chimneys; Precast pumice concrete chimneys shall be restrained at roof level either by a 50 x 1 mm 'U' strap wrapped around the chimney, or by a hot dip galvanised deformed 6 mm reinforcing bar placed into the grout around the reinforcing steel, together with either fixing brackets or fixing ties (see Figure 7(b)). Straps and bars shall satisfy the relevant requirements of Paragraphs 1.7.6 to 1.7.12.","if( expression( function( is), atom( relation( construction), variable( chimney)), data( precast pumice concrete))), then( and( obligation( expression( function( has), atom( variable( chimney)), data( restraint))), obligation( expression( function( at), atom( relation( location), variable( restraint)), data( roof))), or( and( obligation( expression( function( is), atom( relation( type), variable( restraint)), data( u strap))), obligation( expression( function( is), atom( relation( size), variable( u strap)), data( 50 x 1 mm))), obligation( expression( function( is), atom( relation( method), variable( restraint)), data( wrapped around chimney)))), and( obligation( expression( function( is), atom( relation( type), variable( restraint)), data( reinforcing bar))), obligation( expression( function( is), atom( relation( size), variable( reinforcing bar)), data( d6))), obligation( expression( function( is), atom( variable( reinforcing bar)), data( hot dip galvanised))), obligation( expression( function( is), atom( relation( method), variable( restraint)), data( placed into grout around reinforcing steel))), or( obligation( expression( function( include), atom( variable( restraint)), data( bracket))), obligation( expression( function( include), atom( variable( restraint)), data( tie)))))), obligation( expression( function( comply with), atom( variable( restraint)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.6))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.7))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.8))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.9))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.10))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.11))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.7.12)))))","1.7.13 Precast pumice concrete chimneys Precast pumice concrete chimneys shall be restrained at roof level either by a 50 x 1 mm 'U' strap wrapped around the chimney, or by a hot dip galvanised deformed 6 mm reinforcing bar placed into the grout around the reinforcing steel, together with either fixing brackets or fixing ties (see Figure 7(b)). Straps and bars shall satisfy the relevant requirements of Paragraphs 1.7.6 to 1.7.12.","FromToReference
HasVsIs
Tacit
DomainKnowledge
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.14.0.1,"1.7.14 Fixing brackets (see Figure 7(b)) shall be made from 5.0 mm thick mild steel angle and drilled with: a) A 50 mm diameter hole to suit the reinforcing duct location, and b) A 14 mm diameter hole for the 12 mm diameter coach screw fixing to the double stud.","if( expression( function( is), atom( relation( type), variable( bracket)), data( fixing))), then( and( obligation( expression( function( is), atom( relation( type), variable( bracket)), data( angle))), obligation( expression( function( is), atom( relation( material), variable( bracket)), data( mild steel))), obligation( expression( function( equal), atom( relation( thickness), variable( bracket)), data( baseunit( kind( metre), prefix( milli)), value( 5.0)))), obligation( expression( function( has), atom( variable( bracket)), data( hole))), obligation( expression( function( equal), expression( function( count), atom( relation( type), variable( hole))), data( 2))), obligation( expression( function( is), atom( relation( method), variable( hole)), data( drilled))), expression( function( define), atom( relation( type), variable( hole)), data( x0)), expression( function( define), atom( relation( type), variable( hole)), data( x1)), obligation( expression( function( equal), atom( relation( size), variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))), obligation( expression( function( for), atom( variable( x0)), data( reinforcing duct))), obligation( expression( function( equal), atom( relation( size), variable( x1)), data( baseunit( kind( metre), prefix( milli)), value( 14.0)))), obligation( expression( function( for), atom( variable( x0)), data( coach screw))), obligation( expression( function( equal), atom( relation( size), variable( coach screw)), data( baseunit( kind( metre), prefix( milli)), value( 12.0)))), obligation( expression( function( for), atom( relation( fixing), variable( coach screw)), data( double stud)))))","1.7.14 Fixing brackets (see Figure 7(b)) shall be made from 5.0 mm thick mild steel angle and drilled with: a) A 50 mm diameter hole to suit the reinforcing duct location, and b) A 14 mm diameter hole for the 12 mm diameter coach screw fixing to the double stud.","Complex
Detailed"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.15.0.1.1,1.7.15 Fixing brackets shall be located in mortar joints between the units,"if( expression( function( is), atom( relation( type), variable( bracket)), data( fixing))), then( and( obligation( expression( function( in), atom( relation( location), variable( bracket)), data( mortar joint))), obligation( expression( function( in between), atom( relation( location), variable( mortar joint)), data( units)))))",1.7.15 Fixing brackets shall be located in mortar joints between the units,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.15.0.1.2,1.7.15 Fixing brackets shall be spaced at no less than 480 mm centres for stacks up to 600 mm wide,"if( and( expression( function( is), atom( relation( type), variable( bracket)), data( fixing)), expression( function( less than equal), atom( relation( width), variable( stack)), data( baseunit( kind( metre), prefix( milli)), value( 600.0))))), then( obligation( expression( function( greater than equal), atom( relation( spacing), variable( bracket)), data( 480 mm centre))))",1.7.15 Fixing brackets shall be spaced at no less than 480 mm centres for stacks up to 600 mm wide,MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.15.0.1.3,1.7.15 Fixing brackets shall be spaced at no less than 320 mm centres for stacks wider than 600 mm.,"if( and( expression( function( is), atom( relation( type), variable( bracket)), data( fixing)), expression( function( greater than), atom( relation( width), variable( stack)), data( baseunit( kind( metre), prefix( milli)), value( 600.0))))), then( obligation( expression( function( greater than equal), atom( relation( spacing), variable( bracket)), data( 320 mm centre))))",1.7.15 Fixing brackets shall be spaced at no less than 320 mm centres for stacks wider than 600 mm.,MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.16.0.1.1,"1.7.16 Fixing ties shall comprise 4 mm galvanised wire hairpins, which are hooked behind the reinforcing ducts and secured to the required adjacent double studding with four heavy duty fencing staples.","if( expression( function( is), atom( relation( type), variable( tie)), data( fixing))), then( and( obligation( expression( function( is), atom( relation( type), variable( tie)), data( 4 mm galvanised wire hairpin))), obligation( expression( function( behind), atom( relation( hook), variable( tie)), data( reinforcing duct))), obligation( expression( function( to), atom( relation( fixing), variable( tie)), data( adjacent double studding))), obligation( expression( function( by), atom( relation( fixing), variable( tie)), data( fencing staple))), obligation( expression( function( is), atom( relation( type), variable( fencing staple)), data( heavy duty))), obligation( expression( function( equal), expression( function( count), atom( variable( fencing staple))), data( 4)))))","1.7.16 Fixing ties shall comprise 4 mm galvanised wire hairpins, which are hooked behind the reinforcing ducts and secured to the required adjacent double studding with four heavy duty fencing staples.",SplitableEntities
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.16.0.1.2,Fixing ties shall be located in mortar joints between the units,"if( expression( function( is), atom( relation( type), variable( tie)), data( fixing))), then( and( obligation( expression( function( in), atom( relation( location), variable( tie)), data( mortar joint))), expression( function( in between), atom( relation( location), variable( mortar joint)), data( units))))",The ties shall be located in mortar joints between the units,TACIT-EXPERIMENT
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.16.0.1.3,The ties shall be located at no less than 320 mm centres for stacks up to 600 mm wide,"if( and( expression( function( is), atom( relation( type), variable( tie)), data( fixing)), expression( function( less than equal), atom( relation( width), variable( stack)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))))), then( obligation( expression( function( greater than equal), atom( relation( spaced at), variable( tie)), data( 320 mm centre))))",The ties shall be located at no less than 320 mm centres for stacks up to 600 mm wide,MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.7.16.0.1.4,The ties shall be at no less than 160 mm centres for stacks wider than 600 mm.,"if( and( expression( function( is), atom( relation( type), variable( tie)), data( fixing)), expression( function( greater than), atom( relation( width), variable( stack)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))))), then( obligation( expression( function( greater than equal), atom( relation( spaced at), variable( tie)), data( 160 mm centre))))",The ties shall be at no less than 160 mm centres for stacks wider than 600 mm.,MediumData
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.1.0.1,1.8.1 Brickwork; Brick chimney construction shall conform to the relevant sections of NZS 4210.,"if( expression( function( is), atom( relation( construction), variable( chimney)), data( brick))), then( obligation( expression( function( comply with), atom( relation( construction), variable( chimney)), data( nzs 4210))))",1.8.1 Brickwork Brick chimney construction shall conform to the relevant sections of NZS 4210.,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.2.0.1,"1.8.2 Concrete; Chimneys of reinforced concrete, shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.","if( and( expression( function( is), atom( relation( construction), variable( chimney)), data( reinforced concrete)), expression( function( is), atom( relation( grade), variable( concrete)), data( ordinary)))), then( obligation( expression( function( comply with), atom( variable( chimney)), data( nzs 3109))))","1.8.2 Concrete Chimneys of reinforced concrete, shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.2.0.2,1.8.2 Chimney foundations of reinforced concrete shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.,"if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( is), atom( relation( construction), variable( foundation)), data( reinforced concrete)), expression( function( is), atom( relation( grade), variable( concrete)), data( ordinary)))), then( obligation( expression( function( comply with), atom( variable( foundation)), data( nzs 3109))))","1.8.2 Concrete Chimneys, foundations of reinforced concrete, shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.2.0.3,1.8.2 Chimney hearth slabs of reinforced concrete shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.,"if( and( expression( function( has), atom( variable( chimney)), data( slab)), expression( function( is), atom( relation( type), variable( slab)), data( hearth)), expression( function( is), atom( relation( construction), variable( slab)), data( reinforced concrete)), expression( function( is), atom( relation( grade), variable( concrete)), data( ordinary)))), then( obligation( expression( function( comply with), atom( variable( slab)), data( nzs 3109))))","1.8.2 Concrete Chimneys, hearth slabs of reinforced concrete, shall comply with the relevant clauses of NZS 3109 for ordinary grade concrete.","ImplicitPrecondition
DomainKnowledge"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.3.0.1,"1.8.3 Precast pumice concrete; Pumice concrete units for use in precast chimneys shall: a) Have pumice aggregate which: i) is free of combustible and organic matter, and ii) has a maximum aggregate size of no greater than 19 mm, with at least 40% but not more than 60% of the aggregate retained by a 4.75 mm standard test sieve, and b) Have a mix ratio by volume of no more than five parts of mixed pumice aggregate to one part of cement, c) Have a compressive strength of no less than 7 MPa at 28 days when cured and tested in accordance with NZS 3112: Part 2, d) After adequate curing, be air dried and kept under cover during storage, transport and on the site, e) Be laid dry. (Work left unfinished should be protected from rain.) f) Be joined with mortar which complies with NZS 4210, and g) Have ducts filled with grout complying with NZS 4210.","if( and( expression( function( is), atom( relation( construction), variable( chimney)), data( precast concrete)), expression( function( has), atom( variable( chimney)), data( unit)), expression( function( is), atom( relation( construction), variable( unit)), data( pumice concrete)))), then( and( obligation( expression( function( has), atom( variable( pumice concrete)), data( aggregate))), or( obligation( not( expression( function( include), atom( relation( aggregate), variable( pumice concrete)), data( combustible)))), obligation( not( expression( function( include), atom( relation( aggregate), variable( pumice concrete)), data( organic))))), obligation( expression( function( less than equal), atom( relation( size), variable( aggregate)), data( baseunit( kind( metre), prefix( milli)), value( 19.0)))), obligation( expression( function( is), atom( relation( application), variable( sieve)), data( aggregate))), obligation( expression( function( is), atom( relation( output), variable( sieve)), data( retaint))), obligation( expression( function( equal), atom( relation( size), variable( sieve)), data( baseunit( kind( metre), prefix( milli)), value( 4.75)))), obligation( expression( function( greater than equal), atom( relation( ratio), variable( retaint)), data( 40 percent))), obligation( expression( function( less than equal), atom( relation( ratio), variable( retaint)), data( 60 percent))), obligation( expression( function( define), atom( relation( volume), variable( aggregate)), data( x0))), obligation( expression( function( define), atom( relation( volume), variable( cement)), data( x1))), obligation( expression( function( less than equal), atom( variable( x1)), data( x0 / 5))), obligation( expression( function( is), atom( relation( mix), variable( aggregate)), data( x0 + x1))), obligation( expression( function( has), atom( variable( aggregate)), data( compressive strength))), obligation( expression( function( greater than equal), atom( variable( compressive strength)), data( baseunit( kind( pascal), prefix( mega)), value( 7.0)))), obligation( expression( function( is), atom( relation( measurement), variable( compressive strength)), data( 28 days))), obligation( expression( function( comply with), atom( variable( compressive strength)), data( nzs 3112.2))), obligation( expression( function( has), atom( variable( pumice concrete)), data( protection))), obligation( expression( function( for), atom( variable( protection)), data( storage))), obligation( expression( function( for), atom( variable( protection)), data( transport))), obligation( expression( function( for), atom( variable( protection)), data( on site))), and( obligation( expression( function( include), atom( relation( method), variable( protection)), data( curing))), obligation( expression( function( include), atom( relation( method), variable( protection)), data( air drying))), obligation( expression( function( include), atom( relation( method), variable( protection)), data( covering)))), obligation( expression( function( from), atom( variable( protection)), data( rain))), obligation( expression( function( connect), atom( variable( mortar)), data( pumice concrete))), obligation( expression( function( comply with), atom( variable( mortar)), data( nzs 4210))), obligation( expression( function( has), atom( variable( unit)), data( duct))), obligation( expression( function( is), atom( relation( filling), variable( duct)), data( grout))), obligation( expression( function( comply with), atom( variable( duct)), data( nzs 4210)))))","1.8.3 Precast pumice concrete Pumice concrete units for use in precast chimneys shall: a) Have pumice aggregate which: i) is free of combustible and organic matter, and ii) has a maximum aggregate size of no greater than 19 mm, with at least 40% but not more than 60% of the aggregate retained by a 4.75 mm standard test sieve, and b) Have a mix ratio by volume of no more than five parts of mixed pumice aggregate to one part of cement, c) Have a compressive strength of no less than 7 MPa at 28 days when cured and tested in accordance with NZS 3112: Part 2, d) After adequate curing, be air dried and kept under cover during storage, transport and on the site, e) Be laid dry. (Work left unfinished should be protected from rain.) f) Be joined with mortar which complies with NZS 4210, and g) Have ducts filled with grout complying with NZS 4210, except over the last 200 mm where bars are anchored in the gather (refer Paragraph 1.6.2 b)).","Define
BadPrecondition
Complex
Abstract
DomainKnowledge
ExceptionNotTranslated"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.4.0.1,1.8.4 Concrete masonry; Concrete masonry construction for chimney foundation walls shall conform to the relevant sections of NZS 4229.,"if( and( expression( function( has), atom( variable( chimney)), data( foundation)), expression( function( has), atom( variable( foundation)), data( wall)), expression( function( is), atom( relation( construction), variable( wall)), data( concrete masonry)))), then( obligation( expression( function( comply with), atom( relation( wall), variable( foundation)), data( nzs 4229))))",1.8.4 Concrete masonry Concrete masonry construction for chimney foundation walls shall conform to the relevant sections of NZS 4229.,Inconsistencies
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.5.0.1,1.8.5 Reinforcing steel; Reinforcing used in chimneys is to conform to AS/NZS 4671,"if( expression( function( has), atom( variable( chimney)), data( reinforcing steel))), then( obligation( expression( function( comply with), atom( relation( reinforcing steel), variable( chimney)), data( asnzs 4671))))",1.8.5 Reinforcing steel Reinforcing used in chimneys is to conform to AS/NZS 4671,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.5.0.1.a.1,"1.8.5 Reinforcing steel; Reinforcing used in chimneys shall: a) For brick, be embedded centrally in the thickness of the grout","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing steel)), expression( function( is), atom( relation( construction), variable( chimney)), data( brick)))), then( and( obligation( expression( function( within), atom( variable( reinforcing steel)), data( grout))), obligation( expression( function( is), atom( relation( position), variable( reinforcing steel)), data( central)))))","1.8.5 Reinforcing steel Reinforcing used in chimneys shall: a) For brick, be embedded centrally in the thickness of the grout",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.5.0.1.b.1,"1.8.5 Reinforcing steel; Reinforcing used in chimneys shall: For in-situ concrete, have cover to the steel in accordance with NZS 3109","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing steel)), expression( function( is), atom( relation( construction), variable( chimney)), data( in situ concrete)))), then( and( obligation( expression( function( has), atom( relation( reinforcing steel), variable( chimney)), data( cover))), obligation( expression( function( comply with), atom( relation( thickness), variable( cover)), data( nzs 3109)))))","1.8.5 Reinforcing steel Reinforcing used in chimneys shall: For in-situ concrete, have cover to the steel in accordance with NZS 3109",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.5.0.1.c.1,"1.8.5 Reinforcing steel; Reinforcing used in chimneys shall: For precast pumice concrete, be placed with grout in the preformed ducts in the units.","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing steel)), expression( function( is), atom( relation( construction), variable( chimney)), data( precast pumice concrete)))), then( and( obligation( expression( function( has), atom( variable( reinforcing steel)), data( placement))), obligation( expression( function( is), atom( relation( method), variable( placement)), data( grout))), obligation( expression( function( in), atom( variable( placement)), data( duct))), obligation( expression( function( is), atom( variable( duct)), data( preformed)))))","1.8.5 Reinforcing steel Reinforcing used in chimneys shall: For precast pumice concrete, be placed with grout in the preformed ducts in the units.","NotEncodedParts
Detailed"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.8.6.0.1,Chimney 1.8.6 Hot dip galvanising; Hot dip galvanising shall comply with AS/NZS 4680.,"if( expression( function( has), atom( relation( component), variable( chimney)), data( hot dip galvanising))), then( obligation( expression( function( comply with), atom( variable( hot dip galvanising)), data( asnzs 4680))))",1.8.6 Hot dip galvanising Hot dip galvanising shall comply with AS/NZS 4680.,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.1.0.1,"1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.","if( and( expression( function( has), atom( variable( space)), data( chimney)), expression( function( greater than), atom( relation( floor area), variable( space)), data( baseunit( kind( metre), exponent( 2.0)), value( 24.0))), expression( function( adjoin), atom( variable( wall)), data( chimney)), expression( function( greater than), atom( relation( span), variable( wall)), data( baseunit( kind( metre)), value( 3.5))), expression( function( in between), atom( relation( span), variable( wall)), data( braced wall)), or( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( building storey))), data( building))), appliedstatement( and( expression( function( is), atom( relation( type), variable( chimney)), data( type 1)), expression( function( less than), atom( relation( floor area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0)))))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( building storey))), data( building))), appliedstatement( and( expression( function( is), atom( relation( type), variable( chimney)), data( type 2 or type 3 or type 4)), expression( function( less than), atom( relation( floor area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0)))))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( building storey))), data( building))), appliedstatement( and( expression( function( is), atom( relation( type), variable( chimney)), data( type 5 or type 6 or type 7)), expression( function( less than), atom( relation( floor area), variable( space)), data( baseunit( kind( metre), exponent( 2.0)), value( 150.0))))))))), then( and( obligation( expression( function( comply with), atom( relation( bracing), variable( building)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.3))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.4))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.5))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.6)))))","1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, b) The length of the wall on which the chimney is located exceeds 3.5 m between supporting braced walls which are perpendicular to it. This length may be increased to 6.5 m where the wall is supported, at each floor level and at the roof or ceiling level, by either a structural diaphragm which conforms with the relevant requiements of NZS 3604 or by dragon ties. The dragon ties shall: i) consist of a continuous length of 100 x 50 mm timber fixed in accordance with NZS 3604 clauses 8.3.3.3 and 8.3.3.4, ii) be run as a pair, with one dragon tie going from the wall on which the chimney is located, back to each of the supporting braced walls. The enclosed angle between the wall on which the chimney is located and each dragon tie shall be 60°, and iii) be located no more than 1.5 m out from each supporting braced wall. c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.","Complex
Tacit
"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.3.0.1,1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"if( expression( function( has), atom( variable( chimney)), data( connection))), then( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( connection))), data( chimney))), appliedstatement( and( obligation( expression( function( comply with), expression( function( count), atom( relation( unit), variable( bracing))), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t2)))))))",1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,Complex
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.4.0.1.a.1,1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie,"if( and( expression( function( at), atom( relation( location), variable( chimney)), data( roof)), or( expression( function( is), atom( relation( fixture), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( fixture), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))",1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie,
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.4.0.1.b.1,"1.9.4 A chimney shall be considered as connected to the building when: At ground floor level: it is held by a floor bracket or the chimney base is integral with the building foundation wall,","if( and( expression( function( at), atom( relation( location), variable( chimney)), data( ground)), or( expression( function( is), atom( relation( fixture), variable( chimney)), data( floor bracket)), expression( function( part of), atom( relation( base), variable( chimney)), data( foundation wall))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","1.9.4 A chimney shall be considered as connected to the building when: At ground floor level: it is held by a floor bracket or the chimney base is integral with the building foundation wall,",
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.4.0.1.c.1,1.9.4 A chimney shall be considered as connected to the building when: At an intermediate floor level: it is held either by a floor bracket or by closely spaced wall ties spanning the floor.,"if( and( expression( function( at), atom( relation( location), variable( chimney)), data( intermediate floor)), or( expression( function( is), atom( relation( fixture), variable( chimney)), data( floor bracket)), and( expression( function( is), atom( relation( fixture), variable( chimney)), data( wall tie)), expression( function( in between), atom( relation( span), variable( wall tie)), data( floor)), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))), then( expression( function( connect), atom( variable( chimney)), data( building)))",1.9.4 A chimney shall be considered as connected to the building when: At an intermediate floor level: it is held either by a floor bracket or by closely spaced wall ties spanning the floor.,"LrmlReference
BadPrecondition
TODO
RuleConditionShouldBeRatherImplementedInRule1_9_1
MediumData"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.5.0.1,Structural diaphragms shall be provided at roof/ceiling level and at each floor level to which the chimney is connected. The diaphragms shall comply with all relevant clauses of NZS 3604 and NZS 4229.,"if( and( expression( function( has), atom( variable( building)), data( building storey)), expression( function( has), atom( variable( building)), data( chimney)), or( expression( function( is), atom( relation( type), variable( building storey)), data( roof)), expression( function( is), atom( relation( type), variable( building storey)), data( ceiling)), expression( function( connect), atom( variable( building storey)), data( chimney))))), then( and( obligation( expression( function( has), atom( variable( building storey)), data( diaphragm))), and( obligation( expression( function( comply with), atom( variable( diaphragm)), data( nzs 3604))), obligation( expression( function( comply with), atom( variable( diaphragm)), data( nzs 4229))))))","1.9.5 For earthquake ground movement in the direction perpendicular to the wall on which the chimney is located, structural diaphragms shall be provided at roof/ceiling level and at each floor level to which the chimney is connected. The diaphragms shall comply with all relevant clauses of NZS 3604 and NZS 4229.",DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r1.9.6.0.1,The bracing units required as determined from Paragraph 1.9.3 shall be provided solely by that wall.,"if( and( expression( function( as per), atom( relation( unit), variable( bracing)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 1.9.3)))), then( obligation( expression( function( by), atom( relation( unit), variable( bracing)), data( wall))))","1.9.6 For earthquake in the direction parallel to the wall on which the chimney is located, the bracing units required as determined from Paragraph 1.9.3 shall be provided solely by that wall.",Abstract
lrml/NZ_NZBC-B1AS3#0.17.lrml,r2.1.1.0.1,2.1.1 Chimneys for solid fuel burning appliances shall comply with Paragraph 1.0 or with the relevant sections of AS/NZS 3869 and AS/NZS 2918 for sheetmetal chimneys.,"if( and( expression( function( is), atom( variable( appliance)), data( burner)), expression( function( is), atom( relation( type), variable( appliance)), data( domestic)), expression( function( has), atom( variable( appliance)), data( chimney)), expression( function( is), atom( relation( fuel type), variable( appliance)), data( solid)))), then( or( and( obligation( expression( function( comply with), atom( variable( chimney)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 1.1.1 to 1.9.6)))), and( expression( function( comply with), atom( variable( chimney)), data( nzs 3869)), expression( function( comply with), atom( variable( chimney)), data( nzs 2918)))))",2.1.1 Chimneys for solid fuel burning appliances shall comply with Paragraph 1.0 or with the relevant sections of AS/NZS 3869 and AS/NZS 2918 for sheetmetal chimneys.,"ObligationCorrectnessUnclear
BetterPredictionThanTranslation
Tacit
DomainKnowledge
Complex
Detailed"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r2.2.1.0.1,"2.2.1 Solid fuel burning domestic appliances weighing no more than 130 kg shall be supported on a 65 mm thick hearth slab that is: a) Reinforced with 665 mesh, or D10 rods at 300 mm centres each way, placed centrally in the slab thickness, b) Supported on a timber or concrete floor, or integral with a concrete floor. (The floor supporting the hearth slab shall comply with NZS 3604 or NZS 4229 as appropriate), and c) Comprised of ordinary grade concrete complying with the relevant clauses of NZS 3109.","if( and( expression( function( is), atom( variable( appliance)), data( burner)), expression( function( is), atom( relation( type), variable( appliance)), data( domestic)), expression( function( has), atom( variable( appliance)), data( chimney)), expression( function( less than equal), atom( relation( weight), variable( appliance)), data( baseunit( prefix( kilo), kind( gram)), value( 130.0))))), then( and( obligation( expression( function( on), atom( relation( support), variable( appliance)), data( slab))), expression( function( is), atom( relation( type), variable( slab)), data( hearth)), expression( function( greater than equal), atom( relation( thickness), variable( slab)), data( baseunit( prefix( milli), kind( metre)), value( 65.0))), expression( function( is), atom( relation( construction), variable( slab)), data( concrete)), expression( function( has), atom( variable( concrete)), data( reinforcing)), or( and( expression( function( is), atom( relation( type), variable( reinforcing)), data( 665 mesh)), expression( function( is), atom( relation( placement), variable( reinforcing)), data( centrally in slab thickness))), and( expression( function( is), atom( relation( type), variable( reinforcing)), data( d10 rod)), expression( function( at), atom( relation( spacing), variable( reinforcing)), data( 300 mm centre each way)), expression( function( is), atom( relation( placement), variable( reinforcing)), data( centrally in slab thickness)))), or( and( expression( function( on), atom( relation( support), variable( slab)), data( floor)), or( expression( function( is), atom( relation( construction), variable( floor)), data( timber)), expression( function( is), atom( relation( construction), variable( floor)), data( concrete))), or( expression( function( comply with), atom( variable( floor)), data( nzs 3604)), expression( function( comply with), atom( variable( floor)), data( nzs 4229)))), and( expression( function( part of), atom( variable( slab)), data( floor)), expression( function( is), atom( relation( construction), variable( floor)), data( concrete)))), expression( function( is), atom( relation( grade), variable( concrete)), data( ordinary)), expression( function( comply with), atom( relation( grade), variable( concrete)), data( nzs 3109))))","2.2.1 Solid fuel burning domestic appliances weighing no more than 130 kg shall be supported on a 65 mm thick hearth slab that is: a) Reinforced with 665 mesh, or D10 rods at 300 mm centres each way, placed centrally in the slab thickness, b) Supported on a timber or concrete floor, or integral with a concrete floor. (The floor supporting the hearth slab shall comply with NZS 3604 or NZS 4229 as appropriate), and c) Comprised of ordinary grade concrete complying with the relevant clauses of NZS 3109.","Complex
Tacit
SomeLongEntities
"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r2.2.2.0.1,2.2.2 Hearth slabs on a timber floor shall be held in position by supporting members on all four sides of the hearth. These members shall each be held by four screws with a minimum shank diameter of 4.88 mm that penetrate the floor framing by 50 mm.,"if( and( expression( function( is), atom( relation( type), variable( slab)), data( hearth)), expression( function( on), atom( relation( support), variable( slab)), data( floor)), expression( function( is), atom( relation( construction), variable( floor)), data( timber)))), then( and( expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( side))), data( slab))), appliedstatement( and( obligation( expression( function( has), atom( variable( side)), data( support))), expression( function( by), atom( relation( fixing), variable( support)), data( screw)), expression( function( greater than equal), expression( function( count), atom( variable( screw))), data( 4))))), expression( function( greater than equal), atom( relation( shank diameter), variable( screw)), data( baseunit( kind( metre), prefix( milli)), value( 4.88))), expression( function( equal), atom( relation( penetration), variable( screw)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))))",2.2.2 Hearth slabs on a timber floor shall be held in position by supporting members on all four sides of the hearth. These members shall each be held by four screws with a minimum shank diameter of 4.88 mm that penetrate the floor framing by 50 mm.,DomainKnowledge
lrml/NZ_NZBC-B1AS3#0.17.lrml,r2.2.3.0.1,2.2.3 Hearth slabs on concrete floors shall be secured in position by four D10 starter rods. The rods shall be located in each corner of the hearth slab and they shall terminate each end with standard hooks complying with NZS 3109.,"if( and( expression( function( is), atom( relation( type), variable( slab)), data( hearth)), expression( function( on), atom( relation( support), variable( slab)), data( floor)), expression( function( is), atom( relation( construction), variable( floor)), data( concrete)))), then( and( obligation( expression( function( is), atom( relation( fixture), variable( slab)), data( starter rod))), expression( function( equal), atom( relation( size), variable( starter rod)), data( d10)), expression( function( greater than equal), expression( function( count), atom( variable( starter rod))), data( 4)), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( corner))), data( slab))), appliedstatement( and( expression( function( has), atom( variable( corner)), data( support)), expression( function( has), atom( relation( end), variable( starter rod)), data( hook)), expression( function( comply with), atom( variable( hook)), data( nzs 3109)))))))",2.2.3 Hearth slabs on concrete floors shall be secured in position by four D10 starter rods. The rods shall be located in each corner of the hearth slab and they shall terminate each end with standard hooks complying with NZS 3109.,"DomainKnowledge
SplitableEntities"
lrml/NZ_NZBC-B1AS3#0.17.lrml,r2.2.4.0.1,2.2.4 Hearth slabs for solid fuel burning appliances shall comply with AS/NZS 2918.,"if( and( expression( function( is), atom( variable( appliance)), data( burner)), expression( function( is), atom( relation( type), variable( appliance)), data( domestic)), expression( function( has), atom( variable( appliance)), data( chimney)), expression( function( on), atom( relation( support), variable( appliance)), data( slab)), expression( function( is), atom( relation( type), variable( slab)), data( hearth)))), then( obligation( expression( function( comply with), atom( variable( slab)), data( asnzs 2918))))","2.2.4 Paragraphs 2.2.1 to 2.2.3 provide an acceptable structural solution, but depending on the particular installation, different hearth dimensions may be necessary to meet the spread of fire requirements of NZBC Clause C2.2. Hearth slabs for solid fuel burning appliances shall comply with AS/NZS 2918.","Tacit
DomainKnowledge"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.1.2,"1.1.2 Where waste is hazardous, the storage facilities shall also comply with NZBC F3 Hazardous Substances and Processes.","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( is), atom( relation( type), variable( waste)), data( hazardous)))), then( and( obligation( expression( function( comply with), atom( relation( collection), variable( system)), data( nzbc g14vm1))), obligation( expression( function( comply with), atom( relation( collection), variable( system)), data( nzbc f3))), and( obligation( expression( function( comply with), atom( relation( storage), variable( system)), data( nzbc g14vm1))), obligation( expression( function( comply with), atom( relation( storage), variable( system)), data( nzbc f3)))), and( obligation( expression( function( comply with), atom( relation( treatment), variable( system)), data( nzbc g14vm1))), obligation( expression( function( comply with), atom( relation( treatment), variable( system)), data( nzbc f3))))))","1.1.2 Where waste is hazardous, the storage facilities shall also comply with NZBC F3 Hazardous Substances and Processes.",
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.1,1.4.1 Collection facilities shall be located: a) In areas that will not create health or safety hazards,"if( expression( function( is), atom( relation( is exist), variable( collection facility)), data( true))), then( or( prohibition( expression( function( has), atom( relation( location), variable( collection facility)), data( health hazard))), prohibition( expression( function( has), atom( relation( location), variable( collection facility)), data( safety hazard)))))","1.4.1 Collection, storage and treatment facilities and disposal systems shall be located: a) In areas that will not create health or safety hazards","MissingInformation
BadPrecondition"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.2,1.4.1 Storage facilities shall be located: a) In areas that will not create health or safety hazards,"if( expression( function( is), atom( relation( is exist), variable( storage facility)), data( true))), then( or( prohibition( expression( function( has), atom( relation( location), variable( storage facility)), data( health hazard))), prohibition( expression( function( has), atom( relation( location), variable( storage facility)), data( safety hazard)))))","1.4.1 Collection, storage and treatment facilities and disposal systems shall be located: a) In areas that will not create health or safety hazards",OldInvalid
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.3,1.4.1 Treatment facilities shall be located: a) In areas that will not create health or safety hazards,"if( expression( function( is), atom( relation( is exist), variable( treatment facility)), data( true))), then( or( prohibition( expression( function( has), atom( relation( location), variable( treatment facility)), data( health hazard))), prohibition( expression( function( has), atom( relation( location), variable( treatment facility)), data( safety hazard)))))","1.4.1 Collection, storage and treatment facilities and disposal systems shall be located: a) In areas that will not create health or safety hazards",OldInvalid
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.4,1.4.1 Disposal systems shall be located: a) In areas that will not create health or safety hazards,"if( expression( function( is), atom( relation( is exist), variable( disposal system)), data( true))), then( or( prohibition( expression( function( has), atom( relation( location), variable( disposal system)), data( health hazard))), prohibition( expression( function( has), atom( relation( location), variable( disposal system)), data( safety hazard)))))","1.4.1 Collection, storage and treatment facilities and disposal systems shall be located: a) In areas that will not create health or safety hazards","Abstract
OldInvalid"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.5,1.4.1 Collection facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"if( expression( function( is), atom( relation( is exist), variable( collection facility)), data( true))), then( or( prohibition( expression( function( has), atom( relation( location), variable( collection facility)), data( bunding))), prohibition( expression( function( has), atom( relation( location), variable( collection facility)), data( spillage containment)))))",1.4.1 Collection facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"Abstract
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.6,1.4.1 Storage facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"if( expression( function( is), atom( relation( is exist), variable( storage facility)), data( true))), then( or( obligation( expression( function( has), atom( relation( location), variable( storage facility)), data( bunding))), obligation( expression( function( has), atom( relation( location), variable( storage facility)), data( spillage containment)))))",1.4.1 Storage facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"Abstract
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.7,1.4.1 Treatment facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"if( expression( function( is), atom( relation( is exist), variable( treatment facility)), data( true))), then( or( obligation( expression( function( has), atom( relation( location), variable( treatment facility)), data( bunding))), obligation( expression( function( has), atom( relation( location), variable( treatment facility)), data( spillage containment)))))",1.4.1 Treatment facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"Abstract
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.8,1.4.1 Disposal systems shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"if( expression( function( is), atom( relation( is exist), variable( disposal system)), data( true))), then( or( obligation( expression( function( has), atom( relation( location), variable( disposal system)), data( bunding))), obligation( expression( function( has), atom( relation( location), variable( disposal system)), data( spillage containment)))))",1.4.1 Disposal systems shall be located: To ensure that spillage from storage tanks or ponds can be safely contained,"ShortPrecondition
Abstract
SomeDetailsNotEncoded
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.9,"1.4.1 Collection facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","if( expression( function( is), atom( relation( is exist), variable( collection facility)), data( true))), then( and( obligation( expression( function( has), atom( relation( location), variable( collection facility)), data( access))), or( obligation( expression( function( is), atom( relation( purpose), variable( access)), data( cleaning))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( blockage clearing))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( maintenance))))))","1.4.1 Collection facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","Abstract
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.10,"1.4.1 Storage facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","if( expression( function( is), atom( relation( is exist), variable( storage facility)), data( true))), then( and( obligation( expression( function( has), atom( relation( location), variable( storage facility)), data( access))), or( obligation( expression( function( is), atom( relation( purpose), variable( access)), data( cleaning))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( blockage clearing))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( maintenance))))))","1.4.1 Storage facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","Abstract
DomainKnowledge
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.11,"1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","if( expression( function( is), atom( relation( is exist), variable( treatment facility)), data( true))), then( and( obligation( expression( function( has), atom( relation( location), variable( treatment facility)), data( access))), or( obligation( expression( function( is), atom( relation( purpose), variable( access)), data( cleaning))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( blockage clearing))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( maintenance))))))","1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","Questionable
Wrong
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.1.12,"1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","if( expression( function( is), atom( relation( is exist), variable( disposal system)), data( true))), then( and( obligation( expression( function( has), atom( relation( location), variable( disposal system)), data( access))), or( obligation( expression( function( is), atom( relation( purpose), variable( access)), data( cleaning))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( blockage clearing))), obligation( expression( function( is), atom( relation( purpose), variable( access)), data( maintenance))))))","1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","Questionable
Wrong
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.4.2,"1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( and( obligation( expression( function( greater than), atom( relation( design load), variable( storage tank)), data( applied load))), or( obligation( not( expression( function( has), atom( relation( design), variable( storage tank)), data( health hazard)))), obligation( not( expression( function( has), atom( relation( design), variable( storage tank)), data( safety hazard))))), obligation( expression( function( has), atom( relation( design), variable( storage tank)), data( corrosion protection)))))","1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","Operator
Abstract
Underspecified
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.5.1,"1.5.1 All materials in contact with industrial liquid waste shall be resistant to corrosion, chemical attack, and any abrasion or physical abuse that can be reasonably expected.","if( and( expression( function( to), atom( relation( exposure), variable( construction material)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( and( obligation( expression( function( has), atom( variable( construction material)), data( anti corrosion))), obligation( expression( function( has), atom( variable( construction material)), data( anti chemical attack))), obligation( expression( function( has), atom( variable( construction material)), data( anti abrasion))), obligation( expression( function( has), atom( variable( construction material)), data( anti physical abusage)))))","1.5.1 All materials in contact with industrial liquid waste shall be resistant to corrosion, chemical attack, and any abrasion or physical abuse that can be reasonably expected.","OK
SplitableEntities"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.5.2,1.5.2 Any corrosion allowance provided in the design of equipment handling liquid waste shall be adequate for the intended life of the facilities.,"if( expression( function( has), atom( variable( handling equipment)), data( anti corrosion))), then( obligation( expression( function( is), atom( relation( durability), variable( handling equipment)), data( lifetime))))",1.5.2 Any corrosion allowance provided in the design of equipment handling liquid waste shall be adequate for the intended life of the facilities.,"Abstract
BadPrecondition
Allowance?
MissingInformation
Liquid waste?
BetterPredictionThanTranslation
MediumData
"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.6.1,"1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes.","if( and( expression( function( is), atom( variable( installation)), data( industrial liquid waste system)), expression( function( is), atom( variable( installation)), data( storage tank)), expression( function( is), atom( variable( installation)), data( treatment tank)), expression( function( is), atom( variable( installation)), data( piping)), expression( function( is), atom( relation( status), variable( installation)), data( completed)))), then( and( obligation( expression( function( is), atom( variable( installation)), data( tested))), obligation( not( expression( function( is), atom( variable( natural waterway)), data( contaminated)))), obligation( not( expression( function( is), atom( variable( ground water)), data( contaminated))))))","1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes.","CausesNotTranslated
EnititiesNotConnected
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.6.2,"1.6.2 The area containing waste storage facilities shall be impervious and contained so as to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes.","if( and( expression( function( is), atom( relation( type), variable( storage facility)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( and( obligation( expression( function( is), atom( variable( facility area)), data( impervious))), expression( function( is), atom( variable( facility area)), data( bunded))))","1.6.2 The area containing waste storage facilities shall be impervious and contained so as to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes.","BuildingCodeTitle
Operator
Abstract
SomeDetailsNotEncoded
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.6.3,"1.6.3 Industrial liquid waste facilities shall be installed to avoid contamination of any potable water supply, as required by NZBC G12 Water Supplies.","if( and( expression( function( is), atom( variable( water supply)), data( potable)), obligation( not( expression( function( is), atom( variable( water supply)), data( contaminated)))))), then( and( obligation( expression( function( comply with), atom( relation( installation), variable( collection facility)), data( nzbc g12))), obligation( expression( function( comply with), atom( relation( installation), variable( storage facility)), data( nzbc g12))), obligation( expression( function( comply with), atom( relation( installation), variable( treatment facility)), data( nzbc g12)))))","1.6.3 Industrial liquid waste facilities shall be installed to avoid contamination of any potable water supply, as required by NZBC G12 Water Supplies.","Operator
EnititiesNotConnected
Tacit
MissingInformation
TODO
Splits industrial liquid waste facilities into three facilities as defined in scope 1.1.1 but ignores disposal"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.7.1.1,1.7.1 Separate systems shall be provided to convey and store industrial liquid wastes that require different treatment and/or disposal methods,"if( expression( function( greater than), expression( function( count), atom( relation( disposal method), variable( industrial liquid waste))), data( 1))), then( expression( rulestatement( expression( expression( function( for each), atom( variable( disposal method))))), appliedstatement( obligation( expression( function( is), atom( variable( disposal system)), data( unique))))))",1.7.1 Separate systems shall be provided to convey and store industrial liquid wastes that require different treatment and/or disposal methods,"Questionable
Combined
ChangesUnsure
Operator
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.7.1.2,"1.7.1 Separate systems shall be provided to convey and store industrial liquid wastes that require different treatment methods, or where the wastes are incompatible.","if( expression( function( greater than), expression( function( count), atom( relation( treatment method), variable( industrial liquid waste))), data( 1))), then( expression( rulestatement( expression( expression( function( for each), atom( variable( treatment method))))), appliedstatement( obligation( expression( function( is), atom( variable( treatment system)), data( unique))))))","1.7.1 Separate systems shall be provided to convey and store industrial liquid wastes that require different treatment methods, or where the wastes are incompatible.","OldInvalid
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.8.1.1,1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes.,"if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access)), data( nzbc d1))))",1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes.,MediumData
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.8.1.2,"1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: where possible, access layout shall provide sufficient space for vehicles to drive in and out of the facility without reversing or interference with other activities on the site","if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( has), atom( relation( area), variable( vehicle access)), data( turning space))))","1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: here possible, access layout shall provide sufficient space for vehicles to drive in and out of the facility without reversing or interference with other activities on the site","Abstract
AtomVsExpr
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.8.1.3,"1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Drain any spilled waste to a kerbed area sloped so that the waste does not collect under the vehicle, or drain in an uncontrolled manner to other areas of the plant","if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( and( obligation( expression( function( to), atom( relation( drain), variable( spillage)), data( kerb))), or( prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( under vehicle area))), prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( plant area))))))","1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Drain any spilled waste to a kerbed area sloped so that the waste does not collect under the vehicle, or drain in an uncontrolled manner to other areas of the plant","AtomVsExpr
FunVsRel
fun(drain)
MissingInformation
plantArea?
SplitableEntities"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.8.1.4,1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall not enter the sewage system unless the spilled waste is acceptable as a discharge to the sewer by the network utility operator.,"if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( content), variable( collection)), data( industrial liquid waste)), permission( not( expression( function( to), atom( relation( discharge), variable( spillage)), data( sewer)))))), then( prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( sewer))))","1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall: i) be contained on-site for subsequent removal, ii) not enter the surface water system, and iii) not enter the sewage system unless the spilled waste is acceptable as a discharge to the sewer by the network utility operator.","UnsureAboutDeontics
NotPermission
Tacit
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.8.1.5,"1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall: i) be contained on-site for subsequent removal, ii) not enter the surface water system.","if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( and( or( obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( containment))), obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( bunding)))), prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( surface water system)))))","1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall: i) be contained on-site for subsequent removal, ii) not enter the surface water system, and iii) not enter the sewage system unless the spilled waste is acceptable as a discharge to the sewer by the network utility operator.","OrderDifficulties
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.9.1.1,"1.9.1 Where unauthorised access to storage facilities may be hazardous, security shall be provided by: a) Locating the facilities in a lockable enclosed space within a building","if( and( expression( function( has), atom( relation( access), variable( storage facility)), data( authorisation)), expression( function( is), atom( relation( condition), variable( storage facility)), data( hazardous)), expression( function( in), atom( relation( location), variable( storage facility)), data( building)))), then( obligation( expression( function( is), atom( variable( storage facility)), data( lockable))))","1.9.1 Where unauthorised access to storage facilities may be hazardous, security shall be provided by: a) Locating the facilities in a lockable enclosed space within a building","Abstract
Wrong
BuildingShouldBeLockable"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.9.1.2,"1.9.1 Where unauthorised access to storage facilities may be hazardous, security shall be provided by: b) An external security fence with lockable gates if located in the open.","if( and( expression( function( has), atom( relation( access), variable( storage facility)), data( authorisation)), expression( function( is), atom( relation( condition), variable( storage facility)), data( hazardous)), expression( function( outside), atom( relation( location), variable( storage facility)), data( building)))), then( and( obligation( expression( function( has), atom( variable( storage facility)), data( security fence))), obligation( expression( function( has), atom( variable( security fence)), data( security gate))), obligation( expression( function( is), atom( variable( security gate)), data( lockable)))))","1.9.1 Where unauthorised access to storage and treatment facilities may be hazardous, security shall be provided by: a) Locating the facilities in a lockable enclosed space within a building, or b) An external security fence with lockable gates if located in the open.",
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.0.1,"2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( permission( expression( function( to), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( and( obligation( expression( function( in), atom( relation( conveyance), variable( industrial liquid waste)), data( disposal system))), obligation( expression( function( include), atom( relation( type), variable( disposal system)), data( plumbing))), obligation( expression( function( include), atom( relation( type), variable( disposal system)), data( drainage))), obligation( expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","Abstract
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.1.1,"2.1.1 Screens, grit chambers, grease traps or similar appropriate equipment should be installed at the head of piping systems if suspended solids or material within the liquid waste might cause blockage of the piping system.","if( and( expression( function( is), atom( relation( blockage), variable( piping system)), data( possible)), expression( function( is), atom( relation( causage), variable( blockage)), data( suspended solid)))), then( and( obligation( expression( function( has), atom( relation( at the head of), variable( piping system)), data( screens))), obligation( expression( function( has), atom( relation( at the head of), variable( piping system)), data( grit chamber))), obligation( expression( function( has), atom( relation( at the head of), variable( piping system)), data( grease trap)))))","2.1.1 Screens, grit chambers, grease traps or similar appropriate equipment should be installed at the head of piping systems if suspended solids or material within the liquid waste might cause blockage of the piping system.","Operator
MediumData"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.1.2,"2.1.2 Wherever possible, piping systems shall convey industrial liquid waste using gravity flow.","if( and( expression( function( is), atom( relation( conveyance), variable( piping system)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( obligation( expression( function( is), atom( relation( type), variable( piping system)), data( gravity flow))))","2.1.2 Wherever possible, piping systems shall convey industrial liquid waste using gravity flow.","NotEncodedParts
OldInvalid"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.1.3,2.0 Conveyance of industrial liquid waste 2.1.3 Gravity flow pipelines should have sufficient gradient to provide flow velocities that prevent the settlement of entrained solids and grit.,"if( and( expression( function( is), atom( relation( conveyance), variable( piping system)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( is), atom( relation( type), variable( piping system)), data( gravity flow)))), then( and( obligation( expression( function( has), atom( relation( slope), variable( piping system)), data( flow))), expression( function( greater than), atom( relation( velocity), variable( flow)), data( velocity causing sediment))))",2.1.3 Gravity flow pipelines should have sufficient gradient to provide flow velocities that prevent the settlement of entrained solids and grit.,"Operator
Tacit
DomainKnowledge
MissingInformation
SplitableEntities"
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.3.2,"2.0 Conveyance of industrial liquid waste 2.3.2 Joints, fittings and valves – The number of joints, fittings and valves in the piping system shall be kept to a practical minimum.","if( and( expression( function( is), atom( relation( conveyance), variable( piping system)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( and( obligation( expression( function( is), expression( function( count), atom( relation( joint), variable( piping system))), data( minimum))), expression( function( is), expression( function( count), atom( relation( fitting), variable( piping system))), data( minimum)), expression( function( is), expression( function( count), atom( relation( valve), variable( piping system))), data( minimum))))","2.3.2 Joints, fittings and valves – The number of joints, fittings and valves in the piping system shall be kept to a practical minimum.",
lrml/NZ_NZBC-G14VM1#2.6.lrml,r2.3.3,2.3.3 Bends shall have a centreline radius of no less than 1.5 times the nominal pipe diameter.,"if( and( expression( function( has), atom( variable( pipe)), data( bend)), expression( function( define), atom( relation( nominal diameter), variable( pipe)), data( x0)))), then( obligation( expression( function( greater than equal), atom( relation( centreline radius), variable( bend)), data( 1.5 * x0))))",2.3.3 Bends shall have a centreline radius of no less than 1.5 times the nominal pipe diameter.,MediumData
lrml/NZ_NZBC-G14VM1#2.6.lrml,r3.2.1,3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( is), atom( relation( protection), variable( tank)), data( seismic))), permission( expression( function( comply with), atom( relation( protection), variable( tank)), data( nzs 4219)))))",3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,DomainKnowledge
lrml/NZ_NZBC-G12AS1#3.12.lrml,r6.5.2.0.2,6.1 Water heaters 6.5.2 Energy cut-off devices shall be designed to: b) Disconnect the energy supply before the water temperature exceeds 95°C.,"if( and( expression( function( has), atom( variable( water heater system)), data( energy cutoff device)), expression( function( greater than), atom( relation( temperature), variable( water)), data( baseunit( kind( celsius)), value( 95.0))))), then( obligation( expression( function( is), atom( relation( status), variable( energy cutoff device)), data( on))))",6.5.2 Energy cut-off devices shall be designed to: b) Disconnect the energy supply before the water temperature exceeds 95°C.,MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,c1.0.1.0.1,Boundary fences and other site development must not significantly hamper the flow of surface water from the site.,"if( expression( function( is), atom( variable( site development)), data( true))), then( and( prohibition( not( expression( function( include), atom( variable( site development)), data( obstruction)))), expression( function( to), atom( variable( obstruction)), data( surface water flow))))",Boundary fences and other site development must not significantly hamper the flow of surface water from the site.,"SplitableEntities
NotEncodedParts
"
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.5.3.0.1.1,"Where a drain consists of concrete, ceramic, vitrified clay or rubber ring jointed steel or uPVC, a flexible joint shall be installed within 225 mm of the outside wall of any access chamber or inspection chamber, but outside the line of the base (see Figures 11 and 12).","if( and( or( expression( function( is), atom( relation( material), variable( drain)), data( concrete)), expression( function( is), atom( relation( material), variable( drain)), data( ceramic)), expression( function( is), atom( relation( material), variable( drain)), data( vitrified clay)), expression( function( is), atom( relation( material), variable( drain)), data( rubber ring jointed steel)), expression( function( is), atom( relation( material), variable( drain)), data( u pvc))), expression( function( has), atom( variable( drain)), data( chamber)), or( expression( function( is), atom( relation( purpose), variable( chamber)), data( access)), expression( function( is), atom( relation( purpose), variable( chamber)), data( inspection))), expression( function( define), atom( relation( wall), variable( chamber)), data( x0)), expression( function( is), atom( variable( x0)), data( outside)))), then( and( obligation( expression( function( include), atom( variable( drain)), data( joint))), obligation( expression( function( is), atom( relation( joint), variable( drain)), data( flexible))), obligation( expression( function( within), atom( relation( location), variable( joint)), data( 255 mm of x0))), obligation( expression( function( outside), atom( relation( location), variable( joint)), data( base line)))))","Where a drain consists of concrete, ceramic, vitrified clay or rubber ring jointed steel or uPVC, a flexible joint shall be installed within 225 mm of the outside wall of any access chamber or inspection chamber, but outside the line of the base (see Figures 11 and 12).",MediumData
lrml/NZ_NZBC-E1AS1#1.10.lrml,c3.7.1.0.1,Rodding points rather than inspection points are preferred in landscaped or sealed areas.,"if( or( expression( function( is), atom( variable( surface)), data( landscaped)), expression( function( is), atom( variable( surface)), data( sealed)))), then( obligation( expression( function( is), atom( relation( preference), variable( access point)), data( rodding point))))",Rodding points rather than inspection points are preferred in landscaped or sealed areas.,
lrml/NZ_NZBC-E1AS1#1.10.lrml,r3.9.3.0.1.b.1,3.9.3 Trench slope; These anti-scour blocks shall be: Keyed into the sides and floor of the trench by 150 mm,"if( expression( function( include), atom( variable( trench)), data( anti scour blocks))), then( and( expression( function( define), atom( relation( side), variable( trench)), data( x0)), expression( function( define), atom( relation( floor), variable( trench)), data( x1)), obligation( expression( function( into), atom( relation( keying), variable( anti scour blocks)), data( x0))), obligation( expression( function( into), atom( relation( keying), variable( anti scour blocks)), data( x1))), expression( function( define), atom( relation( keying), variable( anti scour blocks)), data( x2)), obligation( expression( function( equal), atom( relation( depth), variable( x2)), data( baseunit( prefix( milli), kind( metre)), value( 150.0))))))",Trench; These anti-scour blocks shall be: Keyed into the sides and floor of the trench by 150 mm,
lrml/NZ_NZBC-G1AS1#2.6.lrml,r1.1.1,1.1.1 Sanitary facilities are required in occupied buildings.,"if( expression( function( greater than), atom( relation( occupant load), variable( building)), data( 0))), then( expression( rulestatement( expression( function( is), expression( function( for each), atom( relation( activity type), variable( space))), data( sanitary))), appliedstatement( obligation( expression( function( greater than), expression( function( count), atom( variable( space))), data( 0))))))",1.1.1 Sanitary facilities are required in occupied buildings.,"DomainKnowledge
ComplexityMaybeUnnecessary
MaybeStillWrong"
lrml/NZ_NZBC-G1AS1#2.6.lrml,r1.1.2,1.1.2 WC pans and basins are required in any building where people: a) live or are accommodated,"if( or( expression( function( is), atom( relation( classified use), variable( building)), data( housing)), expression( function( is), atom( relation( classified use), variable( building)), data( communal residential)))), then( and( obligation( expression( function( greater than), expression( function( count), atom( variable( wc))), data( 0))), obligation( expression( function( greater than), expression( function( count), atom( variable( basin))), data( 0)))))",1.1.2 WC pans and basins are required in any building where people: a) live or are accommodated,DomainKnowledge
lrml/NZ_NZBC-B1AS1#0.17.lrml,r3.1.2.0.1,3.1.2 NZS 3604 Section 5 Bracing Design: Make the following amendments: Amend Figure 5.4 with rules 3.1.2.0.2 and 3.1.2.0.3,"if( and( expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( define), atom( variable( x0)), data( new)), expression( function( is), atom( variable( x0)), data( nzs 3604 f5.4)))), then( and( obligation( expression( function( has), atom( relation( content), variable( x0)), data( modification))), obligation( expression( function( is), atom( relation( type), variable( modification)), data( amend))), obligation( expression( function( is), atom( relation( content), variable( modification)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.2.0.2))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 3.1.2.0.3)))))",3.1.2 NZS 3604 Section 5 Bracing Design: Make the following amendments: Amend Figure 5.4 with rules 3.1.2.0.2 and 3.1.2.0.3,ClauseModification
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.1.0.1,Structure Design 7.0 Glazing 7.1 NZS 4223.1 7.2 NZS 4223.2 7.3 NZS 4223.3,"if( expression( function( in), atom( relation( application), variable( glazing)), data( structure))), then( and( expression( function( comply with), atom( relation( design), variable( glazing)), data( nzs 4233.1)), expression( function( comply with), atom( relation( design), variable( glazing)), data( nzs 4233.2)), expression( function( comply with), atom( relation( design), variable( glazing)), data( nzs 4233.3))))",7.0 Glazing 7.1 NZS 4223.1 7.2 NZS 4223.2 7.3 NZS 4223.3,
lrml/NZ_NZBC-B1AS1#0.17.lrml,r7.3.1.0.7.c.1,Test results for dual pane fracture of laminated glass barriers with stiff interlayers are not applicable to barriers that have narrower glass panes than that tested,"if( and( expression( function( is), atom( relation( material), variable( barrier)), data( glass)), expression( function( is), atom( variable( glass)), data( laminated)), expression( function( define), atom( variable( barrier)), data( x0)), expression( function( define), atom( variable( barrier)), data( x1)), expression( function( define), atom( relation( width), variable( x0)), data( x2)), expression( function( define), atom( relation( width), variable( x1)), data( x3)), expression( function( less than), atom( variable( x3)), data( x2)), expression( function( has), atom( variable( x0)), data( interlayer)), expression( function( is), atom( variable( interlayer)), data( stiff)), expression( function( has), atom( relation( dual pane fracture), variable( x0)), data( test result)))), then( prohibition( expression( function( to), atom( relation( application), variable( test result)), data( x1))))",Test results for dual pane fracture of laminated glass barriers with stiff interlayers are not applicable to barriers that have narrower glass panes than that tested,Complex
lrml/NZ_NZBC-B1AS1#0.17.lrml,r8.0.0.1,Structure Design 8.0 Small Chimneys; See Acceptable Solution B1/AS3.,"if( and( expression( function( is), atom( variable( structure)), data( chimney)), expression( function( is), atom( relation( size), variable( chimney)), data( small)))), then( permission( expression( function( comply with), atom( relation( design), variable( chimney)), data( nzbc b1as3))))",8.0 Small Chimneys; See Acceptable Solution B1/AS3.,
lrml/NZ_NZBC-E3AS1#2.6.lrml,r1.1.1a,"R-values for walls, roofs and ceilings shall be no less than: For light timber frame wall or other framed wall constructions with cavities, 1.5","if( or( expression( function( is), atom( relation( construction type), variable( wall)), data( light timber framing)), expression( function( is), atom( relation( construction type), variable( wall)), data( framing with cavities)))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 1.5))))","R-values for walls, roofs and ceilings shall be no less than: For light timber frame wall or other framed wall constructions with cavities, 1.5","SplitableEntities
LearnToIgnore
"
lrml/NZ_NZBC-E3AS1#2.6.lrml,r1.1.1b,"R-values for walls, roofs and ceilings shall be no less than: For single skin normal weight masonry based wall construction without a cavity, 0.6.","if( and( expression( function( is), atom( relation( construction type), variable( wall)), data( masonry)), expression( function( is), atom( relation( type), variable( masonry)), data( single skin)), expression( function( is), atom( relation( type), variable( masonry)), data( normal weight)), expression( function( is), atom( relation( type), variable( masonry)), data( without cavity)))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6))))","R-values for walls, roofs and ceilings shall be no less than: For single skin normal weight masonry based wall construction without a cavity, 0.6.","LearnToIgnore
SplitableEntities"
lrml/NZ_NZBC-E3AS1#2.6.lrml,r1.1.1c,"R-values for walls, roofs and ceilings shall be no less than: For solid timber wall systems no less than 60 mm thick, 0.6.","if( or( expression( function( is), atom( relation( construction type), variable( wall)), data( solid timber)), expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( kind( metre), prefix( milli)), value( 60.0))))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6))))","R-values for walls, roofs and ceilings shall be no less than: For solid timber wall systems no less than 60 mm thick, 0.6.",LearnToIgnore
lrml/NZ_NZBC-E3AS1#2.6.lrml,r1.1.1d,"R-values for walls, roofs and ceilings shall be no less than: For roof or ceilings of any construction, 1.5.","if( or( expression( function( is), atom( variable( roof)), data( true)), expression( function( is), atom( variable( ceiling)), data( true)))), then( and( obligation( expression( function( greater than equal), atom( relation( r value), variable( roof)), data( 1.5))), expression( function( greater than equal), atom( relation( r value), variable( ceiling)), data( 1.5))))","R-values for walls, roofs and ceilings shall be no less than: For roof or ceilings of any construction, 1.5.",LearnToIgnore
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.1.1,"1.1.1 This document describes the requirements to be satisfied by specific design for systems used for the collection, storage, treatment and disposal of industrial liquid waste.","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), or( expression( function( is), atom( relation( type), variable( system)), data( collection)), expression( function( is), atom( relation( type), variable( system)), data( storage)), expression( function( is), atom( relation( type), variable( system)), data( treatment)), expression( function( is), atom( relation( type), variable( system)), data( disposal))))), then( and( obligation( expression( function( is), atom( relation( design), variable( system)), data( specific design))), obligation( expression( function( comply with), atom( relation( design), variable( system)), data( nzbc g14vm1)))))","1.1.1 This document describes the requirements to be satisfied by specific design for systems used for the collection, storage, treatment and disposal of industrial liquid waste.",
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.9.1.3,"1.9.1 Where unauthorised access to treatment facilities may be hazardous, security shall be provided by: a) Locating the facilities in a lockable enclosed space within a building","if( and( expression( function( has), atom( relation( access), variable( treatment facility)), data( authorisation)), expression( function( is), atom( relation( condition), variable( treatment facility)), data( hazardous)), expression( function( in), atom( relation( location), variable( treatment facility)), data( building)))), then( obligation( expression( function( is), atom( variable( treatment facility)), data( lockable))))","1.9.1 Where unauthorised access to treatment facilities may be hazardous, security shall be provided by: a) Locating the facilities in a lockable enclosed space within a building",
lrml/NZ_NZBC-G14VM1#2.6.lrml,r1.9.1.4,"1.9.1 Where unauthorised access to treatment facilities may be hazardous, security shall be provided by: b) An external security fence with lockable gates if located in the open.","if( and( expression( function( has), atom( relation( access), variable( treatment facility)), data( authorisation)), expression( function( is), atom( relation( condition), variable( treatment facility)), data( hazardous)), expression( function( outside), atom( relation( location), variable( treatment facility)), data( building)))), then( and( obligation( expression( function( has), atom( variable( treatment facility)), data( security fence))), obligation( expression( function( has), atom( variable( security fence)), data( security gate))), obligation( expression( function( is), atom( variable( security gate)), data( lockable)))))","1.9.1 Where unauthorised access to treatment facilities may be hazardous, security shall be provided by: b) An external security fence with lockable gates if located in the open.",
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.5.2.0.1,"Where the solar water heater stores potable water and is used as a pre-heater for an instantaneous water heater, either: a) the hot water storage tank connected to the solar collector must be fitted with supplementary heating and a controller operating to meet the conditions outlined in Paragraph 3.5.1, b) the instantaneous water heater must heat all water passing through it to not less than 70°C.","if( and( expression( function( has), atom( variable( solar water heater)), data( storage)), expression( function( is), atom( relation( content), variable( storage)), data( potable water)), expression( function( is), atom( relation( usage), variable( solar water heater)), data( pre heating)), expression( function( for), atom( relation( purpose), variable( pre heating)), data( instantaneous water heater)))), then( or( and( obligation( expression( function( has), atom( variable( hot water storage tank)), data( supplementary heating))), obligation( expression( function( has), atom( variable( hot water storage tank)), data( controller))), obligation( expression( function( comply with), atom( variable( controller)), data( nzbc g12as2 3.5.1)))), and( obligation( expression( function( is), atom( relation( output), variable( instantaneous water heater)), data( water))), obligation( expression( function( greater than equal), atom( relation( temperature), variable( water)), data( baseunit( kind( celsius)), value( 70.0)))))))","Where the solar water heater stores potable water and is used as a pre-heater for an instantaneous water heater, either: a) the hot water storage tank connected to the solar collector must be fitted with supplementary heating and a controller operating to meet the conditions outlined in Paragraph 3.5.1, b) the instantaneous water heater must heat all water passing through it to not less than 70°C.",SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.6.1.0.1,"For protection from freezing, collectors installed in climate zones 1 and 2 (as shown in Figure 1) must: pass the level 1 test described in AS/NZS 2712 Appendix E, or have an automatic drain-down system.","if( or( expression( function( is), atom( relation( location), variable( collector)), data( climate zone 1)), expression( function( is), atom( relation( location), variable( collector)), data( climate zone 2)))), then( or( obligation( expression( function( comply with), atom( variable( collector)), data( nzs 2712 appendix e level 1))), obligation( expression( function( has), atom( variable( collector)), data( automatic draindown system)))))","For protection from freezing, collectors installed in climate zones 1 and 2 (as shown in Figure 1) must: pass the level 1 test described in AS/NZS 2712 Appendix E, or have an automatic drain-down system.",SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r3.6.2.0.1,"Collectors installed in climate zone 3 (as shown in Figure 1) must: a) pass the level 2 test described in AS/NZS 2712 Appendix E, or have an automatic drain-down system.","if( expression( function( is), atom( relation( location), variable( collector)), data( climate zone 3))), then( or( obligation( expression( function( comply with), atom( variable( collector)), data( nzs 2712 appendix e level 2))), obligation( expression( function( has), atom( variable( collector)), data( automatic draindown system)))))","Collectors installed in climate zone 3 (as shown in Figure 1) must: a) pass the level 2 test described in AS/NZS 2712 Appendix E, or have an automatic drain-down system.",SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r5.1.2.0.1,"5.1.2 A wetback water heater must have an open-vent connected to the: water tank, or wetback water heater flow pipe (see G12/AS1 Figure 5).","if( expression( function( equal), atom( variable( wetback water heater)), data( true))), then( and( obligation( expression( function( has), atom( variable( wetback water heater)), data( open vent))), or( obligation( expression( function( connect), atom( variable( open vent)), data( water tank))), obligation( expression( function( connect), atom( variable( open vent)), data( wetback water heater flow pipe))))))","5.1.2 A wetback water heater must have an open-vent connected to the: water tank, or wetback water heater flow pipe (see G12/AS1 Figure 5).",SplitableEntities
lrml/NZ_NZBC-G12AS2#3.12.lrml,r6.6.3.0.1.a.3,6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: 40 x 40 x 3 mm angle for struts up to 2.4 m long.,"if( and( expression( function( is), atom( relation( edge), variable( panel)), data( elevated)), expression( function( above), atom( relation( edge), variable( panel)), data( roof)), expression( function( less than equal), atom( relation( length), variable( angle strut)), data( baseunit( kind( metre)), value( 2.4))))), then( and( obligation( expression( function( has), atom( relation( edge), variable( panel)), data( support))), obligation( expression( function( is), atom( relation( type), variable( support)), data( angle strut))), or( obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( hot dip galvanised steel))), obligation( expression( function( is), atom( relation( material), variable( angle strut)), data( stainless steel)))), obligation( expression( function( equal), atom( relation( width), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), obligation( expression( function( equal), atom( relation( length), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), obligation( expression( function( equal), atom( relation( thickness), variable( angle strut)), data( baseunit( prefix( milli), kind( metre)), value( 3.0))))))",6.6.3 The edge of the panel elevated above the roof plane is to be supported by hot dip galvanized steel or stainless steel angle struts which are: 40 x 40 x 3 mm angle for struts up to 2.4 m long.,DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.1.0.1,"The scope of this Acceptable Solution is limited to the materials, products and processes contained herein, for buildings within the scope of NZS 3604, and: a) Up to 3 storeys with a height measured from lowest ground level adjacent to the building to the highest point of the roof (except for chimneys, aerials and the like) of 10 m or less, and b) With floor plan area limited only by seismic and structural control joints, and c) External walls that are vertical, and roofs that are 60° or less above the horizontal.","if( and( or( expression( function( include), atom( variable( building)), data( material)), expression( function( include), atom( variable( building)), data( product)), expression( function( include), atom( variable( building)), data( process))), expression( function( comply with), atom( relation( design), variable( building)), data( nzs 3604)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), atom( relation( height), variable( building)), data( x0)), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( point))), data( ground level))), appliedstatement( and( expression( function( define), expression( function( min), atom( relation( level), variable( point))), data( x1)), expression( function( adjacent), atom( relation( location), variable( point)), data( building))))), expression( function( define), expression( function( top of), atom( variable( roof))), data( x2)), or( expression( function( exclude), expression( function( top of), atom( variable( roof))), data( chimney)), expression( function( exclude), expression( function( top of), atom( variable( roof))), data( aerial))), expression( function( from), atom( relation( measurement), variable( x0)), data( x1)), expression( function( to), atom( relation( measurement), variable( x0)), data( x2)), expression( function( less than equal), atom( variable( x0)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( type), variable( external wall)), data( vertical)), and( expression( function( in between), atom( variable( angle)), data( roof)), expression( function( in between), atom( variable( angle)), data( horizontal))), expression( function( less than equal), atom( variable( angle)), data( baseunit( kind( angle degree)), value( 60.0))), expression( function( above), atom( relation( measurement), variable( angle)), data( horizontal)))), then( and( permission( expression( function( comply with), atom( variable( material)), data( nzbc e2as1))), permission( expression( function( comply with), atom( variable( product)), data( nzbc e2as1))), permission( expression( function( comply with), atom( variable( process)), data( nzbc e2as1)))))","The scope of this Acceptable Solution is limited to the materials, products and processes contained herein, for buildings within the scope of NZS 3604, and: a) Up to 3 storeys with a height measured from lowest ground level adjacent to the building to the highest point of the roof (except for chimneys, aerials and the like) of 10 m or less, and b) With floor plan area limited only by seismic and structural control joints, and c) External walls that are vertical, and roofs that are 60° or less above the horizontal.","Detailed
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.1.0.2,"Where buildings are based on NZS 3604, but require specific engineering design input, the framing shall be of at least equivalent stiffness to the framing provisions of NZS 3604.","if( and( expression( function( comply with), atom( relation( design), variable( building)), data( nzs 3604)), expression( function( has), atom( relation( design), variable( building)), data( specific engineering requirement)))), then( and( expression( function( has), atom( variable( building)), data( framing)), obligation( expression( function( comply with), atom( relation( stiffness), variable( framing)), data( nzs 3604)))))","Where buildings are based on NZS 3604, but require specific engineering design input, the framing shall be of at least equivalent stiffness to the framing provisions of NZS 3604.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.2.2.0.1,"Buildings with drained cavities and spread-of-flame requirements, as specified in NZBC C Clauses, are outside the scope of this Acceptable Solution. Cavities in such circumstances must be specifically designed for both weathertightness and spread of flame.","if( and( expression( function( has), atom( variable( building)), data( drained cavity)), expression( function( has), atom( variable( building)), data( spread of flame requirement)), expression( function( as per), atom( variable( spread of flame requirement)), data( nzbc c)))), then( and( prohibition( expression( function( comply with), atom( variable( building)), data( nzbc e2as1))), obligation( expression( function( include), atom( relation( design), variable( drained cavity)), data( support))), and( obligation( expression( function( is), atom( relation( type), variable( support)), data( weathertightness))), obligation( expression( function( is), atom( relation( type), variable( support)), data( spread of flame))))))","Buildings with drained cavities and spread-of-flame requirements, as specified in NZBC C Clauses, are outside the scope of this Acceptable Solution. Cavities in such circumstances must be specifically designed for both weathertightness and spread of flame.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.2.3.0.1,"Buildings with drained cavities and acoustic requirements, as specified in NZBC Clause G6, are outside the scope of this Acceptable Solution.","if( and( expression( function( has), atom( variable( building)), data( drained cavity)), expression( function( has), atom( variable( building)), data( acoustic requirement)), expression( function( as per), atom( variable( acoustic requirement)), data( nzbc g6)))), then( prohibition( expression( function( comply with), atom( variable( building)), data( nzbc e2as1))))","Buildings with drained cavities and acoustic requirements, as specified in NZBC Clause G6, are outside the scope of this Acceptable Solution.","DomainKnowledge
G6 Airborne and impact sound
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.3.0.1,"Specific design for preventing the ingress of snow melt water is required when the open ground snow load Sg, as defined in NZS 3604, exceeds 1.0 kPa, and the roof is constructed in a way that is likely to cause a build-up of snow.","if( and( expression( function( as per), atom( variable( open ground snow load)), data( nzs 3604)), expression( function( greater than), atom( variable( open ground snow load)), data( baseunit( prefix( kilo), kind( pascal)), value( 1.0))), expression( function( has), atom( variable( roof)), data( snow build up)))), then( and( obligation( expression( function( is), atom( variable( specific design)), data( true))), expression( function( include), atom( relation( prevention), variable( specific design)), data( ingress)), expression( function( is), atom( relation( type), variable( ingress)), data( snow melt water))))","Specific design for preventing the ingress of snow melt water is required when the open ground snow load Sg, as defined in NZS 3604, exceeds 1.0 kPa, and the roof is constructed in a way that is likely to cause a build-up of snow.","SplitableEntities
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r1.4.0.1,"Buildings, components or junction details not included or shown in this Acceptable Solution require specific design.","if( and( or( expression( function( is), atom( variable( object)), data( building)), expression( function( is), atom( variable( object)), data( component)), expression( function( is), atom( variable( object)), data( junction))), not( expression( function( include), atom( variable( nzbc e2as1)), data( object))))), then( obligation( expression( function( has), atom( variable( object)), data( specific design))))","Buildings, components or junction details not included or shown in this Acceptable Solution require specific design.",NotEncodedParts
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.1.0.2,"Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7, and the provisions of this Acceptable Solution are acceptable means of achieving this.","if( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2as1))), then( and( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.1)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.2)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.3)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.4)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.5)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.6)), expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 3.7))))","Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7, and the provisions of this Acceptable Solution are acceptable means of achieving this.",Tacit
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.2.0.1,"Materials used to construct the building envelope shall be: a) In accordance with the durability requirements of NZBC B2, b) Suitable for their end-use, location and environment as shown in Table 20, and c) Compatible with adjoining materials as shown in Table 21 and Table 22.","if( expression( function( include), atom( relation( construction), variable( building envelope)), data( material))), then( and( obligation( expression( function( comply with), atom( variable( material)), data( durability requiement))), obligation( expression( function( has), atom( variable( nzbc b2)), data( durability requiement))), obligation( expression( function( include), atom( relation( suitability), variable( material)), data( end use))), obligation( expression( function( include), atom( relation( suitability), variable( material)), data( location))), obligation( expression( function( include), atom( relation( suitability), variable( material)), data( environment))), obligation( expression( function( include), atom( relation( compatibility), variable( material)), data( adjoining material))), and( obligation( expression( function( comply with), atom( variable( material)), data( nzbc e2as1 t20))), obligation( expression( function( comply with), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( comply with), atom( variable( material)), data( nzbc e2as1 t22))))))","Materials used to construct the building envelope shall be: a) In accordance with the durability requirements of NZBC B2, b) Suitable for their end-use, location and environment as shown in Table 20, and c) Compatible with adjoining materials as shown in Table 21 and Table 22.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.3.0.1,"All building products shall be considered as part of a system, even if the components of that system are provided from different sources.","if( and( expression( function( has), atom( variable( building)), data( building product)), expression( function( define), atom( variable( building product)), data( x0)), expression( function( define), atom( variable( building product)), data( x1)), expression( function( define), atom( relation( source), variable( x0)), data( x2)), expression( function( define), atom( relation( source), variable( x1)), data( x3)), not( expression( function( equal), atom( variable( x2)), data( x3))))), then( and( obligation( expression( function( part of), atom( variable( x0)), data( system))), obligation( expression( function( part of), atom( variable( x1)), data( system)))))","All building products shall be considered as part of a system, even if the components of that system are provided from different sources. Materials used to construct the building envelope shall be designed as a complete cladding system rather than as separate items.","Detailed
UnsureAboutDeontics"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.3.0.2,Materials used to construct the building envelope shall be designed as a complete cladding system rather than as separate items.,"if( expression( function( include), atom( relation( construction), variable( building envelope)), data( material))), then( and( obligation( expression( function( is), atom( relation( design), variable( material)), data( complete cladding system))), prohibition( expression( function( is), atom( relation( design), variable( material)), data( separate item)))))",Materials used to construct the building envelope shall be designed as a complete cladding system rather than as separate items.,SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.4.0.1,Finish colours for flush-finished fibre cement sheet and EIFS shall have a reflectivity of 40% or more when measured in accordance with ASTM C1549.,"if( and( or( and( expression( function( is), atom( relation( type), variable( cement sheet)), data( flush furnished fibre)), expression( function( has), atom( variable( cement sheet)), data( finish colour))), expression( function( has), atom( variable( eifs)), data( finish colour))), expression( function( has), atom( variable( finish colour)), data( reflectivity)))), then( and( obligation( expression( function( greater than equal), atom( variable( reflectivity)), data( 40 percent))), obligation( expression( function( comply with), atom( relation( measurement), variable( reflectivity)), data( astm c1549)))))",Finish colours for flush-finished fibre cement sheet and EIFS shall have a reflectivity of 40% or more when measured in accordance with ASTM C1549.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.5.0.1,"Maintenance shall be carried out as necessary (Rule 2.5.0.2) to achieve the required durability of materials, components and junctions.","if( or( obligation( expression( function( has), atom( relation( material), variable( building)), data( durability))), obligation( expression( function( has), atom( relation( component), variable( building)), data( durability))), obligation( expression( function( has), atom( relation( junction), variable( building)), data( durability))))), then( and( obligation( expression( function( comply with), atom( relation( maintenance), variable( building)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 2.5.0.2)))))","Maintenance shall be carried out as necessary to achieve the required durability of materials, components and junctions.",TACIT-REMOVE-BRACKETS
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.5.0.2,"The extent and nature of necessary maintenance is dependent on the: a) Type of cladding or components used, b) Position of cladding or components on the building, c) Geographical location of the building, and d) Specific site conditions.","if( obligation( expression( function( has), atom( variable( building)), data( maintenance)))), then( and( obligation( expression( function( has), atom( relation( extent), variable( maintenance)), data( dependency))), obligation( expression( function( has), atom( relation( nature), variable( maintenance)), data( dependency))), or( obligation( expression( function( is), atom( relation( base), variable( dependency)), data( cladding type))), obligation( expression( function( is), atom( relation( base), variable( dependency)), data( component type)))), or( obligation( expression( function( is), atom( relation( base), variable( dependency)), data( cladding position))), obligation( expression( function( is), atom( relation( base), variable( dependency)), data( component position)))), obligation( expression( function( is), atom( relation( base), variable( dependency)), data( building location))), obligation( expression( function( is), atom( relation( base), variable( dependency)), data( site condition)))))","The extent and nature of necessary maintenance is dependent on the: a) Type of cladding or components used, b) Position of cladding or components on the building, c) Geographical location of the building, and d) Specific site conditions.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r2.5.1.0.1,"Regular maintenance of a building will include: a) Washing exterior surfaces, b) Inspecting surfaces and junctions, and repairing or replacing items when necessary, in order to preserve the weathertightness of the building. c) Maintaining clearances between cladding and external ground or paving as per Paragraph 9.1.3. d) Maintaining minimum 35 mm clearances between roofing and membrane decking, and wall cladding above e) Maintaining finish coatings especially for stucco, EIFS and fibre cement claddings.","if( and( expression( function( include), atom( relation( requirement), variable( building)), data( maintenance)), expression( function( is), atom( relation( frequency), variable( maintenance)), data( regular)))), then( and( expression( function( include), atom( relation( task), variable( maintenance)), data( washing)), expression( function( include), atom( relation( task), variable( maintenance)), data( inspection)), expression( function( include), atom( relation( task), variable( maintenance)), data( repairing)), expression( function( include), atom( relation( task), variable( maintenance)), data( replacement)), expression( function( include), atom( relation( task), variable( maintenance)), data( maintenance)), expression( function( is), atom( relation( object), variable( washing)), data( exterior surface)), and( expression( function( is), atom( relation( object), variable( inspection)), data( surface)), expression( function( is), atom( relation( object), variable( inspection)), data( junction))), expression( function( is), atom( relation( object), variable( repairing)), data( items)), expression( function( is), atom( relation( object), variable( replacement)), data( items)), expression( function( define), atom( relation( object), variable( maintenance)), data( x0)), expression( function( define), atom( relation( clearance), variable( x0)), data( x1)), or( and( expression( function( in between), atom( variable( x1)), data( cladding)), expression( function( in between), atom( variable( x1)), data( external ground))), and( expression( function( in between), atom( variable( x1)), data( cladding)), expression( function( in between), atom( variable( x1)), data( paving)))), expression( function( comply with), atom( variable( x0)), data( nzbc e2as1 9.1.3)), expression( function( define), atom( relation( object), variable( maintenance)), data( x2)), expression( function( define), atom( relation( clearance), variable( x2)), data( x3)), and( expression( function( in between), atom( variable( x3)), data( roofing)), expression( function( in between), atom( variable( x3)), data( membrane decking))), and( expression( function( in between), atom( variable( x3)), data( roofing)), expression( function( in between), atom( variable( x3)), data( wall cladding))), expression( function( greater than equal), atom( variable( x3)), data( baseunit( prefix( milli), kind( metre)), value( 35.0))), expression( function( is), atom( variable( x2)), data( finish coating)), expression( function( has), atom( variable( stucco)), data( finish coating)), expression( function( has), atom( variable( eifs)), data( finish coating)), expression( function( is), atom( relation( material), variable( cladding)), data( fibre cement)), expression( function( has), atom( variable( cladding)), data( finish coating))))","Regular maintenance of a building will include: a) Washing exterior surfaces, b) Inspecting surfaces and junctions, and repairing or replacing items when necessary, in order to preserve the weathertightness of the building. c) Maintaining clearances between cladding and external ground or paving as per Paragraph 9.1.3. d) Maintaining minimum 35 mm clearances between roofing and membrane decking, and wall cladding above e) Maintaining finish coatings especially for stucco, EIFS and fibre cement claddings.",CoarseThenFine
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.1.0.1,"A risk assessment of the proposed design shall be carried out using a building envelope risk matrix. This allows the risks related to various features to be aggregated, resulting in a risk score for the design. ","if( expression( function( is), atom( variable( design)), data( proposed))), then( and( obligation( expression( function( has), atom( variable( design)), data( risk assessment))), obligation( expression( function( include), atom( variable( risk assessment)), data( risk matrix))), obligation( expression( function( is), atom( relation( type), variable( risk matrix)), data( building envelope))), obligation( expression( function( include), atom( variable( risk assessment)), data( risk aggregation))), obligation( expression( function( is), atom( relation( object), variable( risk aggregation)), data( features))), obligation( expression( function( is), atom( relation( result), variable( risk assessment)), data( risk score))), obligation( expression( function( has), atom( variable( design)), data( risk score)))))","A risk assessment of the proposed design shall be carried out using a building envelope risk matrix. This allows the risks related to various features to be aggregated, resulting in a risk score for the design. ",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.1.1.0.1,Table 1 sets out the definitions of risk levels relating to the location and design features of the building.,"if( and( expression( function( has), atom( variable( building)), data( location)), expression( function( has), atom( variable( building)), data( design feature)), and( expression( function( to), atom( relation( relation), variable( risk level)), data( location)), expression( function( to), atom( relation( relation), variable( risk level)), data( design feature))), expression( function( has), atom( variable( risk level)), data( definition)))), then( and( expression( function( as per), atom( variable( definition)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t1))))",Table 1 sets out the definitions of risk levels relating to the location and design features of the building.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r3.1.2.0.1,Table 2 sets out the risk matrix that shall be used to define the risk score for a building within the scope of this Acceptable Solution. A risk score is calculated for each external face of the building. Claddings are then selected from Table 3 according to the risk scores.,"if( and( expression( function( equal), atom( relation( key), variable( table)), data( t2)), expression( function( include), atom( variable( t2)), data( risk matrix)), expression( function( has), atom( variable( building)), data( risk score)), expression( function( comply with), atom( variable( building)), data( nzbc e2as1)))), then( and( obligation( expression( function( by), atom( relation( definition), variable( risk score)), data( risk matrix))), expression( rulestatement( expression( function( in), expression( function( for each), atom( variable( external face))), data( building))), appliedstatement( and( obligation( expression( function( define), atom( relation( risk score), variable( external face)), data( x0))), obligation( expression( function( as per), atom( relation( selection), variable( cladding)), data( x0))), obligation( expression( function( from), atom( relation( selection), variable( cladding)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t3))))))))",Table 2 sets out the risk matrix that shall be used to define the risk score for a building within the scope of this Acceptable Solution. A risk score is calculated for each external face of the building. Claddings are then selected from Table 3 according to the risk scores.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.2.0.1,"Flashing materials shall take into account the following factors: a) The requirements of NZBC Clause B2 Durability, b) The environment where the building is located, c) The specific conditions of use, and d) Consideration of the surrounding materials.","if( expression( function( in), atom( relation( material), variable( flashing)), data( building))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( flashing)), data( nzbc b2))), obligation( expression( function( has), atom( relation( material), variable( flashing)), data( dependency))), obligation( expression( function( is), atom( relation( location), variable( building)), data( environment))), obligation( expression( function( include), atom( relation( type), variable( dependency)), data( environment))), obligation( expression( function( include), atom( relation( type), variable( dependency)), data( specific usage condition))), obligation( expression( function( include), atom( relation( type), variable( dependency)), data( surrounding material)))))","Flashing materials shall take into account the following factors: a) The requirements of NZBC Clause B2 Durability, b) The environment where the building is located, c) The specific conditions of use, and d) Consideration of the surrounding materials.","Complex
Tacit
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.2.1.0.1,Flashing materials shall be selected according to the relevant exposure conditions as defined in Table 20 to minimise corrosion.,"if( expression( function( has), atom( variable( flashing)), data( material))), then( and( obligation( expression( function( has), atom( relation( material), variable( flashing)), data( dependency))), obligation( expression( function( is), atom( relation( type), variable( dependency)), data( relevant exposure condition))), obligation( expression( function( as per), atom( variable( relevant exposure condition)), data( nzbc e2as1 t20)))))",Flashing materials shall be selected according to the relevant exposure conditions as defined in Table 20 to minimise corrosion.,SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.2.2.0.2,4.2.2 Surrounding materials; Uncoated metals shall not be used where carbon deposits or chemical contaminants may accumulate.,"if( and( expression( function( is), atom( relation( material), variable( object)), data( metal)), expression( function( to), atom( relation( exposure), variable( object)), data( contaminant)), or( expression( function( include), atom( relation( type), variable( contaminant)), data( carbon deposit)), expression( function( include), atom( relation( type), variable( contaminant)), data( chemical))), expression( function( include), atom( relation( ability), variable( contaminant)), data( accumulation)), not( expression( function( is), atom( variable( object)), data( coated))))), then( prohibition( expression( function( is), atom( variable( object)), data( usaged))))",Uncoated metals shall not be used where carbon deposits or chemical contaminants may accumulate.,Detailed
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.1.0.1,"uPVC flashings shall be a minimum of 0.75 mm thick. uPVC flashings shall comply with the requirements of the following Clauses of AS/NZS 4256: Part 2: a) Clause 9.2 Impact resistance, b) Clause 9.3 Tensile strength, and c)  Clause 9.4 Colourfastness and impact resistance following ultraviolet light exposure.","if( expression( function( is), atom( relation( material), variable( flashing)), data( u pvc))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( kind( metre), prefix( milli)), value( 0.75)))), obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 4256.2 9.2))), obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 4256.2 9.3))), obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 4256.2 9.4)))))","uPVC flashings shall be a minimum of 0.75 mm thick. uPVC flashings shall comply with the requirements of the following Clauses of AS/NZS 4256: Part 2: a) Clause 9.2 Impact resistance, b) Clause 9.3 Tensile strength, and c)  Clause 9.4 Colourfastness and impact resistance following ultraviolet light exposure.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.2.0.1,"Aluminium flashings shall be a minimum thickness of 0.7 mm, and formed from 5000 series in accordance with AS/NZS 1734.","if( expression( function( is), atom( relation( material), variable( flashing)), data( aluminium))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 0.7)))), obligation( expression( function( is), atom( relation( material), variable( flashing)), data( 5000 series))), obligation( expression( function( comply with), atom( variable( flashing)), data( asnzs 1734)))))","Aluminium flashings shall be a minimum thickness of 0.7 mm, and formed from 5000 series in accordance with AS/NZS 1734.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.3.0.1,"Galvanized steel flashings shall: a) have a BMT of 0.55 mm minimum b) be grade G550, or G300 for rolled or crimped flashings c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( steel)), expression( function( is), atom( relation( coating), variable( steel)), data( galvanised)))), then( and( obligation( expression( function( greater than equal), atom( relation( bmt), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 0.55)))), or( obligation( expression( function( equal), atom( relation( grade), variable( flashing)), data( g550))), and( obligation( expression( function( equal), atom( relation( grade), variable( flashing)), data( g300))), or( obligation( expression( function( is), atom( relation( type), variable( flashing)), data( rolled))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( crimped)))))), obligation( expression( function( for), atom( relation( selection), variable( flashing)), data( corrosion protection))), obligation( expression( function( has), atom( relation( selection), variable( flashing)), data( dependency))), obligation( expression( function( is), atom( relation( type), variable( dependency)), data( intended exposure zone))), obligation( expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","Galvanized steel flashings shall: a) have a BMT of 0.55 mm minimum b) be grade G550, or G300 for rolled or crimped flashings c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.4.0.1,"Aluminium-zinc-magnesium coated steel shall: a) have a BMT of 0.55 mm minimum b) be grade G550, or G300 for curved or crimped flashings c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( steel)), expression( function( is), atom( relation( coating), variable( steel)), data( aluminium zinc magnesium)))), then( and( obligation( expression( function( greater than equal), atom( relation( bmt), variable( flashing)), data( baseunit( kind( metre), prefix( milli)), value( 0.55)))), or( obligation( expression( function( equal), atom( relation( grade), variable( flashing)), data( g550))), and( obligation( expression( function( equal), atom( relation( grade), variable( flashing)), data( g300))), or( obligation( expression( function( is), atom( relation( type), variable( flashing)), data( curved))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( crimped)))))), obligation( expression( function( for), atom( relation( selection), variable( flashing)), data( corrosion protection))), obligation( expression( function( has), atom( relation( selection), variable( flashing)), data( dependency))), obligation( expression( function( is), atom( relation( type), variable( dependency)), data( intended exposure zone))), obligation( expression( function( as per), atom( variable( flashing)), data( nzbc e2as1 t20)))))","Aluminium-zinc-magnesium coated steel shall: a) have a BMT of 0.55 mm minimum b) be grade G550, or G300 for curved or crimped flashings c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.8.0.1,"Zinc sheet flashings shall only be used in accordance with Tables 20, 21 and 22. Zinc sheet flashings shall be: a) A minimum thickness of 0.7 mm, and b) In compliance with BS EN 988.","if( expression( function( is), atom( relation( material), variable( flashing)), data( zinc))), then( and( obligation( expression( function( as per), atom( relation( usage), variable( flashing)), data( nzbc e2as1 t20))), obligation( expression( function( as per), atom( relation( usage), variable( flashing)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( relation( usage), variable( flashing)), data( nzbc e2as1 t22))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 0.7)))), obligation( expression( function( comply with), atom( variable( flashing)), data( bs en 988)))))","Zinc sheet flashings shall only be used in accordance with Tables 20, 21 and 22. Zinc sheet flashings shall be: a) A minimum thickness of 0.7 mm, and b) In compliance with BS EN 988.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.3.11.0.1,"Flexible flashing tape shall comply with Parts 3.2 and 4 of ICBO Acceptance Criteria AC148, shall be compatible with adjacent building wall underlay or roof underlay, and be used only in fully concealed applications.","if( expression( function( is), atom( variable( flashing tape)), data( flexible))), then( and( obligation( expression( function( comply with), atom( variable( flashing tape)), data( icbo ac148.3.2))), obligation( expression( function( comply with), atom( variable( flashing tape)), data( icbo ac148.4))), or( obligation( expression( function( has), atom( variable( adjacent building)), data( wall underlay))), obligation( expression( function( has), atom( variable( adjacent building)), data( roof underlay)))), or( obligation( expression( function( include), atom( relation( compatibility), variable( flashing tape)), data( wall underlay))), obligation( expression( function( include), atom( relation( compatibility), variable( flashing tape)), data( roof underlay)))), obligation( expression( function( in), atom( relation( application), variable( flashing tape)), data( fully concealed application)))))","Flexible flashing tape shall comply with Parts 3.2 and 4 of ICBO Acceptance Criteria AC148, shall be compatible with adjacent building wall underlay or roof underlay, and be used only in fully concealed applications.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.4.0.2,Exposed flashings such as barge and ridge flashings are to be fixed along both edges.,"if( or( expression( function( is), atom( relation( type), variable( flashing)), data( exposed)), expression( function( is), atom( relation( type), variable( flashing)), data( barge)), expression( function( is), atom( relation( type), variable( flashing)), data( ridge)))), then( expression( function( at), atom( relation( fixture), variable( flashing)), data( both edges)))",Exposed flashings such as barge and ridge flashings are to be fixed along both edges.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.0.1,All flashings shall have expansion joints where required in Paragraph 4.5.2 to provide for thermal expansion.,"if( and( expression( function( has), atom( variable( flashing)), data( expansion joint)), expression( function( as per), atom( variable( expansion joint)), data( nzbc e2as1 4.5.2)))), then( and( obligation( expression( function( has), atom( variable( flashing)), data( expansion joint))), obligation( expression( function( include), atom( relation( provision), variable( expansion joint)), data( thermal expansion)))))",All flashings shall have expansion joints where required in Paragraph 4.5.2 to provide for thermal expansion.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.0.2,"Flashings are required to shed or divert water at sensitive areas of the building cladding. These include at: a) The building periphery, except where gutters are present, b) Changes of direction in cladding materials, c) Intersections between cladding materials or with other buildings, and d) Roof or wall penetrations, including windows, doors and other penetrations.","if( and( expression( function( has), atom( variable( building cladding)), data( sensitive area)), or( and( expression( function( is), atom( variable( sensitive area)), data( building periphery)), not( expression( function( include), atom( variable( building periphery)), data( location))), expression( function( has), atom( variable( location)), data( gutter))), expression( function( is), atom( variable( sensitive area)), data( direction change in cladding material)), and( expression( function( is), atom( variable( sensitive area)), data( intersection)), or( expression( function( in between), atom( variable( intersection)), data( cladding material)), expression( function( to), atom( variable( intersection)), data( other building)))), expression( function( is), atom( variable( sensitive area)), data( roof penetration)), and( expression( function( is), atom( variable( sensitive area)), data( wall penetration)), expression( function( include), atom( variable( wall penetration)), data( window)), expression( function( include), atom( variable( wall penetration)), data( door)))))), then( and( obligation( expression( function( at), atom( variable( flashing)), data( sensitive area))), or( obligation( expression( function( is), atom( relation( purpose), variable( flashing)), data( shed water))), obligation( expression( function( is), atom( relation( purpose), variable( flashing)), data( divert water))))))","Flashings are required to shed or divert water at sensitive areas of the building cladding. These include at: a) The building periphery, except where gutters are present, b) Changes of direction in cladding materials, c) Intersections between cladding materials or with other buildings, and d) Roof or wall penetrations, including windows, doors and other penetrations.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.1.0.2,Exposed bottom edges of flashings shall be folded to a kick-out or a bird's beak as shown in Figure 5. ,"if( and( expression( function( has), atom( variable( flashing)), data( bottom edge)), expression( function( is), atom( relation( exposure), variable( bottom edge)), data( true)))), then( or( obligation( expression( function( to), atom( relation( fold), variable( bottom edge)), data( kick out))), obligation( expression( function( to), atom( relation( fold), variable( bottom edge)), data( bird beak)))))","For Low, Medium, High and Very High wind zones, flashing upstands shall have either: 1) A hem or hook to Figure 5, with upstand dimensions as shown throughout the document, or 2) No hooks or hems, and flashing upstand dimensions increased by 25 mm beyond those shown. ",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.1.0.3,"For Low, Medium, High and Very High wind zones, flashing upstands shall have either: 1) A hem or hook to Figure 5, with upstand dimensions as shown throughout the document, or 2) No hooks or hems, and flashing upstand dimensions increased by 25 mm beyond those shown. ","if( and( or( expression( function( is), atom( relation( type), variable( wind zone)), data( low)), expression( function( is), atom( relation( type), variable( wind zone)), data( medium)), expression( function( is), atom( relation( type), variable( wind zone)), data( high)), expression( function( is), atom( relation( type), variable( wind zone)), data( very high))), expression( function( has), atom( variable( flashing)), data( upstand)))), then( or( and( or( obligation( expression( function( has), atom( variable( upstand)), data( hem))), obligation( expression( function( has), atom( variable( upstand)), data( hook)))), obligation( expression( function( comply with), atom( relation( dimension), variable( upstand)), data( nzbc e2as1)))), and( obligation( not( expression( function( has), atom( variable( upstand)), data( hem)))), obligation( not( expression( function( has), atom( variable( upstand)), data( hook)))), obligation( expression( function( has), atom( variable( upstand)), data( dimension))), obligation( expression( function( by), atom( relation( increase), variable( dimension)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))), obligation( expression( function( above), atom( relation( increase), variable( dimension)), data( value))), obligation( expression( function( as per), atom( variable( value)), data( nzbc e2as1))))))","For Extra High wind zones, hooks and hems shall be used, and flashing upstand dimensions increased by 25 mm beyond those shown in Table 7 or elsewhere in the document.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.1.0.4,"For Extra High wind zones, hooks and hems shall be used, and flashing upstand dimensions increased by 25 mm beyond those shown in Table 7 or elsewhere in the document.","if( and( expression( function( is), atom( relation( type), variable( wind zone)), data( extra high)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( and( or( obligation( expression( function( has), atom( variable( upstand)), data( hem))), obligation( expression( function( has), atom( variable( upstand)), data( hook)))), obligation( expression( function( has), atom( variable( upstand)), data( dimension))), obligation( expression( function( by), atom( relation( increase), variable( dimension)), data( baseunit( kind( metre), prefix( milli)), value( 25.0)))), obligation( expression( function( above), atom( relation( increase), variable( dimension)), data( value))), expression( function( as per), atom( variable( value)), data( nzbc e2as1))))","For Extra High wind zones, hooks and hems shall be used, and flashing upstand dimensions increased by 25 mm beyond those shown in Table 7 or elsewhere in the document.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.a.1,"Joins of metal flashings shall have the following features: a) Rivets used for joining and sealing laps shall be spaced at a maximum of 50 mm centres, and be: i) compatible with the flashing material as per Table 21 and Table 22, and ii) sealed against moisture, or iii) of a sealing type or blind rivet, ","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( join)), expression( function( is), atom( relation( type), variable( join)), data( rivet)), expression( function( is), atom( relation( purpose), variable( rivet)), data( join lap)), expression( function( is), atom( relation( purpose), variable( rivet)), data( seal lap)))), then( and( expression( function( at), atom( relation( spacing), variable( rivet)), data( centre)), obligation( expression( function( less than equal), atom( relation( spacing), variable( rivet)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))), obligation( expression( function( include), atom( relation( compatibility), variable( rivet)), data( flashing material))), and( obligation( expression( function( comply with), atom( relation( compatibility), variable( rivet)), data( nzbc e2as1 t21))), obligation( expression( function( comply with), atom( relation( compatibility), variable( rivet)), data( nzbc e2as1 t22)))), or( obligation( expression( function( from), atom( relation( sealing), variable( rivet)), data( moisture))), or( obligation( expression( function( is), atom( relation( type), variable( rivet)), data( sealing))), obligation( expression( function( is), atom( relation( type), variable( rivet)), data( blind)))))))","Joins of metal flashings shall have the following features: a) Rivets used for joining and sealing laps shall be spaced at a maximum of 50 mm centres, and be: i) compatible with the flashing material as per Table 21 and Table 22, and ii) sealed against moisture, or iii) of a sealing type or blind rivet, ",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.b.1,"Joins of metal flashings shall have the following features: b) Expansion joints shall be provided for joined flashings with a combined length exceeding: i) 12 metres for light coloured steel and stainless steel. 8 metres for dark coloured steel, ii) 8 metres for copper, iii) 8 metres for aluminium. ","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( join)))), then( and( obligation( expression( function( for), atom( relation( provision), variable( expansion joint)), data( flashing))), or( and( or( obligation( expression( function( is), atom( relation( material), variable( flashing)), data( light coloured steel))), obligation( expression( function( is), atom( relation( material), variable( flashing)), data( stainless steel)))), obligation( expression( function( greater than equal), atom( relation( combined length), variable( expansion joint)), data( baseunit( kind( metre)), value( 12.0))))), and( or( obligation( expression( function( is), atom( relation( material), variable( flashing)), data( dark coloured steel))), obligation( expression( function( is), atom( relation( material), variable( flashing)), data( copper))), obligation( expression( function( is), atom( relation( material), variable( flashing)), data( aluminium)))), obligation( expression( function( greater than equal), atom( relation( combined length), variable( expansion joint)), data( baseunit( kind( metre)), value( 8.0))))))))","Joins of metal flashings shall have the following features: b) Expansion joints shall be provided for joined flashings with a combined length exceeding: i) 12 metres for light coloured steel and stainless steel. 8 metres for dark coloured steel, ii) 8 metres for copper, iii) 8 metres for aluminium. ",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.f.1,"Joins of metal flashings shall have the following features: f) When using uncoated or coated lead flashings, maximum continuous lengths shall be 1300 mm for 17 kg or 1500 mm for 20 kg lead. Where the pitch of the flashing is greater than 15° at the join, the lap at the join shall be 100 mm minimum. Where the pitch of the flashing is 15° or less at the join, the lap at the join shall be 200 mm minimum and the flashing underneath the lap shall have a hook at the edge,","if( and( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( join)), or( expression( function( is), atom( relation( material), variable( flashing)), data( coated lead)), expression( function( is), atom( relation( material), variable( flashing)), data( uncoated lead))))), then( and( or( and( obligation( expression( function( equal), atom( relation( weight), variable( flashing)), data( baseunit( prefix( kilo), kind( gram)), value( 17.0)))), obligation( expression( function( less than equal), atom( relation( continuous length), variable( flashing)), data( baseunit( kind( metre), prefix( milli)), value( 1300.0))))), and( obligation( expression( function( equal), atom( relation( weight), variable( flashing)), data( baseunit( prefix( kilo), kind( gram)), value( 20.0)))), obligation( expression( function( less than equal), atom( relation( continuous length), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 1500.0)))))), or( and( obligation( expression( function( has), atom( variable( join)), data( pitch))), obligation( expression( function( has), atom( variable( join)), data( lap))), obligation( expression( function( greater than), atom( variable( pitch)), data( baseunit( kind( angle degree)), value( 15.0)))), obligation( expression( function( greater than equal), atom( variable( lap)), data( baseunit( kind( metre), prefix( milli)), value( 100.0))))), and( and( obligation( expression( function( has), atom( variable( join)), data( pitch))), obligation( expression( function( has), atom( variable( join)), data( lap)))), obligation( expression( function( less than equal), atom( variable( pitch)), data( baseunit( kind( angle degree)), value( 15.0)))), obligation( expression( function( greater than equal), atom( variable( lap)), data( baseunit( kind( metre), prefix( milli)), value( 200.0)))), obligation( expression( function( below), atom( variable( flashing)), data( lap))), obligation( expression( function( has), atom( relation( edge), variable( flashing)), data( hook)))))))","Joins of metal flashings shall have the following features: f) When using uncoated or coated lead flashings, maximum continuous lengths shall be 1300 mm for 17 kg or 1500 mm for 20 kg lead. Where the pitch of the flashing is greater than 15° at the join, the lap at the join shall be 100 mm minimum. Where the pitch of the flashing is 15° or less at the join, the lap at the join shall be 200 mm minimum and the flashing underneath the lap shall have a hook at the edge,",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.5.2.0.1.g.1,"Joins of metal flashings shall have the following features: Lap joins on other metal flashings (rules 4.5.2.0.2.e.1 or 4.5.2.0.2.f.1) shall be sealed using a neutral cure silicone sealant in conjunction with mechanical fasteners. The sealant shall comply with: a) Type F, Class 20LM or 25LM of ISO 11600, or b) low modulus Type II Class A of Federal Specification TT-S-00230C.","if( and( or( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.5.2.0.2.e.1))), not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.5.2.0.2.f.1)))), expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( lap join)))), then( and( obligation( expression( function( has), atom( variable( lap join)), data( sealing))), obligation( expression( function( include), atom( variable( sealing)), data( sealant))), obligation( expression( function( include), atom( variable( sealing)), data( mechanical fastener))), obligation( expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure silicone))), or( obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 type f class 20lm))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 type f class 25lm))), obligation( expression( function( comply with), atom( variable( sealant)), data( tts 00230c low modulus type ii class a))))))","Joins of metal flashings shall have the following features: Lap joins on other metal flashings shall be sealed using a neutral cure silicone sealant in conjunction with mechanical fasteners. The sealant shall comply with: a) Type F, Class 20LM or 25LM of ISO 11600, or b) low modulus Type II Class A of Federal Specification TT-S-00230C.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.1,4.6 Flashing overlaps and upstands; Overlaps and upstands to flashings shall be as specified in this paragraph and Table 7,"if( or( expression( function( has), atom( variable( flashing)), data( overlap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( and( obligation( expression( function( comply with), atom( variable( overlap)), data( 4.6))), obligation( expression( function( comply with), atom( variable( overlap)), data( nzbc e2as1 t7))), and( obligation( expression( function( comply with), atom( variable( upstand)), data( 4.6))), obligation( expression( function( comply with), atom( variable( upstand)), data( nzbc e2as1 t7))))))",4.6 Flashing overlaps and upstands; Overlaps and upstands to flashings shall be as specified in this paragraph and Table 7,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.2,"Flashing edges, with hooks, hems, kick-outs and bird's beaks shall be as required in Table 7 and Paragraph 4.5.1. ","if( and( expression( function( has), atom( variable( flashing)), data( edge)), or( expression( function( has), atom( variable( edge)), data( hook)), expression( function( has), atom( variable( edge)), data( hem)), expression( function( has), atom( variable( edge)), data( kick out)), expression( function( has), atom( variable( edge)), data( bird beak))))), then( and( obligation( expression( function( as per), atom( variable( edge)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( variable( edge)), data( nzbc e2as1 4.5.1)))))","Flashing edges, with hooks, hems, kick-outs and bird's beaks shall be as required in Table 7 and Paragraph 4.5.1. ",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.3.a.1,"Where a turn-down to the cover flashing for profiled metal claddings is required, use: a) A soft edge flashing for corrugated profiles","if( and( expression( function( is), atom( relation( material), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( flashing)), expression( function( is), atom( relation( type), variable( flashing)), data( cover)), obligation( expression( function( has), atom( variable( flashing)), data( turn down))), expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated)))), then( obligation( expression( function( has), atom( variable( flashing)), data( soft edge))))","Where a turn-down to the cover flashing for profiled metal claddings is required, use: a) A soft edge flashing for corrugated profiles",AndOrDetailed
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.3.b.1,"Where a turn-down to the cover flashing for profiled metal claddings is required, use: b) A notched turn-down or soft edge flashing for trapezoidal profiles with rib height not exceeding 30 mm and/or rib centres not exceeding 200 mm","if( and( expression( function( is), atom( relation( material), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( flashing)), expression( function( is), atom( relation( type), variable( flashing)), data( cover)), obligation( expression( function( has), atom( variable( flashing)), data( turn down))), expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), or( expression( function( less than equal), atom( relation( rib height), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))), expression( function( less than equal), atom( relation( rib centre), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), and( expression( function( less than equal), atom( relation( rib height), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))), expression( function( less than equal), atom( relation( rib centre), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))))), then( or( obligation( expression( function( has), atom( variable( flashing)), data( soft edge))), obligation( expression( function( has), atom( variable( flashing)), data( notched turn down)))))","Where a turn-down to the cover flashing for profiled metal claddings is required, use: b) A notched turn-down or soft edge flashing for trapezoidal profiles with rib height not exceeding 30 mm and/or rib centres not exceeding 200 mm",AndOrDetailed
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.3.c.1,"Where a turn-down to the cover flashing for profiled metal claddings is required, use: c) A notched turn-down for trapezoidal profiles with rib height exceeding 30 mm and/or rib centres exceeding 200 mm","if( and( expression( function( is), atom( relation( material), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( flashing)), expression( function( is), atom( relation( type), variable( flashing)), data( cover)), obligation( expression( function( has), atom( variable( flashing)), data( turn down))), expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal)), or( expression( function( greater than), atom( relation( rib height), variable( cladding)), data( baseunit( kind( metre), prefix( milli)), value( 30.0))), expression( function( greater than), atom( relation( rib centre), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), and( expression( function( greater than), atom( relation( rib height), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))), expression( function( greater than), atom( relation( rib centre), variable( cladding)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))))), then( obligation( expression( function( has), atom( variable( flashing)), data( notched turn down))))","Where a turn-down to the cover flashing for profiled metal claddings is required, use: c) A notched turn-down for trapezoidal profiles with rib height exceeding 30 mm and/or rib centres exceeding 200 mm",AndOrDetailed
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.0.3.d.1,"Where a turn-down to the cover flashing for profiled metal claddings is required, use: d) A notched turn-down for trough profiles.","if( and( expression( function( is), atom( relation( material), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( flashing)), expression( function( is), atom( relation( type), variable( flashing)), data( cover)), obligation( expression( function( has), atom( variable( flashing)), data( turn down))), expression( function( is), atom( relation( profile), variable( cladding)), data( trough)))), then( obligation( expression( function( has), atom( variable( flashing)), data( notched turn down))))","Where a turn-down to the cover flashing for profiled metal claddings is required, use: d) A notched turn-down for trough profiles.",AndOrDetailed
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.1.0.0.a.i.1,"Overlap with roof claddings: Apron flashing cover over metal roofing: Transverse flashing: Refer to Figure 7 for example of use. The apron shall have: i) for notched turn-downs, a gap between the flashing and the pan of the roof cladding. The gap shall be a maximum of 5 mm","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( relation( cover), variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( transverse)), expression( function( has), atom( variable( flashing)), data( notched turn down)), expression( function( has), atom( variable( roof cladding)), data( pan)))), then( and( obligation( expression( function( in between), atom( variable( gap)), data( flashing))), obligation( expression( function( in between), atom( variable( gap)), data( pan))), obligation( expression( function( less than equal), atom( relation( size), variable( gap)), data( baseunit( kind( metre), prefix( milli)), value( 5.0))))))","Overlap with roof claddings: Apron flashing cover over metal roofing: Transverse flashing: Refer to Figure 7 for example of use. The apron shall have: i) for notched turn-downs, a gap between the flashing and the pan of the roof cladding. The gap shall be a maximum of 5 mm",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.1.0.0.a.ii.1,"Overlap with roof claddings: Apron flashing cover over metal roofing: Transverse flashing: Refer to Figure 7 for example of use. The apron shall have: ii) a minimum effective cover to roof cladding, excluding any soft edge or turn-down to the flashing, as shown in Table 7.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( include), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( relation( cover), variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( transverse)), or( expression( function( has), atom( variable( flashing)), data( soft edge)), expression( function( has), atom( variable( flashing)), data( turn down))))), then( and( obligation( expression( function( has), atom( variable( flashing)), data( minimum effective cover))), obligation( expression( function( to), atom( variable( minimum effective cover)), data( roof cladding))), or( obligation( expression( function( exclude), atom( variable( minimum effective cover)), data( soft edge))), obligation( expression( function( exclude), atom( variable( minimum effective cover)), data( turn down))))))","Overlap with roof claddings: Apron flashing cover over metal roofing: Transverse flashing: Refer to Figure 7 for example of use. The apron shall have: ii) a minimum effective cover to roof cladding, excluding any soft edge or turn-down to the flashing, as shown in Table 7.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.1.0.0.b.i.1,"Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: i) be dimensioned to suit the roof cladding profile,","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( relation( cover), variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( has), atom( variable( roof cladding)), data( profile)))), then( and( obligation( expression( function( has), atom( relation( dimension), variable( flashing)), data( dependency))), expression( function( is), atom( relation( type), variable( dependency)), data( profile))))","Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: i) be dimensioned to suit the roof cladding profile,","Tacit
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.1.0.0.b.ii.1,"Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: ii) for profiled metal roof cladding, cover at least two crests, (turned-up edge to full crest height constitutes a crest)","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( relation( cover), variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( has), atom( variable( roof cladding)), data( profile)))), then( and( obligation( expression( function( include), atom( relation( cover), variable( flashing)), data( crest))), obligation( expression( function( greater than equal), expression( function( count), atom( variable( crest))), data( 2)))))","Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: ii) for profiled metal roof cladding, cover at least two crests, (turned-up edge to full crest height constitutes a crest)",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.1.0.0.b.iii.1,"Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: iii) for profiled metal roof cladding, overhang flashing a minimum 10 mm clear of crest and maximum 5 mm clear of trough as shown in Figure 47.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( relation( cover), variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( has), atom( variable( roof cladding)), data( profile)))), then( and( obligation( expression( function( include), atom( relation( clearance), variable( flashing)), data( crest))), obligation( expression( function( greater than equal), atom( relation( clearance), variable( crest)), data( baseunit( prefix( milli), kind( metre)), value( 10.0)))), obligation( expression( function( include), atom( relation( clearance), variable( flashing)), data( trough))), obligation( expression( function( less than equal), atom( relation( clearance), variable( trough)), data( baseunit( kind( metre), prefix( milli)), value( 5.0))))))","Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: Refer to Figure 48 for example of use. The apron shall: iii) for profiled metal roof cladding, overhang flashing a minimum 10 mm clear of crest and maximum 5 mm clear of trough as shown in Figure 47.","CorrectnessUnclear
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.2.0.0.a.1,4.0 Flashings 4.6.1.2 Ridges and hips; Refer to Figure 46 for example of use. a) For notched turn-downs of the flashing leave a gap between the flashing and the roof cladding. The gap shall be a maximum of 5 mm.,"if( and( expression( function( is), atom( relation( type), variable( flashing)), data( ridges and hips)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( flashing)), data( notched turn down)))), then( and( obligation( expression( function( in between), atom( variable( gap)), data( flashing))), obligation( expression( function( in between), atom( variable( gap)), data( roof cladding))), obligation( expression( function( less than equal), atom( relation( size), variable( gap)), data( baseunit( prefix( milli), kind( metre)), value( 5.0))))))",4.6.1.2 Ridges and hips; Refer to Figure 46 for example of use. a) For notched turn-downs of the flashing leave a gap between the flashing and the roof cladding. The gap shall be a maximum of 5 mm.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.2.0.0.b.1,"4.0 Flashings 4.6.1.2 Ridges and hips; Refer to Figure 46 for example of use. b) There shall be a minimum effective cover to roof cladding, excluding any soft edge or turn-down to the flashing, in accordance with Table 7.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( ridges and hips)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)))), then( and( obligation( expression( function( has), atom( variable( flashing)), data( minimum effective cover))), obligation( expression( function( to), atom( variable( minimum effective cover)), data( roof cladding))), or( obligation( expression( function( exclude), atom( variable( minimum effective cover)), data( soft edge))), obligation( expression( function( exclude), atom( variable( minimum effective cover)), data( turn down))))))","4.6.1.2 Ridges and hips; Refer to Figure 46 for example of use. b) There shall be a minimum effective cover to roof cladding, excluding any soft edge or turn-down to the flashing, in accordance with Table 7.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.3.0.0.a.1,"4.0 Flashings 4.6.1.3 Change in metal roof pitches; Refer to Figure 44 for example of use. a) There shall be a minimum effective lap under roof cladding in accordance with Table 7, with a hem at upper edge.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( metal roof pitch change)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)))), then( and( obligation( expression( function( below), atom( variable( lap)), data( roof cladding))), obligation( expression( function( is), atom( variable( lap)), data( minimum effective))), obligation( expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7))), obligation( expression( function( has), atom( relation( upper edge), variable( lap)), data( hem)))))","4.6.1.3 Change in metal roof pitches; Refer to Figure 44 for example of use. a) There shall be a minimum effective lap under roof cladding in accordance with Table 7, with a hem at upper edge.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.3.0.0.b.1,"4.0 Flashings 4.6.1.3 Change in metal roof pitches; Refer to Figure 44 for example of use. There shall be a minimum effective lap under roof cladding in accordance with Table 7, with a hem at upper edge.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( metal roof pitch change)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( over), atom( variable( cover)), data( roof cladding)), expression( function( is), atom( relation( type), variable( cover)), data( apron)))), then( obligation( expression( function( as per), atom( variable( cover)), data( nzbc e2as1 t7))))","4.6.1.3 Change in metal roof pitches; Refer to Figure 44 for example of use. There shall be a minimum effective lap under roof cladding in accordance with Table 7, with a hem at upper edge.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.4.0.0.a.1,"4.0 Flashings 4.6.1.4 Roof- or deck-to-wall junctions; Refer to Figure 7 for example of use. a) There shall be a total minimum upstand height of 110 mm, in accordance with Table 7, comprising a minimum: i) overlap cover of cladding to the flashing upstand of 75 mm, and ii) 35 mm clearance from bottom of the wall cladding to roof cladding or finished deck material.","if( and( or( expression( function( is), atom( relation( type), variable( flashing)), data( roof to wall junction)), expression( function( is), atom( relation( type), variable( flashing)), data( deck to wall junction))), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( flashing)), data( upstand)), expression( function( has), atom( variable( wall cladding)), data( bottom)))), then( and( obligation( expression( function( equal), atom( relation( total min height), variable( upstand)), data( baseunit( kind( metre), prefix( milli)), value( 110.0)))), obligation( expression( function( as per), atom( relation( total min height), variable( upstand)), data( nzbc e2as1 t7))), obligation( expression( function( include), atom( variable( overlap cover)), data( roof cladding))), obligation( expression( function( include), atom( variable( overlap cover)), data( upstand))), obligation( expression( function( greater than equal), atom( variable( overlap cover)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( from), atom( variable( clearance)), data( bottom))), or( obligation( expression( function( to), atom( variable( clearance)), data( roof cladding))), obligation( expression( function( to), atom( variable( clearance)), data( finished deck material)))), obligation( expression( function( less than equal), atom( variable( clearance)), data( baseunit( prefix( milli), kind( metre)), value( 35.0)))), and( obligation( expression( function( include), atom( relation( total min height), variable( upstand)), data( overlap cover))), obligation( expression( function( include), atom( relation( total min height), variable( upstand)), data( clearance))))))","4.0 Flashings 4.6.1.4 Roof- or deck-to-wall junctions; Refer to Figure 7 for example of use. a) There shall be a total minimum upstand height of 110 mm, in accordance with Table 7, comprising a minimum: i) overlap cover of cladding to the flashing upstand of 75 mm, and ii) 35 mm clearance from bottom of the wall cladding to roof cladding or finished deck material.","OrderDifficulties
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.5.0.0.a.1,"4.0 Flashings 4.6.1.5 Barges; Refer to Figure 47 for example of use. a) There shall be a minimum effective overlap to the barge board, excluding the drip edge to the flashing, in accordance with Table 7.","if( and( expression( function( is), atom( relation( type), variable( flashing)), data( barge)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)))), then( and( obligation( expression( function( include), atom( relation( overlap), variable( flashing)), data( barge board))), obligation( expression( function( is), atom( variable( overlap)), data( minimum effective))), obligation( expression( function( exclude), atom( relation( overlap), variable( flashing)), data( drip edge))), obligation( expression( function( as per), atom( variable( overlap)), data( nzbc e2as1 t7)))))","4.6.1.5 Barges; Refer to Figure 47 for example of use. a) There shall be a minimum effective overlap to the barge board, excluding the drip edge to the flashing, in accordance with Table 7.","Tacit
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.5.0.0.b.1,4.0 Flashings 4.6.1.5 Barges; Refer to Figure 47 for example of use. The apron cover over the roof cladding shall be as for Paragraph 4.6.1.1.,"if( and( expression( function( is), atom( relation( type), variable( flashing)), data( barge)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( is), atom( relation( type), variable( cover)), data( apron)), expression( function( over), atom( variable( cover)), data( roof cladding)))), then( obligation( expression( function( comply with), atom( variable( cover)), data( nzbc e2as1 4.6.1.1))))",4.6.1.5 Barges; Refer to Figure 47 for example of use. The apron cover over the roof cladding shall be as for Paragraph 4.6.1.1.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.6.0.0.a.1,4.0 Flashings 4.6.1.6 Window and door heads; Refer to Figures 71 and 81 for example of use. a) Slopes and covers of flashings at window and door heads shall comply with Table 7.,"if( and( or( expression( function( is), atom( relation( type), variable( flashing)), data( window head)), expression( function( is), atom( relation( type), variable( flashing)), data( door head))), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( flashing)), data( slope)), expression( function( has), atom( variable( flashing)), data( cover)))), then( and( obligation( expression( function( comply with), atom( variable( slope)), data( nzbc e2as1 t7))), obligation( expression( function( comply with), atom( variable( cover)), data( nzbc e2as1 t7)))))",4.6.1.6 Window and door heads; Refer to Figures 71 and 81 for example of use. a) Slopes and covers of flashings at window and door heads shall comply with Table 7.,"LearnToIgnoreFigure
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.6.0.0.b.1,4.0 Flashings 4.6.1.6 Window and door heads; Refer to Figures 71 and 81 for example of use. Overlap cover of cladding to the flashing upstand and clearance from the bottom of the cladding to top of head flashing slope shall be in accordance with Table 7.,"if( and( or( expression( function( is), atom( relation( type), variable( flashing)), data( window head)), expression( function( is), atom( relation( type), variable( flashing)), data( door head))), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( roof cladding)), data( bottom)), expression( function( has), atom( variable( flashing)), data( upstand)), expression( function( include), atom( variable( overlap cover)), data( roof cladding)), expression( function( include), atom( variable( overlap cover)), data( upstand)), expression( function( has), atom( relation( head), variable( flashing)), data( slope)), expression( function( has), atom( variable( slope)), data( top)), expression( function( from), atom( variable( clearance)), data( bottom)), expression( function( to), atom( variable( clearance)), data( top)))), then( and( obligation( expression( function( as per), atom( variable( overlap cover)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( variable( clearance)), data( nzbc e2as1 t7)))))",4.6.1.6 Window and door heads; Refer to Figures 71 and 81 for example of use. Overlap cover of cladding to the flashing upstand and clearance from the bottom of the cladding to top of head flashing slope shall be in accordance with Table 7.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.7.0.0.a.1,4.0 Flashings 4.6.1.7 Inter-storey junctions; Refer to Paragraph 9.1.9.4 and Figure 70. a) Minimum slopes and covers of flashings shall be in accordance with Table 7.,"if( and( expression( function( equal), atom( relation( type), variable( flashing)), data( inter storey junction)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( flashing)), data( minimum slope)), expression( function( has), atom( variable( flashing)), data( cover)))), then( and( obligation( expression( function( as per), atom( variable( minimum slope)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( variable( cover)), data( nzbc e2as1 t7)))))",4.6.1.7 Inter-storey junctions; Refer to Paragraph 9.1.9.4 and Figure 70. a) Minimum slopes and covers of flashings shall be in accordance with Table 7.,SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r4.6.1.7.0.0.b.1,"4.0 Flashings 4.6.1.7 Inter-storey junctions; Refer to Paragraph 9.1.9.4 and Figure 70. Overlap cover of the cladding to the flashing upstand, and clearance from the bottom of the cladding to the top of the slope of the head flashing, shall be in accordance with Table 7.","if( and( expression( function( equal), atom( relation( type), variable( flashing)), data( inter storey junction)), expression( function( to), atom( relation( overlap), variable( flashing)), data( roof cladding)), expression( function( has), atom( variable( roof cladding)), data( bottom)), expression( function( has), atom( variable( flashing)), data( upstand)), expression( function( include), atom( variable( overlap cover)), data( roof cladding)), expression( function( include), atom( variable( overlap cover)), data( upstand)), expression( function( has), atom( relation( head), variable( flashing)), data( slope)), expression( function( has), atom( variable( slope)), data( top)), expression( function( from), atom( variable( clearance)), data( bottom)), expression( function( to), atom( variable( clearance)), data( top)))), then( and( obligation( expression( function( as per), atom( variable( overlap cover)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( variable( clearance)), data( nzbc e2as1 t7)))))","4.6.1.7 Inter-storey junctions; Refer to Paragraph 9.1.9.4 and Figure 70. Overlap cover of the cladding to the flashing upstand, and clearance from the bottom of the cladding to the top of the slope of the head flashing, shall be in accordance with Table 7.",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.1.0.1.a.1,"All roof-to-wall junctions shall be made weathertight by using an apron flashing as outlined in Paragraph 4.6.1.1, and shown in Figure 7, that: a) Provides a minimum lap under the wall cladding of 75 mm in accordance with Table 7","if( expression( function( is), atom( variable( roof to wall junction)), data( true))), then( and( obligation( expression( function( is), atom( variable( roof to wall junction)), data( weathertight))), obligation( expression( function( by), atom( variable( weathertight)), data( flashing))), obligation( expression( function( is), atom( relation( type), variable( flashing)), data( apron))), obligation( expression( function( has), atom( variable( flashing)), data( lap))), obligation( expression( function( below), atom( variable( lap)), data( wall cladding))), obligation( expression( function( greater than equal), atom( relation( length), variable( lap)), data( baseunit( kind( metre), prefix( milli)), value( 75.0)))), obligation( expression( function( comply with), atom( variable( lap)), data( nzbc e2as1 t7)))))","All roof-to-wall junctions shall be made weathertight by using an apron flashing as outlined in Paragraph 4.6.1.1, and shown in Figure 7, that: a) Provides a minimum lap under the wall cladding of 75 mm in accordance with Table 7","LearnToIgnoreFigure
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.1.0.2,"Where the roof finishes within the length of an adjacent wall, a kick-out or stopend as detailed in Figure 8B shall be provided to direct water out from the wall cladding onto the roof cladding and gutter.","if( and( expression( function( adjacent), atom( variable( roof)), data( wall)), expression( function( within), atom( relation( finish), variable( roof)), data( length)), expression( function( has), atom( variable( wall)), data( length)))), then( and( or( obligation( expression( function( has), atom( variable( roof)), data( kick out))), obligation( expression( function( has), atom( variable( roof)), data( stopend)))), obligation( expression( function( is), atom( relation( purpose), variable( kick out)), data( water direction))), obligation( expression( function( is), atom( relation( purpose), variable( stopend)), data( water direction))), obligation( expression( function( from), atom( variable( water direction)), data( wall cladding))), obligation( expression( function( to), atom( variable( water direction)), data( roof cladding))), obligation( expression( function( to), atom( variable( water direction)), data( gutter)))))","Where the roof finishes within the length of an adjacent wall, a kick-out or stopend as detailed in Figure 8B shall be provided to direct water out from the wall cladding onto the roof cladding and gutter.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.2.0.1,"Gutters, barges and fascias: Where eaves gutters/spoutings, barges or fascias terminate against claddings, these shall be installed after the wall cladding, and after any protective finishes have been applied.","if( and( expression( function( include), atom( variable( eave)), data( gutter)), expression( function( include), atom( variable( eave)), data( barge)), expression( function( include), atom( variable( eave)), data( fascia)), expression( function( at), atom( relation( temination), variable( eave)), data( cladding)))), then( and( obligation( expression( function( after), atom( relation( installation), variable( eave)), data( wall cladding))), obligation( expression( function( after), atom( relation( installation), variable( eave)), data( protective finish)))))","Gutters, barges and fascias: Where eaves gutters/spoutings, barges or fascias terminate against claddings, these shall be installed after the wall cladding, and after any protective finishes have been applied.","NotEncodedParts
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.2.0.2,"Eaves gutters/spouting, barges and fascias shall terminate so as to leave a gap of 10 mm from the finished wall cladding as shown in Figure 8B.","if( and( expression( function( include), atom( variable( eave)), data( gutter)), expression( function( include), atom( variable( eave)), data( barge)), expression( function( include), atom( variable( eave)), data( fascia)))), then( and( obligation( expression( function( include), atom( relation( termination), variable( eave)), data( gap))), obligation( expression( function( from), atom( variable( gap)), data( wall cladding))), obligation( expression( function( equal), atom( relation( size), variable( gap)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))))))","Eaves gutters/spouting, barges and fascias shall terminate so as to leave a gap of 10 mm from the finished wall cladding as shown in Figure 8B.",Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.3.0.1,"Eaves shall be enclosed by installing soffit linings direct fixed to framing and comprising minimum 4.5 mm fibre cement sheet, or 7 mm H3 plywood, with joints, fixings and finishes as shown in Paragraphs 9.7 and 9.8.","if( expression( function( is), atom( variable( eave)), data( true))), then( and( obligation( expression( function( is), atom( relation( enclosing), variable( eave)), data( soffit lining))), obligation( expression( function( to), atom( relation( fixture), variable( soffit lining)), data( framing))), or( obligation( expression( function( include), atom( variable( soffit lining)), data( fibre cement sheet))), obligation( expression( function( include), atom( variable( soffit lining)), data( h3 plywood)))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( fibre cement sheet)), data( baseunit( kind( metre), prefix( milli)), value( 4.5)))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( h3 plywood)), data( baseunit( prefix( milli), kind( metre)), value( 7.0)))), obligation( expression( function( has), atom( variable( fibre cement sheet)), data( joint))), obligation( expression( function( has), atom( variable( fibre cement sheet)), data( fixing))), obligation( expression( function( has), atom( variable( fibre cement sheet)), data( finish))), and( obligation( expression( function( has), atom( variable( h3 plywood)), data( joint))), obligation( expression( function( has), atom( variable( h3 plywood)), data( fixing))), obligation( expression( function( has), atom( variable( h3 plywood)), data( finish)))), and( obligation( expression( function( comply with), atom( variable( soffit lining)), data( 9.7))), obligation( expression( function( comply with), atom( variable( soffit lining)), data( 9.8))))))","Eaves shall be enclosed by installing soffit linings direct fixed to framing and comprising minimum 4.5 mm fibre cement sheet, or 7 mm H3 plywood, with joints, fixings and finishes as shown in Paragraphs 9.7 and 9.8.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r5.3.0.2,"Soffit linings shall be finished to fascias, barges and wall claddings as outlined in Figure 8A generally, or Figure 114 for flush finished fibre cement. Wall underlays shall not be required behind soffit linings.","if( expression( function( is), atom( variable( soffit lining)), data( true))), then( and( obligation( expression( function( to), atom( relation( finish), variable( soffit lining)), data( fascia))), obligation( expression( function( to), atom( relation( finish), variable( soffit lining)), data( barge))), obligation( expression( function( to), atom( relation( finish), variable( soffit lining)), data( wall cladding))), permission( not( expression( function( behind), atom( variable( wall underlay)), data( soffit lining))))))","Soffit linings shall be finished to fascias, barges and wall claddings as outlined in Figure 8A generally, or Figure 114 for flush finished fibre cement. Wall underlays shall not be required behind soffit linings.","Ignore
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.0.0.1,Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3.,"if( and( expression( function( is), atom( variable( parapet)), data( true)), not( expression( function( is), atom( relation( type), variable( cladding)), data( corrugated steel))), expression( function( is), atom( variable( corrugated steel)), data( vertical)))), then( and( obligation( expression( function( has), atom( variable( parapet)), data( drained cavity))), obligation( expression( function( for), atom( variable( drained cavity)), data( cladding)))))",Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3.,Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.2.0.1,"Parapets shall be constructed as shown in Figure 10, and shall comply with the following requirements: a) Timber for framing and cavity battens shall comply with B2/AS1, b) Sloped packers under cappings shall be polystyrene or timber treated to B2/AS1, or minimum 9 mm H3 plywood on packers, and c) Framing shall be fully enclosed with wall underlay or roof underlay, in accordance with Table 23 for the specific cladding. d) claddings shall be installed over a cavity in accordance with Paragraph 9.1.8.","if( and( expression( function( has), atom( variable( parapet)), data( capping)), expression( function( for), atom( variable( timber)), data( framing)), expression( function( for), atom( variable( timber)), data( cavity batten)))), then( and( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))), obligation( expression( function( below), atom( variable( sloped packer)), data( capping))), or( obligation( expression( function( is), atom( relation( material), variable( sloped packer)), data( polystyrene))), obligation( expression( function( is), atom( relation( material), variable( sloped packer)), data( timber))), obligation( expression( function( is), atom( relation( material), variable( sloped packer)), data( h3 plywood)))), obligation( expression( function( greater than equal), atom( relation( thickness), variable( h3 plywood)), data( baseunit( prefix( milli), kind( metre)), value( 9.0)))), or( obligation( expression( function( is), atom( relation( full enclosing), variable( framing)), data( wall underlay))), obligation( expression( function( is), atom( relation( full enclosing), variable( framing)), data( roof underlay)))), obligation( expression( function( comply with), atom( variable( framing)), data( nzbc e2as1 t23))), obligation( expression( function( over), atom( relation( installation), variable( cladding)), data( cavity))), obligation( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1 9.1.8)))))","Parapets shall be constructed as shown in Figure 10, and shall comply with the following requirements: a) Timber for framing and cavity battens shall comply with B2/AS1, b) Sloped packers under cappings shall be polystyrene or timber treated to B2/AS1, or minimum 9 mm H3 plywood on packers, and c) Framing shall be fully enclosed with wall underlay or roof underlay, in accordance with Table 23 for the specific cladding. d) claddings shall be installed over a cavity in accordance with Paragraph 9.1.8.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.3.0.1,"Parapets shall be capped with metal, butyl or EPDM membrane. Cappings shall comply with the requirements of Paragraph 4.0.","if( expression( function( has), atom( variable( parapet)), data( capping))), then( and( or( obligation( expression( function( is), atom( relation( material), variable( capping)), data( metal))), obligation( expression( function( is), atom( relation( material), variable( capping)), data( butyl))), obligation( expression( function( is), atom( relation( material), variable( capping)), data( epdm membrane)))), obligation( expression( function( comply with), atom( variable( capping)), data( 4)))))","Parapets shall be capped with metal, butyl or EPDM membrane. Cappings shall comply with the requirements of Paragraph 4.0.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.4.0.1,"Metal cappings installed over parapets and enclosed balustrades, shall be as outlined in Paragraphs 6.0 and 7.4, and comply with the following requirements: a) Tops of cappings shall be free of any penetrations, b) Slope of top shall be 5° (1:12) minimum, c) The cover at the sides of the capping shall be in accordance with Table 7, d) All cappings shall have drip edges. The details shown in Figure 5 are acceptable minimum drip edges for parapets, e) Cappings shall be separated from underlying timber by roof underlay as shown in Figure 10","if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), expression( function( over), atom( relation( installation), variable( capping)), data( parapet)), expression( function( over), atom( relation( installation), variable( capping)), data( balustrade)), expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( define), expression( function( top of), atom( variable( capping))), data( x0)), expression( function( has), atom( relation( side), variable( capping)), data( cover)))), then( and( obligation( expression( function( comply with), atom( variable( capping)), data( rule))), and( obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 6.0))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 7.4)))), prohibition( expression( function( has), atom( variable( x0)), data( penetration))), obligation( expression( function( greater than equal), atom( relation( slope), variable( x0)), data( baseunit( kind( angle degree)), value( 5.0)))), obligation( expression( function( comply with), atom( variable( cover)), data( t7))), obligation( expression( function( has), atom( variable( capping)), data( drip edge))), obligation( expression( function( is), atom( variable( roof underlay)), data( separation))), and( obligation( expression( function( in between), atom( variable( separation)), data( capping))), obligation( expression( function( in between), atom( variable( separation)), data( timber)))), obligation( expression( function( below), atom( variable( timber)), data( capping)))))","Metal cappings installed over parapets and enclosed balustrades, shall be as outlined in Paragraphs 6.0 and 7.4, and comply with the following requirements: a) Tops of cappings shall be free of any penetrations, b) Slope of top shall be 5° (1:12) minimum, c) The cover at the sides of the capping shall be in accordance with Table 7, d) All cappings shall have drip edges. The details shown in Figure 5 are acceptable minimum drip edges for parapets, e) Cappings shall be separated from underlying timber by roof underlay as shown in Figure 10",SomeDetailsNotEncoded
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.4.0.2,"Metal cappings installed over parapets and enclosed balustrades. h) Expansion joints shall be provided for joined cappings with a combined length exceeding: i) 12 metres for light coloured steel and stainless steel, 8 metres for dark coloured steel ii) 8 metres for copper iii) 8 metres for aluminium.","if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), expression( function( over), atom( relation( installation), variable( capping)), data( parapet)), expression( function( over), atom( relation( installation), variable( capping)), data( balustrade)), expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( has), atom( variable( capping)), data( join)))), then( and( obligation( expression( function( for), atom( variable( expansion joint)), data( capping))), or( and( or( obligation( expression( function( is), atom( relation( material), variable( capping)), data( light coloured steel))), obligation( expression( function( is), atom( relation( material), variable( capping)), data( stainless steel)))), obligation( expression( function( greater than equal), atom( relation( combined length), variable( expansion joint)), data( baseunit( kind( metre)), value( 12.0))))), and( or( obligation( expression( function( is), atom( relation( material), variable( capping)), data( dark coloured steel))), obligation( expression( function( is), atom( relation( material), variable( capping)), data( copper))), obligation( expression( function( is), atom( relation( material), variable( capping)), data( aluminium)))), obligation( expression( function( greater than equal), atom( relation( combined length), variable( expansion joint)), data( baseunit( kind( metre)), value( 8.0))))))))","Metal cappings installed over parapets and enclosed balustrades. h) Expansion joints shall be provided for joined cappings with a combined length exceeding: i) 12 metres for light coloured steel and stainless steel, 8 metres for dark coloured steel ii) 8 metres for copper iii) 8 metres for aluminium.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.4.0.3,"Metal cappings installed over parapets and enclosed balustrades. i) Where both ends of a capping are constrained, allowance shall be made for expansion","if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), expression( function( over), atom( relation( installation), variable( capping)), data( parapet)), expression( function( over), atom( relation( installation), variable( capping)), data( balustrade)), expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( is), atom( relation( end), variable( capping)), data( constrained)))), then( obligation( expression( function( has), atom( variable( capping)), data( expansion joint))))","Metal cappings installed over parapets and enclosed balustrades. i) Where both ends of a capping are constrained, allowance shall be made for expansion",DomainKnowledge
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.5.0.1.b.1,Butyl rubber and EPDM cappings shall comply with the following requirements: b) Sides of membrane cappings shall overlap the wall claddings as outlined in Table 7,"if( and( or( expression( function( is), atom( relation( material), variable( capping)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( capping)), data( epdm))), expression( function( define), atom( relation( side), variable( capping)), data( x0)), expression( function( is), atom( relation( application), variable( cladding)), data( wall)))), then( and( obligation( expression( function( to), atom( relation( overlap), variable( x0)), data( cladding))), obligation( expression( function( as per), atom( variable( x0)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t7)))))",Butyl rubber and EPDM cappings shall comply with the following requirements: b) Sides of membrane cappings shall overlap the wall claddings as outlined in Table 7,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r6.6.0.1,"Cappings formed by using stucco, EIFS and flush-finished fibre cement materials shall not be used for parapets, (but may be used for enclosed balustrades as described in Paragraph 7.4).","if( or( expression( function( is), atom( relation( material), variable( capping)), data( stucco)), expression( function( is), atom( relation( material), variable( capping)), data( eifs)), expression( function( is), atom( relation( material), variable( capping)), data( flush finished fibre cement)))), then( and( prohibition( expression( function( include), atom( relation( usage), variable( capping)), data( parapet))), permission( expression( function( include), atom( relation( usage), variable( capping)), data( balustrade))), expression( function( is), atom( variable( balustrade)), data( enclosed))))","Cappings formed by using stucco, EIFS and flush-finished fibre cement materials shall not be used for parapets, (but may be used for enclosed balustrades as described in Paragraph 7.4).",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.0.0.1,"Timber used to construct decks, enclosed balustrades and other attachments such as pergolas shall comply with B2/AS1.","if( and( or( expression( function( is), atom( variable( construction)), data( deck)), expression( function( is), atom( variable( construction)), data( balustrade)), expression( function( is), atom( variable( construction)), data( pergolas))), expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( is), atom( variable( balustrade)), data( enclosed)))), then( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))))","Timber used to construct decks, enclosed balustrades and other attachments such as pergolas shall comply with B2/AS1.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.1.1.0.1.a.1,The level of the upper surface of the slatted deck: a) Shall be a minimum of 50 mm below the threshold level for cantilevered decks as shown in Figures 14(b) and 16,"if( and( expression( function( is), atom( variable( deck)), data( slatted)), expression( function( is), atom( variable( deck)), data( cantilevered)), expression( function( define), atom( relation( upper surface level), variable( deck)), data( x0)), expression( function( define), atom( relation( threshold level), variable( deck)), data( x1)))), then( and( obligation( expression( function( below), atom( variable( x0)), data( x1))), obligation( expression( function( from), atom( relation( measurement), variable( height)), data( x0))), obligation( expression( function( to), atom( relation( measurement), variable( height)), data( x1))), obligation( expression( function( greater than equal), atom( variable( height)), data( baseunit( kind( metre), prefix( milli)), value( 50.0))))))",The level of the upper surface of the slatted deck: a) Shall be a minimum of 50 mm below the threshold level for cantilevered decks as shown in Figures 14(b) and 16,"DomainKnowledge
Detailed
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r7.1.1.0.2,"For slatted decks, a minimum gap of 12 mm shall be provided between the exterior wall and the adjacent decking slat.","if( and( expression( function( is), atom( variable( deck)), data( slatted)), expression( function( is), atom( relation( type), variable( wall)), data( exterior)), expression( function( adjacent), atom( variable( decking slat)), data( wall)))), then( and( obligation( expression( function( in between), atom( variable( gap)), data( wall))), obligation( expression( function( in between), atom( variable( gap)), data( decking slat))), obligation( expression( function( greater than equal), atom( variable( gap)), data( baseunit( prefix( milli), kind( metre)), value( 12.0))))))","For slatted decks, a minimum gap of 12 mm shall be provided between the exterior wall and the adjacent decking slat.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.3.0.1,8.0 Roof Claddings; Maintenance of claddings shall be carried out as necessary to achieve the expected durability of the materials - refer to Paragraph 2.5.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( has), atom( relation( material), variable( cladding)), data( durability)))), then( obligation( expression( function( is), atom( relation( requirement), variable( cladding)), data( maintenance))))",Maintenance of claddings shall be carried out as necessary to achieve the expected durability of the materials - refer to Paragraph 2.5.,Abstract
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.5.1.0.1,"Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports","if( and( expression( function( is), atom( relation( application), variable( underlay)), data( roof)), not( expression( function( is), atom( variable( underlay)), data( sagged))))), then( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), obligation( expression( function( has), atom( variable( underlay)), data( support))), obligation( expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant)))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), obligation( expression( function( is), atom( variable( underlay)), data( self supporting))), obligation( expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))), obligation( expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent support))))))","Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.1.b.1,"b) If a gutter depth is reduced to allow entry of a valley gutter, the reduced depth must be used to calculate the capacity of the gutter","if( and( expression( function( has), atom( relation( depth), variable( gutter)), data( reduction)), expression( function( is), atom( relation( purpose), variable( reduction)), data( entry)), expression( function( is), atom( relation( object), variable( entry)), data( valley gutter)), expression( function( define), expression( function( min), atom( relation( depth), variable( gutter))), data( x0)))), then( and( obligation( expression( function( define), atom( relation( capacity), variable( gutter)), data( x1))), obligation( expression( function( include), atom( relation( calculation), variable( x1)), data( x0)))))","b) If a gutter depth is reduced to allow entry of a valley gutter, the reduced depth must be used to calculate the capacity of the gutter",Complex
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.1.c.1,"c) For internal, valley, and hidden gutters, have no fixings in gutter bottoms or sides, and be continuously supported on H1.2 minimum treated timber gutter boards or H3 ply which is separated from metal by roof underlay strip.","if( and( expression( function( has), atom( variable( roof)), data( gutter)), expression( function( is), atom( relation( application), variable( underlay)), data( roof)), or( expression( function( is), atom( relation( type), variable( gutter)), data( internal)), expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( is), atom( relation( type), variable( gutter)), data( hidden))))), then( and( obligation( not( expression( function( has), atom( relation( bottom), variable( gutter)), data( fixing)))), obligation( not( expression( function( has), atom( relation( side), variable( gutter)), data( fixing)))), or( and( obligation( expression( function( on), atom( relation( support), variable( gutter)), data( board))), obligation( expression( function( is), atom( relation( material), variable( board)), data( timber))), obligation( expression( function( is), atom( relation( treatment class), variable( timber)), data( h1.2))), obligation( expression( function( in between), atom( relation( separation), variable( underlay)), data( metal))), obligation( expression( function( in between), atom( relation( separation), variable( underlay)), data( board)))), and( obligation( expression( function( on), atom( relation( support), variable( gutter)), data( ply))), obligation( expression( function( is), atom( relation( treatment class), variable( ply)), data( h3))), and( obligation( expression( function( in between), atom( relation( separation), variable( underlay)), data( metal))), obligation( expression( function( in between), atom( relation( separation), variable( underlay)), data( ply))))))))","c) For internal, valley, and hidden gutters, have no fixings in gutter bottoms or sides, and be continuously supported on H1.2 minimum treated timber gutter boards or H3 ply which is separated from metal by roof underlay strip.","DomainKnowledge
OrderDifficulties
SomeDetailsNotEncoded"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.2,"d) Eaves gutters/spoutings shall: Be to any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 e) Have a minimum cross sectional area of 2500 mm2 f) Be designed to overflow water to the outside.","if( expression( function( is), atom( relation( type), variable( gutter)), data( eave))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.1))), or( obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.9)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.10)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.11))))), obligation( expression( function( greater than equal), atom( relation( cross sectional area), variable( gutter)), data( baseunit( prefix( milli), exponent( 2.0), kind( metre)), value( 2500.0)))), obligation( expression( function( has), atom( relation( design), variable( gutter)), data( support))), obligation( expression( function( for), atom( variable( support)), data( water overflow))), obligation( expression( function( is), atom( relation( direction), variable( water overflow)), data( outside)))))","d) Eaves gutters/spoutings shall: Be to any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 e) Have a minimum cross sectional area of 2500 mm2 f) Be designed to overflow water to the outside.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.3,"Downpipes shall: g) Be formed from any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 h) Upper roofs shall drain via downpipes directly to ground level where possible, or i) Where discharging to a lower roof, be fitted with a spreader as detailed in Figure 20 j) Have a maximum catchment area of 25 m2 if discharging on to a lower roof area","if( expression( function( is), atom( variable( downpipe)), data( true))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( downpipe)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.1))), or( obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.9)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.10)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.11))))), obligation( expression( function( by), atom( relation( drainage), variable( upper roof)), data( downpipe))), or( obligation( expression( function( to), atom( relation( drainage), variable( upper roof)), data( ground level))), and( obligation( expression( function( to), atom( relation( drainage), variable( upper roof)), data( lower roof))), obligation( expression( function( to), atom( relation( fixture), variable( downpipe)), data( spreader))), obligation( expression( function( less than equal), atom( relation( catchment area), variable( downpipe)), data( baseunit( exponent( 2.0), kind( metre)), value( 25.0))))))))","Downpipes shall: g) Be formed from any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 h) Upper roofs shall drain via downpipes directly to ground level where possible, or i) Where discharging to a lower roof, be fitted with a spreader as detailed in Figure 20 j) Have a maximum catchment area of 25 m2 if discharging on to a lower roof area","ComplexWording
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.0.4,"Drainage of roof water; Spreaders shall: k) Be to any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 l) Be to Figure 20 and not be used on masonry tile roofs unless a roof underlay is installed m) Discharge directed away from roofing laps and clear of roof penetrations.","if( expression( function( include), atom( relation( drainage), variable( roof)), data( spreader))), then( and( obligation( expression( function( comply with), atom( relation( material), variable( spreader)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.1))), or( obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.9)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.10)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.11))))), or( prohibition( expression( function( is), atom( relation( cladding system), variable( roof)), data( masonry tile))), and( expression( function( is), atom( relation( underlay), variable( roof)), data( installed)), permission( expression( function( is), atom( relation( cladding system), variable( roof)), data( masonry tile))))), expression( function( has), atom( variable( roof)), data( overlap)), expression( function( has), atom( variable( roof)), data( penetration)), obligation( expression( function( away from), atom( relation( discharge), variable( spreader)), data( overlap))), obligation( not( expression( function( has), atom( relation( discharge), variable( spreader)), data( penetration))))))","Drainage of roof water; Spreaders shall: k) Be to any of the materials outlined for flashings in Paragraph 4.1 except 4.3.9, 4.3.10 and 4.3.11 l) Be to Figure 20 and not be used on masonry tile roofs unless a roof underlay is installed m) Discharge directed away from roofing laps and clear of roof penetrations.",ConditionsInThen
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.1.0.0.d.1,"8.1.6.1 Internal gutters; Internal gutters shall: d) Be constructed to at least the minimum dimensions shown in Figure 52, or the capacity calculated to E1/AS1 plus an additional freeboard depth of 20 mm minimum.","if( expression( function( is), atom( relation( type), variable( gutter)), data( internal))), then( or( obligation( expression( function( as per), expression( function( min), atom( relation( dimension), variable( gutter))), data( nzbc e2as1 f52))), and( obligation( expression( function( define), atom( relation( capacity), variable( gutter)), data( x0))), obligation( expression( function( as per), atom( relation( calculation), variable( x0)), data( nzbc e1as1))), obligation( expression( function( define), atom( relation( depth), variable( freeboard)), data( x1))), obligation( expression( function( greater than equal), atom( variable( x1)), data( baseunit( kind( metre), prefix( milli)), value( 20.0)))), obligation( expression( function( equal), atom( relation( capacity), variable( gutter)), data( x0 + x1))))))","8.1.6.1 Internal gutters; Internal gutters shall: d) Be constructed to at least the minimum dimensions shown in Figure 52, or the capacity calculated to E1/AS1 plus an additional freeboard depth of 20 mm minimum.",Complex
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.2.0.1,"Valley gutters and hidden gutters shall be constructed as shown in Figures 50 and 51 for the applicable roof cladding (except for membrane roofing) and: a) Not change direction in plan b) Have a minimum underlap to roof cladding as specified in Figures 27, 37, 50, and 51 for the relevant roof cladding c) Be formed from any of the materials outlined for flashings in Paragraph 4.3 except 4.3.10 and 4.3.11 d) Be fixed at upper ends only, and be secured with a purpose-made clip system for the remaining length to enable expansion/ contraction along the length of the gutter e) Discharge into an internal gutter or eaves gutter/spouting.","if( and( expression( function( has), atom( variable( roof)), data( cladding)), not( expression( function( is), atom( relation( type), variable( roof)), data( membrane))), or( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( is), atom( relation( type), variable( gutter)), data( hidden))))), then( and( obligation( expression( function( as per), atom( relation( construction), variable( gutter)), data( f50))), obligation( expression( function( as per), atom( relation( construction), variable( gutter)), data( f51))), obligation( not( expression( function( is), atom( relation( change in direction), variable( gutter)), data( in plan)))), obligation( expression( function( to), atom( relation( underlap), variable( gutter)), data( cladding))), obligation( expression( function( is), atom( relation( underlap), variable( gutter)), data( minimum))), and( obligation( expression( function( as per), atom( relation( underlap), variable( gutter)), data( f27))), obligation( expression( function( as per), atom( relation( underlap), variable( gutter)), data( f37))), obligation( expression( function( as per), atom( relation( underlap), variable( gutter)), data( f50))), obligation( expression( function( as per), atom( relation( underlap), variable( gutter)), data( f51)))), obligation( expression( function( comply with), atom( relation( material), variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3))), or( obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.10)))), obligation( not( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3.11))))), obligation( expression( function( is), atom( relation( upper end), variable( gutter)), data( fixed))), obligation( expression( function( is), atom( variable( gutter)), data( secured))), obligation( expression( function( by), atom( variable( secured)), data( clip system))), obligation( expression( function( is), atom( variable( clip system)), data( purpose made))), obligation( expression( function( by), atom( variable( secured)), data( clip system))), and( obligation( expression( function( include), atom( relation( allowance), variable( clip system)), data( contraction))), obligation( expression( function( include), atom( relation( allowance), variable( clip system)), data( expansion)))), or( obligation( expression( function( into), atom( relation( discharge), variable( gutter)), data( internal gutter))), obligation( expression( function( into), atom( relation( discharge), variable( gutter)), data( eave gutter))))))","Valley gutters and hidden gutters shall be constructed as shown in Figures 50 and 51 for the applicable roof cladding (except for membrane roofing) and: a) Not change direction in plan b) Have a minimum underlap to roof cladding as specified in Figures 27, 37, 50, and 51 for the relevant roof cladding c) Be formed from any of the materials outlined for flashings in Paragraph 4.3 except 4.3.10 and 4.3.11 d) Be fixed at upper ends only, and be secured with a purpose-made clip system for the remaining length to enable expansion/ contraction along the length of the gutter e) Discharge into an internal gutter or eaves gutter/spouting.","NotConnectedVariables
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.2.0.3,In addition f) Have minimum slopes to Table 8 for valley gutters h) Spreaders not discharge directly into a valley gutter,"if( expression( function( is), atom( relation( type), variable( gutter)), data( valley))), then( and( obligation( expression( function( as per), atom( relation( slope), variable( gutter)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t8))), prohibition( expression( function( is), atom( relation( discharge), variable( spreader)), data( direct))), prohibition( expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))))",In addition f) Have minimum slopes to Table 8 for valley gutters h) Spreaders not discharge directly into a valley gutter,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.7.0.2.a.1,The edge of roofing penetrations over 200 mm wide shall be supported in either direction with additional framing as shown in Figure 21,"if( and( expression( function( is), atom( relation( application), variable( penetration)), data( roof)), expression( function( greater than), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( has), atom( variable( penetration)), data( edge)))), then( obligation( expression( function( is), atom( relation( support), variable( edge)), data( framing))))",The edge of roofing penetrations over 200 mm wide shall be supported in either direction with additional framing as shown in Figure 21,Ignore
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.4.0.1,"Materials for flashings, gutters and fixings shall be in accordance with Paragraph 4.0, and: a) Be selected from Table 20 to minimise corrosion, and b) Be compatible with mortar and bedding in accordance with Table 21 and Table 22.","if( and( expression( function( for), atom( variable( material)), data( flashing)), expression( function( for), atom( variable( material)), data( gutter)), expression( function( for), atom( variable( material)), data( fixing)))), then( and( obligation( expression( function( comply with), atom( variable( material)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4))), obligation( expression( function( as per), atom( variable( material)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( include), atom( relation( compatibility), variable( material)), data( mortar))), obligation( expression( function( include), atom( relation( compatibility), variable( material)), data( bedding))), obligation( expression( function( as per), atom( variable( material)), data( table))), and( obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22))))))","Materials for flashings, gutters and fixings shall be in accordance with Paragraph 4.0, and: a) Be selected from Table 20 to minimise corrosion, and b) Be compatible with mortar and bedding in accordance with Table 21 and Table 22.",SomeDetailsNotEncoded
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.2.6.0.1,"8.0 Roof claddings 8.2 Masonry Tiles; Hips, ridges, valleys and barges shall be made weathertight by using flashings and seals as shown in Figure 23 to Figure 28.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry tile)), expression( function( has), atom( variable( roof)), data( component)), or( expression( function( is), atom( variable( component)), data( hip)), expression( function( is), atom( variable( component)), data( ridge)), expression( function( is), atom( variable( component)), data( valley)), expression( function( is), atom( variable( component)), data( barge))))), then( and( obligation( expression( function( is), atom( variable( component)), data( weathertight))), obligation( expression( function( by), atom( relation( weathertightness), variable( component)), data( flashing))), obligation( expression( function( by), atom( relation( weathertightness), variable( component)), data( seal)))))","8.0 Roof claddings; Hips, ridges, valleys and barges shall be made weathertight by using flashings and seals as shown in Figure 23 to Figure 28.","DomainKnowledge
Ignore
TODO"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.4.2.0.1,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; Steel for the manufacture of pressed metal tile and flashing systems shall: a) have a base metal thickness (BMT) of 0.39 mm minimum, b) be grade G300 or G250, c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( for), atom( variable( flashing)), data( cladding)), expression( function( is), atom( relation( material), variable( metal tile)), data( steel)), expression( function( is), atom( relation( material), variable( flashing)), data( steel)))), then( and( obligation( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.39)))), or( obligation( expression( function( is), atom( relation( grade), variable( steel)), data( g300))), obligation( expression( function( is), atom( relation( grade), variable( steel)), data( g250)))), obligation( expression( function( for), atom( relation( selection), variable( steel)), data( corrosion protection))), obligation( expression( function( has), atom( relation( selection), variable( steel)), data( dependency))), obligation( expression( function( is), atom( variable( dependency)), data( intended exposure))), obligation( expression( function( as per), atom( variable( intended exposure)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20)))))","Steel for the manufacture of pressed metal tile and flashing systems shall: a) have a base metal thickness (BMT) of 0.39 mm minimum, b) be grade G300 or G250, c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.5.0.2,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; The minimum roof pitches for metal tiles where rafter length does not exceed 12 m shall be limited to: a) 12° (1:4.75) for profiles resembling standard profiles, and b) 15° (1:3.75) for profiles resembling shingle or shake profiles.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( less than equal), atom( relation( rafter length), variable( roof)), data( baseunit( kind( metre)), value( 12.0))))), then( or( and( obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 12.0)))), obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( standard profile)))), and( obligation( expression( function( greater than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 15.0)))), or( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( shingle profile))), obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( shake profile)))))))","The minimum roof pitches for metal tiles where rafter length does not exceed 12 m shall be limited to: a) 12¬∞ (1:4.75) for profiles resembling standard profiles, and b) 15¬∞ (1:3.75) for profiles resembling shingle or shake profiles.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.7.0.1.a.1,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; Pressed metal tiles shall be fixed as shown in Figure 33, with: a) 50 x 2.8 mm hot-dipped galvanized painted flat-head annular-grooved nails.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)))), then( and( obligation( expression( function( by), atom( relation( fixture), variable( metal tile)), data( nail))), obligation( expression( function( is), atom( relation( type), variable( nail)), data( annular grooved))), obligation( expression( function( is), atom( variable( nail)), data( galvanised))), obligation( expression( function( is), atom( variable( nail)), data( painted))), obligation( expression( function( is), atom( variable( nail)), data( flat head))), obligation( expression( function( is), atom( relation( form), variable( galvanised)), data( hot dipped))), obligation( expression( function( is), atom( relation( dimension), variable( nail)), data( 50 x 2.8 mm)))))","Pressed metal tiles shall be fixed as shown in Figure 33, with: a) 50 x 2.8 mm hot-dipped galvanized painted flat-head annular-grooved nails.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.3.8.0.2,"8.0 Roof Claddings 8.3 Pressed Metal Tiles; Metal flashings are generally supplied by the metal tile manufacturer, and shall comply with Paragraph 8.3.4.2 and Table 7, unless specifically shown otherwise in the details.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( metal tile)), expression( function( is), atom( variable( metal tile)), data( pressed)), expression( function( for), atom( variable( flashing)), data( cladding)), expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( metal tile)), data( manufacturer)))), then( and( expression( function( include), atom( relation( supply), variable( manufacturer)), data( flashing)), obligation( expression( function( comply with), atom( variable( flashing)), data( rule))), obligation( expression( function( comply with), atom( variable( flashing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.3.4.2))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t7)))))","Metal flashings are generally supplied by the metal tile manufacturer, and shall comply with Paragraph 8.3.4.2 and Table 7, unless specifically shown otherwise in the details.",ExceptionNotTranslated
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.1.0.1,"This Acceptable Solution is limited to the following types of profiled metal roof cladding: a) Profiled as outlined in Paragraph 8.4.4, b) Valley gutters that do not change direction in plan, c) Not curved, and d) With sheets no more than 18 metres long.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( and( expression( function( comply with), atom( variable( profiled metal)), data( rule)), expression( function( equal), atom( relation( key), variable( rule)), data( 8.4.4))), and( expression( function( has), atom( variable( roof)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( valley)), not( expression( function( is), atom( relation( change in direction), variable( gutter)), data( in plan)))), not( expression( function( is), atom( variable( profiled metal)), data( curved))), expression( function( less than equal), atom( relation( length), variable( profiled metal)), data( baseunit( kind( metre)), value( 18.0)))))), then( permission( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))","This Acceptable Solution is limited to the following types of profiled metal roof cladding: a) Profiled as outlined in Paragraph 8.4.4, b) Valley gutters that do not change direction in plan, c) Not curved, and d) With sheets no more than 18 metres long.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.3.1.0.1,"8.4 Profiled Metal Roof Cladding; Metal roof cladding and flashings shall be selected according to the exposure conditions in Table 20 as defined in: a) NZS 3604, or b) AS/NZS 2728.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( cladding)))), then( and( obligation( expression( function( has), atom( relation( material), variable( cladding)), data( dependency))), obligation( expression( function( has), atom( relation( material), variable( flashing)), data( dependency))), obligation( expression( function( is), atom( variable( dependency)), data( exposure condition))), obligation( expression( function( as per), atom( variable( exposure condition)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), or( obligation( expression( function( in), atom( variable( table)), data( nzs 3604))), obligation( expression( function( in), atom( variable( table)), data( asnzs 2728))))))","8.4 Profiled Metal Roof Cladding; Metal roof cladding and flashings shall be selected according to the exposure conditions in Table 20 as defined in: a) NZS 3604, or b) AS/NZS 2728.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.3.2.0.1,"8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( cladding)), data( steel)))), then( and( obligation( expression( function( greater than equal), atom( relation( bmt), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4)))), or( and( obligation( not( expression( function( is), atom( relation( profile), variable( cladding)), data( rolled)))), obligation( not( expression( function( is), atom( relation( profile), variable( cladding)), data( crimped)))), obligation( not( expression( function( is), atom( relation( profile), variable( cladding)), data( trough)))), obligation( expression( function( is), atom( relation( grade), variable( steel)), data( g550)))), and( or( obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( rolled))), obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( crimped))), obligation( expression( function( is), atom( relation( profile), variable( cladding)), data( trough)))), or( obligation( expression( function( is), atom( relation( grade), variable( steel)), data( g550))), obligation( expression( function( is), atom( relation( grade), variable( steel)), data( g300)))))), obligation( expression( function( has), atom( relation( material), variable( cladding)), data( corrosion protection))), obligation( expression( function( is), atom( relation( dependency), variable( corrosion protection)), data( exposure zone))), obligation( expression( function( as per), atom( variable( exposure zone)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20)))))","8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.",Complex
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.8.1.0.1,"8.4 Profiled Metal Roof Cladding; Fixings shall: a) Be fixed through crests, b) Penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, c) Include sealing washers of: i) neoprene (having a carbon black content of 15% or less by weight)","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( cladding)), data( fixing)), expression( function( has), atom( relation( profile), variable( cladding)), data( crest)))), then( and( obligation( expression( function( into), atom( variable( fixing)), data( crest))), obligation( expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin))), or( and( obligation( expression( function( is), atom( variable( fixing)), data( nail))), obligation( expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 40.0))))), and( obligation( expression( function( is), atom( variable( fixing)), data( screw))), obligation( expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 30.0)))))), obligation( expression( function( include), atom( variable( fixing)), data( sealing washer))), obligation( expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene))), obligation( expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))","Fixings shall: a) Be fixed through crests, b) Penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, c) Include sealing washers of: i) neoprene (having a carbon black content of 15% or less by weight)",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.9.0.1,"8.4 Profiled Metal Roof Cladding; Clip fixings for trough profiles and spans as shown in Table 13 shall be as shown in Figure 40, and shall: a) Have a minimum BMT of 0.9 mm b) Be a minimum width of 30 mm c) Be made from a material compatible with the cladding, refer to Tables 20 and 21 d) Have clips fastened with a minimum of two 10-gauge by 30 mm waferhead hot-dipped galvanised screws which comply with Class 3 of AS 3566: Part 2.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( profile), variable( cladding)), data( trough)), expression( function( has), atom( variable( cladding)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( clip)))), then( and( obligation( expression( function( greater than equal), atom( relation( bmt), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 0.9)))), obligation( expression( function( greater than equal), atom( relation( width), variable( fixing)), data( baseunit( kind( metre), prefix( milli)), value( 30.0)))), obligation( expression( function( has), atom( relation( material), variable( fixing)), data( compatibility))), obligation( expression( function( is), atom( relation( object), variable( compatibility)), data( cladding))), obligation( expression( function( comply with), atom( relation( material), variable( fixing)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t20))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( is), atom( relation( fastening), variable( clip)), data( screw))), obligation( expression( function( greater than equal), expression( function( count), atom( variable( screw))), data( 2))), obligation( expression( function( is), atom( relation( size), variable( screw)), data( 10 gauge))), obligation( expression( function( is), atom( relation( length), variable( screw)), data( baseunit( prefix( milli), kind( metre)), value( 30.0)))), and( obligation( expression( function( is), atom( relation( type), variable( screw)), data( waferhead))), obligation( expression( function( is), atom( relation( type), variable( screw)), data( galvanised)))), obligation( expression( function( is), atom( relation( form), variable( galvanised)), data( hot dipped))), obligation( expression( function( comply with), atom( variable( screw)), data( class 3))), obligation( expression( function( in), atom( variable( class3)), data( as 3566.2)))))","Clip fixings for trough profiles and spans as shown in Table 13 shall be as shown in Figure 40, and shall: a) Have a minimum BMT of 0.9 mm b) Be a minimum width of 30 mm c) Be made from a material compatible with the cladding, refer to Tables 20 and 21 d) Have clips fastened with a minimum of two 10-gauge by 30 mm waferhead hot-dipped galvanised screws which comply with Class 3 of AS 3566: Part 2.","LearnToIgnoreFigure
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.10.0.2,"8.4 Profiled Metal Roof Cladding 8.4.10 Allowance for expansion of corrugated and trapezoidal roof cladding; Where Table 16 requires profiled washers, allowance shall be made for expansion by: a) Fixing the top 50% (closest to the ridge) with conventional fixings, and b) Fixing the lower 50% with sealing washers fixed over profiled washers as shown in Figure 39, and: i) using oversized holes, and ii) positioning fixing in centre of hole.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( cladding)), data( corrugated)), expression( function( is), atom( relation( profile), variable( cladding)), data( trapezoidal))), expression( function( as per), atom( relation( expansion), variable( cladding)), data( table)), expression( function( equal), atom( relation( key), variable( table)), data( t16)), obligation( expression( function( has), atom( relation( expansion), variable( cladding)), data( profiled washer))))), then( and( obligation( expression( function( has), atom( variable( cladding)), data( expansion joint))), obligation( expression( function( has), atom( relation( top half), variable( cladding)), data( conventional fixing))), obligation( expression( function( has), atom( relation( bottom half), variable( cladding)), data( fixing))), obligation( expression( function( by), atom( variable( fixing)), data( sealing washer))), obligation( expression( function( over), atom( relation( fixing), variable( sealing washer)), data( profiled washer))), obligation( expression( function( has), atom( relation( crest), variable( cladding)), data( hole))), obligation( expression( function( is), atom( variable( hole)), data( oversized))), obligation( expression( function( has), atom( relation( centre), variable( hole)), data( positioning fixing)))))","8.4 Profiled Metal Roof Cladding; Where Table 16 requires profiled washers, allowance shall be made for expansion by: a) Fixing the top 50% (closest to the ridge) with conventional fixings, and b) Fixing the lower 50% with sealing washers fixed over profiled washers as shown in Figure 39, and: i) using oversized holes, and ii) positioning fixing in centre of hole.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.11.0.1,"8.4 Profiled Metal Roof Cladding; The roofing shall be flashed at all boundaries to comply with the following: a) At edges discharging to gutters with eaves flashings where required in Figure 45(a) b) Soft edge to cover flashings complying with Paragraph 4.6. Refer to Figure 41 for example of use and Tables 21 and 22.c) Notched turn-downs to cover flashings shall comply with Paragraph 4.6. Refer to Figure 42 for example of use. d) Materials for flashings shall be compatible with the roof cladding material as per Table 21 and Table 22, and shall be in accordance with Paragraph 4.3. e) Provide expansion joints in accordance with Paragraph 4.5.2.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)))), then( and( obligation( expression( function( has), atom( relation( boundary), variable( roof)), data( flashing))), obligation( expression( function( has), atom( relation( edge), variable( roof)), data( eaveflashing))), obligation( expression( function( to), atom( relation( discharge), variable( eaveflashing)), data( gutter))), obligation( expression( function( has), atom( variable( roof)), data( soft edgeflashing))), obligation( expression( function( comply with), atom( variable( soft edgeflashing)), data( rule))), obligation( expression( function( has), atom( variable( roof)), data( notched turn downflashing))), obligation( expression( function( comply with), atom( variable( notched turn downflashing)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.6))), obligation( expression( function( comply with), atom( relation( material), variable( flashing)), data( table))), obligation( expression( function( comply with), atom( relation( material), variable( flashing)), data( rule))), and( obligation( expression( function( equal), atom( relation( key), variable( table)), data( t21))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t22)))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.3))), obligation( expression( function( has), atom( variable( flashing)), data( expansion joint))), obligation( expression( function( comply with), atom( variable( expansion joint)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 4.5.2)))))","8.4 Profiled Metal Roof Cladding; The roofing shall be flashed at all boundaries to comply with the following: a) At edges discharging to gutters with eaves flashings where required in Figure 45(a) b) Soft edge to cover flashings complying with Paragraph 4.6. Refer to Figure 41 for example of use and Tables 21 and 22.c) Notched turn-downs to cover flashings shall comply with Paragraph 4.6. Refer to Figure 42 for example of use. d) Materials for flashings shall be compatible with the roof cladding material as per Table 21 and Table 22, and shall be in accordance with Paragraph 4.3. e) Provide expansion joints in accordance with Paragraph 4.5.2.","SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.11.1.1.d.1,"8.4 Profiled Metal Roof Cladding d) Where end-laps are required in flashings, form these as shown in Figure 6 and, before joining the two parts, apply an 8 mm diameter bead of neutral cure sealant complying with: i) Type F, Class 20LM or 25LM of ISO 11600, or ii) low modulus Type II Class A of Federal Specification TT-S-00230C.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( cladding)), obligation( expression( function( has), atom( variable( flashing)), data( end lap))))), then( and( obligation( expression( function( has), atom( relation( joint), variable( flashing)), data( bead))), obligation( expression( function( is), atom( relation( type), variable( bead)), data( sealant))), obligation( expression( function( equal), atom( relation( diameter), variable( bead)), data( baseunit( kind( metre), prefix( milli)), value( 8.0)))), obligation( expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure))), or( obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 20lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 25lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( tts 00230c class a low modulus type 2))))))","d) Where end-laps are required in flashings, form these as shown in Figure 6 and, before joining the two parts, apply an 8 mm diameter bead of neutral cure sealant complying with: i) Type F, Class 20LM or 25LM of ISO 11600, or ii) low modulus Type II Class A of Federal Specification TT-S-00230C.",MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.15.0.1,8.4 Profiled Metal Roof Cladding; Preformed compressible seals shall not be used at the eaves.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( eave)))), then( prohibition( expression( function( at), atom( relation( usage), variable( preformed compressible seal)), data( eave))))",Preformed compressible seals shall not be used at the eaves.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.16.2.0.1,"8.4 Profiled Metal Roof Cladding; Valley gutters shall be in accordance with catchment areas shown in Table 8, and as shown in Figure 51 and Paragraph 8.1.6.2.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( valley)))), then( and( obligation( expression( function( include), atom( relation( dependency), variable( gutter)), data( catchment area))), obligation( expression( function( as per), atom( variable( catchment area)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t8))), obligation( expression( function( comply with), atom( variable( gutter)), data( figure))), obligation( expression( function( comply with), atom( variable( gutter)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f51))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 8.1.6.2)))))","Valley gutters shall be in accordance with catchment areas shown in Table 8, and as shown in Figure 51 and Paragraph 8.1.6.2.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.4.17.0.2,8.4 Profiled Metal Roof Cladding; The edge of roofing penetrations over 200 mm wide shall be supported in either direction with additional framing as shown in Figure 21.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( penetration)), expression( function( greater than), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))), then( and( obligation( expression( function( has), atom( relation( edge), variable( penetration)), data( support))), obligation( expression( function( is), atom( variable( support)), data( additional framing)))))",The edge of roofing penetrations over 200 mm wide shall be supported in either direction with additional framing as shown in Figure 21.,"SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.1.0.1,"This Acceptable Solution is limited to membranes composed of butyl or EPDM installed over plywood substrates for: a) Roofs with a minimum fall of 2° (1:30), b) Decks with: i) a minimum fall of 1.5° (1:40), ii) a maximum area of 40 m2, iii) no steps in level within deck area except into gutters, iv) no integral roof gardens, and v) no downpipe direct discharge to deck, c) Internal gutters with a minimum fall of 1 in 100, with no cross seams in the gutters, and d) Decks with removable raised surfaces to give level access as shown in Figure 17A.","if( and( or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( over), atom( relation( installation), variable( membrane)), data( substrate)), expression( function( is), atom( relation( material), variable( substrate)), data( plywood)), or( and( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( greater than equal), atom( relation( fall), variable( roof)), data( baseunit( kind( angle degree)), value( 2.0)))), and( expression( function( is), atom( relation( application), variable( membrane)), data( deck)), expression( function( greater than equal), atom( relation( fall), variable( deck)), data( baseunit( kind( angle degree)), value( 1.5))), expression( function( less than equal), atom( relation( area), variable( deck)), data( baseunit( exponent( 2.0), kind( metre)), value( 40.0))), not( expression( function( has), atom( relation( area), variable( deck)), data( step in level))), not( expression( function( has), atom( variable( deck)), data( integral roof garden))), not( expression( function( has), atom( variable( deck)), data( downpipe direct discharge)))), and( expression( function( is), atom( relation( application), variable( membrane)), data( gutter)), expression( function( is), atom( relation( type), variable( gutter)), data( internal)), expression( function( greater than equal), atom( relation( fall), variable( gutter)), data( 100.0)), not( expression( function( has), atom( variable( gutter)), data( cross seam)))), and( expression( function( is), atom( relation( application), variable( membrane)), data( deck)), expression( function( has), atom( variable( deck)), data( raised surface)), expression( function( is), atom( variable( raised surface)), data( removable)), expression( function( for), atom( variable( raised surface)), data( level access)))))), then( permission( expression( function( comply with), atom( variable( membrane)), data( nzbc e2as1))))","This Acceptable Solution is limited to membranes composed of butyl or EPDM installed over plywood substrates for: a) Roofs with a minimum fall of 2° (1:30), b) Decks with: i) a minimum fall of 1.5° (1:40), ii) a maximum area of 40 m2, iii) no steps in level within deck area except into gutters, iv) no integral roof gardens, and v) no downpipe direct discharge to deck, c) Internal gutters with a minimum fall of 1 in 100, with no cross seams in the gutters, and d) Decks with removable raised surfaces to give level access as shown in Figure 17A.","SomeDetailsNotEncoded
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.1.0.2,8.5 Membrane Roofs and Decks; The application of directly applied wearing or decorative surfaces to membranes is not covered in this Acceptable Solution.,"if( and( or( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( is), atom( relation( application), variable( membrane)), data( deck))), expression( function( to), atom( relation( application), variable( surface)), data( membrane)), or( expression( function( is), atom( variable( surface)), data( wearing)), expression( function( is), atom( variable( surface)), data( decorative))))), then( prohibition( expression( function( comply with), atom( relation( application), variable( surface)), data( nzbc e2as1))))",The application of directly applied wearing or decorative surfaces to membranes is not covered in this Acceptable Solution.,Tacit
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.2.0.1,Closed-in construction spaces under membrane roofs and decks require adequate ventilation to prevent the accumulation of moisture under the membrane.,"if( and( expression( function( is), atom( relation( type), variable( space)), data( closed in construction)), expression( function( below), atom( variable( space)), data( membrane)), or( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( is), atom( relation( application), variable( membrane)), data( deck))))), then( and( obligation( expression( function( has), atom( variable( space)), data( ventilation))), obligation( expression( function( from), atom( relation( prevention), variable( ventilation)), data( moisture accumulation)))))",Closed-in construction spaces under membrane roofs and decks require adequate ventilation to prevent the accumulation of moisture under the membrane.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.3.0.1,"8.5 Membrane Roofs and Decks; Membranes composed of butyl or EPDM installed over plywood substrates; Plywood shall be: a) A minimum of 17 mm complying with AS/NZS 2269, b) At least CD Grade Structural plywood with the sanded C face upwards, and c) H3 with treatment type compatible with membrane and adhesives used","if( and( or( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), expression( function( is), atom( relation( application), variable( membrane)), data( deck))), expression( function( over), atom( relation( installation), variable( membrane)), data( substrate)), expression( function( is), atom( relation( material), variable( substrate)), data( plywood)))), then( and( obligation( expression( function( greater than equal), atom( relation( thickness), variable( plywood)), data( baseunit( kind( metre), prefix( milli)), value( 17.0)))), obligation( expression( function( comply with), atom( variable( plywood)), data( asnzs 2269))), obligation( expression( function( is), atom( relation( grade), variable( plywood)), data( cd))), obligation( expression( function( is), atom( relation( type), variable( plywood)), data( structural))), obligation( expression( function( is), atom( relation( sanded c face), variable( plywood)), data( upward))), obligation( expression( function( is), atom( relation( treatment), variable( plywood)), data( h3))), obligation( expression( function( has), atom( relation( treatment), variable( plywood)), data( compatibility))), obligation( expression( function( include), atom( variable( compatibility)), data( membrane))), obligation( expression( function( include), atom( variable( compatibility)), data( adhesive)))))","Plywood shall be: a) A minimum of 17 mm complying with AS/NZS 2269, b) At least CD Grade Structural plywood with the sanded C face upwards, and c) H3 with treatment type compatible with membrane and adhesives used, and kiln dried after treatment.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.5.1.0.2,"Plywood substrates shall be fixed according to the following requirements: a) Panels shall be laid with staggered joints (brick bond), b) Panels shall be laid with the face grain at right angles to the main supports, c) Supports in b) shall be at 400 mm maximum centres, d) The edge of sheets shall be supported with dwangs or framing","if( and( expression( function( is), atom( relation( form), variable( substrate)), data( sheet)), expression( function( is), atom( relation( material), variable( substrate)), data( plywood)))), then( and( obligation( expression( function( has), atom( variable( sheet)), data( joint))), or( obligation( expression( function( is), atom( relation( arrangement), variable( sheet)), data( staggered))), obligation( expression( function( is), atom( relation( arrangement), variable( sheet)), data( brick bond)))), obligation( expression( function( is), atom( relation( face grain), variable( sheet)), data( perpendicular))), obligation( expression( function( to), atom( variable( perpendicular)), data( support))), obligation( expression( function( is), atom( relation( type), variable( support)), data( main))), obligation( expression( function( has), atom( relation( layout), variable( support)), data( measurement))), obligation( expression( function( is), atom( variable( measurement)), data( centre))), obligation( expression( function( less than equal), atom( relation( centre), variable( support)), data( baseunit( kind( metre), prefix( milli)), value( 400.0)))), or( obligation( expression( function( has), atom( relation( edge), variable( sheet)), data( dwangs))), obligation( expression( function( has), atom( relation( edge), variable( sheet)), data( framing))))))","Plywood substrates shall be fixed according to the following requirements: a) Panels shall be laid with staggered joints (brick bond), b) Panels shall be laid with the face grain at right angles to the main supports, c) Supports in b) shall be at 400 mm maximum centres, d) The edge of sheets shall be supported with dwangs or framing","Tacit
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.7.0.1,Membranes composed of butyl or EPDM; All control joints in the substrate shall be accommodated in the membrane roof design.,"if( and( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( over), atom( relation( installation), variable( membrane)), data( substrate)), expression( function( has), atom( variable( substrate)), data( control joint)))), then( obligation( expression( function( include), atom( relation( design), variable( membrane)), data( control joint))))",All control joints in the substrate shall be accommodated in the membrane roof design. The design of control joints for membrane roofing is subject to specific design and is outside the scope of this Acceptable Solution.,Tacit
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.5.7.0.2,Membranes composed of butyl or EPDM; The design of control joints for membrane roofing is subject to specific design and is outside the scope of this Acceptable Solution.,"if( and( expression( function( is), atom( relation( application), variable( membrane)), data( roof)), or( expression( function( is), atom( relation( material), variable( membrane)), data( butyl)), expression( function( is), atom( relation( material), variable( membrane)), data( epdm))), expression( function( over), atom( relation( installation), variable( membrane)), data( substrate)), expression( function( for), atom( variable( control joint)), data( membrane)))), then( and( obligation( expression( function( has), atom( variable( control joint)), data( specific design))), prohibition( expression( function( comply with), atom( relation( design), variable( control joint)), data( nzbc e2as1)))))",The design of control joints for membrane roofing is subject to specific design and is outside the scope of this Acceptable Solution.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.0.3,9.0 Wall Claddings; 9.1.3 Bottom of cladding; Clearances shall be measured to: a) The finished plane of any adjacent horizontal surface,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( define), expression( function( bottom of), atom( variable( cladding))), data( x0)), expression( function( adjacent), atom( variable( surface)), data( wall)), expression( function( is), atom( variable( surface)), data( horizontal)), expression( function( has), atom( variable( surface)), data( finished plane)))), then( and( obligation( expression( function( has), atom( relation( clearance), variable( cladding)), data( measurement))), obligation( expression( function( from), atom( variable( measurement)), data( x0))), obligation( expression( function( to), atom( variable( measurement)), data( finished plane)))))","Clearances shall be measured to: a) The finished plane of any adjacent horizontal surface, or b) The top surface of any adjacent sloped or horizontal apron flashing.",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.1.0.1,9.0 Wall Claddings 9.1.3.1 Concrete slabs; Slab levels shall be set to allow reinstatement of final landscaped ground levels as outlined in Figure 65 and Table 18.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( adjacent), atom( variable( surface)), data( wall)), expression( function( is), atom( relation( type), variable( surface)), data( concrete slab)))), then( and( obligation( expression( function( is), atom( relation( level), variable( concrete slab)), data( support))), obligation( expression( function( for), atom( variable( support)), data( finished ground level))), obligation( expression( function( comply with), atom( variable( concrete slab)), data( figure))), obligation( expression( function( comply with), atom( variable( concrete slab)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f65))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18)))))",9.1.3.1 Concrete slabs; Slab levels shall be set to allow reinstatement of final landscaped ground levels as outlined in Figure 65 and Table 18.,"DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.2.0.1,9.0 Wall Claddings 9.1.3.2 Masonry veneer clearances; The height of the floor slab above finished ground level shall be in accordance with Figure 73D and as shown in Table 18.,"if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( type), variable( cladding)), data( masonry veneer)), expression( function( adjacent), atom( variable( floor slab)), data( wall)), expression( function( above), atom( relation( height), variable( floor slab)), data( finished ground level)))), then( and( obligation( expression( function( comply with), atom( relation( height), variable( floor slab)), data( figure))), obligation( expression( function( comply with), atom( relation( height), variable( floor slab)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f73.d))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18)))))",9.1.3.2 Masonry veneer clearances; The height of the floor slab above finished ground level shall be in accordance with Figure 73D and as shown in Table 18.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.3.0.1,"9.1.3.3 Bottom of wall claddings for concrete ground slabs (except masonry veneer); At concrete slab level, the base of the cladding system shall be as shown in Table 18, and: a) Finish a minimum of: i) 100 mm above a paved surface, or ii) 175 mm above finished unpaved surface, b) Overlap the concrete slab by 50 mm, and c) Be offset horizontally by a minimum of 6 mm for direct fixed claddings to prevent capillary action.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), not( expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer))), expression( function( adjoin), atom( variable( floor)), data( wall)), expression( function( is), atom( relation( type), variable( floor)), data( concrete slab)), expression( function( adjoin), atom( variable( surface)), data( wall)), expression( function( is), atom( variable( surface)), data( external)), expression( function( below), atom( variable( surface)), data( wall)), expression( function( define), expression( function( bottom of), atom( variable( cladding))), data( x0)))), then( and( obligation( expression( function( comply with), atom( variable( x0)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18))), or( and( obligation( expression( function( from), atom( relation( measurement), variable( distance)), data( x0))), obligation( expression( function( to), atom( relation( measurement), variable( distance)), data( surface))), obligation( expression( function( is), atom( variable( surface)), data( paved))), obligation( expression( function( greater than equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))))), and( obligation( expression( function( from), atom( relation( measurement), variable( distance)), data( x0))), obligation( expression( function( to), atom( relation( measurement), variable( distance)), data( surface))), obligation( expression( function( is), atom( variable( surface)), data( paved))), obligation( expression( function( greater than equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 175.0)))))), obligation( expression( function( to), atom( relation( overlap), variable( x0)), data( floor))), obligation( expression( function( equal), atom( relation( measurement), variable( overlap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))), or( and( expression( function( is), atom( relation( type), variable( cladding)), data( direct fixed)), obligation( expression( function( is), atom( relation( offset), variable( x0)), data( horizontal))), obligation( expression( function( greater than equal), atom( relation( offset), variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 6.0)))), obligation( expression( function( include), atom( relation( offset), variable( x0)), data( prevention))), obligation( expression( function( is), atom( relation( type), variable( prevention)), data( capillary action)))), not( expression( function( is), atom( relation( type), variable( cladding)), data( direct fixed))))))","9.1.3.3 Bottom of wall claddings for concrete ground slabs (except masonry veneer); At concrete slab level, the base of the cladding system shall be as shown in Table 18, and: a) Finish a minimum of: i) 100 mm above a paved surface, or ii) 175 mm above finished unpaved surface, b) Overlap the concrete slab by 50 mm, and c) Be offset horizontally by a minimum of 6 mm for direct fixed claddings to prevent capillary action.","DomainKnowledge
Tacit
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.3.5.0.2,"9.1.3.5 Bottom of wall claddings for timber floor framing; At ground floor level, the base of the cladding system shall: a) Overlap the timber floor structure by 50 mm minimum, and b) For walls with direct fixed claddings, be offset horizontally from a concrete foundation wall by a minimum of 6 mm c) Have no direct connection between sub-floor spaces and drained cavities.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( adjacent), atom( variable( floor)), data( cladding)), expression( function( is), atom( relation( material), variable( floor)), data( timber)), expression( function( is), atom( relation( level), variable( floor)), data( ground)), expression( function( define), expression( function( bottom of), atom( variable( cladding))), data( x0)))), then( and( obligation( expression( function( to), atom( relation( overlap), variable( x0)), data( floor))), obligation( expression( function( greater than equal), atom( relation( measurement), variable( overlap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0)))), or( and( obligation( expression( function( is), atom( relation( type), variable( cladding)), data( direct fixed))), obligation( expression( function( is), atom( relation( offset), variable( x0)), data( horizontal))), obligation( expression( function( greater than equal), atom( relation( offset), variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 6.0)))), obligation( expression( function( from), atom( relation( offset), variable( x0)), data( foundation wall))), obligation( expression( function( is), atom( relation( material), variable( foundation wall)), data( concrete)))), obligation( not( expression( function( is), atom( relation( type), variable( cladding)), data( direct fixed))))), expression( function( has), atom( variable( cladding)), data( drained cavity)), prohibition( expression( function( to), atom( relation( direct connection), variable( drained cavity)), data( sub floor space)))))","9.1.3.5 Bottom of wall claddings for timber floor framing; At ground floor level, the base of the cladding system shall: a) Overlap the timber floor structure by 50 mm minimum, and b) For walls with direct fixed claddings, be offset horizontally from a concrete foundation wall by a minimum of 6 mm c) Have no direct connection between sub-floor spaces and drained cavities.","OrForConditionInThen
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.4.0.1,This Acceptable Solution requires external walls to have barriers to airflow,"if( and( expression( function( is), atom( relation( type), variable( wall)), data( external)), expression( function( comply with), atom( variable( wall)), data( nzbc e2as1)))), then( and( obligation( expression( function( has), atom( variable( wall)), data( barrier))), obligation( expression( function( to), atom( relation( restriction), variable( barrier)), data( airflow)))))",This Acceptable Solution requires external walls to have barriers to airflow,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.4.0.2,"Barrier to airflow for external walls shall be in form of: a) Interior linings with all joints stopped for wind zones up to Very High, or b) Rigid underlays (and drained cavities) for buildings in Extra High wind zones - refer to Paragraph 9.1.7.2 c) Where walls are not lined, such as attic spaces at gable ends, an air barrier complying with Table 23, fixed to framing prior to fixing cladding or cavity battens d) For attached garages, underlays to Paragraph 9.1.3.4.","if( and( expression( function( is), atom( relation( type), variable( wall)), data( external)), expression( function( has), atom( variable( wall)), data( barrier)), expression( function( to), atom( relation( restriction), variable( barrier)), data( airflow)))), then( or( and( obligation( expression( function( is), atom( relation( form), variable( barrier)), data( interior lining))), obligation( expression( function( has), atom( variable( wall)), data( interior lining))), obligation( expression( function( is), atom( relation( joint), variable( wall)), data( stopped))), obligation( expression( function( less than equal), atom( relation( type), variable( wind zone)), data( very high)))), and( obligation( expression( function( is), atom( relation( form), variable( barrier)), data( underlay))), obligation( expression( function( is), atom( relation( form), variable( barrier)), data( drained cavity))), obligation( expression( function( has), atom( variable( wall)), data( drained cavity))), obligation( expression( function( is), atom( relation( application), variable( underlay)), data( wall))), obligation( expression( function( is), atom( variable( underlay)), data( rigid))), obligation( expression( function( is), atom( relation( type), variable( wind zone)), data( extra high)))), and( obligation( expression( function( is), atom( relation( form), variable( barrier)), data( air barrier))), obligation( not( expression( function( has), atom( variable( wall)), data( lining)))), obligation( expression( function( comply with), atom( variable( barrier)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), obligation( expression( function( has), atom( variable( wall)), data( framing))), obligation( expression( function( to), atom( relation( fixing), variable( barrier)), data( framing))), expression( function( define), atom( relation( fixing time), variable( barrier)), data( x0)), expression( function( define), atom( relation( fixing time), variable( cladding)), data( x1)), expression( function( define), atom( relation( fixing time), variable( cavity batten)), data( x2)), obligation( expression( function( before), atom( variable( x0)), data( x1))), obligation( expression( function( before), atom( variable( x0)), data( x2)))), and( obligation( expression( function( is), atom( relation( form), variable( barrier)), data( underlay))), obligation( expression( function( part of), atom( variable( wall)), data( garage))), obligation( expression( function( is), atom( variable( garage)), data( attached))), obligation( expression( function( comply with), atom( variable( underlay)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.1.3.4))))))","Barrier to airflow for external walls shall be in form of: a) Interior linings with all joints stopped for wind zones up to Very High, or b) Rigid underlays (and drained cavities) for buildings in Extra High wind zones - refer to Paragraph 9.1.7.2 c) Where walls are not lined, such as attic spaces at gable ends, an air barrier complying with Table 23, fixed to framing prior to fixing cladding or cavity battens d) For attached garages, underlays to Paragraph 9.1.3.4.","DomainKnowledge
Detailed
OrderDifficulties
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.5.0.1.a.1,"9.1.5 Wall underlays to wall openings; Prior to window or door installation: a)Flexible wall underlay shall be cut and dressed into all sides of openings as per Figure 72A and B,","if( and( expression( function( has), atom( variable( wall)), data( opening)), or( expression( function( is), atom( relation( type), variable( opening)), data( window)), expression( function( is), atom( relation( type), variable( opening)), data( door))), expression( function( define), atom( relation( installation time), variable( opening)), data( x0)))), then( and( obligation( expression( function( to), atom( relation( application), variable( underlay)), data( wall))), obligation( expression( function( is), atom( variable( underlay)), data( flexible))), obligation( expression( function( has), atom( relation( side), variable( opening)), data( underlay))), obligation( expression( function( define), atom( relation( installation time), variable( underlay)), data( x1))), obligation( expression( function( before), atom( variable( x1)), data( x0)))))","Prior to window or door installation: a)Flexible wall underlay shall be cut and dressed into all sides of openings as per Figure 72A and B,",LearnToIgnoreFigure
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.1.8.2.0.1,"9.0 Wall claddings; Where a drained cavity is required, it shall: a) Be installed over a wall underlay, either flexible or rigid, that: i) complies with Table 23, and ii) is fixed to wall framing, b) Be formed using vertical cavity battens, c) Restrict air movement between the drained cavity and: i) floor, wall and roof framing, ii) attic roof space, and iii) subfloor space, d) Be drained and open to the exterior at the bottom of cavities, e) Use vermin-proofing at the cavity base as per Paragraph 9.1.8.3 and Figure 66, f) Use cavity spacers as shown in Figure 67, where fixing is required between cavity battens. Alternative cavity spacers to those described in Paragraph 9.1.8.2 are permitted. Refer to Paragraph 9.1.8.4 f).","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), obligation( expression( function( has), atom( variable( cladding)), data( drained cavity))))), then( and( obligation( expression( function( over), atom( relation( installation), variable( drained cavity)), data( underlay))), obligation( expression( function( is), atom( relation( application), variable( underlay)), data( wall))), or( obligation( expression( function( is), atom( relation( type), variable( underlay)), data( flexible))), obligation( expression( function( is), atom( relation( type), variable( underlay)), data( rigid)))), obligation( expression( function( comply with), atom( variable( underlay)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t23))), obligation( expression( function( to), atom( relation( fixing), variable( underlay)), data( framing))), obligation( expression( function( has), atom( variable( wall)), data( framing))), obligation( expression( function( by), atom( relation( forming), variable( drained cavity)), data( cavity batten))), obligation( expression( function( is), atom( relation( orientation), variable( cavity batten)), data( vertical))), obligation( expression( function( to), atom( relation( restriction), variable( drained cavity)), data( air movement))), obligation( expression( function( in between), atom( variable( air movement)), data( drained cavity))), obligation( expression( function( in between), atom( variable( air movement)), data( floor))), and( obligation( expression( function( in between), atom( variable( air movement)), data( drained cavity))), obligation( expression( function( in between), atom( variable( air movement)), data( wall framing)))), and( obligation( expression( function( in between), atom( variable( air movement)), data( drained cavity))), obligation( expression( function( in between), atom( variable( air movement)), data( roof framing)))), and( obligation( expression( function( in between), atom( variable( air movement)), data( drained cavity))), obligation( expression( function( in between), atom( variable( air movement)), data( attic roof space)))), and( obligation( expression( function( in between), atom( variable( air movement)), data( drained cavity))), obligation( expression( function( in between), atom( variable( air movement)), data( subfloor space)))), obligation( expression( function( has), atom( relation( bottom), variable( drained cavity)), data( drainage))), obligation( expression( function( has), atom( relation( bottom), variable( drained cavity)), data( opening))), obligation( expression( function( has), atom( relation( base), variable( drained cavity)), data( vermin proofing))), obligation( expression( function( comply with), atom( variable( vermin proofing)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.1.8.3))), or( and( obligation( expression( function( in between), atom( variable( fixing)), data( cavity batten))), obligation( expression( function( has), atom( variable( cavity batten)), data( cavity spacer))), permission( expression( function( as per), atom( relation( alternative), variable( cavity spacer)), data( rule))), obligation( expression( function( equal), atom( relation( key), variable( rule)), data( 9.1.8.4.f)))), obligation( not( expression( function( in between), atom( variable( fixing)), data( cavity batten)))))))","9.0 Wall claddings; Where a drained cavity is required, it shall: a) Be installed over a wall underlay, either flexible or rigid, that: i) complies with Table 23, and ii) is fixed to wall framing, b) Be formed using vertical cavity battens, c) Restrict air movement between the drained cavity and: i) floor, wall and roof framing, ii) attic roof space, and iii) subfloor space, d) Be drained and open to the exterior at the bottom of cavities, e) Use vermin-proofing at the cavity base as per Paragraph 9.1.8.3 and Figure 66, f) Use cavity spacers as shown in Figure 67, where fixing is required between cavity battens. Alternative cavity spacers to those described in Paragraph 9.1.8.2 are permitted. Refer to Paragraph 9.1.8.4 f).","DomainKnowledge
LearnToIgnoreFigure
OrForConditionInThen"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.2.1.0.1,"9.0 Wall claddings; This Acceptable Solution is limited to masonry veneer cladding attached to timber wall framing outlined in NZS 3604. Masonry veneer is either: a) Clay brick, or b) Concrete brick or block.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer)), expression( function( has), atom( variable( wall)), data( framing)), expression( function( to), atom( relation( attachment), variable( cladding)), data( framing)), expression( function( is), atom( relation( material), variable( wall)), data( timber)), expression( function( comply with), atom( variable( cladding)), data( nzs 3604)), or( expression( function( is), atom( relation( type), variable( masonry veneer)), data( clay brick)), expression( function( is), atom( relation( type), variable( masonry veneer)), data( concrete brick)), expression( function( is), atom( relation( type), variable( masonry veneer)), data( concrete block))))), then( permission( expression( function( comply with), atom( variable( cladding)), data( nzbc e2as1))))","This Acceptable Solution is limited to masonry veneer cladding attached to timber wall framing outlined in NZS 3604. Masonry veneer is either: a) Clay brick, or b) Concrete brick or block.",Tacit
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.2.7.0.1,"9.0 Wall claddings; Masonry veneer shall be attached to wall framing by wall ties. Wall ties and their spacings and embedment shall be in accordance with the requirements of NZS 4210 and Tables 18A, 18B and 18C. Screw fixings shall be minimum 12 gauge, 35 mm long hex washer face, galvanised or stainless steel to suit the ties required under Table 18C.","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer)), expression( function( has), atom( variable( wall)), data( framing)))), then( and( obligation( expression( function( to), atom( relation( attachment), variable( cladding)), data( framing))), obligation( expression( function( by), atom( relation( attachment), variable( cladding)), data( wall tie))), obligation( expression( function( comply with), atom( variable( wall tie)), data( nzs 4210))), obligation( expression( function( comply with), atom( variable( wall tie)), data( table))), and( obligation( expression( function( comply with), atom( relation( spacing), variable( wall tie)), data( nzs 4210))), obligation( expression( function( comply with), atom( relation( spacing), variable( wall tie)), data( table)))), and( obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18.a))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18.b))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t18.c)))), obligation( expression( function( for), atom( variable( screw fixing)), data( wall tie))), or( obligation( expression( function( is), atom( relation( material), variable( screw fixing)), data( galvanised steel))), obligation( expression( function( is), atom( relation( material), variable( screw fixing)), data( stainless steel)))), obligation( expression( function( greater than equal), atom( relation( gauge), variable( screw fixing)), data( 12))), obligation( expression( function( has), atom( variable( screw fixing)), data( hex washer face))), obligation( expression( function( greater than equal), atom( relation( length), variable( hex washer face)), data( baseunit( kind( metre), prefix( milli)), value( 35.0))))))","Masonry veneer shall be attached to wall framing by wall ties. Wall ties and their spacings and embedment shall be in accordance with the requirements of NZS 4210 and Tables 18A, 18B and 18C. Screw fixings shall be minimum 12 gauge, 35 mm long hex washer face, galvanised or stainless steel to suit the ties required under Table 18C.","SplitableEntities
DomainKnowledge"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.7.2.1.0.1,"9.0 Wall Claddings; 9.7 Fibre Cement Sheet; Install sheets with: Paint seals to all sheet edges and cut edges, including 100 mm across back face from each edge","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( form), variable( cladding)), data( sheet)), expression( function( is), atom( relation( material), variable( cladding)), data( fibre cement)))), then( and( obligation( expression( function( is), atom( relation( edge), variable( sheet)), data( sealed))), obligation( expression( function( is), atom( relation( type), variable( sealant)), data( painting))), obligation( expression( function( from), atom( relation( extent), variable( painting)), data( edge))), obligation( expression( function( over), atom( relation( extent), variable( painting)), data( back face))), obligation( expression( function( equal), atom( relation( extent), variable( painting)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))))))","Install sheets with: Paint seals to all sheet edges and cut edges, including 100 mm across back face from each edge","DomainKnowledge
SomeDetailsNotEncoded"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r9.9.10.1.0.1,"Where the tops to enclosed balustrades are formed using EIFS, they shall have a minimum fall of 10° (1:6), and be wrapped as shown in Figure 129 and 130, with a liquid waterproofing membrane approved by the supplier. The EIFS system shall be fully protected by the coating, and shall comply with the requirements of AS/NZS 4858 Table 8, Parts (a) to (e), except that bleach and detergent immersion set out in Appendix A1 shall not be required.","if( and( expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( define), expression( function( top of), atom( variable( balustrade))), data( x0)), expression( function( is), atom( relation( system), variable( x0)), data( eifs)))), then( and( obligation( expression( function( greater than equal), atom( relation( fall), variable( x0)), data( baseunit( kind( angle degree)), value( 10.0)))), obligation( expression( function( by), atom( relation( wrapping), variable( x0)), data( waterproofing membrance))), obligation( expression( function( is), atom( relation( state), variable( waterproofing membrance)), data( liquid))), obligation( expression( function( by), atom( relation( approvement), variable( waterproofing membrance)), data( supplier))), obligation( expression( function( has), atom( relation( system), variable( eifs)), data( full protection))), obligation( expression( function( by), atom( variable( full protection)), data( coating))), obligation( expression( function( comply with), atom( relation( system), variable( eifs)), data( table))), obligation( expression( function( equal), atom( relation( key), variable( table)), data( t8))), obligation( expression( function( in), atom( variable( table)), data( asnzs 4858))), expression( function( has), atom( relation( appendix a), variable( asnzs 4858)), data( bleach and detergent immersion)), permission( expression( function( exclude), atom( variable( full protection)), data( bleach and detergent immersion)))))","Where the tops to enclosed balustrades are formed using EIFS, they shall have a minimum fall of 10° (1:6), and be wrapped as shown in Figure 129 and 130, with a liquid waterproofing membrane approved by the supplier. The EIFS system shall be fully protected by the coating, and shall comply with the requirements of AS/NZS 4858 Table 8, Parts (a) to (e), except that bleach and detergent immersion set out in Appendix A1 shall not be required.",SplitableEntities
lrml/NZ_NZBC-G13AS2#2.7.lrml,r2.1.1.0.1,"Below ground 2.1 Fill materials 2.1.1 Fill materials, as shown in Figure 7, shall be: a) Bedding material of clean granular non-cohesive material with a maximum particle size of 20 mm, b) Selected fill of fine-grained soil or granular material that is free from topsoil and rubbish and has a maximum particle size of 20 mm, or c) Ordinary fill of excavated material.","if( expression( function( below), atom( relation( location), variable( drain)), data( ground))), then( or( and( obligation( expression( function( is), atom( relation( type), variable( fill)), data( bedding))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( clean))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( granular))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( non cohesive))), obligation( expression( function( has), atom( relation( material), variable( fill)), data( particle))), obligation( expression( function( less than equal), atom( relation( size), variable( particle)), data( baseunit( kind( metre), prefix( milli)), value( 20.0))))), and( obligation( expression( function( is), atom( relation( type), variable( fill)), data( selected))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( clean))), or( obligation( expression( function( is), atom( relation( material), variable( fill)), data( fine grained))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( granular)))), or( obligation( not( expression( function( include), atom( relation( material), variable( fill)), data( topsoil)))), obligation( not( expression( function( include), atom( relation( material), variable( fill)), data( rubbish))))), obligation( expression( function( has), atom( relation( material), variable( fill)), data( particle))), obligation( expression( function( less than equal), atom( relation( size), variable( particle)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))), and( obligation( expression( function( is), atom( relation( type), variable( fill)), data( ordinary))), obligation( expression( function( is), atom( relation( material), variable( fill)), data( excavated))))))","2.1.1 Fill materials, as shown in Figure 7, shall be: a) Bedding material of clean granular non-cohesive material with a maximum particle size of 20 mm, b) Selected fill of fine-grained soil or granular material that is free from topsoil and rubbish and has a maximum particle size of 20 mm, or c) Ordinary fill of excavated material.",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.a.i.2,Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): The overflow level of the gully dish no less than: 100 mm above unpaved surfaces,"if( and( expression( function( has), atom( relation( system), variable( drain)), data( gully trap)), expression( function( is), atom( relation( type), variable( surface)), data( unpaved)), expression( function( define), expression( function( top of), atom( relation( overflow), variable( gully trap))), data( x0)), expression( function( define), expression( function( top of), atom( variable( surface))), data( x1)))), then( obligation( expression( function( greater than equal), atom( variable( x0 - x1)), data( baseunit( kind( metre), prefix( milli)), value( 100.0)))))",3.3.1 All gully traps shall have (see Figures 2 and 3): The overflow level of the gully dish no less than: 100 mm above unpaved surfaces,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.e.1,"Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): At least one discharge pipe discharging to the gully trap to avoid waterseal evaporation,","if( expression( function( has), atom( relation( system), variable( drain)), data( gully trap))), then( and( obligation( expression( function( to), atom( relation( discharge), variable( waste pipe)), data( gully trap))), obligation( expression( function( greater than equal), expression( function( count), atom( relation( discharge), variable( waste pipe))), data( 1)))))","3.3.1 All gully traps shall have (see Figures 2 and 3): At least one discharge pipe discharging to the gully trap to avoid waterseal evaporation,",
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.f.1,3.3.1 All gully traps shall have (see Figures 2 and 3): Wastepipes that discharge to the gullytrap arranged to permit easy cleaning of the gullytrap,"if( expression( function( to), atom( relation( discharge), variable( waste pipe)), data( gully trap))), then( and( obligation( expression( function( has), atom( relation( arrangement), variable( waste pipe)), data( cleaning provision))), obligation( expression( function( for), atom( variable( cleaning provision)), data( gully trap)))))","3.3.1 All gully traps shall have (see Figures 2 and 3): Wastepipes that discharge to the gullytrap arranged to permit easy cleaning of the gullytrap,","DomainKnowledge
MediumData"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.3.1.0.1.h.1,Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): The top of the water seal no more than 600 mm below the top of the gully dish,"if( and( expression( function( has), atom( relation( system), variable( drain)), data( gully trap)), expression( function( has), atom( variable( gully trap)), data( gully dish)), expression( function( has), atom( variable( gully trap)), data( water seal)), expression( function( define), expression( function( top of), atom( relation( elevation), variable( gully dish))), data( x0)), expression( function( define), expression( function( top of), atom( relation( elevation), variable( water seal))), data( x1)))), then( obligation( expression( function( less than equal), atom( variable( x0 - x1)), data( baseunit( kind( metre), prefix( milli)), value( 600.0)))))",3.3.1 All gully traps shall have (see Figures 2 and 3): The top of the water seal no more than 600 mm below the top of the gully dish,
lrml/NZ_NZBC-G13AS2#2.7.lrml,r3.4.7.0.1,Other types of grease trap such as those that separate or digest grease must be approved by the network utility operator as required by G14/VM1 1.2.,"if( expression( function( is), atom( relation( type), variable( grease trap)), data( other))), then( obligation( expression( function( comply with), atom( relation( installation), variable( grease trap)), data( nzbc g14vm1 1.2))))",Other types of grease trap such as those that separate or digest grease must be approved by the network utility operator as required by G14/VM1 1.2.,"LearnToIgnore
Abstract"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.2.2.0.1,"Where drains are laid at gradients of 1:80 or less, verifiable levelling devices shall be used to ensure uniform and accurate gradients.","if( and( expression( function( is), atom( relation( installation), variable( drain)), data( true)), expression( function( less than equal), atom( relation( gradient), variable( drain)), data( 80.0)))), then( and( obligation( expression( function( include), atom( relation( installation), variable( drain)), data( levelling device))), obligation( expression( function( is), atom( variable( levelling device)), data( verifiable)))))","Where drains are laid at gradients of 1:80 or less, verifiable levelling devices shall be used to ensure uniform and accurate gradients.","Tacit
NotEncodedParts"
lrml/NZ_NZBC-G13AS2#2.7.lrml,r5.4.1.0.1.2,"The width of the trench at the top of the pipe shall be no more than 600 mm unless the pipes in the trench are covered with concrete, as shown in Figure 7 (c).","if( and( expression( function( in), atom( relation( location), variable( pipe)), data( trench)), expression( function( define), expression( function( top of), atom( relation( elevation), variable( pipe))), data( x0)), expression( function( define), atom( relation( elevation), variable( trench)), data( x1)), expression( function( equal), atom( variable( x1)), data( x0)), expression( function( greater than), atom( relation( width), variable( trench)), data( baseunit( prefix( milli), kind( metre)), value( 600.0))))), then( obligation( expression( function( is), atom( relation( cover), variable( trench)), data( concrete))))","The width of the trench at the top of the pipe shall be no more than 600 mm unless the pipes in the trench are covered with concrete, as shown in Figure 7 (c).",EncodeException
lrml/NZ_NZBC-G13AS2#2.7.lrml,r6.1.4.0.1,"Where a disused drain is being reinstated, the disused drain shall be tested to verify that the drain is sound.","if( and( expression( function( is), atom( variable( drain)), data( disusaged)), expression( function( is), atom( variable( drain)), data( reinstated)))), then( and( obligation( expression( function( is), atom( variable( drain)), data( tested))), obligation( expression( function( is), atom( relation( condition), variable( drain)), data( sound)))))","Where a disused drain is being reinstated, the disused drain shall be tested to verify that the drain is sound.",
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.3.0.1,"A floor waste shall: Be trapped, discharge 50 mm above the grating of a gully trap","if( expression( function( is), atom( variable( floor waste)), data( true))), then( and( obligation( expression( function( has), atom( variable( floor waste)), data( trap))), obligation( expression( function( has), atom( variable( trap)), data( grating))), obligation( expression( function( over), atom( relation( discharge), variable( floor waste)), data( grating))), obligation( expression( function( has), atom( relation( discharge), variable( floor waste)), data( distance))), obligation( expression( function( to), atom( variable( distance)), data( grating))), obligation( expression( function( equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))))))","A floor waste shall: Be trapped, discharge 50 mm above the grating of a gully trap",Detailed
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.1.0.1,"2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2a for risk groups SM and SI","if( or( expression( function( is), atom( relation( risk group), variable( space)), data( sm)), expression( function( is), atom( relation( risk group), variable( space)), data( si)))), then( and( obligation( expression( function( comply with), atom( relation( fire safety system), variable( space)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.2.a))))","2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2a for risk groups SM and SI",Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.1.0.2,"2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2b for risk group CA","if( expression( function( is), atom( relation( risk group), variable( space)), data( ca))), then( and( obligation( expression( function( comply with), atom( relation( fire safety system), variable( space)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.2.b))))","2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2b for risk group CA",Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.1.0.3,"2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2c for risk groups WB and WS","if( or( expression( function( is), atom( relation( risk group), variable( space)), data( wb)), expression( function( is), atom( relation( risk group), variable( space)), data( ws)))), then( and( obligation( expression( function( comply with), atom( relation( fire safety system), variable( space)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.2.c))))","2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2c for risk groups WB and WS",Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.1.0.4,"2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2d for risk group VP","if( expression( function( is), atom( relation( risk group), variable( space)), data( vp))), then( and( obligation( expression( function( comply with), atom( relation( fire safety system), variable( space)), data( table))), expression( function( equal), atom( relation( key), variable( table)), data( t2.2.d))))","2.2.1 Fire safety system types, as defined in Table 2.2, shall be provided throughout firecells and be as specified in: Table 2.2d for risk group VP",Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r2.2.3.0.1,2.2.3 Where there is more than one firecell the following design sequence shall be used to determine the fire safety systems for other firecells in the building (see Cap 2.2.3).,"if( and( expression( function( has), atom( variable( building)), data( firecell)), expression( function( greater than), expression( function( count), atom( variable( firecell))), data( 1)))), then( obligation( expression( function( comply with), atom( relation( fire safety system), variable( firecell)), data( cap cas2 2.2.3))))",2.2.3 Where there is more than one firecell the following design sequence shall be used to determine the fire safety systems for other firecells in the building (see Cap 2.2.3).,Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r4.1.1.0.2,Firecells shall be fire separated from each other by the higher of the two FRRs if the adjoining firecell has a higher FRR (refer to Paragraph 2.3).,"if( and( expression( function( adjoin), atom( variable( space1)), data( space2)), expression( function( is), atom( variable( space1)), data( firecell)), expression( function( is), atom( variable( space2)), data( firecell)), expression( function( define), atom( relation( fire resistance rating), variable( space1)), data( x0)), expression( function( define), atom( relation( fire resistance rating), variable( space2)), data( x1)), expression( function( greater than), atom( variable( x1)), data( x0)))), then( and( obligation( expression( function( in between), atom( variable( fire separation)), data( space1))), obligation( expression( function( in between), atom( variable( fire separation)), data( space2))), obligation( expression( function( equal), atom( relation( fire resistance rating), variable( fire separation)), data( x1)))))","4.1.1 Adjoining firecells are required to be fire separated from each other by the highest: Property rating specified in Paragraph 2.3 if both firecells are under different ownership, or a property boundary exists between the two firecells, or where explicitly stated in this Acceptable Solution.","DomainKnowledge
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r8.1.6.2.0.4,Valley gutters be minimum 250 mm wide where receiving run off from spreaders.,"if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( kind( metre), prefix( milli)), value( 250.0)))))",Valley gutters be minimum 250 mm wide where receiving run off from spreaders.,
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.1.0.1,Moisture contained in the building structure at completion of construction shall not be permitted to damage the building elements.,"if( and( expression( function( is), atom( relation( construction), variable( building)), data( completed)), expression( function( include), atom( variable( building)), data( moisture)), expression( function( has), atom( variable( building)), data( building element)))), then( and( prohibition( expression( function( has), atom( variable( building element)), data( damage))), prohibition( expression( function( by), atom( variable( damage)), data( moisture)))))",Moisture contained in the building structure at completion of construction shall not be permitted to damage the building elements.,MediumData
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.1.0.2,"Construction moisture includes the moisture contained in: a) Timber products as a result of a treatment or manufacturing process, b) Green timber, and timber or other materials that have been exposed to the weather, and c) Concrete, mortar or plaster that is not completely cured.","if( expression( function( has), atom( relation( construction), variable( building)), data( moisture))), then( or( and( expression( function( include), atom( variable( product)), data( moisture)), expression( function( is), atom( relation( material), variable( product)), data( timber)), or( expression( function( is), atom( relation( reason), variable( moisture)), data( treatment process)), expression( function( is), atom( relation( reason), variable( moisture)), data( manufacturing process)))), and( expression( function( include), atom( variable( product)), data( moisture)), expression( function( include), atom( relation( material), variable( product)), data( green timber)), expression( function( include), atom( relation( material), variable( product)), data( timber)), expression( function( is), atom( relation( reason), variable( moisture)), data( weather))), and( expression( function( include), atom( variable( product)), data( moisture)), or( expression( function( is), atom( relation( material), variable( product)), data( concrete)), expression( function( is), atom( relation( material), variable( product)), data( mortar)), expression( function( is), atom( relation( material), variable( product)), data( plaster))), not( expression( function( is), atom( variable( material)), data( completely cured))))))","Construction moisture includes the moisture contained in: a) Timber products as a result of a treatment or manufacturing process, b) Green timber, and timber or other materials that have been exposed to the weather, and c) Concrete, mortar or plaster that is not completely cured.","Fact
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.2.0.1.a.1,"The maximum moisture contents shall be: a) For timber framing at the time of installing interior linings, the maximum acceptable moisture content shall be the lesser of: i) 20% for insulated buildings, 24% for non-insulated buildings, or ii) as specified in NZS 3602,","if( and( expression( function( is), atom( relation( material), variable( framing)), data( timber)), expression( function( define), atom( relation( installation time), variable( interior lining)), data( x0)), expression( function( to), atom( relation( installation), variable( interior lining)), data( framing)), expression( function( has), atom( variable( framing)), data( moisture content)), expression( function( in), atom( relation( measurement), variable( moisture content)), data( x0)))), then( and( or( and( obligation( expression( function( is), atom( variable( building)), data( insulated))), obligation( expression( function( less than equal), atom( relation( moisture content), variable( framing)), data( 20 percent)))), and( obligation( not( expression( function( is), atom( variable( building)), data( insulated)))), obligation( expression( function( less than equal), atom( relation( moisture content), variable( framing)), data( 24 percent))))), obligation( expression( function( less than equal), atom( relation( moisture content), variable( framing)), data( value))), obligation( expression( function( as per), atom( variable( value)), data( nzs 3602)))))","The maximum moisture contents shall be: a) For timber framing at the time of installing interior linings, the maximum acceptable moisture content shall be the lesser of: i) 20% for insulated buildings, 24% for non-insulated buildings, or ii) as specified in NZS 3602,","Complex
MediumData"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.2.0.1.b.1,"The maximum moisture contents shall be: For timber weatherboards, 20% at the time of painting,","if( and( expression( function( is), atom( relation( material), variable( weatherboard)), data( timber)), expression( function( define), atom( relation( painting time), variable( weatherboard)), data( x0)), expression( function( has), atom( variable( weatherboard)), data( moisture content)), expression( function( in), atom( relation( measurement), variable( moisture content)), data( x0)))), then( obligation( expression( function( less than equal), atom( relation( moisture content), variable( weatherboard)), data( 20 percent))))","For timber weatherboards and exterior joinery, 20% at the time of painting,",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.2.0.1.b.2,"The maximum moisture contents shall be: For timber exterior joinery, 20% at the time of painting,","if( and( expression( function( is), atom( relation( material), variable( exterior joinery)), data( timber)), expression( function( define), atom( relation( painting time), variable( exterior joinery)), data( x0)), expression( function( has), atom( variable( exterior joinery)), data( moisture content)), expression( function( in), atom( relation( measurement), variable( moisture content)), data( x0)))), then( obligation( expression( function( less than equal), atom( relation( moisture content), variable( exterior joinery)), data( 20 percent))))","The maximum moisture contents shall be: For timber exterior joinery, 20% at the time of painting,",SplitableEntities
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.2.0.1.c.1,"The maximum moisture contents shall be: For reconstituted wood products, 18% at all times","if( and( expression( function( is), atom( relation( material), variable( product)), data( wood)), expression( function( is), atom( variable( product)), data( reconstituted)))), then( obligation( expression( function( less than equal), atom( relation( moisture content), variable( product)), data( 18 percent))))","The maximum moisture contents shall be: For reconstituted wood products, 18% at all times",
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.3.1.0.1,"10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above). ","if( and( expression( function( is), atom( relation( material), variable( product)), data( timber)), expression( function( has), atom( variable( product)), data( moisture content)), expression( function( is), atom( relation( type), variable( measurement)), data( moisture content)))), then( and( obligation( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood))), obligation( expression( function( in), atom( variable( recommended procedure)), data( scion publication))), obligation( expression( function( by), atom( variable( measurement)), data( moisture meter))), obligation( expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistant))), obligation( expression( function( has), atom( variable( moisture meter)), data( insulated probe))), obligation( expression( function( as per), atom( relation( callibration), variable( moisture meter)), data( asnzs 1080.1 appendix e))), obligation( expression( function( by), atom( relation( sampling), variable( measurement)), data( insertion))), obligation( expression( function( into), atom( variable( insertion)), data( product))), expression( function( define), atom( relation( depth), variable( product)), data( x0)), obligation( expression( function( greater than equal), atom( relation( depth), variable( insertion)), data( 1 / 3), * x0))), expression( function( define), atom( relation( end), variable( product)), data( x1)), obligation( expression( function( from), atom( relation( measurement), variable( distance)), data( x1))), obligation( expression( function( to), atom( relation( measurement), variable( distance)), data( insertion point))), obligation( expression( function( greater than), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 200.0)))), and( obligation( expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species))), obligation( expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature))), obligation( expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)))), obligation( expression( function( in), atom( variable( treatment type)), data( scion publication))))","10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above). ","Complex
SplitableEntities"
lrml/NZ_NZBC-E2AS1#3.8.lrml,r10.3.2.0.1,10.3 Measuring moisture content 10.3.2 Concrete floors; Measurement shall be made in accordance with BRANZ Bulletin 330 Thin Flooring Materials using hygrometers calibrated to ASTM E 104 - 2002 Standard practice for maintaining constant relative humidity by means of aqueous solutions.,"if( and( expression( function( is), atom( relation( material), variable( floor)), data( concrete)), expression( function( has), atom( variable( floor)), data( moisture content)))), then( and( obligation( expression( function( comply with), atom( relation( measurement), variable( moisture content)), data( publication))), obligation( expression( function( is), atom( relation( author), variable( publication)), data( branz))), obligation( expression( function( is), atom( relation( number), variable( publication)), data( 330))), obligation( expression( function( is), atom( relation( title), variable( publication)), data( thin flooring material))), obligation( expression( function( by), atom( relation( measurement), variable( moisture content)), data( hygrometer))), obligation( expression( function( comply with), atom( relation( calibration), variable( hygrometer)), data( astm e 104 2002)))))",10.3.2 Concrete floors; Measurement shall be made in accordance with BRANZ Bulletin 330 Thin Flooring Materials using hygrometers calibrated to ASTM E 104 - 2002 Standard practice for maintaining constant relative humidity by means of aqueous solutions.,"Ignore
MediumData"
lrml/NZ_NZBC-G13AS1#2.7.lrml,r3.4.4.0.1,Floor waste pipes may be combined to form a floor waste stack and shall have a diameter not less than that given in Table 3 (see Figure 3).,"if( and( expression( function( has), atom( variable( floor waste)), data( pipe)), expression( function( has), atom( variable( floor waste)), data( stack)), expression( function( include), atom( variable( stack)), data( pipe)))), then( and( obligation( expression( function( greater than equal), atom( relation( diameter), variable( pipe)), data( value))), obligation( expression( function( as per), atom( variable( value)), data( nzbc g13as1 t3)))))",Floor waste pipes may be combined to form a floor waste stack and shall have a diameter not less than that given in Table 3 (see Figure 3).,Abstract
lrml/NZ_NZBC-CAS2#1.1.lrml,r1.4.3.0.2,"1.4 Calculating occupant loads 1.4.3 Duplication shall be avoided by: Not including an occupant load for exitways, or for the occupant load determined for areas such as lift lobbies or sanitary facilities that are used intermittently by people already counted elsewhere in the building.","if( and( expression( function( has), atom( variable( space)), data( occupant)), or( expression( function( is), atom( relation( type), variable( space)), data( exitway)), expression( function( is), atom( relation( usage), variable( space)), data( intermittent))))), then( obligation( not( expression( function( exclude), atom( relation( calculation), variable( occupant load)), data( occupant)))))","1.4.3 Duplication shall be avoided by: Not including an occupant load for exitways, or for the occupant load determined for areas such as lift lobbies or sanitary facilities that are used intermittently by people already counted elsewhere in the building.","Abstract
NotEncodedParts"
