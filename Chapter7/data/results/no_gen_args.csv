Name,eval/bleu.max,eval/lrml_f_score.max,eval/lrml_recall,eval/lrml_precision,lrml_f_score,lrml_f_score_test,lrml_precision_test,lrml_recall_test,bleu_test,bleu,State,Runtime,lr_scheduler_type,max_length,metric_for_best_model,metric_names,model_name,model_path,model_type,mp_parameters,n_positions,no_cuda,no_repeat_ngram_size,num_beam_groups,num_beams,num_decoder_layers,num_heads,num_layers,num_return_sequences,num_train_epochs,optim,output_attentions,output_dir,output_hidden_states,output_past,output_scores,overwrite_output_dir,pad_token_id,past_index,per_device_eval_batch_size,per_device_train_batch_size,per_gpu_eval_batch_size,per_gpu_train_batch_size,predict_with_generate,prediction_loss_only,prefix_list,push_to_hub,push_to_hub_model_id,push_to_hub_organization,push_to_hub_token,ray_scope,relative_attention_max_distance,relative_attention_num_buckets,remove_invalid_values,remove_unused_columns,repetition_penalty,report_to,resume_from_checkpoint,return_dict,return_dict_in_generate,run_name,save_on_each_node,save_steps,save_strategy,save_total_limit,seed,sharded_ddp,skip_memory_metrics,sortish_sampler,task_specific_params.translation_amr_to_text.corpus_dir,task_specific_params.translation_amr_to_text.max_in_len,task_specific_params.translation_amr_to_text.max_out_len,task_specific_params.translation_amr_to_text.model_name_or_path,task_specific_params.translation_amr_to_text.train_fn,task_specific_params.translation_amr_to_text.valid_fn,temperature,tf32,tie_encoder_decoder,tie_word_embeddings,top_k,top_p,torchdynamo,torchscript,tpu_metrics_debug,tpu_num_cores,train_batch_size,transformers_version,typical_p,use_bfloat16,use_cache,use_ipex,use_legacy_prediction_loop,vocab_size,warmup_ratio,warmup_steps,weight_decay,write_predictions,xpu_backend,eval/brevity_penalty,eval/loss,eval/precisions,eval/prediction,eval/reference_length,eval/runtime,eval/samples_per_second,eval/steps_per_second,eval/translation_length,input_sample,output_sample,prediction,train/global_step,train/learning_rate,train/loss,epochs,bs,early_stopping_threshold,experiment,is_ir,label_augmentation,lr,mask_percentage,num_warmup_steps,post_process,retrain,runs,skip_evals,split,start_epoch,teacher_forcing_percentage,test/brevity_penalty,test/loss,test/precisions,test/prediction,test/reference_length,test/runtime,test/samples_per_second,test/steps_per_second,test/translation_length,train/total_flos,train/train_loss,train/train_runtime,train/train_samples_per_second,train/train_steps_per_second,eval/length_ratio,RANDOM_INPUT,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_PRED,RANDOM_PRED_EVAL,brevity_penalty,eval_epoch,ir_change_ratio,length_ratio,lrml_precision,lrml_recall,precisions,reference_length,translation_length,RANDOM_INPUT_test,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty_test,eval_epoch_test,ir_change_ratio_test,length_ratio_test,precisions_test,reference_length_test,translation_length_test
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_45,,,,,66.38000076,57.95202565,56.81934517,59.13078414,0.625977572,0.7602665,finished,3161,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_45,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,doc_split,0,0,,,,,,,,,,,,,,,,translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( has), atom( variable( chimney connection)), data( bracing unit))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( has), atom( variable( chimney connection)), data( bracing unit))))",0.989324916,19,1,0.989381491,65.74406547,67.02835888,"[0.8621229925577751,0.8051047739089333,0.739523092767171,0.6794136392606756]",12902,12765,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( plumbing disposal system)), expression( function( has), atom( variable( waste disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( waste disposal system)), data( nzbc g13 foul water)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( plumbing disposal system)), expression( function( has), atom( variable( waste disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( waste disposal system)), data( nzbc g13 foul water)))))",1.0,19,1,1.084573922,"[0.7522186723464679,0.6786565030967128,0.5888982136434481,0.5107410089307265]",7792,8451
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_44,,,,,64.98015429,53.63465759,50.36751685,57.35505198,0.578083001,0.749276346,finished,3660,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_44,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,doc_split,0,0,,,,,,,,,,,,,,,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))",1.0,17,1,1.002092699,63.87362422,66.1256987,"[0.8482481243715678,0.7870586405350755,0.7195589270352702,0.65610254797106]",12902,12929,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( health hazards)), expression( function( is), atom( relation( type), variable( x1)), data( safety hazards))), expression( function( is), atom( relation( type), variable( x1)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( is), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load)))))), then( permission( expression( function( below), atom( variable( storage tank)), data( ground))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( health hazards)), expression( function( is), atom( relation( type), variable( x1)), data( safety hazards))), expression( function( is), atom( relation( type), variable( x1)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( is), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load)))))), then( permission( expression( function( below), atom( variable( storage tank)), data( ground))))",1.0,19,1,1.167222793,"[0.6981858163826278,0.6272123893805309,0.5431274346132443,0.4695408734602464]",7792,9095
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_43,,,,,65.85949721,53.17169128,50.78177238,55.79767109,0.600018186,0.76044242,finished,3164,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_43,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,doc_split,0,0,,,,,,,,,,,,,,,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).","if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( type), variable( timber)), data( scion)), expression( function( is), atom( relation( type), variable( timber)), data( electrical resistance)), expression( function( is), atom( relation( type), variable( timber moisture meters)), data( insulation probe)), expression( function( comply with), atom( relation( sampling), variable( moisture meters)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( define), atom( relation( depth), variable( timber)), data( x1)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( '1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 'x0 1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( has), atom( variable( timber)), data( correction factor)), expression( function( has), atom( variable( correction factor)), data( species), variable( timber)), expression( function( has), atom( variable( timber)), data( temperature)), expression( function( has), atom( variable( timber)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( publication)), expression( function( as per), atom( variable( publication)), data( nzs 1080.1 appendix e))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( type), variable( timber)), data( scion)), expression( function( is), atom( relation( type), variable( timber)), data( electrical resistance)), expression( function( is), atom( relation( type), variable( timber moisture meters)), data( insulation probe)), expression( function( comply with), atom( relation( sampling), variable( moisture meters)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( define), atom( relation( depth), variable( timber)), data( x1)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( '1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 'x0 1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( has), atom( variable( timber)), data( correction factor)), expression( function( has), atom( variable( correction factor)), data( species), variable( timber)), expression( function( has), atom( variable( timber)), data( temperature)), expression( function( has), atom( variable( timber)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( publication)), expression( function( as per), atom( variable( publication)), data( nzs 1080.1 appendix e))))",1.0,18,1,1.008448303,65.42169832,66.30319504,"[0.8501268157712705,0.7951313755795981,0.7326909627787707,0.6751836224410064]",12902,13011,translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))",1.0,19,1,1.103696099,"[0.7267441860465116,0.6506729081334114,0.5625441696113074,0.4872554831061055]",7792,8600
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_45,,,,,66.52860496,61.82837846,63.53615459,60.21000527,0.650784045,0.71040328,finished,2866,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_45,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,random_split,0,0,,,,,,,,,,,,,,,,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))",0.97927239,16,1,0.979484269,67.71384531,65.38414294,"[0.8224190744266909,0.7634077281812125,0.6962385859093575,0.6335749199393225]",12332,12079,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( and( expression( function( is), atom( relation( type), variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( prefix( milli), kind( metre)), value( 1.2)))))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( fully support)), expression( function( has), atom( variable( underlay)), data( corrosion resistant material))))","if( and( expression( function( is), atom( relation( type), variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( prefix( milli), kind( metre)), value( 1.2)))))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( fully support)), expression( function( has), atom( variable( underlay)), data( corrosion resistant material))))",1.0,19,1,1.089906497,"[0.7478369262355185,0.6896145057860986,0.6217397747480735,0.5594040968342644]",12513,13638
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_44,,,,,67.35264984,64.08473677,65.27159463,62.94027025,0.722743617,0.710709815,finished,2757,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_44,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,random_split,0,0,,,,,,,,,,,,,,,,translate English to LegalRuleML: E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7.,"if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))",1.0,18,1,1.016785598,67.1853911,67.52074345,"[0.8030943456415982,0.7458293230670516,0.6827458256029685,0.6238844718481259]",12332,12539,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))",0.967269348,19,1,0.967793495,"[0.8461601981833196,0.7875238807209901,0.7173295454545454,0.6520971673531142]",12513,12110
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_43,,,,,68.84408656,63.99476587,65.36681704,62.67912933,0.712581464,0.714153935,finished,2752,linear,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_43,,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.1,False,,,,,,,,,,,,,,,,,20,8,20,[],False,0,0.0001,0,0,__main__.post_process,True,1,0,random_split,0,0,,,,,,,,,,,,,,,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.","if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)), expression( function( greater than), atom( relation( area), variable( room)), data( chimney)), expression( function( greater than), atom( relation( area), variable( room)), data( baseunit( kind( metre)), value( 240.0))), expression( function( greater than), atom( relation( area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( greater than equal), atom( relation( floor area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom(","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)), expression( function( greater than), atom( relation( area), variable( room)), data( chimney)), expression( function( greater than), atom( relation( area), variable( room)), data( baseunit( kind( metre)), value( 240.0))), expression( function( greater than), atom( relation( area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( greater than equal), atom( relation( floor area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom(",0.966194419,17,1,0.966753163,70.61642363,67.15853586,"[0.8339204831404127,0.7767277023036031,0.7098471986417657,0.6491587667606115]",12332,11922,translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))",0.950043425,19,1,0.951250699,"[0.8497017558598673,0.7909060175794456,0.7197517217923646,0.6543199315654405]",12513,11903
