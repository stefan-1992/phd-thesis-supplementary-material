Name,lrml_f_score,bleu,lrml_f_score_test,bleu_test,State,Notes,User,Tags,Created,Runtime,Sweep,adafactor,bs,dataset,decoding_runs,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,experiment,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,mask_percentage,max_length,metric_for_best_model,metric_names,model_name,model_path,no_repeat_ngram_size,num_beams,num_warmup_steps,post_process,repetition_penalty,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,calc_loss,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,reference_length,reference_length_test,translation_length,translation_length_test,RANDOM_INPUT_test_no_sep,RANDOM_INPUT_test_oracle,RANDOM_LABEL_EVAL_test_no_sep,RANDOM_LABEL_EVAL_test_oracle,RANDOM_LABEL_test_no_sep,RANDOM_LABEL_test_oracle,RANDOM_PRED_EVAL_test_no_sep,RANDOM_PRED_EVAL_test_oracle,RANDOM_PRED_test_no_sep,RANDOM_PRED_test_oracle,bleu_test_no_sep,bleu_test_oracle,brevity_penalty_test_no_sep,brevity_penalty_test_oracle,eval_epoch_test_no_sep,eval_epoch_test_oracle,ir_change_ratio_test_no_sep,ir_change_ratio_test_oracle,length_ratio_test_no_sep,length_ratio_test_oracle,lrml_f_score_test_no_sep,lrml_f_score_test_oracle,lrml_precision_test_no_sep,lrml_precision_test_oracle,lrml_recall_test_no_sep,lrml_recall_test_oracle,precisions_test_no_sep,precisions_test_oracle,reference_length_test_no_sep,reference_length_test_oracle,translation_length_test_no_sep,translation_length_test_oracle,eval_loss,prediction_epoch
t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_45,71.27937277651098,0.7691135242674384,55.80889070362215,0.6654149856754286,finished,-,stefanfuchs164,,2023-04-06T11:32:11.000Z,2127,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If roof cladding is profiled metal and trapezoidal or trough, and the roof pitch is less than 25 deg, and the roof cladding is in a High/Very High/Extra High wind zone, then the top ends of the roof cladding shall have stopends as shown in E2/AS1 Figure 49.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( is( roof cladding. type, profiled metal), is( roof cladding. profile, or( trapezoidal, trough)), or( less than( roof. pitch, 25 deg), is( building. wind zone, or( high, very high, extra high))))), then( obligation( and( has( cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( is( roof cladding. type, and( profiled metal, trapezoidal, trough)), less than( roof. pitch, 25 deg), within( roof cladding, wind zone), is( wind zone, or( high, very high, extra high)))), then( obligation( and( has( roof cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( type), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( type), variable( roof cladding)), data( trough)), expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( within), atom( variable( roof cladding)), data( wind zone)), or( expression( function( is), atom( variable( wind zone)), data( high)), expression( function( is), atom( variable( wind zone)), data( very high)), expression( function( is), atom( variable( wind zone)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), accept( network utility operator, discharge), towards( discharge, sewer))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.994293546895645,1.0,14,19,1,1,0.9943097669342896,1.057494866529774,71.51583845146835,54.59644414407583,71.04446568607891,57.07641094540548,"[0.8517560363750392,0.8048876625936146,0.7488504835896623,0.6973610778920514]","[0.7888349514563107,0.7145998778252902,0.6302583025830258,0.5518266253869969]",12829,7792,12756,8240,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( variable( treatment facility)), data( location)), expression( function( for), atom( variable( location)), data( cleaning)), expression( function( for), atom( variable( location)), data( clearing)), expression( function( for), atom( variable( clearing)), data( maintenance)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility, location), for( location, and( cleaning, clearing, clearing)), for( clearing, maintenance))))",,0.7480159078395547,,0.9283800652825868,,19.0,,1.0,,0.9308264887063656,,70.70559010929978,,72.11431154319061,,69.3508516518436,,"[0.9058320694884876,0.8480133370380661,0.7755844883102337,0.707392776523702]",,7792.0,,7253.0,,
t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_45,71.01700793497213,0.7556982415203102,56.236889119036704,0.6520026629216741,finished,-,stefanfuchs164,,2023-04-06T09:43:18.000Z,6530,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 If the chimney has a connection, then the chimney bracing units for each connection shall be given in B1/AS3 Table 2.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( has( chimney, connection)), then( obligation( as per( chimney. bracing unit, nzbc b1as3 t2)))","if( expression( function( has), atom( variable( chimney)), data( connection))), then( obligation( expression( function( as per), atom( relation( bracing unit), variable( chimney)), data( nzbc b1as3 t2))))","if( and( expression( function( has), atom( variable( network utility operator)), data( waste)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing system)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( has( network utility operator, waste), towards( waste. discharge, sewer), is( waste. type, industrial liquid))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing system, drainage system)), comply with( disposal system, nzbc g13 foul water))))",0.9368181150736796,0.983567688613245,12,19,1,1,0.9387325590459116,0.9837012320328542,72.01459287209643,55.67945032453095,70.04668353812039,56.80560246615746,"[0.8879016856265051,0.8399599064483796,0.7816990168893371,0.7262890955198648]","[0.7775603392041748,0.7116951379763469,0.629252150893448,0.5545333333333333]",12829,7792,12043,7665,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( clearing)), data( maintenance)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, clearing)), for( clearing, maintenance))))",,0.7489977247721186,,0.9443493012649148,,19.0,,1.0,,0.9458418891170433,,73.80091282504901,,76.03961563617047,,71.69026054888886,,"[0.8907734056987788,0.8344497607655502,0.7634986225895317,0.697293546148508]",,7792.0,,7370.0,,
t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_45,70.2605568759689,0.7507964891949884,55.34640655870003,0.6286577804327252,finished,-,stefanfuchs164,,2023-04-06T09:09:01.000Z,2054,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If buildings are within the scope of NZS 3604, and the building's elevation is up to 3 storeys and the elevation measured from lowest ground level adjacent to the building to the highest point of the roof is not for chimneys, aerials and the like, then E2/AS1 applies to the building and the elevation is 10 m or less, and the building's floor plan area is limited by seismic and structural control joints, and the elevation of the building's external walls is vertical, and roofs that are 60 deg or less above the horizontal, then E2/AS1 applies to buildings with elevation.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( apply to( nzs 3604, building), less than equal( count( building storey), 3), adjacent( building, ground level), define( min( ground level. elevation), x0), has( building, roof), define( max( roof. elevation), x1), exclude( max( roof. elevation), or( chimney, aerial)), in between( building. height, and( x0, x1)), less than equal( building. height, 10 m), has( building, floor plan area), by( floor plan area. limit, and( seismic control joint, structural control joint)), has( building, external wall), is( external wall. orientation, vertical), has( building, roof), less than equal( roof. slope, 60 deg))), then( and( has( building, or( material, product, process)), apply to( nzbc e2as1, and( material, product, process))))","[""if( and( expression( function( apply to), atom( variable( nzs 3604)), data( building)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( adjacent), atom( variable( building)), data( ground level)), expression( function( define), expression( function( min), atom( relation( elevation), variable( ground level))), data( x0)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), expression( function( max), atom( relation( elevation), variable( roof))), data( x1)), or( expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( chimney)), expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( aerial))), expression( function( in between), atom( relation( height), variable( building)), data( x0)), expression( function( in between), atom( relation( height), variable( building)), data( x1)), expression( function( less than equal), atom( relation( height), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( orientation), variable( external wall)), data( vertical)), expression( function( less than equal), atom( relation( slope), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( and( or( expression( function( has), atom( variable( building)), data( material)), expression( function( has), atom( variable( building)), data( product)), expression( function( has), atom( variable( building)), data( process))), expression( function( apply to), atom( variable( nzbc e2as1)), data( material)), expression( function( apply to), atom( variable( nzbc e2as1)), data( product)), expression( function( apply to), atom( variable( nzbc e2as1)), data( process))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( within( building. elevation, nzs 3604), less than equal( building. elevation, 3 storeys), not( and( adjacent( building. ground level, or( chimney, aerial)), equal( roof. elevation, highest point)), not( for( roof. elevation, or( chimney, aerial)))), then( apply to( nzbc e2as1, building), less than equal( building. elevation, 10 m), has( building. floor plan, joint), is( floor plan. area, and( seismic, structural control)), is( wall. elevation, external), is( wall. elevation, vertical), above( roof. elevation, horizontal), greater than equal( roof. elevation, 60 deg))))), then( apply as per( building. elevation, building))","if( and( expression( function( within), atom( relation( elevation), variable( building)), data( nzs 3604)), expression( function( less than equal), atom( relation( elevation), variable( building)), data( 3 storeys)), or( not( and( or( expression( function( adjacent), atom( relation( ground level), variable( building)), data( chimney)), expression( function( adjacent), atom( relation( ground level), variable( building)), data( aerial))), expression( function( equal), atom( relation( elevation), variable( roof)), data( highest point))), not( expression( function( for), atom( relation( elevation), variable( roof)), data( chimney)))), not( and( or( expression( function( adjacent), atom( relation( ground level), variable( building)), data( chimney)), expression( function( adjacent), atom( relation( ground level), variable( building)), data( aerial))), expression( function( equal), atom( relation( elevation), variable( roof)), data( highest point))), not( expression( function( for), atom( relation( elevation), variable( roof)), data( aerial))))), then( expression( function( apply to), atom( variable( nzbc e2as1)), data( building)), expression( function( less than equal), atom( relation( elevation), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( relation( floor plan), variable( building)), data( joint)), and( expression( function( is), atom( relation( area), variable( floor plan)), data( seismic)), expression( function( is), atom( relation( area), variable( floor plan)), data( structural control))), expression( function( is), atom( relation( elevation), variable( wall)), data( external)), expression( function( is), atom( relation( elevation), variable( wall)), data( vertical)), expression( function( above), atom( relation( elevation), variable( roof)), data( horizontal)), expression( function( greater than equal), atom( relation( elevation), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0)))))), then( expression( function( apply as per), atom( relation( elevation), variable( building)), data( building)))","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( accept( network utility operator, discharge), towards( discharge, sewer))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water)))))",0.9427678544884676,1.0,16,19,1,1,0.9443448437134616,1.1065195071868583,70.76472206287688,55.49141869241263,69.76352474657027,55.20215035122538,"[0.8767643417251342,0.8283792759880438,0.77173640691556,0.7176104856326668]","[0.7485502203665043,0.6772499124547683,0.5943374060150376,0.5183871349178195]",12829,7792,12115,8622,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, clearing), maintenance))))",,0.7021477444414588,,0.8794508157008578,,19.0,,1.0,,0.8861652977412731,,71.14169164449957,,73.8269822910818,,68.64488803613399,,"[0.8897900072411297,0.8386861313868613,0.7714495952906549,0.705786350148368]",,7792.0,,6905.0,,
t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_45,68.21258290739523,0.7325955538642595,54.67372120083696,0.6545449656288779,finished,-,stefanfuchs164,,2023-04-06T08:44:33.000Z,1465,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If buildings are within the scope of NZS 3604, and the building's elevation is up to 3 storeys and the elevation measured from lowest ground level adjacent to the building to the highest point of the roof is not for chimneys, aerials and the like, then E2/AS1 applies to the building and the elevation is 10 m or less, and the building's floor plan area is limited by seismic and structural control joints, and the elevation of the building's external walls is vertical, and roofs that are 60 deg or less above the horizontal, then E2/AS1 applies to buildings with elevation.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( apply to( nzs 3604, building), less than equal( count( building storey), 3), adjacent( building, ground level), define( min( ground level. elevation), x0), has( building, roof), define( max( roof. elevation), x1), exclude( max( roof. elevation), or( chimney, aerial)), in between( building. height, and( x0, x1)), less than equal( building. height, 10 m), has( building, floor plan area), by( floor plan area. limit, and( seismic control joint, structural control joint)), has( building, external wall), is( external wall. orientation, vertical), has( building, roof), less than equal( roof. slope, 60 deg))), then( and( has( building, or( material, product, process)), apply to( nzbc e2as1, and( material, product, process))))","[""if( and( expression( function( apply to), atom( variable( nzs 3604)), data( building)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( adjacent), atom( variable( building)), data( ground level)), expression( function( define), expression( function( min), atom( relation( elevation), variable( ground level))), data( x0)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), expression( function( max), atom( relation( elevation), variable( roof))), data( x1)), or( expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( chimney)), expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( aerial))), expression( function( in between), atom( relation( height), variable( building)), data( x0)), expression( function( in between), atom( relation( height), variable( building)), data( x1)), expression( function( less than equal), atom( relation( height), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( orientation), variable( external wall)), data( vertical)), expression( function( less than equal), atom( relation( slope), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( and( or( expression( function( has), atom( variable( building)), data( material)), expression( function( has), atom( variable( building)), data( product)), expression( function( has), atom( variable( building)), data( process))), expression( function( apply to), atom( variable( nzbc e2as1)), data( material)), expression( function( apply to), atom( variable( nzbc e2as1)), data( product)), expression( function( apply to), atom( variable( nzbc e2as1)), data( process))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( within( building. elevation, scope, nzs 3604), less than equal( building. elevation, 3 storeys), not( is( building. elevation, or( chimney, aerial)), not( is( roof. elevation, point), is( point. elevation, x0), is( roof. elevation, x0), not( for( building. elevation, and( chimney, aerial)), is( roof. elevation, high)))), then( apply to( nzbc e2as1, building, x0), less than equal( building. elevation, 10 m), has( building. floor plan area, and( seismic joint, structural control joint))), is( building. external wall, vertical), above( building. elevation, horizontal), less than equal( roof. elevation, 60 deg)))), then( apply on( nzbc e2-as1, building. elevation))","if( and( expression( function( within), atom( relation( elevation), variable( building)), data( scope)), expression( function( less than equal), atom( relation( elevation), variable( building)), data( 3 storeys)), or( not( expression( function( is), atom( relation( elevation), variable( building)), data( chimney)), not( expression( function( is), atom( relation( elevation), variable( roof)), data( point)), expression( function( is), atom( relation( elevation), variable( point)), data( x0)), expression( function( is), atom( relation( elevation), variable( roof)), data( x0)), not( expression( function( for), atom( relation( elevation), variable( building)), data( and( chimney, aerial))), expression( function( is), atom( relation( elevation), variable( roof)), data( high))))), not( expression( function( is), atom( relation( elevation), variable( building)), data( aerial)), not( expression( function( is), atom( relation( elevation), variable( roof)), data( point)), expression( function( is), atom( relation( elevation), variable( point)), data( x0)), expression( function( is), atom( relation( elevation), variable( roof)), data( x0)), not( expression( function( for), atom( relation( elevation), variable( building)), data( and( chimney, aerial))), expression( function( is), atom( relation( elevation), variable( roof)), data( high)))))), then( expression( function( apply to), atom( variable( nzbc e2as1)), data( building)), expression( function( less than equal), atom( relation( elevation), variable( building)), data( baseunit( kind( metre)), value( 10.0))), and( expression( function( has), atom( relation( floor plan area), variable( building)), data( seismic joint)), expression( function( has), atom( relation( floor plan area), variable( building)), data( structural control joint)))), expression( function( is), atom( relation( external wall), variable( building)), data( vertical)), expression( function( above), atom( relation( elevation), variable( building)), data( horizontal)), expression( function( less than equal), atom( relation( elevation), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( expression( function( apply on), atom( variable( nzbc e2-as1)), data( building. elevation)))","if( and( expression( function( has), atom( variable( network utility)), data( operator)), expression( function( accept), atom( variable( operator)), data( discharge)), expression( function( for), atom( variable( discharge)), data( industrial liquid waste)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( has( network utility, operator), accept( operator, discharge), for( discharge, industrial liquid waste), towards( discharge, sewer))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9486024634872,1.0,16,19,1,1,0.9498791799828512,1.0,69.16196153355968,54.223228303514816,67.28891537942876,55.131762304476105,"[0.8558181519776793,0.8061081304168386,0.7474261042842909,0.6898855758790612]","[0.7811858316221766,0.7066046271164534,0.6176776881020568,0.5383505965648354]",12829,7792,12186,7792,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, clearing)), for( access, maintenance)))))",,0.702250387332674,,0.8622186470384615,,19.0,,1.0,,0.8708932238193019,,71.84034529679852,,73.96527228580457,,69.83410152196831,,"[0.9108458591217212,0.8569306195216164,0.7853505092869982,0.7178673916326839]",,7792.0,,6786.0,,
t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_45,69.82687929889984,0.7365582379752013,55.289859907025175,0.6524115597737135,finished,-,stefanfuchs164,,2023-04-06T08:28:38.000Z,953,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If roof cladding is profiled metal and trapezoidal or trough, and the roof pitch is less than 25 deg, and the roof cladding is in a High/Very High/Extra High wind zone, then the top ends of the roof cladding shall have stopends as shown in E2/AS1 Figure 49.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( is( roof cladding. type, profiled metal), is( roof cladding. profile, or( trapezoidal, trough)), or( less than( roof. pitch, 25 deg), is( building. wind zone, or( high, very high, extra high))))), then( obligation( and( has( cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( is( roof cladding. type, or( profiled metal, trapezoidal, trough)), less than( roof. pitch, 25 deg), within( roof cladding, wind zone), is( wind zone, or( high, very high, extra high)))), then( obligation( and( has( roof cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","if( and( or( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( type), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( type), variable( roof cladding)), data( trough))), expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( within), atom( variable( roof cladding)), data( wind zone)), or( expression( function( is), atom( variable( wind zone)), data( high)), expression( function( is), atom( variable( wind zone)), data( very high)), expression( function( is), atom( variable( wind zone)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( accept( network utility operator, discharge), towards( discharge, sewer))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.93507650084544,0.9397332554082204,14,19,1,1,0.9370956426845428,0.9414784394250514,71.32031367082195,55.60253022460292,68.39470660580051,54.98068641058179,"[0.8696556313425386,0.8204334365325078,0.7625420875420875,0.7075959014311118]","[0.8245637949836423,0.7456393352561461,0.6563797398283975,0.5756519313903221]",12829,7792,12022,7336,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, clearing), maintenance))))",,0.7179705896856465,,0.8974167151056578,,19.0,,1.0,,0.902335728952772,,70.40354688590216,,72.25645118675482,,68.64329632155899,,"[0.8953207225145783,0.8423165137614679,0.772720705100419,0.703029420332071]",,7792.0,,7031.0,,
t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_45,68.78927508307407,0.7030511568075762,55.10904724603311,0.6668602648824266,finished,-,stefanfuchs164,,2023-04-06T07:48:51.000Z,1648,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 If the chimney has a connection, then the chimney bracing units for each connection shall be given in B1/AS3 Table 2.","translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( has( chimney, connection)), then( obligation( as per( chimney. bracing unit, nzbc b1as3 t2)))","if( expression( function( has), atom( variable( chimney)), data( connection))), then( obligation( expression( function( as per), atom( relation( bracing unit), variable( chimney)), data( nzbc b1as3 t2))))","if( and( expression( function( has), atom( variable( network utility operator)), data( discharge)), expression( function( for), atom( variable( discharge)), data( waste)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing system)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( has( network utility operator, discharge), for( discharge, waste), is( waste. type, industrial liquid))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing system, drainage system)), comply with( disposal system, nzbc g13 foul water))))",0.8754619221004879,1.0,19,19,1,1,0.8826097123704107,1.0225872689938398,71.03978700573225,54.807709248473934,66.67697528365952,55.41371713256928,"[0.8812152256469133,0.8354959118378955,0.7795367140685091,0.7246624662466247]","[0.7950552208835341,0.7191962593201061,0.6298040213794859,0.5491477636806357]",12829,7792,11323,7968,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( variable( treatment facility)), data( location)), expression( function( for), atom( variable( location)), data( cleaning)), expression( function( for), atom( variable( location)), data( clearing)), expression( function( for), atom( variable( location)), data( maintenance)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility, location), for( location, and( cleaning, clearing, clearing)), for( location, maintenance))))",,0.7187638156082368,,0.8751308874258293,,19.0,,1.0,,0.8823151950718686,,71.69609570904173,,73.69276616489573,,69.80476869574117,,"[0.9152,0.8639296187683284,0.793939393939394,0.7248882265275708]",,7792.0,,6875.0,,
t5-amr_0_ir-para_ir_doc_split_esp20_e20_45,1.1737089201877935,0.5570391300786531,0.0,0.3591466771332973,finished,-,stefanfuchs164,,2023-04-06T07:18:44.000Z,1804,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,paraphrase for LegalRuleML B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"paraphrase for LegalRuleML G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","If a chimney exists, then for each chimney connection the number of bracing units shall be as given in B1/AS3 Table 2.","[""If a chimney exists, then for each chimney connection the number of bracing units shall be as given in B1/AS3 Table 2.""]","[""Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a disposal system for plumbing and drainage, which complies with NZBC G13.""]","Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a disposal system for plumbing and drainage, which complies with NZBC G13.","If the chimney has a connection, then the chimney bracing units for each connection shall be given in B1/AS3 Table 2.","If the chimney has a connection, then the chimney bracing units for each connection shall be given in B1/AS3 Table 2.","If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.",0.9512814435729232,1.0,19,19,1,1,0.9524305555555556,1.0427350427350428,1.1737089201877935,0.0,1.1737089201877935,0.0,"[0.8053226394458622,0.6313622754491018,0.5209534794309881,0.44387351778656126]","[0.6604215456674473,0.4277071990320629,0.2903629536921151,0.20285158781594295]",2880,1638,2743,1708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_44,71.65097195694553,0.7343813708686261,53.81035191847728,0.6436770102739577,finished,-,stefanfuchs164,,2023-04-06T05:28:12.000Z,3628,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If the firecell type is risk group VP and the firecell has a fire sprinkler system, then the fire sprinkler system does not need to be extended throughout the remainder of the building where the risk group VP firecells are fire separated from the adjacent firecells. The fire separation between adjacent firecells is required to be provided with the greater of the property rating of the adjacent firecells.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( and( is( firecell. risk group, vp), requires( firecell, fire sprinkler system), as per( fire sprinkler system, nzbc cas2 t2.2.d), has( firecell, fire separation), adjacent( firecells, firecell), towards( fire separation, firecells), define( max( firecells. property rating), x0), as per( property rating, nzbc cas2 t2.4), is( fire separation. fire resistance rating, x0))), then( permission( not( has( building. remainder, fire sprinkler system))))","[""if( and( expression( function( is), atom( relation( risk group), variable( firecell)), data( vp)), expression( function( requires), atom( variable( firecell)), data( fire sprinkler system)), expression( function( as per), atom( variable( fire sprinkler system)), data( nzbc cas2 t2.2.d)), expression( function( has), atom( variable( firecell)), data( fire separation)), expression( function( adjacent), atom( variable( firecells)), data( firecell)), expression( function( towards), atom( variable( fire separation)), data( firecells)), expression( function( define), expression( function( max), atom( relation( property rating), variable( firecells))), data( x0)), expression( function( as per), atom( variable( property rating)), data( nzbc cas2 t2.4)), expression( function( is), atom( relation( fire resistance rating), variable( fire separation)), data( x0)))), then( permission( not( expression( function( has), atom( relation( remainder), variable( building)), data( fire sprinkler system)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( firecell. type, risk group, vp), has( firecell, fire sprinkler system))), then( permission( not( and( has( building. remainder, fire sprinkler system), is( fire sprinkler system. type, vp), is( firecell. risk group, fire separation), adjacent( firecells), greater than equal( fire separation. property rating, x0)))))","if( and( expression( function( is), atom( relation( type), variable( firecell)), data( risk group)), expression( function( has), atom( variable( firecell)), data( fire sprinkler system)))), then( permission( not( and( expression( function( has), atom( relation( remainder), variable( building)), data( fire sprinkler system)), expression( function( is), atom( relation( type), variable( fire sprinkler system)), data( vp)), expression( function( is), atom( relation( risk group), variable( firecell)), data( fire separation)), expression( function( adjacent), atom( variable( firecells))), expression( function( greater than equal), atom( relation( property rating), variable( fire separation)), data( x0))))))","if( expression( function( exist), atom( variable( storage tank)))), then( and( or( permission( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), expression( function( avoid), atom( variable( precaution)), data( health hazard)), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity)), expression( function( plant)))), permission( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), expression( function( avoid), atom( variable( precaution)), data( safety hazard)), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity)), expression( function( plant))))), expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( has), atom( variable( impact)), data( load))))","if( exist( storage tank)), then( and( permission( is( storage tank. location, below ground), has( storage tank, precaution), avoid( precaution, or( health hazard, safety hazard)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, plant)), has( storage tank, impact), has( impact, load))))",1.0,0.9709675015008308,14,19,1,1,1.0153558344376024,0.9713809034907598,72.11386856108592,54.03694799724481,71.19398008734755,53.58564829932648,"[0.805542760632581,0.7626399073716712,0.7124340266997827,0.6645594318270507]","[0.7820055489496631,0.7138674474314612,0.6299772087411181,0.5491626148028093]",12829,7792,13026,7569,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( and( expression( function( is), atom( variable( industrial liquid waste)), data( piping system))), expression( function( is), atom( relation( completion), variable( storage tank)), data( storage tank)), expression( function( is), atom( relation( completion), variable( storage tank)), data( treatment tank)))), then( obligation( and( expression( function( avoid), atom( relation( test), variable( system)), data( soil contamination)), expression( function( avoid), atom( relation( test), variable( system)), data( groundwater contamination)), expression( function( avoid), atom( relation( test), variable( system)), data( waterway contamination)), expression( function( avoid), atom( relation( test), variable( tank)), data( soil contamination)), expression( function( avoid), atom( relation( test), variable( tank)), data( waterway contamination)))))",,"if( or( and( is( industrial liquid waste, piping system)), is( storage tank. completion, or( storage tank, treatment tank)))), then( obligation( and( avoid( system. test, and( soil contamination, groundwater contamination, waterway contamination)), avoid( tank. test, and( soil contamination, waterway contamination)))))",,0.7598247518949889,,0.9721553705350748,,19.0,,1.0,,0.9725359342915812,,71.5676288019143,,73.07139242173982,,70.12451017820653,,"[0.8858537872789655,0.8263990429349993,0.750803427959293,0.6789423984891407]",,7792.0,,7578.0,,
t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_44,70.65971351091444,0.7663330857598406,53.462221966928304,0.6803406434272153,finished,-,stefanfuchs164,,2023-04-06T04:58:26.000Z,1783,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 If the chimney has a connection, then the chimney connection shall have bracing units.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( has( chimney, connection)), then( obligation( and( has( connection, bracing unit))))","if( expression( function( has), atom( variable( chimney)), data( connection))), then( obligation( and( expression( function( has), atom( variable( connection)), data( bracing unit)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( placement), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( for), atom( variable( precaution)), data( health hazards)), expression( function( for), atom( variable( precaution)), data( safety hazards))), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity))), expression( function( has), atom( variable( storage tank)), data( associated plant)), expression( function( has), atom( variable( associated load)), data( effect)))))","if( exist( storage tank)), then( obligation( and( below( storage tank. placement, ground), has( storage tank, precaution), for( precaution, or( health hazards, safety hazards)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, integrity), has( storage tank, associated plant), has( associated load, effect), has( associated load, effect)))))",0.9677664899766044,0.9796467849473748,10,19,1,1,0.96827500194871,0.9798511293634496,70.76535480093187,53.364993145452864,70.5543871616421,53.559805728914014,"[0.8702302366768636,0.8242247591288154,0.7677524429967427,0.7139814890654436]","[0.8265880812049771,0.7472295514511873,0.6571428571428571,0.5730923694779116]",12829,7792,12422,7635,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( storage facility)), data( treatment facility))), expression( function( is), atom( relation( completion), variable( storage facility)), data( storage facility)), expression( function( is), atom( relation( completion), variable( storage facility)), data( treatment facility)))), then( obligation( and( expression( function( prevent), atom( relation( testing), variable( system)), data( soil contamination)), expression( function( prevent), atom( relation( testing), variable( system)), data( groundwater contamination)), expression( function( prevent), atom( relation( testing), variable( system)), data( waterway contamination)), expression( function( avoid), atom( relation( testing), variable( tank)), data( groundwater contamination)), expression( function( avoid), atom( relation( testing), variable( tank)), data( waterway contamination)))))",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( storage facility, treatment facility)), is( storage facility. completion, or( storage facility, treatment facility)))), then( obligation( and( prevent( system. testing, and( soil contamination, groundwater contamination, waterway contamination)), avoid( tank. testing, and( groundwater contamination, waterway contamination)))))",,0.7481767057899283,,0.9278298783840278,,19.0,,1.0,,0.9303131416837782,,73.02915316796707,,74.1987432622701,,71.89586322593672,,"[0.9044006069802732,0.8468167917709202,0.7765793528505393,0.7108977978543196]",,7792.0,,7249.0,,
t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_44,69.58861278207767,0.7216992526056193,52.50228226585151,0.6290760629519434,finished,-,stefanfuchs164,,2023-04-06T04:23:28.000Z,2096,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a drain type is main or branch and the drain length is more than 10 m, then the drain shall be ventilated in accordance with G13/AS2 Table 3.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( or( is( drain. type, main), and( is( drain. type, branch), greater than equal( drain. length, 10 m)))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( drain. type, or( main, branch)), less than( drain. length, 10 m))), then( obligation( as per( drain. ventilation, nzbc g13as2 t3)))","if( and( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch))), expression( function( less than), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0))))), then( obligation( expression( function( as per), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health hazard)), expression( function( avoid), atom( variable( precaution)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity)), expression( function( tank)), expression( function( associated plant)))), expression( function( withstand), atom( relation( effect), variable( storage tank)), data( load))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), has( storage tank, precaution), avoid( precaution, or( health hazard, safety hazard)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, tank, associated plant)), withstand( storage tank. effect, load))))",1.0,0.9152370036363384,17,19,1,1,1.0572141242497466,0.9186344969199178,69.24173410879922,53.380630705416834,69.93898445387437,51.65237136762752,"[0.795767897957679,0.7513341239252891,0.6989047015870651,0.6492134831460674]","[0.8122380553227159,0.7403913839222863,0.6520998864926221,0.5691405691405691]",12829,7792,13563,7158,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( or( expression( function( industrial liquid waste)), expression( function( piping system)), expression( function( storage tank)), expression( function( treatment tank)))), or( expression( function( is), atom( variable( completion)), data( storage tank)), expression( function( is), atom( variable( completion)), data( testing tank)))), then( obligation( and( expression( function( avoid), atom( variable( testing system)), data( soil contamination)), expression( function( avoid), atom( variable( testing system)), data( groundwater contamination)), expression( function( avoid), atom( variable( testing system)), data( waterway contamination)))))",,"if( or( or( industrial liquid waste, piping system, storage tank, treatment tank)), is( completion, or( storage tank, testing tank))), then( obligation( and( avoid( testing system, and( soil contamination, groundwater contamination, waterway contamination)))))",,0.7177061554350526,,0.891317673682839,,19.0,,1.0,,0.8968172484599589,,70.47968986662755,,72.91097103118044,,68.20532272916677,,"[0.9066971951917572,0.8478292225587769,0.774934574004071,0.7057013044115492]",,7792.0,,6988.0,,
t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_44,67.8602155904061,0.6862492389660482,52.47355851673652,0.6577196333238076,finished,-,stefanfuchs164,,2023-04-06T03:45:53.000Z,2252,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If an escape route exists, then the escape route shall comply with NZBC D1.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health hazards)), expression( function( avoid), atom( variable( precaution)), data( safety hazards))), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity)), expression( function( associated plant)))), expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( has), atom( variable( impact)), data( load))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), has( storage tank, precaution), avoid( precaution, or( health hazards, safety hazards)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, associated plant)), has( storage tank, impact), has( impact, load), has( impact, load))))",0.868432382439991,0.941908012450372,19,19,1,1,0.8763738405175774,0.9435318275154004,69.72831047821136,52.76225531856479,66.08960544340603,52.18800382037683,"[0.8690740905452281,0.8217866093805943,0.7659670299972975,0.7127833182230281]","[0.831474428726877,0.7531862409209265,0.66017674675504,0.5750660915541951]",12829,7792,11243,7352,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( and( expression( function( is), atom( variable( industrial liquid waste)), data( piping system)), expression( function( is), atom( variable( storage system)), data( treatment tank))), expression( function( is), atom( relation( completion), variable( storage system)), data( storage tank)), expression( function( is), atom( relation( completion), variable( storage system)), data( treatment tank)))), then( obligation( and( expression( function( prevent), atom( variable( testing)), data( soil contamination)), expression( function( prevent), atom( variable( testing)), data( groundwater contamination)), expression( function( prevent), atom( variable( testing)), data( waterway contamination)))))",,"if( or( and( is( industrial liquid waste, piping system), is( storage system, treatment tank)), is( storage system. completion, or( storage tank, treatment tank)))), then( obligation( and( prevent( testing, and( soil contamination, groundwater contamination, waterway contamination)))))",,0.6899373655113294,,0.8462070886470056,,19.0,,1.0,,0.8569045174537988,,71.25017266975776,,74.6015369001363,,68.1869732681867,,"[0.9108881234087164,0.8566898218061009,0.7869651286736714,0.7195945945945946]",,7792.0,,6677.0,,
t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_44,69.17528003589175,0.7516197922603066,54.648381474436405,0.6785744762655105,finished,-,stefanfuchs164,,2023-04-06T03:04:45.000Z,2465,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If an escape route exists, then the escape route shall comply with NZBC D1.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( placement), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health hazard)), expression( function( avoid), atom( variable( precaution)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity)), expression( function( associated plant)))), expression( function( withstand), atom( relation( effect), variable( storage tank)), data( load))))","if( exist( storage tank)), then( obligation( and( below( storage tank. placement, ground), has( storage tank, precaution), avoid( precaution, or( health hazard, safety hazard)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, associated plant)), withstand( storage tank. effect, load))))",0.9661560352340288,0.9747901762313828,19,19,1,1,0.9667160339855017,0.9751026694045176,69.93427517038992,54.09013474580726,68.43258273601649,55.218271334722914,"[0.8657474600870827,0.8127483577974212,0.7511419249592169,0.6930018869472475]","[0.8229797315082916,0.7487736974678509,0.6602564102564102,0.5771559262747208]",12829,7792,12402,7598,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( expression( function( is), atom( variable( industrial liquid waste)), data( piping system)), expression( function( is), atom( variable( storage tank)), data( treatment tank)))), then( obligation( and( expression( function( avoid), atom( variable( testing)), data( soil contamination)), expression( function( avoid), atom( variable( testing)), data( groundwater contamination)), expression( function( avoid), atom( variable( testing)), data( waterway contamination)))))",,"if( or( is( industrial liquid waste, piping system), is( storage tank, treatment tank))), then( obligation( and( avoid( testing, and( soil contamination, groundwater contamination, waterway contamination)))))",,0.7166847028203376,,0.9012293834618528,,19.0,,1.0,,0.905800821355236,,68.32262360835368,,70.52556945506733,,66.25313216761589,,"[0.899121564182488,0.8403541339425961,0.7645365572826712,0.6922965327143479]",,7792.0,,7058.0,,
t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_44,67.04903675799487,0.6971907292391132,53.94280557114882,0.6545548956520316,finished,-,stefanfuchs164,,2023-04-06T02:46:07.000Z,948,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If an escape route exists, then the escape route shall comply with NZBC D1.","translate English to LegalRuleML: G14VM1 If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( placement), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health hazards)), expression( function( avoid), atom( variable( precaution)), data( safety hazards))), expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), or( expression( function( integrity))), expression( function( is), atom( relation( threat), variable( integrity)), data( associated plant))), expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( is), atom( variable( impact)), data( load))))","if( exist( storage tank)), then( obligation( and( below( storage tank. placement, ground), has( storage tank, precaution), avoid( precaution, or( health hazards, safety hazards)), has( storage tank, corrosion), threaten( corrosion, integrity), or( integrity, integrity), is( integrity. threat, associated plant)), has( storage tank, impact), is( impact, load), is( impact, load))))",0.9073327928182082,0.9793848544379202,19,19,1,1,0.9113726712916048,0.979594455852156,68.05499992004393,52.596025404159874,66.07237993163062,55.3603698759256,"[0.8480157372562436,0.8004474657946821,0.743982683982684,0.6903040334523913]","[0.7935281016638281,0.7210345737661652,0.632061677522265,0.5516871987145152]",12829,7792,11692,7633,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( expression( function( is), atom( variable( industrial liquid waste)), data( piping system)), expression( function( is), atom( variable( storage tank)), data( treatment tank)))), then( obligation( and( expression( function( avoid), atom( variable( system)), data( soil contamination)), expression( function( avoid), atom( variable( system)), data( groundwater contamination)), expression( function( avoid), atom( variable( system)), data( waterway contamination)))))",,"if( or( is( industrial liquid waste, piping system), is( storage tank, treatment tank))), then( obligation( and( avoid( system, and( soil contamination, groundwater contamination, waterway contamination)))))",,0.7394005849557923,,0.928517568126766,,19.0,,1.0,,0.9309548254620124,,70.57399755749657,,71.6048154036505,,69.57243767701068,,"[0.8974358974358975,0.840394499236005,0.7665173572228443,0.6955847087036253]",,7792.0,,7254.0,,
t5-amr_0_ir-para_ir_doc_split_esp20_e20_44,1.1737089201877935,0.5543489443912901,0.0,0.3745722367696978,finished,-,stefanfuchs164,,2023-04-06T02:24:56.000Z,1268,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,paraphrase for LegalRuleML G12AS2 5.2.7 Penetrations through membrane roofs must be as shown in Figure 8.,"paraphrase for LegalRuleML G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","If penetrations are through membrane roofs, then the penetration must be as shown in G12/AS2 Figure 8.","[""If penetrations are through membrane roofs, then the penetration must be as shown in G12/AS2 Figure 8.""]","[""If a storage tank is located below ground, then the storage tanks should avoid health and safety hazards, corrosion, and be designed to withstand associated loads.""]","If a storage tank is located below ground, then the storage tanks should avoid health and safety hazards, corrosion, and be designed to withstand associated loads.","If penetrations are through membrane roofs, then the penetration must be as shown in G12/AS2 Figure 8.","If penetrations are through membrane roofs, then the penetration must be as shown in G12/AS2 Figure 8.","If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.","If storage tanks exist, then the storage tanks may be placed below ground and the storage tanks shall have precautions to avoid health or safety hazards, and the storage tanks shall have corrosion that threatens the integrity of the tank or associated plant, and the storage tanks shall withstand the effects of associated loads.",0.9671813965441368,1.0,16,19,1,1,0.9677083333333332,1.0042735042735045,1.1737089201877935,0.0,1.1737089201877935,0.0,"[0.7800502332256907,0.6167157584683358,0.5119092627599244,0.4382284382284382]","[0.6857142857142857,0.4377358490566038,0.30618892508143325,0.2141891891891892]",2880,1638,2787,1645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_43,70.75206580704914,0.7692926053011445,54.06176587691191,0.6456906674703539,finished,-,stefanfuchs164,,2023-04-06T01:11:24.000Z,4410,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a building is proposed to be built over an existing drain, then the drain shall be verified as being sound both before and after construction.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( and( above( building. construction, drain), exist( drain))), then( obligation( and( has( drain. soundness, verification), before( verification, construction), after( verification, construction))))","[""if( and( expression( function( above), atom( relation( construction), variable( building)), data( drain)), expression( function( exist), atom( variable( drain))))), then( obligation( and( expression( function( has), atom( relation( soundness), variable( drain)), data( verification)), expression( function( before), atom( variable( verification)), data( construction)), expression( function( after), atom( variable( verification)), data( construction)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( above( building. build, drain), is( drain. type, existing))), then( obligation( and( verify( drain, sound), before( sound, construction), after( sound, construction))))","if( and( expression( function( above), atom( relation( build), variable( building)), data( drain)), expression( function( is), atom( relation( type), variable( drain)), data( existing)))), then( obligation( and( expression( function( verify), atom( variable( drain)), data( sound)), expression( function( before), atom( variable( sound)), data( construction)), expression( function( after), atom( variable( sound)), data( construction)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( fixing), variable( tank)), data( earthquake force)), expression( function( as per), atom( variable( method)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. fixing, earthquake force), as per( method, nzs 4219))))",0.967203116059825,1.0,16,19,1,1,0.967729363161587,1.00282340862423,71.2217742184911,51.9941231595847,70.28851226878555,56.300666266265885,"[0.8745066451872735,0.8280136098509397,0.7712865640022815,0.7166038354368136]","[0.7574865625799846,0.6939038535893801,0.6140965732087228,0.538501764936593]",12829,7792,12415,7814,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( and( expression( function( for), atom( variable( vehicle access area)), data( industrial liquid waste collection)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))",,"if( and( for( vehicle access area, industrial liquid waste collection))), then( obligation( comply with( vehicle access area, nzbc d1)))",,0.747771051276917,,0.9093754903260516,,19.0,,1.0,,0.9132443531827515,,72.8678357535277,,74.75696469711357,,71.0718311427284,,"[0.917088251826869,0.8631921824104235,0.7943191550099914,0.7270896273917422]",,7792.0,,7116.0,,
t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_43,71.11871038856262,0.741357154494288,52.08991424844963,0.6289351242004608,finished,-,stefanfuchs164,,2023-04-06T00:07:29.000Z,3832,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 If drains exist, then drains shall be capable of handling the rainfall during a storm. No drain shall have an internal diameter of less than 85 mm.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( exist( drain)), then( obligation( and( for( drain, storm water), greater than equal( drain. internal diameter, 85 mm))))","[""if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( for), atom( variable( drain)), data( storm water)), expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( exist( drain)), then( obligation( and( has( drain, rainfall capacity), during( rainfall capacity, storm)), not( and( greater than equal( drain. internal diameter, 85 mm)))))","if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( has), atom( variable( drain)), data( rainfall capacity)), expression( function( during), atom( variable( rainfall capacity)), data( storm))), not( and( expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0)))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( as per), atom( variable( method)), data( nzs 4219)), expression( function( acceptable))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force)), as per( method, nzs 4219), acceptable)))",0.9114972303345932,0.9975586263345566,13,19,1,1,0.9151921428014654,0.9975616016427103,72.129875910411,50.12669129080247,70.13550333415064,54.21318566252323,"[0.8906396388723278,0.8447300771208226,0.7899818949909475,0.7362942401110341]","[0.7527338222050688,0.6816532780513086,0.595980686415242,0.5166929547844374]",12829,7792,11741,7773,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( and( expression( function( for), atom( variable( vehicle access area)), data( industrial liquid waste collection)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))",,"if( and( for( vehicle access area, industrial liquid waste collection))), then( obligation( comply with( vehicle access area, nzbc d1)))",,0.7552254387893459,,0.9239706976242812,,19.0,,1.0,,0.9267197125256672,,72.05315668917338,,73.52499710058063,,70.63908709233694,,"[0.9106771915247196,0.8604521350823332,0.7910279848122627,0.7200963718820862]",,7792.0,,7221.0,,
t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_43,68.9959635872056,0.7086339701172369,51.15903852963803,0.6175388154848936,finished,-,stefanfuchs164,,2023-04-05T23:52:31.000Z,896,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a grease trap exists, then the top of the outlet junction shall be extended to finished ground level and fitted with a watertight rodding point access cover as shown in G13/AS2 Figures 4 and 10.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( has( grease trap, outlet junction)), then( obligation( and( is( top of( outlet junction), finished ground level), has( outlet junction, rodding point), has( rodding point, access cover), is( access cover, watertight))))","[""if( expression( function( has), atom( variable( grease trap)), data( outlet junction))), then( obligation( and( expression( function( is), expression( function( top of), atom( variable( outlet junction))), data( finished ground level)), expression( function( has), atom( variable( outlet junction)), data( rodding point)), expression( function( has), atom( variable( rodding point)), data( access cover)), expression( function( is), atom( variable( access cover)), data( watertight)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( exist( grease trap)), then( obligation( and( has( outlet junction, top), is( top of( outlet junction. elevation, finished ground level), has( outlet junction, access cover), is( access cover. type, rodding point), is( access cover, watertight), as per( access cover, and( nzbc g13as2 f4 and nzbc g14)))))","if( expression( function( exist), atom( variable( grease trap)))), then( obligation( and( expression( function( has), atom( variable( outlet junction)), data( top)), expression( function( is), expression( function( top of), atom( relation( elevation), variable( outlet junction)), data( finished ground level)), data( has( outlet junction, access cover))))))","if( expression( function( is), atom( variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( as per), atom( variable( method)), data( nzs 4219))))","if( is( tank, freestanding)), then( obligation( and( against( tank. security, earthquake force)), as per( method, nzs 4219)))",0.8773875125396905,0.9278298783840278,14,19,1,1,0.88432457712994,0.9303131416837782,70.23601251448667,50.657411029338405,67.79894225017034,51.67069997343737,"[0.8881445570736007,0.8393649104133404,0.7828260287423011,0.7291591807402084]","[0.795420057939026,0.7196274673338894,0.6294999299621796,0.5446075663466968]",12829,7792,11345,7249,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( and( expression( function( for), atom( relation( access area), variable( vehicle)), data( industrial liquid waste collection)))), then( obligation( expression( function( comply with), atom( relation( access area), variable( vehicle)), data( nzbc d1))))",,"if( and( for( vehicle. access area, industrial liquid waste collection))), then( obligation( comply with( vehicle. access area, nzbc d1)))",,0.7061286560964048,,0.8592970946627899,,19.0,,1.0,,0.8683264887063655,,70.0795615925246,,73.67706829613869,,66.81701770126087,,"[0.916937629323086,0.8632096557890031,0.794921875,0.7247386759581882]",,7792.0,,6766.0,,
t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_43,68.30984549639231,0.7490986565228025,50.95825009814549,0.6243551129237205,finished,-,stefanfuchs164,,2023-04-05T23:14:46.000Z,2263,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 If the structural glass barrier has a fall of 1000 mm or more, then the barrier shall have interlinking rails.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. material, structural glass), greater than equal( barrier. fall, 1000 mm))), then( obligation( has( barrier, rail), is( rail. type, interlinked)))","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( structural glass)), expression( function( greater than equal), atom( relation( fall), variable( barrier)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( expression( function( has), atom( variable( barrier)), data( rail)), expression( function( is), atom( relation( type), variable( rail)), data( interlinked))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( as per), atom( variable( method)), data( nzs 4219)), expression( function( acceptable))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force)), as per( method, nzs 4219), acceptable)))",0.9312516058351282,1.0,15,19,1,1,0.9335100163691636,1.0704568788501028,68.97969411069145,49.39647510713807,67.65288130741811,52.622007169802096,"[0.8921175684702739,0.8392272154556909,0.7779280040561095,0.7188642353141206]","[0.7531471046637094,0.6793386434950519,0.5899647673429717,0.5034246575342466]",12829,7792,11976,8341,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( and( expression( function( for), atom( variable( vehicle access area)), data( industrial liquid waste collection)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))",,"if( and( for( vehicle access area, industrial liquid waste collection)), then( obligation( comply with( vehicle access area, nzbc d1)))",,0.7025889163167734,,0.8550478110629796,,19.0,,1.0,,0.8646047227926078,,71.80585151829546,,74.84201185464717,,69.00642682503066,,"[0.9149473059225176,0.8626159832385514,0.7944771389769126,0.727023737066342]",,7792.0,,6737.0,,
t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_43,69.4660635727558,0.7444255432061035,50.03460443211487,0.616459485693157,finished,-,stefanfuchs164,,2023-04-05T22:42:10.000Z,1953,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a grease trap exists, then the top of the outlet junction shall be extended to finished ground level and fitted with a watertight rodding point access cover as shown in G13/AS2 Figures 4 and 10.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( has( grease trap, outlet junction)), then( obligation( and( is( top of( outlet junction), finished ground level), has( outlet junction, rodding point), has( rodding point, access cover), is( access cover, watertight))))","[""if( expression( function( has), atom( variable( grease trap)), data( outlet junction))), then( obligation( and( expression( function( is), expression( function( top of), atom( variable( outlet junction))), data( finished ground level)), expression( function( has), atom( variable( outlet junction)), data( rodding point)), expression( function( has), atom( variable( rodding point)), data( access cover)), expression( function( is), atom( variable( access cover)), data( watertight)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( exist( grease trap)), then( obligation( and( has( outlet junction, top), is( top of( outlet junction. elevation, finished ground level), has( outlet junction, access cover), is( access cover. type, rodding point), is( access cover. type, watertight), as per( access cover, and( nzbc g13as2 f4 and nzbc g14)))))","if( expression( function( exist), atom( variable( grease trap)))), then( obligation( and( expression( function( has), atom( variable( outlet junction)), data( top)), expression( function( is), expression( function( top of), atom( relation( elevation), variable( outlet junction)), data( finished ground level)), data( has( outlet junction, access cover))))))","if( expression( function( is), atom( variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( anchor), variable( tank)), data( earthquake force))), expression( function( comply with), atom( relation( anchor), variable( tank)), data( nzs 4219))))","if( is( tank, freestanding)), then( obligation( and( against( tank. anchor, earthquake force)), comply with( tank. anchor, nzs 4219)))",0.920283939565023,1.0,14,19,1,1,0.9232987762101488,1.0237422997946612,70.46084704597212,48.83666768937241,68.49897824316774,51.292788474107184,"[0.8921063739974673,0.8434686597587906,0.7837306673502521,0.7260144429160935]","[0.7427604362542309,0.6682655894976016,0.5820516079827126,0.49987199180747566]",12829,7792,11845,7977,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( expression( function( for), atom( variable( vehicle access area)), data( industrial liquid waste collection))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))",,"if( for( vehicle access area, industrial liquid waste collection)), then( obligation( comply with( vehicle access area, nzbc d1)))",,0.6698932871667598,,0.8224572859459923,,19.0,,1.0,,0.8364989733059548,,68.87241990078503,,73.14649110852834,,65.07025652068667,,"[0.9163853942927278,0.8601268760637475,0.7846441947565543,0.7116322997009287]",,7792.0,,6518.0,,
t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_43,68.97631614849308,0.7278756152672675,52.47958347212139,0.6604049571241406,finished,-,stefanfuchs164,,2023-04-05T22:19:00.000Z,1388,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 If the structural glass barrier has a fall of 1000 mm or more, then the barrier shall have interlinking rails.","translate English to LegalRuleML: G14VM1 If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. material, structural glass), greater than equal( barrier. fall, 1000 mm))), then( obligation( has( barrier, rail), is( rail. type, interlinked)))","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( structural glass)), expression( function( greater than equal), atom( relation( fall), variable( barrier)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( expression( function( has), atom( variable( barrier)), data( rail)), expression( function( is), atom( relation( type), variable( rail)), data( interlinked))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( as per), atom( relation( security), variable( tank)), data( nzs 4219)), expression( function( accept), atom( relation( method), variable( tank)), data( nzs 4219))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force)), as per( tank. security, nzs 4219), accept( tank. method, nzs 4219))))",0.9491759650352236,1.0,15,19,1,1,0.9504248187699744,1.0015400410677615,69.65218669932517,50.71043009852541,68.31343617409216,54.37664130055608,"[0.8459772000328057,0.7978056426332288,0.7426769562691893,0.6898998330550918]","[0.7807534597642235,0.7115756871854433,0.6275019495710944,0.5456211546013876]",12829,7792,12193,7804,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( and( expression( function( for), atom( variable( vehicle access area)), data( industrial liquid waste collection)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))",,"if( and( for( vehicle access area, industrial liquid waste collection))), then( obligation( comply with( vehicle access area, nzbc d1)))",,0.7722059394826,,0.9861732527709738,,19.0,,1.0,,0.9862679671457906,,71.781027590256,,73.17654672069179,,70.43773910734713,,"[0.8840598568640208,0.8251638269986894,0.7522112211221123,0.6851063829787234]",,7792.0,,7685.0,,
t5-amr_0_ir-para_ir_doc_split_esp20_e20_43,1.1737089201877935,0.5612760131822057,0.0,0.33326984465465,finished,-,stefanfuchs164,,2023-04-05T21:52:10.000Z,1607,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"paraphrase for LegalRuleML E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",paraphrase for LegalRuleML G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"If the moisture content of timber is measured, then the measurement shall be by the recommended procedure 'Measurement of moisture content of Wood' in the Scion publication, the measurement shall use electrical resistance type moisture meters with insulated probes. the moisture meters shall be calibrated to AS/NZS 1080.1 Appendix E, and doing the measurement sampling by inserting probes to at least 1/3 the depth of timber being measured, and the probe located at a distance exceeding 200 mm from board ends c) Using measurement correction factors for timber species, temperature, and treatment type, and the measurement correction factors outlined in Scion publication.","[""If the moisture content of timber is measured, then the measurement shall be by the recommended procedure 'Measurement of moisture content of Wood' in the Scion publication, the measurement shall use electrical resistance type moisture meters with insulated probes. the moisture meters shall be calibrated to AS/NZS 1080.1 Appendix E, and doing the measurement sampling by inserting probes to at least 1/3 the depth of timber being measured, and the probe located at a distance exceeding 200 mm from board ends c) Using measurement correction factors for timber species, temperature, and treatment type, and the measurement correction factors outlined in Scion publication.""]","[""If a tank is free-standing, then the tank shall have seismic resistance. The tank's seismic resistance can be as described in NZS 4219.""]","If a tank is free-standing, then the tank shall have seismic resistance. The tank's seismic resistance can be as described in NZS 4219.","If the measurement of moisture content is of timber, then the measurement shall be by the recommended procedure in the Scion publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. The samplings of measurements shall be taken with meters that are calibrated to AS/NZS 1080.1 Appendix E and the measurements shall be taken by inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends, and the measurements shall be by the correction factors for timber species, temperature, and treatment type, and the correction factors shall beoutlined in Scion publication above.","If the measurement of moisture content is of timber, then the measurement shall be by the recommended procedure in the Scion publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. The samplings of measurements shall be taken with meters that are calibrated to AS/NZS 1080.1 Appendix E and the measurements shall be taken by inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends, and the measurements shall be by the correction factors for timber species, temperature, and treatment type, and the correction factors shall beoutlined in Scion publication above.","If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.","If tanks are free-standing, then the tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.",0.9650274760077278,1.0,18,19,1,1,0.965625,1.051282051282051,1.1737089201877935,0.0,1.1737089201877935,0.0,"[0.7910823444804027,0.6284132841328414,0.519893899204244,0.4427570093457944]","[0.6533101045296167,0.4013197360527894,0.2673697270471464,0.17597944765574824]",2880,1638,2781,1722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_45,69.97264260694847,0.7576020432497547,68.85929879131086,0.7530715854445741,finished,-,stefanfuchs164,,2023-04-05T21:20:13.000Z,1914,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If structural framing members are connected to building elements with an FRR, then the framing member shall be rated at no less than the building elements to which the framing member is connected.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( and( has( building, structural framing member), has( building, element), connect( building. structural framing member, element), has( element, fire resistance rating))), then( obligation( greater than equal( structural framing member. fire resistance rating, fire resistance rating)))","[""if( and( expression( function( has), atom( variable( building)), data( structural framing member)), expression( function( has), atom( variable( building)), data( element)), expression( function( connect), atom( relation( structural framing member), variable( building)), data( element)), expression( function( has), atom( variable( element)), data( fire resistance rating)))), then( obligation( expression( function( greater than equal), atom( relation( fire resistance rating), variable( structural framing member)), data( fire resistance rating))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( framing. type, structural), connect( framing member, building element), by( framing member. connection, fRR))), then( obligation( and( define( building element. rating, x0), greater than equal( framing member. rating, x1))))","if( and( expression( function( is), atom( relation( type), variable( framing)), data( structural)), expression( function( connect), atom( variable( framing member)), data( building element)), expression( function( by), atom( relation( connection), variable( framing member)), data( fRR)))), then( obligation( and( expression( function( define), atom( relation( rating), variable( building element)), data( x0)), expression( function( greater than equal), atom( relation( rating), variable( framing member)), data( x1)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( x0)), expression( function( in between), atom( relation( span), variable( underlay)), data( supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. support, full), is( underlay. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay. self supporting, x0), in between( underlay. span, supports), less than equal( underlay. span, 1.2 m)))))",0.9463778290214424,0.9457373762003204,15,19,1,1,0.9477654310974126,0.9471577261809448,70.51998728674052,69.58015117599096,69.43372897951778,68.15322935805906,"[0.8776208814719726,0.8319269846736697,0.7772676080741575,0.7236750348675035]","[0.8828402366863906,0.8307679224423845,0.7702772073921971,0.7116295084789532]",12329,12490,11685,11830,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( spacing), variable( wall tie)), data( close)))))",,"if( is( chimney. material, brick)), then( obligation( and( is( chimney. fixing, roof level), by( chimney. fixing, and( u strap, wall tie)), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1.0 mm), is( u strap. material, mild steel), equal( wall tie. spacing, close))))",,0.8172888147812657,,0.9312053939451675,,19.0,,1.0,,0.933466773418735,,83.63239422806514,,85.57851828346075,,81.77281491567634,,"[0.9232352688909856,0.8970486710390059,0.8637666058869498,0.8294600733880831]",,12490.0,,11659.0,,
t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_45,70.19570481841865,0.7480844909912874,69.3826239903394,0.7518564793786512,finished,-,stefanfuchs164,,2023-04-05T20:41:19.000Z,2331,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G14VM1 If the network utility operator accepts discharge of industrial liquid waste to a sewer, then the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( accept( network utility operator, discharge), for( discharge, industrial liquid waste), into( discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( for), atom( variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( x0)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( supports)), expression( function( is), atom( relation( location), variable( support)), data( adjacent))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. support, full), is( underlay. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay. self supporting, x0), less than equal( underlay. span, 1.2 m), in between( underlay. span, supports), is( support. location, adjacent)))))",0.9231389879201668,1.0,16,19,1,1,0.925946954335307,1.0069655724579665,70.6181731671579,69.57210529372,69.77826118516275,69.19417199738828,"[0.8891030133146461,0.8431908329660643,0.7865886109632784,0.7313219673301794]","[0.8370040550210702,0.7863425555733248,0.725774024929634,0.668958265933355]",12329,12490,11416,12577,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), expression( function( is), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( depth), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 1.0)))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))",,"if( is( chimney. material, brick)), then( obligation( and( by( chimney. fixing, and( u strap, wall tie)), is( chimney. fixing, roof level), is( u strap. length, 50 mm), is( u strap. material, mild steel), equal( wall tie. depth, 1.0 mm)), is( wall tie. spacing, close))))",,0.8307615313692779,,0.9358158632700876,,19.0,,1.0,,0.9377902321857486,,85.09235716370814,,86.3446052403176,,83.87591231942939,,"[0.9353709553487578,0.9084349768081086,0.8733903724829315,0.8368695652173913]",,12490.0,,11713.0,,
t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_45,67.50319377684868,0.7248962713384761,65.73108310529166,0.7090313871995088,finished,-,stefanfuchs164,,2023-04-05T20:08:01.000Z,1995,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 If a chimney at roof level is held either by a roof bracket or by a roof tie, then the chimney is considered connected to the building.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( has( chimney, roof level), is( chimney. holding, or( roof bracket, roof tie)))), then( connect( chimney, building))","if( and( expression( function( has), atom( variable( chimney)), data( roof level)), or( expression( function( is), atom( relation( holding), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( holding), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( is), atom( relation( type), variable( self supporting)), data( r2)), expression( function( within), atom( relation( span), variable( underlay)), data( support)), expression( function( equal), atom( variable( 1.2 m)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. support, full), is( underlay. material, corrosion resistant)), and( is( underlay. type, self supporting), is( self supporting. type, r2), within( underlay. span, support), equal( 1.2 m)))))",0.9689494476900696,0.9330861283730768,12,19,1,1,0.9694216887014356,0.9352281825460368,68.89876099516441,67.65963487133517,66.16303950322808,63.90942626190768,"[0.8331659973226239,0.7802373537581012,0.7222692633361558,0.6671777834568532]","[0.853694033045116,0.7993970714900948,0.731519195770864,0.6678583885594699]",12329,12490,11952,11681,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), expression( function( is), atom( relation( material), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( spacing), variable( wall tie)), data( close)))))",,"if( is( chimney. material, brick)), then( obligation( and( by( chimney. fixing, and( u strap, wall tie)), is( chimney. fixing, roof level), is( u strap. material, zinc coated), equal( u strap. length, 1.0 mm), equal( u strap. depth, mild steel), equal( wall tie. spacing, close))))",,0.7839833200901068,,0.9042635051786196,,19.0,,1.0,,0.9085668534827862,,81.18170955518683,,84.39952162395643,,78.20025059312627,,"[0.9247444483609448,0.8916378469451095,0.849009459218276,0.8070947462954647]",,12490.0,,11348.0,,
t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_45,66.84689526800227,0.7092352486048631,67.29118951163547,0.7226934663822246,finished,-,stefanfuchs164,,2023-04-05T18:55:53.000Z,4325,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 If storage water heaters are open vented, then the storage water heaters shall have a vent pipe complying with G12/AS1 Paragraph 6.8.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( support), variable( underlay)), data( corrosion resistant material))), and( expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( greater than equal), atom( relation( span), variable( self supporting)), data( baseunit( kind( metre)), value( 1.2)))), and( expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. support, full), is( underlay. support, corrosion resistant material)), and( is( underlay. type, self supporting), greater than equal( self supporting. span, 1.2 m)), in between( underlay. span, and( adjacent supports)))))",0.9006395823819003,0.9106473946909236,13,19,1,1,0.9052640116797794,0.9144115292233786,68.18723270207397,68.40746689914077,65.55823530327565,66.21075815683858,"[0.8771615446644566,0.8227231740306582,0.7604138306561394,0.7007672634271099]","[0.8934419052622362,0.8351541850220264,0.7632768862487809,0.6964668094218416]",12329,12490,11161,11421,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( length), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))",,"if( is( chimney. material, brick)), then( obligation( and( is( chimney. fixing, roof level), by( chimney. fixing, and( u strap, wall tie)), is( u strap. length, zinc coated), equal( u strap. depth, 1.0 mm), is( u strap. material, mild steel), is( wall tie. spacing, close))))",,0.7881745978092514,,0.9035616517081004,,19.0,,1.0,,0.9079263410728584,,82.243513109958,,84.85900707829282,,79.78442606287557,,"[0.9270723104056438,0.8970627384861124,0.8559564207894267,0.8133369281926844]",,12490.0,,11340.0,,
t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_45,67.91635585100174,0.7357921690244532,66.74921155928605,0.7413374354996064,finished,-,stefanfuchs164,,2023-04-05T18:02:20.000Z,3211,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If structural framing members are connected to building elements with an FRR, then the framing member shall be rated at no less than the building elements to which the framing member is connected.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( and( has( building, structural framing member), has( building, element), connect( building. structural framing member, element), has( element, fire resistance rating))), then( obligation( greater than equal( structural framing member. fire resistance rating, fire resistance rating)))","[""if( and( expression( function( has), atom( variable( building)), data( structural framing member)), expression( function( has), atom( variable( building)), data( element)), expression( function( connect), atom( relation( structural framing member), variable( building)), data( element)), expression( function( has), atom( variable( element)), data( fire resistance rating)))), then( obligation( expression( function( greater than equal), atom( relation( fire resistance rating), variable( structural framing member)), data( fire resistance rating))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( has( building. element, framing), is( framing. type, structural), is( framing. connection, frr))), then( obligation( and( define( building. element, x0), greater than equal( framing. rating, x1))))","if( and( expression( function( has), atom( relation( element), variable( building)), data( framing)), expression( function( is), atom( relation( type), variable( framing)), data( structural)), expression( function( is), atom( relation( connection), variable( framing)), data( frr)))), then( obligation( and( expression( function( define), atom( relation( element), variable( building)), data( x0)), expression( function( greater than equal), atom( relation( rating), variable( framing)), data( x1)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( support), variable( underlay)), data( fully)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( x0)), expression( function( within), atom( relation( span), variable( underlay)), data( support)), expression( function( greater than equal), atom( relation( width), variable( support)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. support, fully), is( underlay. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay. self supporting, x0), within( underlay. span, support), greater than equal( support. width, 1.2 m)))))",0.9234882544886136,0.9655530043587852,15,19,1,1,0.9262713926514722,0.96613290632506,68.29327477241424,66.8138038857378,67.54357461628202,66.6847440016348,"[0.8832749562171629,0.8314388932945634,0.7702606845185317,0.7124118854287499]","[0.8602801027595923,0.804434811603868,0.739706498951782,0.6788425847815084]",12329,12490,11420,12067,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), expression( function( is), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( is), atom( relation( material), variable( u strap)), data( zinc coated)), expression( function( is), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( variable( u strap)), data( mild steel)), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))",,"if( is( chimney. material, brick)), then( obligation( and( by( chimney. fixing, and( u strap, wall tie)), is( chimney. fixing, roof level), is( u strap. length, 50 mm), is( u strap. material, zinc coated), is( u strap. depth, 1.0 mm), is( u strap, mild steel), is( wall tie. spacing, close))))",,0.7827281054495628,,0.9307774944157788,,19.0,,1.0,,0.93306645316253,,80.50574753583895,,82.41587786272856,,78.68215273799987,,"[0.8981465591213317,0.8652335319001986,0.8234885337039611,0.7814876321999825]",,12490.0,,11654.0,,
t5-amr_0_ir-para_train-pred_random_split_esp20_e20_45,68.25486399198344,0.7035199829006944,66.4107629092048,0.7118842514997514,finished,-,stefanfuchs164,,2023-04-05T17:47:43.000Z,875,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 If the safety barrier is glass and the glass is laminated and heat-strengthened or toughened, and the safety barrier has two or three edges supported by structural sealant joints or continuous clamps, and the safety barrier panes of the laminate are fractured and the panes resists a 0.2 kN concentrated load and the panes deflection is less than or equal 250 mm, then the safety barrier may not have interlinking rails.","translate English to LegalRuleML: E2AS1 If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass, laminated), is( glass, or( heat strengthened, toughened)), has( glass, edge), is( edge, supported by( edge, or( structural sealant joint, continuous clamp)), is( edge, fractured), resist( panes, concentrated load), less than equal( concentrated load, 0.2 kN), less than equal( panes. deflection, 250 mm))), then( permission( not( has( safety barrier. rail, interlinked))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( glass)), data( edge)), expression( function( is), atom( variable( edge)), data( supported by( edge, or( structural sealant joint, continuous clamp)))))), then( permission( not( expression( function( has), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( material), variable( underlay)), data( full support)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( r2)), expression( function( in between), atom( relation( span), variable( underlay)), data( supports)), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. material, full support), is( underlay. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay. self supporting, r2), in between( underlay. span, and( supports, adjacent), greater than equal( support. width, 1.2 m))))))",0.8872781120463343,0.912302900067176,18,19,1,1,0.8931786844026279,0.9159327461969576,69.57400808412744,67.84204573817811,66.98481183840951,65.03862464795723,"[0.8773156556483835,0.8279864729001005,0.7679852805887765,0.7084915269932401]","[0.8753496503496504,0.81942123317794,0.7520800141617986,0.6872717555892046]",12329,12490,11012,11440,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( zinc coated)), expression( function( is), atom( relation( fixing), variable( chimney)), data( 50 length))))))",,"if( is( chimney. material, brick)), then( obligation( and( by( chimney. fixing, and( u strap, wall tie)), is( chimney. fixing, roof level), is( chimney. fixing, or( zinc coated, 50 length), is( u strap. depth, 1.0 mm), is( u strap. material, mild steel), is( wall tie. spacing, close)))))",,0.8104105153764872,,0.9265750500939146,,19.0,,1.0,,0.9291433146517214,,82.26369082227623,,84.90643092643931,,79.78049706620386,,"[0.9314088754847047,0.8984740766429686,0.8565820465846637,0.8163623595505618]",,12490.0,,11605.0,,
t5-amr_0_ir-para_ir_random_split_esp20_e20_45,0.0,0.5357662469683945,0.0,0.5605954537413628,finished,-,stefanfuchs164,,2023-04-05T17:27:38.000Z,715,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"paraphrase for LegalRuleML E2AS1 8.4.13 Stopends; The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.","paraphrase for LegalRuleML E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","If the roof cladding is profiled metal and the roof cladding have trapezoidal and trough profile and either the roof pitch is less than 25 deg, or the building is in a High, Very High, or Extra High wind zone, then the roof claddings top ends shall have stopends as shown in E2/AS1 Figure 49.","[""If the roof cladding is profiled metal and the roof cladding have trapezoidal and trough profile and either the roof pitch is less than 25 deg, or the building is in a High, Very High, or Extra High wind zone, then the roof claddings top ends shall have stopends as shown in E2/AS1 Figure 49.""]","[""If the roof has an underlay, then the underlay type shall be either R1 and the underlay shall be fully support with a corrosion resistant material, or the underly shall be type R2 and self supporting and laid to maximum 1.2 metre span between adjacent supports.""]","If the roof has an underlay, then the underlay type shall be either R1 and the underlay shall be fully support with a corrosion resistant material, or the underly shall be type R2 and self supporting and laid to maximum 1.2 metre span between adjacent supports.","If the top ends of profiled metal roof cladding are trapezoidal and trough profile metal roof cladding and the roof pitch is less than 25 deg, or the roof cladding is in a High/Very High/Extra High wind zone, then the top ends of the profiled metal roof cladding shall have stopends as shown in E2/AS1 Figure 49.","If the top ends of profiled metal roof cladding are trapezoidal and trough profile metal roof cladding and the roof pitch is less than 25 deg, or the roof cladding is in a High/Very High/Extra High wind zone, then the top ends of the profiled metal roof cladding shall have stopends as shown in E2/AS1 Figure 49.","If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.","If the roof has an underlay, then the underlay shall be either fully support with a corrosion resistant material or the underlay shall be R2 self supporting, laid to maximum 1.2 metre span between adjacent supports.",0.935655137218343,0.9813016796807698,14,19,1,1,0.9376391982182628,0.9814743342338864,0.0,0.0,0.0,0.0,"[0.7957244655581948,0.6219959266802444,0.5100671140939598,0.425853869433636]","[0.7864726700747149,0.6185275080906149,0.5081216159933362,0.4309012875536481]",2694,2591,2526,2543,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_44,70.92575782238825,0.7526439156491663,67.31719215136792,0.7434692913733801,finished,-,stefanfuchs164,,2023-04-05T16:22:11.000Z,3924,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If escape routes exist, then escape routes shall comply with NZBC D1.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.9951215642968396,0.9888898983525012,14,19,1,1,0.9951334252575228,0.988951160928743,71.78588045494341,68.12136824661953,70.08600275065106,66.53178120910421,"[0.8301410057869427,0.7869322839809805,0.7342294054588934,0.6822329130723291]","[0.8405116580310881,0.7867437505089162,0.7241605241605241,0.6671884010215009]",12329,12490,12269,12352,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( expression( function( is), atom( relation( value), variable( zone)), data( low)), or( expression( function( within), atom( variable( boundary)), data( Selwyn District Council)), expression( function( within), atom( variable( boundary)), data( Waimakariri District Council))), expression( function( within), atom( variable( boundary)), data( zone 2)), and( expression( function( is), atom( relation( designation), variable( area)), data( zone 1)), expression( function( as per), atom( relation( designation), variable( area)), data( nzs 3604)))))), then( and( expression( function( within), atom( variable( zone)), data( x0)), expression( function( is), atom( variable( area)), data( zone 2))))",,"if( or( and( is( zone. value, low), within( boundary, or( Selwyn District Council, Waimakariri District Council)), within( boundary, zone 2), and( is( area. designation, zone 1), as per( area. designation, nzs 3604))))), then( and( within( zone, x0), is( area, zone 2)))",,0.8107251084654507,,0.9116932674990176,,19.0,,1.0,,0.9153722978382706,,84.02011938568417,,86.74815943187212,,81.45842977764663,,"[0.9443715560220416,0.9122513641964444,0.8717562660526083,0.832620320855615]",,12490.0,,11433.0,,
t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_44,70.0138157039502,0.7281612104442278,67.51407546264583,0.7525858710141892,finished,-,stefanfuchs164,,2023-04-05T15:13:56.000Z,4093,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If cladding systems comply with E2/AS1, then the cladding systems shall comply with NZBC E2 2 to NZBC E2 3.7.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( comply with( building. cladding system, nzbc e2as1)), then( obligation( comply with( cladding system, nucleus e2 2 to nzbc e2 3.7)))","if( expression( function( comply with), atom( relation( cladding system), variable( building)), data( nzbc e2as1))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nucleus e2 2 to nzbc e2 3.7))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.9701195653208596,0.985484127726707,18,19,1,1,0.9705572228080136,0.9855884707766212,70.97028246104662,68.43648822068475,69.08278673369594,66.61619727145232,"[0.8257563095437072,0.7813366960907945,0.7280108254397835,0.6757423636518336]","[0.8468724614134849,0.797205654056704,0.7383300460223537,0.6823179300653055]",12329,12490,11966,12310,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( and( expression( function( is), atom( relation( type), variable( zone)), data( low)), or( expression( function( within), atom( variable( zone)), data( Selwyn District Council)), expression( function( within), atom( variable( zone)), data( Waimakariri District Council)), expression( function( within), atom( variable( boundary)), data( zone 2)), and( expression( function( within), atom( variable( area)), data( Selwyn District Council)), expression( function( as per), atom( variable( area)), data( nzs 3604)))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))",,"if( and( is( zone. type, low), or( within( zone, or( Selwyn District Council, Waimakariri District Council)), within( boundary, zone 2), and( within( area, Selwyn District Council, zone 1), as per( area, nzs 3604))))), then( and( within( zone, zone 2), is( area, zone 2)))",,0.8199039507671737,,0.9296641577955194,,19.0,,1.0,,0.9320256204963971,,83.98924959519417,,85.87865246237708,,82.18119393756521,,"[0.9302465423932652,0.903543647363872,0.8667710235672668,0.8304165208260413]",,12490.0,,11641.0,,
t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_44,68.97983928543492,0.7041839181974789,67.12281069498997,0.7519169526317802,finished,-,stefanfuchs164,,2023-04-05T13:41:00.000Z,5573,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If flashings have overlaps or upstands, then the overlaps and upstands shall be as specified in E2/AS1 and Table 7.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( has( flashing, or( lap, upstand))), then( obligation( and( as per( lap, and( nzbc e2as1 4.6, nzbc e2as1 t7)), as per( upstand, and( nzbc e2as1 4.6, nzbc e2as1 t7)))))","[""if( or( expression( function( has), atom( variable( flashing)), data( lap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( variable( lap)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 t7)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( or( has( flashing, or( overlap, upstand)))), then( obligation( and( as per( overlap, and( nzbc e2as1 t7)), as per( upstand, and( nzbc lexis e2as1 t7)))))","if( or( expression( function( has), atom( variable( flashing)), data( overlap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( variable( overlap)), data( nzbc e2as1 t7)), expression( function( as per), atom( variable( upstand)), data( nzbc lexis e2as1 t7)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8635785773176665,0.987431684379753,15,19,1,1,0.8720901938518939,0.9875100080064052,71.50336781791168,68.57502948017685,66.62836163090074,65.73082387528194,"[0.9015997023809524,0.8489841775114689,0.7896324222431669,0.7314735743429168]","[0.8521161018323334,0.7982549131533883,0.734005905511811,0.6734592855374969]",12329,12490,10752,12334,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( or( expression( function( within), atom( variable( zone)), data( boundary)), expression( function( within), atom( variable( zone)), data( district council)), expression( function( within), atom( variable( zone)), data( waimakariri district council))), expression( function( within), atom( variable( area)), data( zone 2)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( x0)), expression( function( within), atom( variable( zone)), data( x1)), expression( function( within), atom( variable( area)), data( x1))))",,"if( or( and( within( zone, or( boundary, or( district council, waimakariri district council)), is( boundary. type, zone 2)), within( area, zone 2), as per( area, nzs 3604)))), then( and( within( zone, x0), within( zone, x1), within( area, x1)))",,0.7791028121053717,,0.8966952241873882,,19.0,,1.0,,0.9016813450760608,,79.72483971012454,,83.12953836047159,,76.58805751227307,,"[0.9299413958444326,0.8953623447413099,0.8498201438848921,0.80541225450267]",,12490.0,,11262.0,,
t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_44,67.66703722031488,0.6866999500458819,65.50983278704092,0.7321476747912646,finished,-,stefanfuchs164,,2023-04-05T12:10:01.000Z,5456,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If escape routes exist, then escape routes shall comply with NZBC D1.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8613661143285196,0.955148492658108,14,19,1,1,0.8701435639549031,0.956124899919936,69.77604264801447,66.98398210100981,65.68178225291634,64.09917092605849,"[0.8859992542878449,0.8330674673923243,0.7703570753825808,0.7104136947218259]","[0.8588176184893652,0.8042287928565411,0.7386440677966102,0.6766987807997271]",12329,12490,10728,11942,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( relation( type), variable( boundary)), data( Selwyn District Council)), expression( function( is), atom( relation( type), variable( boundary)), data( Waimakariri District Council))), expression( function( within), atom( relation( type), variable( boundary)), data( zone 2)), and( expression( function( within), atom( variable( area)), data( boundary)), expression( function( is), atom( variable( boundary)), data( zone 2)), expression( function( is), atom( relation( type), variable( boundary)), data( nzs 3604)))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))",,"if( or( and( within( zone, boundary), is( boundary. type, or( Selwyn District Council, Waimakariri District Council)), within( boundary. type, zone 2), and( within( area, boundary), is( boundary, zone 2), is( boundary. type, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,0.7669868525989104,,0.8572515854995633,,19.0,,1.0,,0.866533226581265,,81.78261375194734,,85.28340685250468,,78.55789572644588,,"[0.9528781299085282,0.9191778273809524,0.8764160659114315,0.8347785108388313]",,12490.0,,10823.0,,
t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_44,69.82449847845037,0.7326527728057162,67.45263369450207,0.7315368686103177,finished,-,stefanfuchs164,,2023-04-05T11:18:37.000Z,3081,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If cladding systems comply with E2/AS1, then the cladding systems shall comply with NZBC E2 2 to NZBC E2 3.7.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( comply with( cladding system, nzbc e2as1)), then( obligation( comply with( cladding system. nzbc e2 2 to nzbc e2 3.7)))","if( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2as1))), then( obligation( expression( function( comply with), atom( relation( nzbc e2 2 to nzbc e2 3.7), variable( cladding system)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.916657213767516,0.9468340603173506,18,19,1,1,0.919944845486252,0.9481985588470776,71.37357569216857,69.08335202376573,68.34123456467225,65.89712648676259,"[0.8824722271204373,0.8334664182415047,0.7742857142857142,0.7165962799892174]","[0.8595794984378958,0.808868501529052,0.7464319288949662,0.6865864144453998]",12329,12490,11342,11843,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( or( expression( function( within), atom( variable( boundary)), data( Selwyn District Council)), expression( function( within), atom( variable( boundary)), data( Waimakariri District Council))), expression( function( within), atom( relation( area), variable( boundary)), data( zone 2))), and( expression( function( within), atom( variable( area)), data( zone)), expression( function( as per), atom( variable( zone)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( 2)), expression( function( within), atom( variable( area)), data( zone 2))))",,"if( or( and( within( boundary, or( Selwyn District Council, Waimakariri District Council)), within( boundary. area, zone 2)), and( within( area, zone), as per( zone, nzs 3604)))), then( and( within( zone, 2), within( area, zone 2)))",,0.7683741172800668,,0.9061913090924988,,19.0,,1.0,,0.910328262610088,,81.5103490307395,,83.82264577289175,,79.32219972672677,,"[0.9050131926121372,0.8724665899637136,0.8298004987531172,0.7889217531594515]",,12490.0,,11370.0,,
t5-amr_0_ir-para_train-pred_random_split_esp20_e20_44,68.88787730114096,0.7237017393596503,65.41802976328485,0.7046699144377044,finished,-,stefanfuchs164,,2023-04-05T11:03:42.000Z,892,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 If a building activity is covered by risk groups specified in C/AS2 Paragraph 1.1.1 and described in Table 1.1, then CAS2 applies to the building activity.","translate English to LegalRuleML: B1AS3 If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","if( and( comply with( building, nzbc cas2), as per( building. risk group, and( nzbc cas2 1.1.1, nzbc cas2 t1.1)))), then( comply with( building. fire protection, and( nzbc c1, nzbc c2, nzbc c3, nzbc c5, nzbc c6)))","[""if( and( expression( function( comply with), atom( variable( building)), data( nzbc cas2)), expression( function( as per), atom( relation( risk group), variable( building)), data( nzbc cas2 1.1.1)), expression( function( as per), atom( relation( risk group), variable( building)), data( nzbc cas2 t1.1)))), then( and( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c1)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c2)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c3)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c5)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c6))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( has( building. activity, risk group), as per( risk group, nzbc cas2 1.1.1), as per( risk group. description, nzbc cas2 t1.1))), then( apply to( nzbc cas2, building activity))","if( and( expression( function( has), atom( relation( activity), variable( building)), data( risk group)), expression( function( as per), atom( variable( risk group)), data( nzbc cas2 1.1.1)), expression( function( as per), atom( relation( description), variable( risk group)), data( nzbc cas2 t1.1)))), then( expression( function( apply to), atom( variable( nzbc cas2)), data( building activity)))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.91207929750687,0.9121287539005456,19,19,1,1,0.9157271473761052,0.9157726180944756,70.77931562370387,67.25435480792903,67.09489781473394,63.679318164528965,"[0.879362267493357,0.8277921383367501,0.767491926803014,0.7094881285546628]","[0.8704318936877077,0.8127034397818246,0.7424752124645893,0.6782182628062361]",12329,12490,11290,11438,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( relation( location), variable( boundary)), data( Selwyn District Council)), expression( function( is), atom( relation( location), variable( boundary)), data( Waimakariri District Council))), expression( function( within), atom( relation( location), variable( boundary)), data( zone 2))), and( expression( function( within), atom( variable( area)), data( boundary)), expression( function( is), atom( variable( boundary)), data( zone 2)), expression( function( is), atom( relation( location), variable( area)), data( zone 1)), expression( function( is), atom( relation( location), variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))",,"if( or( and( within( zone, boundary), is( boundary. location, or( Selwyn District Council, Waimakariri District Council)), within( boundary. location, zone 2)), and( within( area, boundary), is( boundary, zone 2), is( area. location, zone 1), is( area. location, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,0.7876770838819398,,0.9317186484670732,,19.0,,1.0,,0.933947157726181,,81.00684537592966,,83.76178959413977,,78.42735201701599,,"[0.9122160308615516,0.8708814904260824,0.8238305996702248,0.7804750261962976]",,12490.0,,11665.0,,
t5-amr_0_ir-para_ir_random_split_esp20_e20_44,0.0,0.5471568573069014,0.0,0.555838784456163,finished,-,stefanfuchs164,,2023-04-05T10:42:35.000Z,1264,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"paraphrase for LegalRuleML G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",paraphrase for LegalRuleML B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"If fixings are used for the installation of a solar water heater, then the fixing must meet the requirements described in G12/AS1 Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.","[""If fixings are used for the installation of a solar water heater, then the fixing must meet the requirements described in G12/AS1 Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.""]","[""If the chimney has reinforcing, then the reinforcing shall conform to NZS 4671.""]","If the chimney has reinforcing, then the reinforcing shall conform to NZS 4671.","If a solar water heater has a fixing, then the fixing must meet the requirements described in G12/AS2 Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.","If a solar water heater has a fixing, then the fixing must meet the requirements described in G12/AS2 Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.","If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.","If reinforcing is used in chimneys, then the reinforcing shall conform to NZS 4671.",0.9486124107322798,0.9674475195742104,16,19,1,1,0.9498886414253898,0.9679660362794288,0.0,0.0,0.0,0.0,"[0.798358733880422,0.6258038585209004,0.5151013653289201,0.4300937766410912]","[0.7890749601275917,0.620024620434961,0.5126796280642435,0.4344226579520697]",2694,2591,2559,2508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_43,70.05299500247261,0.7052473878302545,70.4436872090739,0.7703971951566104,finished,-,stefanfuchs164,,2023-04-05T10:13:30.000Z,1742,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a drain or part of a drain is no longer required, then the drain shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( or( not( is( drain, required)), not( is( drain. part, required)))), then( obligation( or( disconnect( drain, or( live drain junction, property boundary)), disconnect( drain. part, or( live drain junction, property boundary)))))","[""if( or( not( expression( function( is), atom( variable( drain)), data( required))), not( expression( function( is), atom( relation( part), variable( drain)), data( required))))), then( obligation( or( expression( function( disconnect), atom( variable( drain)), data( live drain junction)), expression( function( disconnect), atom( variable( drain)), data( property boundary)), expression( function( disconnect), atom( relation( part), variable( drain)), data( live drain junction)), expression( function( disconnect), atom( relation( part), variable( drain)), data( property boundary)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( or( requires( drain, part), is( part of( drain. part), no longer))), then( obligation( and( towards( drain. disconnect, foul water drainage system), or( towards( drain. junction, live drain), towards( drain. disconnect, property boundary)))))","if( or( expression( function( requires), atom( variable( drain)), data( part)), expression( function( is), expression( function( part of), atom( relation( part), variable( drain))), data( no longer)))), then( obligation( and( expression( function( towards), atom( relation( disconnect), variable( drain)), data( foul water drainage system)), or( expression( function( towards), atom( relation( junction), variable( drain)), data( live drain)), expression( function( towards), atom( relation( disconnect), variable( drain)), data( property boundary))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",0.8647752365678897,0.9605718118274162,16,19,1,1,0.8731446183794306,0.9613290632506004,73.16289027409869,70.71239375588603,67.19670128823778,70.17701509700545,"[0.8939154667905248,0.847204039648401,0.791772568954156,0.7376800606520091]","[0.8911468310152411,0.837298927613941,0.7750526759376317,0.7154485331524504]",12329,12490,10765,12007,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( 'x0 + flow rate')), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( less than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate capacity, x0), greater than equal( valve. flow rate capacity, 'x0 + flow rate'), define( hot water storage vessel. working pressure, x1), less than equal( valve. pressure rating, x1))))",,0.8175629062994211,,0.9272622838178132,,19.0,,1.0,,0.9297838270616492,,83.78372642919358,,86.0242464174852,,81.65695352305829,,"[0.9320588995091708,0.9026165309305146,0.8659227617470142,0.8295614035087719]",,12490.0,,11613.0,,
t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_43,70.28000220453696,0.7707772292923559,69.91892200911511,0.7457011262719118,finished,-,stefanfuchs164,,2023-04-05T09:15:38.000Z,3470,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 If the chimney type is given and one or more of the following applies to the building, then the bracing shall be provided in the building. The bracing shall be described in B1/AS3 Paragraphs 1.9.2 to 1.9.6 and the area of the room containing the chimney exceeds 24 m2, and the floor area on any level of the building is less than 50 m2 for chimney Type 1, and the floor area of the building is less than 75 m2 for chimney Types 2, 3 and 4, and the floor area of the building is 150 m2 for chimney Types 5, 6 and 7.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), is( chimney. type, or( type 2, type 3, type 4))), and( less than( building storey. floor area, 150 m2), is( chimney. type, or( type 5, type 6, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( chimney. type, given), greater than equal( count( chimney. type), 1), applies to( building, bracing))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1.1.16)), define( chimney. type, x0), greater than equal( room. area, 24 m2), has( building, chimney), is( chimney. type 1, floor area), greater than equal( building. level, 50 m2), define( chimney. type 1, and( x0, x1)), less than( building. floor area, 75 m2), is( building. floor area, and( x1, x3), greater than equal( building. floor area, 150 m2), for( building, and( x1, 'x0, 'x1, 'x1'), 'x0, 'x1'), for( building, and( x2, 'x3, 'x4))))))","if( and( expression( function( is), atom( relation( type), variable( chimney)), data( given)), expression( function( greater than equal), expression( function( count), atom( relation( type), variable( chimney))), data( 1)), expression( function( applies to), atom( variable( building)), data( bracing)))), then( and( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1.1.16))), expression( function( define), atom( relation( type), variable( chimney)), data( x0)), expression( function( greater than equal), atom( relation( area), variable( room)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), expression( function( has), atom( variable( building)), data( chimney)), expression( function( is), atom( relation( type 1), variable( chimney)), data( floor area)), expression( function( greater than equal), atom( relation( level), variable( building)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( define), atom( relation( type 1), variable( chimney)), data( x0)), expression( function( less than), atom( relation( floor area), variable( building)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), expression( function( is), atom( relation( floor area), variable( building)), data( and( x1, x3)))), obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1.1.16))), expression( function( define), atom( relation( type), variable( chimney)), data( x0)), expression( function( greater than equal), atom( relation( area), variable( room)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), expression( function( has), atom( variable( building)), data( chimney)), expression( function( is), atom( relation( type 1), variable( chimney)), data( floor area)), expression( function( greater than equal), atom( relation( level), variable( building)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( define), atom( relation( type 1), variable( chimney)), data( x1)), expression( function( less than), atom( relation( floor area), variable( building)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), expression( function( is), atom( relation( floor area), variable( building)), data( and( x1, x3))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( no. nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, no. nz backflow testing standard)))))",0.9762824662891784,0.9469183735068116,17,19,1,1,0.9765593316570688,0.9482786228983188,70.3307580504147,70.51730653245657,70.22931956412887,69.33060738827922,"[0.8701827242524917,0.8215389756871919,0.7649184736930577,0.7104929398833179]","[0.8731847348868625,0.8230697358362354,0.7618355836609126,0.7024331527813602]",12329,12490,12040,11844,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( less than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate, x0), define( hot water storage vessel. working pressure, x1), less than equal( valve. pressure rating, x1))))",,0.8258421506774124,,0.9342812440281136,,19.0,,1.0,,0.9363490792634108,,85.33587621190135,,87.51610083416863,,83.26163986461303,,"[0.9299700726806328,0.9032174810736407,0.869557690643123,0.8358299947744295]",,12490.0,,11695.0,,
t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_43,68.80139485030236,0.7318519852979625,67.33514798857983,0.7090304890622192,finished,-,stefanfuchs164,,2023-04-05T08:57:30.000Z,1085,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If the tile type is single profile, then the tile shall have one water-course depth of a minimum of 25 mm.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( is( tile. type, single profile)), then( and( equal( count( tile. watercourse), 1), greater than equal( watercourse. depth, 25 mm)))","[""if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( and( expression( function( equal), expression( function( count), atom( relation( watercourse), variable( tile))), data( 1)), expression( function( greater than equal), atom( relation( depth), variable( watercourse)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( tile. type, single profile)), then( obligation( greater than equal( tile. watercourse depth, 25 mm)))","if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( obligation( expression( function( greater than equal), atom( relation( watercourse depth), variable( tile)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 4)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 4, nz backflow testing standard)))))",0.9181496895935364,0.912651109458092,9,19,1,1,0.9213237083299538,0.9162530024019216,70.78052780409962,69.49245750212182,66.92993054718337,65.30774774148952,"[0.8840566951316137,0.8322111977321048,0.771596683605242,0.7111071236317962]","[0.868490038448095,0.8156159324716433,0.749513360467174,0.6861365862345294]",12329,12490,11359,11444,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( flow rate)), expression( function( is), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( pressure rating), variable( valve)), data( working pressure)), expression( function( is), atom( relation( pressure rating), variable( hot water storage vessel)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( greater than equal( valve. flow rate capacity, flow rate), is( cold water supply. flow rate, x0), greater than equal( valve. pressure rating, working pressure), is( hot water storage vessel. pressure rating, x1)))))",,0.7844026139006182,,0.9034738887350804,,19.0,,1.0,,0.9078462770216172,,81.01030390352663,,84.32241374370581,,77.94855365097987,,"[0.9277714084134404,0.8933262335818246,0.8500491203000804,0.8064893043321949]",,12490.0,,11339.0,,
t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_43,67.38959771658179,0.6820558362378292,66.53644813996942,0.7030926012004506,finished,-,stefanfuchs164,,2023-04-05T08:42:14.000Z,892,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 If storage water heaters are open vented, then the storage water heaters shall have a vent pipe complying with G12/AS1 Paragraph 6.8.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",0.8762186860476475,0.9453152715218542,13,19,1,1,0.8832833157595912,0.9467574059247398,69.79674408785128,67.87621053517036,65.14295110829936,65.24855132433348,"[0.8594123048668503,0.8114428320547186,0.7540007443245255,0.6982298398426524]","[0.8372938689217759,0.7816062616981453,0.7154840366344261,0.6535480537375129]",12329,12490,10890,11825,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( capacity), variable( flow rate)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( greater than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate capacity, x0), greater than equal( flow rate. capacity, x0), define( hot water storage vessel. working pressure, x1), greater than equal( valve. pressure rating, x1))))",,0.7544696501628886,,0.8573429880775729,,19.0,,1.0,,0.866613290632506,,80.49373350042261,,84.36243192488283,,76.96429917560977,,"[0.9382852919438284,0.9057007346786944,0.8619172439618049,0.8187729714447272]",,12490.0,,10824.0,,
t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_43,67.95733927880838,0.7365826567395076,68.84006692798853,0.7618232099926043,finished,-,stefanfuchs164,,2023-04-05T08:27:28.000Z,883,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-para_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-para_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 If a drain or part of a drain is no longer required, then the drain shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( or( not( is( drain, required)), not( is( drain. part, required)))), then( obligation( or( disconnect( drain, or( live drain junction, property boundary)), disconnect( drain. part, or( live drain junction, property boundary)))))","[""if( or( not( expression( function( is), atom( variable( drain)), data( required))), not( expression( function( is), atom( relation( part), variable( drain)), data( required))))), then( obligation( or( expression( function( disconnect), atom( variable( drain)), data( live drain junction)), expression( function( disconnect), atom( variable( drain)), data( property boundary)), expression( function( disconnect), atom( relation( part), variable( drain)), data( live drain junction)), expression( function( disconnect), atom( relation( part), variable( drain)), data( property boundary)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( or( requires( drain, or( part of( drain), no longer))), then( obligation( and( has( drain, foul water drainage system), is( foul water drainage system. disconnect, or( junction, live drain, property boundary)))))","if( or( expression( function( requires), atom( variable( drain)), data( part of( drain))), expression( function( requires), atom( variable( drain)), data( no longer)))), then( obligation( and( expression( function( has), atom( variable( drain)), data( foul water drainage system)), or( expression( function( is), atom( relation( disconnect), variable( foul water drainage system)), data( junction)), expression( function( is), atom( relation( disconnect), variable( foul water drainage system)), data( live drain)), expression( function( is), atom( relation( disconnect), variable( foul water drainage system)), data( property boundary))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), and( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 4)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard)))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, and( as 2845 4, nz backflow testing standard)))))",0.95132258360859,0.9947822715515208,16,19,1,1,0.9524697866818072,0.9947958366693356,69.81640577212616,69.16277782727165,66.19471102628175,68.52035355599995,"[0.8589798177637742,0.809201507882111,0.7494181536074477,0.6899392888117953]","[0.8551307847082495,0.8010361016674761,0.7390702597085402,0.6794136914510318]",12329,12490,11743,12425,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( greater than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate capacity, x0), define( hot water storage vessel. working pressure, x1), greater than equal( valve. pressure rating, x1))))",,0.7490105479888634,,0.8560627016993976,,19.0,,1.0,,0.8654923939151321,,81.26040724476718,,84.70180495872054,,78.08773628152164,,"[0.928399629972248,0.8970108948691684,0.8587364079490064,0.8194772105312824]",,12490.0,,10810.0,,
t5-amr_0_ir-para_train-pred_random_split_esp20_e20_43,67.79849306605192,0.6882748417952245,68.33134088190069,0.7378506119182071,finished,-,stefanfuchs164,,2023-04-05T08:13:03.000Z,862,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-para_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 If the Profiled Metal Roof Cladding has fixings, then the fixings shall be fixed through crests, the fixing shall penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, and the fixing shall include sealing washers of neoprene with a carbon black content of 15 percent or less by weight.","translate English to LegalRuleML: G12AS1 If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","if( and( is( roof cladding. type, profiled metal), has( roof cladding, fixing))), then( obligation( and( has( roof cladding, crest), through( fixing, crest), into( fixing. penetration, purlin), or( and( is( fixing. type, nail), greater than equal( fixing. penetration, 40 mm)), and( is( fixing. type, screw), greater than equal( fixing. penetration, 30 mm))), include( fixing, sealing washer), is( sealing washer. type, neoprene), less than equal( sealing washer. carbon black content, 15 percent))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( has( roof. type, profiled metal), has( roof, fixing)), then( obligation( and( through( fixing. penetration, crest), through( fixing. penetration, purlins), greater than equal( fixing. penetration, 40 mm), for( fixing, nail), greater than equal( penetration, 30 mm), for( fixing, screw)), include( fixing, sealing washer), is( sealing washer. material, neoprene), greater than equal( sealing washer. carbon black content, 15 percent), greater than equal( sealing washer. weight, 15 percent))))","if( expression( function( has), atom( relation( type), variable( roof)), data( profiled metal)), expression( function( has), atom( variable( roof)), data( fixing))), then( obligation( and( expression( function( through), atom( relation( penetration), variable( fixing)), data( crest)), expression( function( through), atom( relation( penetration), variable( fixing)), data( purlins)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( for), atom( variable( fixing)), data( nail)), expression( function( greater than equal), atom( variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))), expression( function( for), atom( variable( fixing)), data( screw))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( material), variable( sealing washer)), data( neoprene)), expression( function( greater than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)), expression( function( greater than equal), atom( relation( weight), variable( sealing washer)), data( 15 percent))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",1.0,0.979292124579867,19,19,1,1,1.056371157433693,0.979503602882306,68.88978577332529,69.08934884327634,66.74123583804825,67.58978525589731,"[0.769041769041769,0.719910445456651,0.663872069554417,0.6105690422293342]","[0.8404446624162171,0.7890323111074571,0.7273403903407212,0.6681640462523917]",12329,12490,13024,12234,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( capacity), variable( flow rate)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( greater than equal), atom( variable( pressure rating)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate capacity, x0), greater than equal( flow rate. capacity, x0), define( hot water storage vessel. working pressure, x1), greater than equal( pressure rating, x1))))",,0.8003720061969807,,0.9022444766994084,,19.0,,1.0,,0.9067253803042434,,83.08613604975179,,86.1629129881783,,80.22151933592082,,"[0.9403973509933776,0.9106984183401458,0.8706071715997497,0.8305435565154787]",,12490.0,,11325.0,,
t5-amr_0_ir-para_ir_random_split_esp20_e20_43,0.0,0.5251207074358312,0.0,0.562944189825563,finished,-,stefanfuchs164,,2023-04-05T08:01:06.000Z,714,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-para_ir_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"paraphrase for LegalRuleML B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.",paraphrase for LegalRuleML G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"If either the building's space containing the chimney exceeds an area of 24 m2, or the floor area of a building storey is less than 50 m2 and chimney is Type 1, or the floor area of a building storey is less than 75 m2 and chimney is Types 2, 3 or 4, or the floor area of a building storey is less than 150 m2 and chimney is Types 5, 6 and 7, then the building shall have bracing as described in B1/AS3 Paragraphs 1.9.2 to 1.9.6.","[""If either the building's space containing the chimney exceeds an area of 24 m2, or the floor area of a building storey is less than 50 m2 and chimney is Type 1, or the floor area of a building storey is less than 75 m2 and chimney is Types 2, 3 or 4, or the floor area of a building storey is less than 150 m2 and chimney is Types 5, 6 and 7, then the building shall have bracing as described in B1/AS3 Paragraphs 1.9.2 to 1.9.6.""]","[""If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.""]","If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","If the chimney type is given and one or more of the following applies to the building, then the bracing shall be provided in the building. The bracing shall be described in B1/AS3 Paragraphs 1.9.2 to 1.9.6 and the area of the room containing the chimney exceeds 24 m2, and the floor area on any level of the building is less than 50 m2 for chimney Type 1, and the floor area of the building is less than 75 m2 for chimney Types 2, 3 and 4, and the floor area of the building is 150 m2 for chimney Types 5, 6 and 7.","If the chimney type is given and one or more of the following applies to the building, then the bracing shall be provided in the building. The bracing shall be described in B1/AS3 Paragraphs 1.9.2 to 1.9.6 and the area of the room containing the chimney exceeds 24 m2, and the floor area on any level of the building is less than 50 m2 for chimney Type 1, and the floor area of the building is less than 75 m2 for chimney Types 2, 3 and 4, and the floor area of the building is 150 m2 for chimney Types 5, 6 and 7.","If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.","If the piped water supply system has a pressure vacuum breaker, then the pressure vacuum breaker shall be tested and verified as of AS 2845.3 or NZ backflow testing standard.",0.9687113588504366,0.9891347601726252,17,19,1,1,0.9691907943578322,0.9891933616364338,0.0,0.0,0.0,0.0,"[0.779011872845653,0.5901574803149606,0.47711624139327663,0.39366138448707255]","[0.7822863831447523,0.612760834670947,0.5047501032631144,0.43361702127659574]",2694,2591,2611,2563,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
