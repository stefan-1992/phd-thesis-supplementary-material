Name,lrml_f_score,bleu,lrml_f_score_test,bleu_test,State,Notes,User,Tags,Created,Runtime,Sweep,adafactor,bs,dataset,decoding_runs,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,experiment,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,mask_percentage,max_length,metric_for_best_model,metric_names,model_name,model_path,no_repeat_ngram_size,num_beams,num_warmup_steps,post_process,repetition_penalty,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,calc_loss,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,reference_length,reference_length_test,translation_length,translation_length_test,RANDOM_INPUT_test_no_sep,RANDOM_INPUT_test_oracle,RANDOM_LABEL_EVAL_test_no_sep,RANDOM_LABEL_EVAL_test_oracle,RANDOM_LABEL_test_no_sep,RANDOM_LABEL_test_oracle,RANDOM_PRED_EVAL_test_no_sep,RANDOM_PRED_EVAL_test_oracle,RANDOM_PRED_test_no_sep,RANDOM_PRED_test_oracle,bleu_test_no_sep,bleu_test_oracle,brevity_penalty_test_no_sep,brevity_penalty_test_oracle,eval_epoch_test_no_sep,eval_epoch_test_oracle,ir_change_ratio_test_no_sep,ir_change_ratio_test_oracle,length_ratio_test_no_sep,length_ratio_test_oracle,lrml_f_score_test_no_sep,lrml_f_score_test_oracle,lrml_precision_test_no_sep,lrml_precision_test_oracle,lrml_recall_test_no_sep,lrml_recall_test_oracle,precisions_test_no_sep,precisions_test_oracle,reference_length_test_no_sep,reference_length_test_oracle,translation_length_test_no_sep,translation_length_test_oracle,eval_loss
t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_44,68.6796927561528,0.6967040144246842,55.66475730690296,0.640666445330103,finished,-,stefanfuchs164,,2023-04-09T01:41:15.000Z,3071,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 2.0.1 Suspended floors and slabs on ground shall be, for sites below the road, no less than 150 mm above the lowest point on the site boundary (see Figure 2).","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( less than( site. elevation, road), or( is( floor. type, suspended), on( slab, ground)))), then( obligation( and( define( min( site boundary. elevation), x0), greater than equal( floor. elevation, 'x0 + 150 mm'), greater than equal( slab. elevation, 'x0 + 150 mm'))))","[""if( and( expression( function( less than), atom( relation( elevation), variable( site)), data( road)), or( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( on), atom( variable( slab)), data( ground))))), then( obligation( and( expression( function( define), expression( function( min), atom( relation( elevation), variable( site boundary))), data( x0)), expression( function( greater than equal), atom( relation( elevation), variable( floor)), data( 'x0 + 150 mm')), expression( function( greater than equal), atom( relation( elevation), variable( slab)), data( 'x0 + 150 mm')))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, health hazard)), not( cause( storage tank, safety hazard)), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( floor. type, suspended), is( slab. location, ground))), then( obligation( and( above( floor. location, road), greater than equal( slab. location, 'x0 + 150 mm'))))","if( and( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( is), atom( relation( location), variable( slab)), data( ground)))), then( obligation( and( expression( function( above), atom( relation( location), variable( floor)), data( road)), expression( function( greater than equal), atom( relation( location), variable( slab)), data( 'x0 + 150 mm')))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), expression( function( for), atom( variable( precaution)), data( health hazard)), expression( function( for), atom( variable( precaution)), data( safety hazard)), expression( function( for), atom( variable( precaution)), data( corrosion))), expression( function( for), atom( variable( corrosion)), data( integrity)), expression( function( for), atom( variable( corrosion)), data( associated plant)), expression( function( for), atom( variable( protection)), data( load)), expression( function( for), atom( variable( protection)), data( tank))))","if( exist( storage tank)), then( permission( and( above( storage tank. location, ground), for( precaution, health hazard), for( precaution, safety hazard), for( precaution, corrosion)), for( corrosion, integrity), for( corrosion, associated plant), for( protection, load), for( protection, tank), for( protection, load))))",0.8662050591856292,1.0,13,19,1,1,0.8744059213089209,1.0728952772073923,70.10946344497061,51.428859236540994,67.307072363878,60.66105828562725,"[0.8887997861534349,0.8380559540889526,0.778720332099991,0.7215258855585831]","[0.7546650717703349,0.6864539434075858,0.6086060606060606,0.5343502135448445]",12835,7792,11223,8360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_43,69.37369832358954,0.7218560680210077,57.12545153326529,0.6819736405967829,finished,-,stefanfuchs164,,2023-04-09T01:25:32.000Z,938,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, timber species), include( measurement. correction factor, temperature), include( measurement. correction factor, treatment type), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( timber. material, moisture content), has( timber, moisture content), is( moisture content. measurement, wood))), then( obligation( and( by( moisture content. measurement, nzbc e2as1 publication), recommend( moisture content. measurement, meter), is( moisture meters. type, electrical resistance), is( moisture meters. type, insulated probe), is( moisture meters. type, calibrated), as per( moisture meters. type, nzs 1080.1 appendixes), greater than equal( timber. depth, 1/3), less than equal( timber. depth, 200 mm), towards( measurement. end, timber), is( timber. treatment type, correction factor), is( timber. species, correction factor), is( timber. treatment type, temperature), greater than equal( correction factor. correction factor, 200 mm), as per( correction factor, nzs e2as1 publication, above))))","if( and( expression( function( is), atom( relation( material), variable( timber)), data( moisture content)), expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( is), atom( relation( measurement), variable( moisture content)), data( wood)))), then( obligation( and( expression( function( by), atom( relation( measurement), variable( moisture content)), data( nzbc e2as1 publication)), expression( function( recommend), atom( relation( measurement), variable( moisture content)), data( meter)), expression( function( is), atom( relation( type), variable( moisture meters)), data( electrical resistance)), expression( function( is), atom( relation( type), variable( moisture meters)), data( insulated probe)), expression( function( is), atom( relation( type), variable( moisture meters)), data( calibrated)), expression( function( as per), atom( relation( type), variable( moisture meters)), data( nzs 1080.1 appendixes)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 1/3)), expression( function( less than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( towards), atom( relation( end), variable( measurement)), data( timber)), expression( function( is), atom( relation( treatment type), variable( timber)), data( correction factor)), expression( function( is), atom( relation( species), variable( timber)), data( correction factor)), expression( function( is), atom( relation( treatment type), variable( timber)), data( temperature)), expression( function( greater than equal), atom( relation( correction factor), variable( correction factor)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( as per), atom( variable( correction factor)), data( nzs e2as1 publication)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8879755961940083,1.0,18,19,1,1,0.8938059992208804,1.029517453798768,71.22528114462206,53.74004166482652,67.61594434952983,60.96607275241619,"[0.8963563458856346,0.8467678273835628,0.7879082082965578,0.7302602362554401]","[0.8007978060334081,0.7287561189908373,0.647876643073812,0.572101310932926]",12835,7792,11472,8022,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_45,68.5832869349484,0.7364475397943238,66.19448555569107,0.716505111108861,finished,-,stefanfuchs164,,2023-04-09T01:09:13.000Z,974,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4.13 Stopends; The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( is( roof cladding. type, profiled metal), or( is( roof cladding. profile, trapezoidal), is( roof cladding. profile, trough)), or( less than( roof. pitch, 25 deg), is( building. wind zone, high), is( building. wind zone, very high), is( building. wind zone, extra high)))), then( obligation( and( has( cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( roof cladding. type, profiled metal), or( is( roof cladding. profile, trapezoidal), is( roof cladding. profile ( trough)), less than( roof. pitch, 25 deg))), then( obligation( and( has( roof cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), expression( function( roof cladding. profile ), atom( variable( trough)))), expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0)))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full support)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), is( underlay. support, full support), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), equal( underlay. span, 1.2 m)))))",0.9346919072042512,0.8795221352627481,14,19,1,1,0.936734528347798,0.8862289831865492,69.52305801548758,68.97836654668629,67.6685835303782,63.62659538543917,"[0.8768724564897393,0.8250566300749259,0.7622512492329272,0.6988355681016232]","[0.9070376727798356,0.8529732678668849,0.7876818888990573,0.7227339719970524]",12329,12490,11549,11069,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_45,70.44374414233513,0.7237190749771343,57.07029963613389,0.6675781029060542,finished,-,stefanfuchs164,,2023-04-07T04:43:34.000Z,919,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( is( material, metal), has( material. exposure, water))), then( and( obligation( as per( material, nzbc e2as1 t21)), obligation( as per( material, nzbc e2as1 t22))))","[""if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, plumbing), for( disposal system, drainage), comply with( disposal system, nzbc g13))))","if( and( is( metal. location, wet), or( is( metal. location, contact), is( contact. location, water), or( over( water, metal), over( water, plastic), towards( water, metal), is( plastic. location, another metal)))), then( obligation( and( as per( metal. contact, nzbc e2as1 t21), as per( metal. contact, nucleus) nzbc e2ams1 t22))))","if( and( expression( function( is), atom( relation( location), variable( metal)), data( wet)), or( expression( function( is), atom( relation( location), variable( metal)), data( contact)), expression( function( is), atom( relation( location), variable( contact)), data( water)), or( expression( function( over), atom( variable( water)), data( metal)), expression( function( over), atom( variable( water)), data( plastic)), expression( function( towards), atom( variable( water)), data( metal)), expression( function( is), atom( relation( location), variable( plastic)), data( another metal)))))), then( obligation( and( expression( function( as per), atom( relation( contact), variable( metal)), data( nzbc e2as1 t21)), expression( function( as per), atom( relation( contact), variable( metal)), data( nucleus)), expression( function( nzbc e2ams1 t22)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), or( expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water))))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), or( comply with( disposal system, nzbc g13 foul water)))))",0.8900520847698051,1.0,18,19,1,1,0.8956758862485391,1.103054414784394,72.42260269767706,53.81418203613711,68.57014914273798,60.745828142907,"[0.8942240779401531,0.8450765864332604,0.7883565263343315,0.7337587521049367]","[0.7860383944153577,0.7152224824355972,0.6340601060695344,0.5571767497034401]",12835,7792,11496,8595,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_45,68.76521605611163,0.7480985293600457,55.52577806168764,0.5724198245015916,finished,-,stefanfuchs164,,2023-04-07T04:43:34.000Z,868,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: E1AS1 Boundary fences and other site development must not significantly hamper the flow of surface water from the site.,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( exist( site development)), then( obligation( and( not( cause( site development, obstruction)), towards( obstruction, surface water flow))))","[""if( expression( function( exist), atom( variable( site development)))), then( obligation( and( not( expression( function( cause), atom( variable( site development)), data( obstruction))), expression( function( towards), atom( variable( obstruction)), data( surface water flow)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( exist( boundary fence)), then( obligation( and( not( has( boundary fence, significant hamper), has( site development, surface water flow)))))","if( expression( function( exist), atom( variable( boundary fence)))), then( obligation( and( not( expression( function( has), atom( variable( boundary fence)), data( significant hamper)), expression( function( has), atom( variable( site development)), data( surface water flow))))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)), expression( function( has), atom( variable( industrial liquid waste)), data( conveying system)))), then( obligation( and( expression( function( in between), atom( variable( conveying system)), data( plumbing)), expression( function( in between), atom( variable( conveying system)), data( drainage)), expression( function( comply with), atom( variable( conveying system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer), has( industrial liquid waste, conveying system))), then( obligation( and( in between( conveying system, and( plumbing, drainage)), comply with( conveying system, nzbc g13 foul water))))",0.9320842661467996,1.0,17,19,1,1,0.9342895003507676,1.2102156057494866,70.29082223590117,53.567089951696765,67.30442719645782,57.63314192893163,"[0.8805272818288002,0.834074695761645,0.7793819655521783,0.7249639004501827]","[0.6744432661717922,0.6132266666666667,0.5437768240343348,0.4773880194279546]",12829,7792,11986,9430,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_doc_split_esp20_e20_45,66.60942400464242,0.6931240792674855,58.777698663141365,0.6759550701766879,finished,-,stefanfuchs164,,2023-04-05T21:52:13.000Z,2996,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))","[""if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( has), atom( variable( metal)), data( contact)), expression( function( is), atom( relation( location), variable( contact)), data( wet)), or( expression( function( over), atom( variable( contact)), data( metal)), expression( function( over), atom( relation( contact), variable( contact)), data( water)), expression( function( towards), atom( relation( contact), variable( water)), data( metal)), expression( function( towards), atom( variable( contact)), data( plastic)), expression( function( toward), atom( variable( water)), data( metal))))), then( obligation( and( expression( function( as per), atom( variable( selection)), data( nzbc e2as1 t21)), expression( function( as per), atom( variable( selecting)), data( nzbc e2-as1 t22)))))","if( and( expression( function( has), atom( variable( metal)), data( contact)), expression( function( is), atom( relation( location), variable( contact)), data( wet)), or( expression( function( over), atom( variable( contact)), data( metal)), expression( function( over), atom( relation( contact), variable( contact)), data( water)), expression( function( towards), atom( relation( contact), variable( water)), data( metal)), expression( function( towards), atom( variable( contact)), data( plastic)), expression( function( toward), atom( variable( water)), data( metal))))), then( obligation( and( expression( function( as per), atom( variable( selection)), data( nzbc e2as1 t21)), expression( function( as per), atom( variable( selecting)), data( nzbc e2-as1 t22)))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( in between), atom( variable( waste conveying system)), data( plumbing disposal system)), expression( function( in between), atom( variable( disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( in between), atom( variable( waste conveying system)), data( plumbing disposal system)), expression( function( in between), atom( variable( disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))",0.8474435702578216,0.9681904704274356,18,19,1,1,0.8579780185517187,0.9686858316221766,69.09455303164309,60.04522791220048,64.29685417609646,57.56257711752296,"[0.90169891886981,0.8528712509144111,0.7933732167510354,0.7334630350194552]","[0.820084790673026,0.751101027625784,0.6633503630008066,0.5814709467696059]",12829,7792,11007,7548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_44,68.66067128311019,0.7335494674138515,66.2771501938936,0.7083588150947049,finished,-,stefanfuchs164,,2023-04-05T21:47:33.000Z,1942,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.9065072685922648,0.8880079061139561,18,19,1,1,0.9106172438965042,0.8938350680544436,70.25178719291215,68.74182880384697,67.14003275462466,63.983091963200266,"[0.9020219114634364,0.8477949085693797,0.7815065403698692,0.7174505175231524]","[0.8927803654604085,0.8362931578472911,0.7693703502086736,0.7048671354214227]",12329,12490,11227,11164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_44,68.30764557254145,0.6872694251269155,57.71274646463817,0.6714862830304037,finished,-,stefanfuchs164,,2023-04-05T21:43:17.000Z,1884,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: E2AS1 Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( has( parapet, cladding), not( is( cladding. material, steel)), is( steel. type, vertical corrugated))), then( obligation( and( has( parapet, drained cavity), for( drained cavity, cladding))))","[""if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( steel))), expression( function( is), atom( relation( type), variable( steel)), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( for), atom( variable( drained cavity)), data( cladding)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( parapet)), then( obligation( and( has( parapet, drained cavity), exclude( drained cavity, parapet), is( parapet. material, corrugated steel), is( corrugated steel. orientation, vertical), as per( drained cavity, nzbc e2as1 t3))))","if( expression( function( exist), atom( variable( parapet)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( exclude), atom( variable( drained cavity)), data( parapet)), expression( function( is), atom( relation( material), variable( parapet)), data( corrugated steel)), expression( function( is), atom( relation( orientation), variable( corrugated steel)), data( vertical)), expression( function( as per), atom( variable( drained cavity)), data( nzbc e2as1 t3)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health risk)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety risk))), or( expression( function( for), atom( variable( corrosion)), data( integrity))), expression( function( for), atom( variable( corrosion)), data( associated plant)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health risk, safety risk)), for( corrosion, or( integrity, integrity)), for( corrosion, associated plant))))",0.8437586820289115,0.984219706617095,15,19,1,1,0.8547821342271417,0.9843429158110883,70.87659826810138,55.30299472401812,65.91840472788152,60.34206891500823,"[0.9004194783877439,0.8506654428636989,0.7886178861788617,0.7287268669208593]","[0.7936114732724903,0.728693368351937,0.6513227513227513,0.5752165223184543]",12829,7792,10966,7670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_43,68.9134913226723,0.7117439168048698,65.24810642333695,0.7096882800405233,finished,-,stefanfuchs164,,2023-04-05T21:23:23.000Z,1444,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_10_u_at_ex_loop_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), or( is( chimney. type, type 2), is( chimney. type, type 3), is( chimney. type, type 4))), and( less than( building storey. floor area, 150 m2), or( is( chimney. type, type 5), is( chimney. type, type 6), is( chimney. type, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( or( as per( pressure vacuum breaker. testing, as 2845 3), as per( pressure vacuum breaker. testing, nz backflow testing standard)), or( as per( pressure vacuum breaker. verifying, as 2845 3), as per( pressure vacuum breaker. verifying, nz backflow testing standard)))))","if( and( has( building, chimney), or( is( chimney. type, room), greater than( chimney. area, 24 m2)), and( has( building, floor area), is( floor area, level), is( level. type, chimney 1))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2), greater than equal( bracing. area, 50 m2), or( and( is( chimney type 1, 50 m2), is( chimney type 3, is( chimney type 4, is( chimney type 5, is( chimney type 6, is( chimney type 7, is( chimney type), is( chimney type. type, chimney type), is( chimney type, 4), is( chimney type, 150 m2))))))))","if( and( expression( function( has), atom( variable( building)), data( chimney)), or( expression( function( is), atom( relation( type), variable( chimney)), data( room)), expression( function( greater than), atom( relation( area), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( has), atom( variable( building)), data( floor area)), expression( function( is), atom( variable( floor area)), data( level)), expression( function( is), atom( relation( type), variable( level)), data( chimney 1))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2)), expression( function( greater than equal), atom( relation( area), variable( bracing)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), or( and( expression( function( is), atom( variable( chimney type 1)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( variable( chimney type 3)), data( is( chimney type 4, is( chimney type 5, is( chimney type 6, is( chimney type 7, is( chimney type), is( chimney type. type, chimney type), is( chimney type, 4), is( chimney type, 150 m2))))))))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum brewer)), data( as 2845 3))), or( expression( function( has), atom( variable( pressure vacuum brewer)), data( verifying)), expression( function( has), atom( variable( pressure vacuum brewer)), data( backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( or( as per( pressure vacuum breaker. testing, as 2845 3), as per( pressure vacuum breaker. verifying, nz backflow testing standard)), or( as per( pressure vacuum brewer. verifying, as 2845 3)), or( has( pressure vacuum brewer, verifying), has( pressure vacuum brewer, backflow testing standard)))))",0.8669812108737939,0.883638971844883,17,19,1,1,0.8750912482764215,0.889911929543635,72.06611700414285,67.63901225490466,66.02513617624669,63.02045740690263,"[0.9138010937065528,0.8588356036573987,0.7932751009674086,0.7295763993948563]","[0.9032838506522716,0.8448931546541109,0.7738084388954707,0.7045496239222161]",12329,12490,10789,11115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_43,68.80107597127943,0.743150598490685,55.84564976059586,0.6377173959841116,finished,-,stefanfuchs164,,2023-04-05T21:20:28.000Z,1365,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( is( roof cladding. type, profiled metal), is( roof cladding. material, steel))), then( obligation( and( greater than equal( steel. base metal thickness, 0.4 mm), or( and( is( steel. grade, g550), not( is( roof cladding. profile, and( rolled, crimped, trough)))), and( is( steel. grade, g300), is( roof cladding. profile, or( rolled, crimped, trough)))), for( steel. corrosion protection, exposure zone), as per( exposure zone, nzbc e2as1 t20))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( is( roof cladding. type, profiled metal), then( obligation( and( greater than equal( roof cladding. base metal thickness, 0.4 mm), is( roof cladding. material, or( rolled, crimped, trough)), has( roof cladding, corrosion protection), as per( corrosion protection, intended exposure zone), as per( intended exposure zone, nzbc e2as1 t20))))","if( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( roof cladding)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( expression( function( is), atom( relation( material), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( material), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( material), variable( roof cladding)), data( trough))), expression( function( has), atom( variable( roof cladding)), data( corrosion protection)), expression( function( as per), atom( variable( corrosion protection)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.9265767581407784,0.9363262800755012,19,19,1,1,0.9291449060721804,0.9382700205338808,70.76013218781125,53.85203349281691,66.94757377271031,57.992548987471146,"[0.8840604026845638,0.834838382985906,0.7771268466632705,0.7214487059024515]","[0.8024893995349474,0.7291896361631753,0.6464379947229552,0.5688497061293031]",12829,7792,11920,7311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_doc_split_esp20_e20_44,66.10890487353151,0.7306261208597167,54.8380104310523,0.6550397999085966,finished,-,stefanfuchs164,,2023-04-05T21:12:10.000Z,2397,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( 10 m))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( 10 m)))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0))))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( variable( storage tank)), data( health hazards)), expression( function( for), atom( variable( space storage tank)), data( safety hazards)), expression( function( for), atom( relation( location), variable( space storage tank)), data( corrosion)), expression( function( threaten), atom( relation( location), variable( corrosion)), data( integrity)), expression( function( for), atom( relationship( location), variable( storage tank)), data( plant)), expression( function( is), atom( relation( design), variable( storage tank)), data( withstand), atom( relation( design), variable( tank)), data( load associated))))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( variable( storage tank)), data( health hazards)), expression( function( for), atom( variable( space storage tank)), data( safety hazards)), expression( function( for), atom( relation( location), variable( space storage tank)), data( corrosion)), expression( function( threaten), atom( relation( location), variable( corrosion)), data( integrity)), expression( function( for), atom( relationship( location), variable( storage tank)), data( plant)), expression( function( is), atom( relation( design), variable( storage tank)), data( withstand), atom( relation( design), variable( tank)), data( load associated)))))",0.9293340348497868,0.993691684970735,17,19,1,1,0.931717203211474,0.993711498973306,67.4039122551831,53.365447894606845,64.86272050474237,56.39414667548397,"[0.8745084915920689,0.8238512035010941,0.7606468546270426,0.6971039182282794]","[0.7870334495673511,0.7150104058272633,0.6230839774662649,0.5385325943520718]",12829,7792,11953,7743,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_45,70.50748512805393,0.7425251511551788,54.783940610349234,0.6597067780598788,finished,-,stefanfuchs164,,2023-04-05T21:08:08.000Z,907,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( exist( chimney)), then( obligation( expression( rulestatement( for each( chimney. connection)), appliedstatement( as per( count( bracing. unit), nzbc b1as3 t2)))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, plumbing), for( disposal system, drainage), comply with( disposal system, nzbc g13))))","if( exist( chimney connection)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( and( expression( function( has), atom( variable( chimney connection)), data( bracing unit)), expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( in between), atom( variable( waste disposal system)), data( plumbing)), expression( function( in between), atom( variable( waste disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( in between( waste disposal system, plumbing), in between( waste disposal system, drainage), comply with( disposal system, nzbc g13 foul water))))",0.9190209844269585,1.0,19,19,1,1,0.9221295502377426,1.045046201232033,70.60437929755395,51.28073559404639,70.41085654019403,58.80087855666528,"[0.8849535080304312,0.8393570881877711,0.78507871321013,0.7307394335887062]","[0.7767407589340538,0.7068496538081108,0.627660898792481,0.5496365003760341]",12829,7792,11830,8143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_45,67.16303046588847,0.6735001021662174,64.37602102071274,0.7100437069619364,finished,-,stefanfuchs164,,2023-04-05T20:47:46.000Z,1959,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( type), variable( support)), data( full)), expression( function( has), atom( variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( has( underlay, support), is( support. type, full), has( underlay, self supporting), equal( underlay. span, 1.2 m))))",0.8287146675551933,0.9149117766520468,13,19,1,1,0.8418363208694947,0.9183346677341874,70.72485467878725,67.49059767059215,63.94276390270208,61.53622841609167,"[0.8976780036612391,0.8484672099340318,0.7880238351079418,0.7268345465276411]","[0.8714036617262424,0.8150714974997807,0.7471751412429378,0.6835746646531047]",12329,12490,10379,11470,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_44,69.96745427444627,0.7578424879598378,55.51462362589565,0.6636656274068519,finished,-,stefanfuchs164,,2023-04-05T20:17:28.000Z,3034,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS2 5.2.7 Penetrations through membrane roofs must be as shown in Figure 8.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( through( penetration, roof), is( roof. type, membrane))), then( obligation( comply with( penetration, nzbc g12as2 f8)))","[""if( and( expression( function( through), atom( variable( penetration)), data( roof)), expression( function( is), atom( relation( type), variable( roof)), data( membrane)))), then( obligation( expression( function( comply with), atom( variable( penetration)), data( nzbc g12as2 f8))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, health hazard)), not( cause( storage tank, safety hazard)), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( through( penetration, roof), is( roof. type, membrane))), then( obligation( as per( penetration, nzbc g12as2 f8)))","if( and( expression( function( through), atom( variable( penetration)), data( roof)), expression( function( is), atom( relation( type), variable( roof)), data( membrane)))), then( obligation( expression( function( as per), atom( variable( penetration)), data( nzbc g12as2 f8))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), or( and( expression( function( has), atom( relation( location), variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( plant)), expression( function( has), atom( relation( design), variable( storage tank)), data( impact)), expression( function( has), atom( variable( load)), data( impact)))))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), for( storage tank. location, health hazard), for( storage tank. location, safety hazard), or( and( has( storage tank. location, corrosion), threaten( corrosion, integrity), threaten( corrosion, plant), has( storage tank. design, impact), has( load, impact))))))",0.924734652192866,1.0,16,19,1,1,0.927430041312651,1.012705338809035,71.2768031528624,52.12908064712056,68.70534290449235,59.37046079378442,"[0.9060346276685156,0.8538090809165468,0.79346716570262,0.7348737697903295]","[0.7755671017615005,0.7094180704441041,0.6320524354196119,0.5578565881439296]",12829,7792,11898,7891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_44,68.40605110066991,0.7100414811481885,66.26169147026386,0.7231940422199359,finished,-,stefanfuchs164,,2023-04-05T20:15:29.000Z,1934,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: CAS2 This Acceptable Solution is one of three Acceptable Solutions that provide a means of establishing compliance with NZBC Clauses C1 to C6 Protection from Fire. It can be used for the building activities covered by risk groups specified in Paragraph 1.1.1 and described in Table 1.1.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( comply with( building, nzbc cas2), as per( building. risk group, and( nzbc cas2 1.1.1, nzbc cas2 t1.1)))), then( comply with( building. fire protection, and( nzbc c1, nzbc c2, nzbc c3, nzbc c5, nzbc c6)))","[""if( and( expression( function( comply with), atom( variable( building)), data( nzbc cas2)), expression( function( as per), atom( relation( risk group), variable( building)), data( nzbc cas2 1.1.1)), expression( function( as per), atom( relation( risk group), variable( building)), data( nzbc cas2 t1.1)))), then( and( expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c1)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c2)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c3)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c5)), expression( function( comply with), atom( relation( fire protection), variable( building)), data( nzbc c6))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( is( building activity, risk group), as per( risk group, and( nzbc cas2 1.1.1, nzbc cas2 t1.1)))), then( permission( and( for( building activity, comply with( building activity, nzbc c1 to nzbc cas2 c6)))))","if( and( expression( function( is), atom( variable( building activity)), data( risk group)), expression( function( as per), atom( variable( risk group)), data( nzbc cas2 1.1.1)), expression( function( as per), atom( variable( risk group)), data( nzbc cas2 t1.1)))), then( permission( and( expression( function( for), atom( variable( building activity)), data( comply with( building activity, nzbc c1 to nzbc cas2 c6))))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.872294974314243,0.9040003622696544,19,19,1,1,0.879795603860816,0.9083266613290631,70.80196571643543,68.53135174051658,66.1669827438394,64.1375477003001,"[0.8997879598045543,0.8479955456570156,0.7878561419897244,0.7302990408124882]","[0.8924636403702071,0.8377683164803974,0.7720253503525841,0.7095759971254042]",12329,12490,10847,11345,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_doc_split_esp20_e20_43,67.82484769639035,0.7358187704203506,57.48055937452013,0.6591685592179091,finished,-,stefanfuchs164,,2023-04-05T20:07:41.000Z,3863,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( 0.4 mm)), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))","if( and( expression( function( is), atom( relation( material), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( profiled steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( roof cladding)), data( 0.4 mm)), or( expression( function( equal), atom( relation( grade), variable( roof cladding)), data( g550)), expression( function( equal), atom( relation( type), variable( roofing)), data( g300))), or( expression( function( is), atom( relation( type), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( style), variable( roof cladding)), data( crimped))), expression( function( is), atom( relationship( type), variable( roof cladding))), data( trough))), expression( function( for), atom( relation( corrosion protection), variable( roof cladding)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20))))","if( and( expression( function( is), atom( relation( material), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( profiled steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( roof cladding)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( expression( function( equal), atom( relation( grade), variable( roof cladding)), data( g550)), expression( function( equal), atom( relation( type), variable( roofing)), data( g300))), or( expression( function( is), atom( relation( type), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( style), variable( roof cladding)), data( crimped))), expression( function( is), atom( relationship( type), variable( roof cladding))), data( trough))), expression( function( for), atom( relation( corrosion protection), variable( roof cladding)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))",0.918009564141545,0.94597370724308,19,19,1,1,0.9211941694598176,0.9473819301848048,68.64852035158617,58.09037204254357,67.02070621225893,56.883416904790494,"[0.8887290573701134,0.8376606793223802,0.7757793764988009,0.7146919431279621]","[0.8278244378217285,0.7517401392111369,0.6588283828382838,0.5750311763890813]",12829,7792,11818,7382,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_43,69.61689181076355,0.7174455240177565,56.06569520722767,0.6632948564011303,finished,-,stefanfuchs164,,2023-04-05T20:02:17.000Z,906,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, timber species), include( measurement. correction factor, temperature), include( measurement. correction factor, treatment type), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( timber. material, moisture content), is( moisture content. measurement, timber))), then( obligation( and( as per( moisture content. measurement, publication :name ( name( name( name( name( name( brand)), nzs 1080.1 appendix e)), by( moisture meters. type, electrical resistance), by( moisture meters. type, insulated probe), greater than equal( moisture content. measurement depth, 1/3)), greater than equal( timber. measurement depth, 200 mm), away from( timber. measurement end, board), by( moisture content. measurement factor, correction factor), by( timber. treatment type, species), by( timber. treatment type, temperature), by( timber. treatment type, correction factor), as per( correction factor, nzs 1080.1 Appendix e))))","if( and( expression( function( is), atom( relation( material), variable( timber)), data( moisture content)), expression( function( is), atom( relation( measurement), variable( moisture content)), data( timber)))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication :name ( name( name( name( name( name( brand)), nzs 1080.1 appendix e)), by( moisture meters. type, electrical resistance), by( moisture meters. type, insulated probe), greater than equal( moisture content. measurement depth, 1/3)), greater than equal( timber. measurement depth, 200 mm), away from( timber. measurement end, board), by( moisture content. measurement factor, correction factor), by( timber. treatment type, species), by( timber. treatment type, temperature), by( timber. treatment type, correction factor), as per( correction factor, nzs 1080.1 Appendix e)))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force)), comply with( tank. security, nzs 4219)))",0.8925032269071996,1.0,18,19,1,1,0.8978875984098527,1.0825205338809034,70.99316007323117,52.67615267487935,68.29296925210582,59.92144949751081,"[0.8859275978817606,0.8353424178895877,0.7783246901643667,0.7249248186803467]","[0.7770005927682276,0.7087112171837708,0.630990990990991,0.5570737605804111]",12829,7792,11519,8435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_43,68.00784426040994,0.6906117127521816,66.77938219510025,0.7163095237887855,finished,-,stefanfuchs164,,2023-04-05T20:00:29.000Z,896,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_6_u_ao_at_expr_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;.,translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))","if( expression( function( is), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( is( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",0.8612738369334572,0.8936003318735003,15,19,1,1,0.8700624543758618,0.8988791032826261,70.50530551570542,68.41942223634473,65.68126180868823,65.21612639539703,"[0.8851496224480283,0.8362424924924925,0.7771374586679263,0.7186608331748146]","[0.8962322971408212,0.8393689494442452,0.7730266125394677,0.71000544761213]",12329,12490,10727,11227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_45,68.5813676776032,0.7160830380361383,63.270312956860906,0.6852050482788606,finished,-,stefanfuchs164,,2023-04-05T18:47:54.000Z,4458,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), equal( underlay. span, 1.2 m)))))",0.8867367215478688,0.8675349429369283,13,19,1,1,0.8926920269283802,0.8755804643714972,70.45302541505104,66.70833682141819,66.80658150691389,60.16929896644891,"[0.8966927130656006,0.8433470507544581,0.7804675994108984,0.7205596219772075]","[0.8893562545720556,0.8306488725264611,0.7608856772280896,0.6923435605707358]",12329,12490,11006,10936,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_45,69.16282183012503,0.7516875547165427,57.08356334574122,0.6816916280839215,finished,-,stefanfuchs164,,2023-04-05T18:02:59.000Z,7044,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( expression( function( is), atom( material), data( metal)), expression( function( has), atom( material. exposure), data( water)))), then( obligation( expression( function( as per), atom( material), data( and( nzbc e2as1 t21, nzbc e2as1 t22)))))","[""if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( network utility operator), data( discharge)), expression( function( is), atom( discharge. type), data( industrial liquid waste)), expression( function( into), atom( discharge), data( sewer)))), then( obligation( and( expression( function( within), atom( industrial liquid waste), data( disposal system)), expression( function( for), atom( disposal system), data( and( plumbing, drainage))), expression( function( comply with), atom( disposal system), data( nzbc g13)))))","if( and( expression( function( is), atom( metal. contact), data( location)), expression( function( becomes), atom( metal. contact), data( wet)), expression( function( over), atom( water), data( or( metal, plastic))), expression( function( towards), atom( water), data( metal)))), then( obligation( and( expression( function( as per), atom( metal. contact), data( and( nzbc e2as1 t21, nzbc e2as1 té22))))))","if( and( expression( function( is), atom( relation( contact), variable( metal)), data( location)), expression( function( becomes), atom( relation( contact), variable( metal)), data( wet)), or( expression( function( over), atom( variable( water)), data( metal)), expression( function( over), atom( variable( water)), data( plastic))), expression( function( towards), atom( variable( water)), data( metal)))), then( obligation( and( expression( function( as per), atom( relation( contact), variable( metal)), data( nzbc e2as1 t21)), expression( function( as per), atom( relation( contact), variable( metal)), data( nzbc e2as1 té22)))))","if( and( expression( function( for), atom( variable( network utility)), data( industrial liquid waste)), expression( function( accept), atom( variable( network utility)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( convey)), expression( function( is), atom( variable( convey)), data( waste disposal system)), expression( function( comply with), atom( variable( waste disposal system)), data( nzbc g13 foul water)))))","if( and( expression( function( for), atom( network utility), data( industrial liquid waste)), expression( function( accept), atom( network utility), data( discharge)), expression( function( towards), atom( discharge), data( sewer)))), then( obligation( and( expression( function( has), atom( waste), data( convey)), expression( function( is), atom( convey), data( waste disposal system)), expression( function( comply with), atom( waste disposal system), data( nzbc g13 foul water)))))",0.976260149610965,1.0,18,19,1,1,0.9765375321537142,1.0284907597535935,71.17381161350434,57.96854112487597,67.26234898008887,56.2252003106064,"[0.8494572158365262,0.8043670225575982,0.746487970289036,0.689078359723914]","[0.80559021712004,0.7327553712777988,0.6461285425101214,0.5661867753853994]",12829,7792,12528,8014,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_random_split_esp20_e20_45,66.76226666034741,0.6939973703830696,64.50097426669646,0.7087450001286436,finished,-,stefanfuchs164,,2023-04-05T18:02:36.000Z,7498,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2).","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( 0.2 kN)), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( 250 mm)))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( 1.2 m)), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( and( expression( function( is), atom( relation( type), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( material), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glazing)), data( toughened)))), then( obligation( and( not( expression( function( has), atom( variable( safety barrier)), data( edge)), expression( function( count), atom( relation( edge), variable( safety barrier)), data( 2)), expression( function( is), atom( relation( edge), variable( security barrier)), data( joint)), expression( function( has), atom( relation( edge), variable( protection)), data( continuous clamp))), expression( function( has), atom( variable( pane)), data( fractured)), expression( function( resist), atom( relation( pane), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( resistance), variable( pane)), data( 0.2 kN concentrated load)), expression( function( less than equal), expression( function( deflection), variable( pane)), data( 250 mm)))))","if( and( expression( function( is), atom( relation( type), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( material), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glazing)), data( toughened))))), then( obligation( and( not( expression( function( has), atom( variable( safety barrier)), data( edge)), expression( function( count), atom( relation( edge), variable( safety barrier)), data( 2)), expression( function( is), atom( relation( edge), variable( security barrier)), data( joint)), expression( function( has), atom( relation( edge), variable( protection)), data( continuous clamp))), expression( function( has), atom( variable( pane)), data( fractured)), expression( function( resist), atom( relation( pane), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( resistance), variable( pane)), data( 0.2 kN concentrated load)), expression( function( less than equal), expression( function( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))), then( obligation( and( expression( function( define), atom( relation( support), variable( underlay)), data( x0)), expression( function( define), atom( relation( span), variable( roof)), data( nzbc e2as1)), expression( function( adjacent), atom( variable( support)), data( 'x0')))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( underlay)), data( 1.2 m)))), then( obligation( and( expression( function( define), atom( relation( support), variable( underlay)), data( x0)), expression( function( define), atom( relation( span), variable( roof)), data( nzbc e2as1)), expression( function( adjacent), atom( variable( support)), data( 'x0'))))",0.9088102558262638,0.8966069175336568,18,19,1,1,0.9127260929515776,0.9016012810248198,69.81687683340061,67.90862836731063,63.96374137570863,61.4189710852719,"[0.8554163334221985,0.8006617778572707,0.7369273692736927,0.673731884057971]","[0.8838469052482018,0.8303842716711349,0.7632880654735138,0.6969587255611875]",12329,12490,11253,11261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_44,68.89565168856937,0.6983217270480974,64.40996096483549,0.7169448579677538,finished,-,stefanfuchs164,,2023-04-05T17:52:03.000Z,957,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: E1AS1 Acceptable fill materials shown in Figure 13 are: Selected compacted fill of any fine-grained soil or granular material which is free from topsoil and rubbish and has a maximum particle size of 20 mm.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( is( fill material, bedding material), is( fill material. type, compacted))), then( obligation( and( or( is( fill material, fine grained soil), is( fill material, granular)), not( include( fill material, topsoil)), not( include( fill material, rubbish)), less than equal( fill material. particle size, 20 mm))))","[""if( and( expression( function( is), atom( variable( fill material)), data( bedding material)), expression( function( is), atom( relation( type), variable( fill material)), data( compacted)))), then( obligation( and( or( expression( function( is), atom( variable( fill material)), data( fine grained soil)), expression( function( is), atom( variable( fill material)), data( granular))), not( expression( function( include), atom( variable( fill material)), data( topsoil))), not( expression( function( include), atom( variable( fill material)), data( rubbish))), expression( function( less than equal), atom( relation( particle size), variable( fill material)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( is( fill material, selected compacted fill), or( is( fill material, fine grained), is( fill material, granular), or( is( fill material, topsoil free), is( fill material, rubbish free))), less than equal( selected compacted fill. particle size, 20 mm))), then( obligation( and( is( selected compacted fill, nzbc e1as1 f13))))","if( and( expression( function( is), atom( variable( fill material)), data( selected compacted fill)), or( expression( function( is), atom( variable( fill material)), data( fine grained)), expression( function( is), atom( variable( fill material)), data( granular)), or( expression( function( is), atom( variable( fill material)), data( topsoil free)), expression( function( is), atom( variable( fill material)), data( rubbish free)))), expression( function( less than equal), atom( relation( particle size), variable( selected compacted fill)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))), then( obligation( and( expression( function( is), atom( variable( selected compacted fill)), data( nzbc e1as1 f13)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)), expression( function( is), atom( relation( type), variable( reinforcing)), data( chimney)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing), is( reinforcing. type, chimney))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8720207253167832,0.9201109134486092,12,19,1,1,0.8795522751236922,0.923138510808647,72.25387014208788,66.1207900098984,65.83573556715199,62.78543196869397,"[0.8878642567318332,0.8356075373619233,0.7738740422350963,0.7163013827485655]","[0.8777103209019947,0.8190941617942229,0.7500878117316474,0.683573385172749]",12329,12490,10844,11530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_44,68.40468711375671,0.736759889595173,58.19298662500496,0.6538793928052582,finished,-,stefanfuchs164,,2023-04-05T17:31:40.000Z,1875,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( or( expression( function( is), atom( drain. type), data( main)), and( expression( function( is), atom( drain. type), data( branch)), expression( function( greater than equal), atom( drain. length), data( 10 m))))), then( obligation( and( expression( function( has), atom( drain), data( ventilation)), expression( function( as per), atom( ventilation), data( nzbc g13as2 t3)))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( storage tank. location), data( ground level))), then( obligation( and( not( expression( function( cause), atom( storage tank), data( and( health hazard, safety hazard)))), expression( function( has), atom( storage tank), data( corrosion resistance)), expression( function( greater than), atom( storage tank. design load), data( true load)))))","if( expression( function( is), atom( drain. type), data( or( main, branch))), expression( function( less than equal), atom( drain. length), data( 10 m)))), then( obligation( expression( function( has), atom( drain), data( ventilation)), expression( function( as per), atom( ventilation), data( nzbc g13as2 t3))))","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch))), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), expression( function( for), atom( variable( safety hazard)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( plant)))), expression( function( for), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load))))","if( expression( function( exist), atom( storage tank))), then( obligation( and( expression( function( above), atom( storage tank. location), data( ground)), expression( function( for), atom( storage tank. location), data( or( health hazard, safety hazard))), expression( function( for), atom( safety hazard), data( corrosion)), expression( function( threaten), atom( corrosion), data( or( integrity, integrity, plant)))), expression( function( for), atom( tank. design), data( withstand), atom( tank. design), data( load)))))",1.0,1.0,17,19,1,1,1.0452100709330423,1.0717402464065708,69.49823526360436,58.16679143200464,67.34501960831867,58.219205422446265,"[0.8163919755388173,0.7695306642675064,0.7133489108313862,0.6574719612003638]","[0.7667345228116393,0.7009402121504339,0.6224972697488169,0.5464207182995358]",12829,7792,13409,8351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_43,69.15063413110528,0.7155887607265999,66.9703764590832,0.7457392662426731,finished,-,stefanfuchs164,,2023-04-05T17:27:45.000Z,1452,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom"",""expression""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_9_u_at_expr_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), or( is( chimney. type, type 2), is( chimney. type, type 3), is( chimney. type, type 4))), and( less than( building storey. floor area, 150 m2), or( is( chimney. type, type 5), is( chimney. type, type 6), is( chimney. type, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( or( as per( pressure vacuum breaker. testing, as 2845 3), as per( pressure vacuum breaker. testing, nz backflow testing standard)), or( as per( pressure vacuum breaker. verifying, as 2845 3), as per( pressure vacuum breaker. verifying, nz backflow testing standard)))))","if( and( as per( building. chimney type, nzbc b1as3 1.9.2), or( greater than equal( chimney. room area, 24 m2), greater than( chimney. floor area, 50 m2), or( and( is( chimney. type, 1), is( chimney. type, 2), is( chimney. type, 3), is( chimney. type, 4), is( chimney. type, 75 m2), and( is( chimney. type, 150 m2), is( chimney. type, 5), is( chimney. type, 6), is( chimney. type, 7))))), then( obligation( and( has( building, bracing), has( building, bracing), is( bracing, bracing), is( building. level, floor), is( floor. elevation, x0), is( bracing, x1), is( bracing. type, x1), has( building, chimney), is( chimney. type, x1), is( chimney. type, x1).","if( and( expression( function( as per), atom( relation( chimney type), variable( building)), data( nzbc b1as3 1.9.2)), or( expression( function( greater than equal), atom( relation( room area), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), expression( function( greater than), atom( relation( floor area), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), or( and( expression( function( is), atom( relation( type), variable( chimney)), data( 1)), expression( function( is), atom( relation( type), variable( chimney)), data( 2)), expression( function( is), atom( relation( type), variable( chimney)), data( 3)), expression( function( is), atom( relation( type), variable( chimney)), data( 4)), expression( function( is), atom( relation( type), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), and( expression( function( is), atom( relation( type), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), expression( function( is), atom( relation( type), variable( chimney)), data( 5)), expression( function( is), atom( relation( type), variable( chimney)), data( 6)), expression( function( is), atom( relation( type), variable( chimney)), data( 7)))))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( is), atom( variable( bracing)), data( bracing)), expression( function( is), atom( relation( level), variable( building)), data( floor)), expression( function( is), atom( relation( elevation), variable( floor)), data( x0)), expression( function( is), atom( variable( bracing)), data( x1)), expression( function( is), atom( relation( type), variable( bracing)), data( x1)), expression( function( has), atom( variable( building)), data( chimney)), expression( function( is), atom( relation( type), variable( chimney)), data( x1)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breakers)), data( as 2845 3)), or( expression( function( is), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard)), expression( function( as per), atom( relation( verification), variable( pressure vacuum breakers)), data( nz backflow test standard)))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( or( as per( pressure vacuum breaker. test, as 2845 3), as per( pressure vacuum breaker. testing, nz backflow testing standard)), or( as per( pressure vacuum breakers. verifying, as 2845 3), or( is( pressure vacuum breaker. verifying, nz backflow testing standard), as per( pressure vacuum breakers. verification, nz backflow test standard))))))",0.8684495252689707,0.9265750500939146,17,19,1,1,0.876389001541082,0.9291433146517214,72.04940720046815,68.09686524229593,66.47609293174673,65.88055093775854,"[0.908283202221194,0.8596981553940749,0.799306011441433,0.7385762839879154]","[0.8952175786299009,0.8412519507542917,0.7776323824478758,0.7164676966292135]",12329,12490,10805,11605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_random_split_esp20_e20_44,68.7083753085939,0.6910530947266372,65.69899065320625,0.7233150858896541,finished,-,stefanfuchs164,,2023-04-05T17:04:02.000Z,3508,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))","[""if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( solar water heater)), data( fixing))), then( obligation( and( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1)), expression( function( comply with), atom( variable( fixture)), data( nzbc g12bs2 2.1.2)), expression( function( comply with), atom( relation( installation), variable( fixing)), data( nzbc gr2 2.1.3)), expression( function( comply with), atom( relationship( installation), variable( fixing)), data( x0)))))","if( expression( function( has), atom( variable( solar water heater)), data( fixing))), then( obligation( and( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1)), expression( function( comply with), atom( variable( fixture)), data( nzbc g12bs2 2.1.2)), expression( function( comply with), atom( relation( installation), variable( fixing)), data( nzbc gr2 2.1.3)), expression( function( comply with), atom( relationship( installation), variable( fixing)), data( x0)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))",0.8834829212990237,0.9185537747745728,16,19,1,1,0.889772082082894,0.921697357886309,72.3191477057579,67.7982808023942,65.4410163454609,63.72579985398086,"[0.8692798541476755,0.818423708597119,0.7564647210934614,0.695547085618667]","[0.8862056984016679,0.8288611135390264,0.7587510993843448,0.6898840605363307]",12329,12490,10970,11512,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_43,68.91131899907396,0.7338389402673875,55.79193953285565,0.6118927718900826,finished,-,stefanfuchs164,,2023-04-05T16:28:46.000Z,3770,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( by), atom( timber. moisture content), data( measurement)))), then( obligation( and( expression( function( is), atom( measurement. recommended procedure), data( measurement of moisture content of wood)), expression( function( as per), atom( measurement. recommended procedure), data( scion publication)), expression( function( by), atom( measurement), data( moisture meter)), expression( function( is), atom( moisture meter. type), data( electrical resistance)), expression( function( has), atom( moisture meter), data( insulated probe)), expression( function( as per), atom( moisture meter. calibration), data( nzs 1080 1 appendix e)), expression( function( by), atom( measurement. sampling), data( probe)), expression( function( into), atom( probe), data( timber)), expression( function( define), atom( timber. depth), data( x0)), expression( function( greater than equal), atom( probe. depth), data( '1/3 * x0')), expression( function( has), atom( timber), data( board)), expression( function( define), atom( board. end), data( x1)), expression( function( greater than), atom( probe. location), data( 'x1 + 200 mm')), expression( function( include), atom( measurement. correction factor), data( and( timber species, temperature, treatment type))), expression( function( as per), atom( measurement. correction factor), data( scion publication)))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( tank. type), data( free standing))), then( and( obligation( expression( function( has), atom( tank), data( seismic resistance))), permission( expression( function( as per), atom( tank. seismic resistance), data( nzs 4219)))))","if( expression( function( is), atom( timber. material), data( timber))), then( obligation( and( expression( function( has), atom( timber), data( moisture content)), expression( function( as per), atom( moisture content. measurement), data( publication)), expression( function( is), atom( publication. name), data( scion)), expression( function( is), atom( moisture meters. type), data( electrical resistance)), expression( function( has), atom( moisture meters. type), data( insulated probe)), expression( function( comply with), atom( timber. measurement), data( nzs 1080.1 appendix e)), expression( function( greater than equal), atom( meter. depth), data( 1/3)), expression( function( is), atom( timber. measurement), data( x0)), expression( function( is), atom( x0. measurement), data( x1)), expression( function( is), atom( x1. measurement), data( x1)), expression( function( has), atom( x1)), data( x1)), expression( function( greater than equal), atom( timber. measurement), data( 'x0'), data( 'x1')), expression( function( has), atom( timber. measurement), data( x2)), expression( function( is), atom( timber. moisture content), data( x1)), expression( function( is, atom( timber. moisture content), data( x2)), expression( function( has), atom( timber. treatment type), data( correction factor)), expression( function( is), atom( correction factor), data( and( species, temperature, treatment type))), expression( function( as per), atom( correction factor), data( nzs 1080.1 Appendix e2as1 e2as1 b)))))","if( expression( function( is), atom( relation( material), variable( timber)), data( timber))), then( and( obligation( and( expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( name), variable( publication)), data( scion)), expression( function( is), atom( relation( type), variable( moisture meters)), data( electrical resistance)), expression( function( has), atom( relation( type), variable( moisture meters)), data( insulated probe)), expression( function( comply with), atom( relation( measurement), variable( timber)), data( nzs 1080.1 appendix e)), expression( function( greater than equal), atom( relation( depth), variable( meter)), data( 1/3)), expression( function( is), atom( relation( measurement), variable( timber)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( x1)), expression( function( has), atom( variable( x1))), data( x1)), expression( function( greater than equal), atom( relation( measurement), variable( timber)), data( 'x0'), data( 'x1')), expression( function( has), atom( relation( measurement), variable( timber)), data( x2)), expression( function( is), atom( relation( moisture content), variable( timber)), data( x1)), expression( function( is, atom( relation( moisture content), variable( timber)), data( x2)), expression( function( has), atom( relation( treatment type), variable( timber)), data( correction factor)), expression( function( is), atom( variable( correction factor)), data( species)), expression( function( as per), atom( variable( correction factor)), data( nzs 1080.1 Appendix e2as1 e2as1 b)))), obligation( and( expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( name), variable( publication)), data( scion)), expression( function( is), atom( relation( type), variable( moisture meters)), data( electrical resistance)), expression( function( has), atom( relation( type), variable( moisture meters)), data( insulated probe)), expression( function( comply with), atom( relation( measurement), variable( timber)), data( nzs 1080.1 appendix e)), expression( function( greater than equal), atom( relation( depth), variable( meter)), data( 1/3)), expression( function( is), atom( relation( measurement), variable( timber)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( x1)), expression( function( has), atom( variable( x1))), data( x1)), expression( function( greater than equal), atom( relation( measurement), variable( timber)), data( 'x0'), data( 'x1')), expression( function( has), atom( relation( measurement), variable( timber)), data( x2)), expression( function( is), atom( relation( moisture content), variable( timber)), data( x1)), expression( function( is, atom( relation( moisture content), variable( timber)), data( x2)), expression( function( has), atom( relation( treatment type), variable( timber)), data( correction factor)), expression( function( is), atom( variable( correction factor)), data( temperature)), expression( function( as per), atom( variable( correction factor)), data( nzs 1080.1 Appendix e2as1 e2as1 b)))), obligation( and( expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( name), variable( publication)), data( scion)), expression( function( is), atom( relation( type), variable( moisture meters)), data( electrical resistance)), expression( function( has), atom( relation( type), variable( moisture meters)), data( insulated probe)), expression( function( comply with), atom( relation( measurement), variable( timber)), data( nzs 1080.1 appendix e)), expression( function( greater than equal), atom( relation( depth), variable( meter)), data( 1/3)), expression( function( is), atom( relation( measurement), variable( timber)), data( x0)), expression( function( is), atom( relation( measurement), variable( x0)), data( x1)), expression( function( is), atom( relation( measurement), variable( x1)), data( x1)), expression( function( has), atom( variable( x1))), data( x1)), expression( function( greater than equal), atom( relation( measurement), variable( timber)), data( 'x0'), data( 'x1')), expression( function( has), atom( relation( measurement), variable( timber)), data( x2)), expression( function( is), atom( relation( moisture content), variable( timber)), data( x1)), expression( function( is, atom( relation( moisture content), variable( timber)), data( x2)), expression( function( has), atom( relation( treatment type), variable( timber)), data( correction factor)), expression( function( is), atom( variable( correction factor)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( nzs 1080.1 Appendix e2as1 e2as1 b))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( as per), atom( variable( security)), data( nzs 4219)))))","if( expression( function( is), atom( tank. type), data( freestanding))), then( obligation( and( expression( function( against), atom( tank. security), data( earthquake force)), expression( function( as per), atom( security), data( nzs 4219)))))",1.0,1.0,18,19,1,1,1.0208122223088316,1.1357802874743326,70.90165394066878,55.42933906796726,67.02967729635157,56.159315261377664,"[0.811240073304826,0.7666794625719769,0.7110545005403737,0.6557478848094388]","[0.7187570621468926,0.6557134735645253,0.5816933638443936,0.5113413932066782]",12829,7792,13096,8850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_45,68.720669514849,0.7481437939422182,58.11028618697217,0.6884217012444578,finished,-,stefanfuchs164,,2023-04-05T16:23:54.000Z,3821,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 The scope of this Acceptable Solution is limited to the materials, products and processes contained herein, for buildings within the scope of NZS 3604, and: a) Up to 3 storeys with a height measured from lowest ground level adjacent to the building to the highest point of the roof (except for chimneys, aerials and the like) of 10 m or less, and b) With floor plan area limited only by seismic and structural control joints, and c) External walls that are vertical, and roofs that are 60° or less above the horizontal.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( expression( function( apply to), atom( nzs 3604), data( building)), expression( function( less than equal), expression( function( count), atom( building storey)), data( 3)), expression( function( adjacent), atom( building), data( ground level)), expression( function( define), expression( function( min), atom( ground level. elevation)), data( x0)), expression( function( has), atom( building), data( roof)), expression( function( define), expression( function( max), atom( roof. elevation)), data( x1)), or( expression( function( exclude), expression( function( max), atom( roof. elevation)), data( chimney)), expression( function( exclude), expression( function( max), atom( roof. elevation)), data( aerial))), expression( function( in between), atom( building. height), data( x0)), expression( function( in between), atom( building. height), data( x1)), expression( function( less than equal), atom( building. height), data( 10 m)), expression( function( has), atom( building), data( floor plan area)), expression( function( by), atom( floor plan area. limit), data( seismic control joint)), expression( function( by), atom( floor plan area. limit), data( structural control joint)), expression( function( has), atom( building), data( external wall)), expression( function( is), atom( external wall. orientation), data( vertical)), expression( function( has), atom( building), data( roof)), expression( function( less than equal), atom( roof. slope), data( 60 deg)))), then( and( or( expression( function( has), atom( building), data( material)), expression( function( has), atom( building), data( product)), expression( function( has), atom( building), data( process))), expression( function( apply to), atom( nzbc e2as1), data( material)), expression( function( apply to), atom( nzbc e2as1), data( product)), expression( function( apply to), atom( nzbc e2as1), data( process))))","[""if( and( expression( function( apply to), atom( variable( nzs 3604)), data( building)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( adjacent), atom( variable( building)), data( ground level)), expression( function( define), expression( function( min), atom( relation( elevation), variable( ground level))), data( x0)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), expression( function( max), atom( relation( elevation), variable( roof))), data( x1)), or( expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( chimney)), expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( aerial))), expression( function( in between), atom( relation( height), variable( building)), data( x0)), expression( function( in between), atom( relation( height), variable( building)), data( x1)), expression( function( less than equal), atom( relation( height), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( orientation), variable( external wall)), data( vertical)), expression( function( less than equal), atom( relation( slope), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( and( or( expression( function( has), atom( variable( building)), data( material)), expression( function( has), atom( variable( building)), data( product)), expression( function( has), atom( variable( building)), data( process))), expression( function( apply to), atom( variable( nzbc e2as1)), data( material)), expression( function( apply to), atom( variable( nzbc e2as1)), data( product)), expression( function( apply to), atom( variable( nzbc e2as1)), data( process))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( network utility operator), data( discharge)), expression( function( is), atom( discharge. type), data( industrial liquid waste)), expression( function( into), atom( discharge), data( sewer)))), then( obligation( and( expression( function( within), atom( industrial liquid waste), data( disposal system)), expression( function( for), atom( disposal system), data( plumbing)), expression( function( for), atom( disposal system), data( drainage)), expression( function( comply with), atom( disposal system), data( nzbc g13)))))","if( and( expression( function( is), atom( building. type), data( nzs 3604)), expression( function( within), atom( building. material), data( nzbc e2as1)), expression( function( include), atom( building), data( material)), expression( function( include), atom( building. product), data( product)), expression( function( include), atom( building), information( process)))), then( and( expression( function( greater than equal), atom( building. height), data( 3 storeys)), expression( function( greater than equal), atom( ground level), data( lowest)), expression( function( adjacent), atom( ground level), data( building)), expression( function( has), atom( building. elevation), data( roof)), expression( function( greater than equal), expression( function( has), atom( roof. height), data( 10 m)), expression( function( has), atom( building), data( floor plan area)), expression( function( by), atom( floor plan area), data( seismic control joint)), expression( function( by), atom( building. elevation), data( structural control joint)), expression( function( above), atom( roof. elevation), data( horizontal)), expression( function( equal), atom( roof. elevation), data( 60 deg)))))","if( and( expression( function( is), atom( relation( type), variable( building)), data( nzs 3604)), expression( function( within), atom( relation( material), variable( building)), data( nzbc e2as1)), expression( function( include), atom( variable( building)), data( material)), expression( function( include), atom( relation( product), variable( building)), data( product)), expression( function( include), atom( variable( building)), information( process)))), then( and( expression( function( greater than equal), atom( relation( height), variable( building)), data( 3 storeys)), expression( function( greater than equal), atom( variable( ground level)), data( lowest)), expression( function( adjacent), atom( variable( ground level)), data( building)), expression( function( has), atom( relation( elevation), variable( building)), data( roof)), expression( function( greater than equal), expression( function( has), atom( relation( height), variable( roof)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( elevation), variable( building)), data( structural control joint)), expression( function( above), atom( relation( elevation), variable( roof)), data( horizontal)), expression( function( equal), atom( relation( elevation), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( conveying system)), expression( function( is), atom( variable( conveying system)), data( plumbing disposal system)), expression( function( has), atom( variable( conveying system)), data( drainage disposal system)), expression( function( comply with), atom( variable( conveying system)), data( nzbc g13 foam water)))))","if( and( expression( function( for), atom( network utility operator), data( industrial liquid waste)), expression( function( accept), atom( network utility operator), data( discharge)), expression( function( towards), atom( discharge), data( sewer)))), then( obligation( and( expression( function( has), atom( industrial liquid waste), data( conveying system)), expression( function( is), atom( conveying system), data( plumbing disposal system)), expression( function( has), atom( conveying system), data( drainage disposal system)), expression( function( comply with), atom( conveying system), data( nzbc g13 foam water)))))",0.9349104847494976,1.0,16,19,1,1,0.936939745888222,1.0011550308008217,70.0216472843679,57.80711600629678,67.46715335111098,58.41665309292029,"[0.8834442595673877,0.8340446899322119,0.7758881966661054,0.7172863555517913]","[0.8033585437764389,0.7368964626904209,0.6553114029384995,0.5789680460974332]",12829,7792,12020,7801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_3_unit_random_split_esp20_e20_43,67.43876101686143,0.695273212588054,65.50505372740506,0.7051103174992577,finished,-,stefanfuchs164,,2023-04-05T15:51:50.000Z,4116,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_3_unit_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Fixings shall: a) Be fixed through crests, b) Penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, c) Include sealing washers of: i) neoprene (having a carbon black content of 15% or less by weight).",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( 40 mm))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( 30 mm)))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( through), atom( relation( fixing), variable( fixing)), data( crest)), expression( function( has), atom( relation( penetration), variable( fixing)), data( purlin)), expression( function( greater than equal), atom( relation( penetration), variable( purlin)), data( 40 mm)), expression( function( for), atom( variable( purlin)), data( nail fixing)), expression( function( for), atom( relation( installation), variable( fixing)), data( screw fixing)), expression( function( less than equal), atom( variable( penetration)), data( 30 mm)), expression( function( include), atom( variable( penetration)), data( sealing washer)), expression( function( is), atom( relation( material), variable( sealing washer)), data( neoprene)), expression( function( equal), atom( relation( carbon black content), variable( fixing)), data( 15 percent)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( through), atom( relation( fixing), variable( fixing)), data( crest)), expression( function( has), atom( relation( penetration), variable( fixing)), data( purlin)), expression( function( greater than equal), atom( relation( penetration), variable( purlin)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( for), atom( variable( purlin)), data( nail fixing)), expression( function( for), atom( relation( installation), variable( fixing)), data( screw fixing)), expression( function( less than equal), atom( variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))), expression( function( include), atom( variable( penetration)), data( sealing washer)), expression( function( is), atom( relation( material), variable( sealing washer)), data( neoprene)), expression( function( equal), atom( relation( carbon black content), variable( fixing)), data( 15 percent)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( variable( pressure vacuum breaker)), data( as 28 45 3)), expression( function( comply with), atom( relation( verification), variable( pressure vacuum breakers)), data( nz backflow testing standard)), expression( function( comply with), atom( variable( nz backflow testing standard)))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( variable( pressure vacuum breaker)), data( as 28 45 3)), expression( function( comply with), atom( relation( verification), variable( pressure vacuum breakers)), data( nz backflow testing standard)), expression( function( comply with), atom( variable( nz backflow testing standard))))))",0.8626572296669849,0.8849781946107407,19,19,1,1,0.8712790980614811,0.8911128903122498,70.4396680025455,67.94304825021943,64.68309837296447,63.235963132668026,"[0.9002978961087321,0.8448130447005904,0.7781132075471698,0.7129831892867319]","[0.8897574123989218,0.8350664617053983,0.7693847834000728,0.7049555738756068]",12329,12490,10742,11130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_45,69.59779518800876,0.6894502745790306,64.25540901562981,0.7029536176518707,finished,-,stefanfuchs164,,2023-04-05T15:49:19.000Z,2364,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( expression( function( is), atom( storage water heater. type), data( open vented))), then( obligation( and( expression( function( has), atom( storage water heater), data( ventilation pipe)), expression( function( comply with), atom( ventilation pipe), data( nzbc g12as1 6.8)))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( roof), data( underlay))), then( obligation( or( and( expression( function( is), atom( underlay. type), data( r1)), expression( function( has), atom( underlay), data( support)), expression( function( is), atom( support. material), data( corrosion resistant))), and( expression( function( is), atom( underlay. type), data( r2)), expression( function( is), atom( underlay), data( self supporting)), expression( function( less than equal), atom( underlay. span), data( 1.2 m)), expression( function( in between), atom( underlay. span), data( adjacent supports))))))","if( expression( function( is), atom( storage water heater. type), data( open vented))), then( obligation( and( expression( function( has), atom( storage water heater), data( vent pipe)), expression( function( comply with), atom( vent pipe), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( roof)), data( underlay))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( full support), variable( underlay)), data( corrosion resistant material)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( adjacent), atom( relation( span), variable( underlay)), data( support)))))","if( expression( function( is), atom( roof. type), data( underlay))), then( obligation( and( expression( function( is), atom( underlay. type), data( r1)), expression( function( is), atom( underlay. full support), data( corrosion resistant material)), expression( function( equal), atom( underlay. span), data( 1.2 m)), expression( function( adjacent), atom( underlay. span), data( support)))))",0.8481893089554181,0.9138689717906052,13,19,1,1,0.8586260037310406,0.9173738991192956,74.83749118526113,68.92616816327866,65.04379795490124,60.17750046140801,"[0.8982618552805592,0.8484070375653828,0.7873420145538108,0.727561939651017]","[0.8661197416652121,0.8082023359971898,0.740367621067515,0.6755002223210316]",12329,12490,10586,11458,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_44,69.02912204237947,0.7463918178324156,57.96598232489747,0.670319291596764,finished,-,stefanfuchs164,,2023-04-05T15:15:05.000Z,4123,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: E2AS1 Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( expression( function( has), atom( parapet), data( cladding)), not( expression( function( is), atom( cladding. material), data( steel))), expression( function( is), atom( steel. type), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( parapet), data( drained cavity)), expression( function( for), atom( drained cavity), data( cladding)))))","[""if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( steel))), expression( function( is), atom( relation( type), variable( steel)), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( for), atom( variable( drained cavity)), data( cladding)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( storage tank. location), data( ground level))), then( obligation( and( not( expression( function( cause), atom( storage tank), data( health hazard))), not( expression( function( cause), atom( storage tank), data( safety hazard))), expression( function( has), atom( storage tank), data( corrosion resistance)), expression( function( greater than), atom( storage tank. design load), data( true load)))))","if( and( not( expression( function( is), atom( parapet. material), data( corrugated steel)), expression( function( is), atom( corrugated steel. orientation), data( vertical)))), then( obligation( and( expression( function( has), atom( parapet), data( drained cavity)), expression( function( as per), atom( drained cavity), data( nzbc e2as1 t3)))))","if( and( not( expression( function( is), atom( relation( material), variable( parapet)), data( corrugated steel)), expression( function( is), atom( relation( orientation), variable( corrugated steel)), data( vertical))))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( as per), atom( variable( drained cavity)), data( nzbc e2as1 t3)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazards)), expression( function( for), atom( variable( storage tank)), data( safety hazards)), expression( function( for), atom( variable( safety hazards)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( relation( damage), variable( corrosion)), data( integrity)), expression( function( for), atom( relation( damage), variable( corrosion)), data( plant)))), expression( function( for), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load)))))","if( expression( function( exist), atom( storage tank))), then( obligation( and( expression( function( above), atom( storage tank. location), data( ground)), or( expression( function( for), atom( storage tank. location), data( health hazards)), expression( function( for), atom( storage tank), data( safety hazards)), expression( function( for), atom( safety hazards), data( corrosion)), or( expression( function( threaten), atom( corrosion), data( integrity)), expression( function( threaten), atom( corrosion. damage), data( integrity)), expression( function( for), atom( corrosion. damage), data( plant)))), expression( function( for), atom( tank. design), data( withstand), atom( tank. design), data( load)))))",0.9303349333426668,0.9535213727943664,15,19,1,1,0.932652583989399,0.9545687885010268,70.20754704901564,58.6671893061634,67.88960343307255,57.28133941681942,"[0.8860008357709988,0.8357154868000672,0.7778905523132876,0.71928182437032]","[0.8279107286905082,0.7545713124746039,0.6673034934497817,0.5858655300426234]",12829,7792,11965,7438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_44,69.11122028720317,0.7027675221009155,65.55346744990106,0.7348648797419861,finished,-,stefanfuchs164,,2023-04-05T13:43:18.000Z,7557,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: CAS2 3.1.4 Escape routes shall comply with NZBC D1.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( expression( function( exist), atom( escape route))), then( obligation( expression( function( comply with), atom( escape route), data( nzbc d1))))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( chimney), data( reinforcing))), then( obligation( expression( function( comply with), atom( reinforcing), data( nzs 4671))))","if( expression( function( exist), atom( escape route))), then( obligation( expression( function( comply with), atom( escape route), data( nzbc d1))))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( chimney), data( reinforcing))), then( obligation( expression( function( comply with), atom( reinforcing), data( nzs 4671))))",0.8759453746308048,0.9687779875482702,14,19,1,1,0.8830399870224673,0.9692554043234588,70.64502223600265,67.51372766214946,67.64260500345986,63.70382763579856,"[0.8955635161201433,0.8396819526627219,0.7741275011633317,0.7117294360127412]","[0.8479266479431686,0.7954299958454508,0.7319458375125376,0.6706465988396536]",12329,12490,10887,12106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_45,64.8968596302721,0.7152936982183319,55.80920742705997,0.638651703211532,finished,-,stefanfuchs164,,2023-04-05T13:30:31.000Z,8468,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4.13 Stopends; The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( top end), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( bottom end), variable( roof cladding)), data( trough)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)), or( and( expression( function( less than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 25.0))), expression( function( is), atom( variable( stopend)), data( wind zone)), expression( function( is), atom( relationship( wind zone), variable( roof cladding)), data( high)), expression( function( is), atom( relation_0), variable( roof cladding)), data( extreme high)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( top end), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( bottom end), variable( roof cladding)), data( trough))))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)), or( and( expression( function( less than equal), atom( relation( pitch), variable( roof)), data( baseunit( kind( angle degree)), value( 25.0))), expression( function( is), atom( variable( stopend)), data( wind zone)), expression( function( is), atom( relationship( wind zone), variable( roof cladding)), data( high)), expression( function( is), atom( relation_0), variable( roof cladding)), data( extreme high))))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 Foul Water))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 Foul Water))))",0.8966545369610512,0.9501585633095928,14,19,1,1,0.9016444548359442,0.9513603696098564,66.93370293163439,54.632484035308224,62.98032074466114,57.03773731914118,"[0.89333563834385,0.8357975300052183,0.7698433534611009,0.7045614653046848]","[0.7998111425873465,0.7258765969013319,0.6356291934821306,0.5531181015452539]",12831,7792,11569,7413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_43,69.2377781883219,0.7480769257541311,59.3978234325476,0.6846516338677835,finished,-,stefanfuchs164,,2023-04-05T12:45:55.000Z,8944,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( is), atom( roof cladding. type), data( profiled metal)), expression( function( is), atom( roof cladding. material), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( steel. base metal thickness), data( 0.4 mm)), or( and( expression( function( is), atom( steel. grade), data( g550)), not( expression( function( is), atom( roof cladding. profile), data( rolled))), not( expression( function( is), atom( roof cladding. profile), data( crimped))), not( expression( function( is), atom( roof cladding. profile), data( trough)))), and( expression( function( is), atom( steel. grade), data( g300)), or( expression( function( is), atom( roof cladding. profile), data( rolled)), expression( function( is), atom( roof cladding. profile), data( crimped)), expression( function( is), atom( roof cladding. profile), data( trough))))), expression( function( for), atom( steel. corrosion protection), data( exposure zone)), expression( function( as per), atom( exposure zone), data( nzbc e2as1 t20)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( tank. type), data( free standing))), then( and( obligation( expression( function( has), atom( tank), data( seismic resistance))), permission( expression( function( as per), atom( tank. seismic resistance), data( nzs 4219)))))","if( and( expression( function( is), atom( roof cladding. type), data( profiled metal)), expression( function( has), atom( roof cladding), data( material)))), then( obligation( and( expression( function( greater than equal), atom( material. thickness), data( 0.4 mm)), or( expression( function( equal), atom( material. grade), data( g550)), expression( function( equal), atom( product. grade), data( g300)), or( expression( function( is), atom( profiled metal. type), data( rolled)), expression( function( is), atom( profiled steel. type), data( crimped)), expression( function( is), atom( roofing. type), data( trough)))), expression( function( as per), atom( roof cladding. corrosion protection), data( intended exposure zone)), expression( function( as per), atom( intended exposure zone), data( nzbc e2as1 t20)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( material)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( material)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( expression( function( equal), atom( relation( grade), variable( material)), data( g550)), expression( function( equal), atom( relation( grade), variable( product)), data( g300)), or( expression( function( is), atom( relation( type), variable( profiled metal)), data( rolled)), expression( function( is), atom( relation( type), variable( profiled steel)), data( crimped)), expression( function( is), atom( relation( type), variable( roofing)), data( trough)))), expression( function( as per), atom( relation( corrosion protection), variable( roof cladding)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( as per), atom( variable( security)), data( nzs 4219)))))","if( expression( function( is), atom( tank. type), data( freestanding))), then( obligation( and( expression( function( against), atom( tank. security), data( earthquake force)), expression( function( as per), atom( security), data( nzs 4219)))))",0.9238962927945744,0.9764991793442004,19,19,1,1,0.9266505573310468,0.976771047227926,71.24025309073433,59.89789629148569,67.34479963714223,58.90603141045763,"[0.8962819650067295,0.845984598459846,0.7845223906010557,0.7225695931477516]","[0.8205229273420049,0.7510587612493382,0.6663111585121984,0.5885038947085683]",12829,7792,11888,7611,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_43,68.97584444141933,0.7244756142421538,65.86823028900585,0.712020651603307,finished,-,stefanfuchs164,,2023-04-05T12:09:45.000Z,5609,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_5_u_ao_atom_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( or( and( expression( function( include), atom( building. space), data( chimney)), expression( function( greater than), atom( space. area), data( 24 m2))), and( expression( function( less than), atom( building storey. floor area), data( 50 m2)), expression( function( is), atom( chimney. type), data( type 1))), and( expression( function( less than), atom( building storey. floor area), data( 75 m2)), expression( function( is), atom( chimney. type), data( or( type 2, type 3, type 4)))), and( expression( function( less than), atom( building storey. floor area), data( 150 m2)), expression( function( is), atom( chimney. type), data( or( type 5, type 6, type 7)))))), then( obligation( and( expression( function( has), atom( building), data( bracing)), expression( function( as per), atom( bracing), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( piped water supply system), data( pressure vacuum breaker))), then( obligation( and( expression( function( as per), atom( pressure vacuum breaker. testing), data( or( as 2845 3, nz backflow testing standard))), expression( function( as per), atom( pressure vacuum breaker. verifying), data( or( as 2845 3, nz backflow testing standard))))))","if( expression( function( has), atom( building), data( chimney))), then( obligation( and( expression( function( has), atom( chimney), data( bracing)), expression( function( as per), atom( bracing), data( and( nzbc b1as3 1.9.2 to nzbc b1as3 t2)), expression( function( greater than), atom( bracing. area), data( 24 m2)), expression( function( has), atom( room), data( chimney)), expression( function( is), atom( room. area), data( floor)), expression( function( is), atom( floor. area), data( building level)), expression( function( greater than equal), atom( floor. area), data( 50 m2)), expression( function( for), atom( chimney. type), data( chimney. type 1)), expression( function( is), atom( chimney. type), data( and( chimney. type 2, nzbc b1as3 b1as3 t4)), expression( function( less than equal), atom( chimney. floor. area), data( 75 m2)), expression( function( for), expression( function( has), atom( chimney. type), data( nzbc b1as3 3 nzbc b1as3 f4))), expression( function( has), atom( chimney. size), data( 150 m2))), expression( function( has), atom( building. level), data( building)), expression( function( has), atom( building), data ( chimney)), expression( function( has), atom( building). floor area), data( chimney)), expression( function( greater than equal), expression( function( count), atom( chimney. floor area), data( 24 m2))))))","if( expression( function( has), atom( variable( building)), data( chimney))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 t2), expression( function( greater than), atom( relation( area), variable( bracing)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), expression( function( has), atom( variable( room)), data( chimney)), expression( function( is), atom( relation( area), variable( room)), data( floor)), expression( function( is), atom( relation( area), variable( floor)), data( building level)), expression( function( greater than equal), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( for), atom( relation( type), variable( chimney)), data( chimney. type 1)), expression( function( is), atom( relation( type), variable( chimney)), data( and( chimney. type 2, nzbc b1as3 b1as3 t4)), expression( function( less than equal), atom( relation( floor), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), expression( function( for), expression( function( has), atom( relation( type), variable( chimney)), data( nzbc b1as3 3 nzbc b1as3 f4))), expression( function( has), atom( relation( size), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0)))), expression( function( has), atom( relation( level), variable( building)), data( building)), expression( function( has), atom( variable( building)), data ( chimney)), expression( function( has), atom( variable( building)), floor area), data( chimney)), expression( function( greater than equal), expression( function( count), atom( relation( floor area), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( test), atom( variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( test), atom( variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verification), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( expression( function( has), atom( piped water supply system), data( pressure vacuum breaker))), then( obligation( and( expression( function( test), atom( pressure vacuum breaker), data( or( as 2845 3, nz backflow testing standard))), expression( function( as per), atom( pressure vacuum breaker. verification), data( or( as 2845 3 nz backflow testing standard))))))",0.9598780789157956,0.932658978147119,17,19,1,1,0.9606618541649768,0.9348278622898318,71.0073389119712,69.59851165441401,67.05735752021502,62.5174723956764,"[0.837386018237082,0.7892635691837254,0.7304734233464365,0.6721692029920041]","[0.854573484069887,0.8001723395088324,0.7360846193861627,0.6748669632731397]",12329,12490,11844,11676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_45,68.74295868930218,0.6941218530528886,65.91391115850558,0.7201986646625345,finished,-,stefanfuchs164,,2023-04-05T11:25:24.000Z,4826,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( expression( function( has), atom( chimney), data( fixing)), or( expression( function( is), atom( fixing. type), data( roof bracket)), expression( function( is), atom( fixing. type), data( roof tie))), expression( function( is), atom( fixing. elevation), data( roof level)))), then( expression( function( connect), atom( chimney), data( building)))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( roof), data( underlay))), then( obligation( or( and( expression( function( is), atom( underlay. type), data( r1)), expression( function( has), atom( underlay), data( support)), expression( function( is), atom( support. material), data( corrosion resistant))), and( expression( function( is), atom( underlay. type), data( r2)), expression( function( is), atom( underlay), data( self supporting)), expression( function( less than equal), atom( underlay. span), data( 1.2 m)), expression( function( in between), atom( underlay. span), data( adjacent supports))))))","if( and( expression( function( is), atom( chimney. elevation), data( roof)), or( expression( function( is), atom( chimney. fixing), data( roof bracket)), expression( function( is), atom( chimney. holding), data( roof tie))))), then( expression( function( connect), atom( chimney), data( building)))","if( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( holding), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( r1)), expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( has), atom( variable( roof)), data( support)), expression( function( is), atom( relation( type), variable( support)), data( corrosion resistant)))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( self supporting)), expression( function( equal), atom( relation( span), variable( self supporting)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( expression( function( is), atom( roof. underlay), data( r1)), expression( function( is), atom( underlay. type), data( r2)), expression( function( has), atom( roof), data( support)), expression( function( is), atom( support. type), data( corrosion resistant)))), then( obligation( and( expression( function( has), atom( underlay), data( self supporting)), expression( function( equal), atom( self supporting. span), data( 1.2 m)))))",0.8391969814239505,0.8948393168143697,19,19,1,1,0.8508394841430773,0.9,72.01841267494368,68.78634096227631,65.75248405956009,63.27176308827249,"[0.9167778836987608,0.8647662923505135,0.8006378044066487,0.7373747202490999]","[0.9026776977137264,0.8449418084153983,0.77601585728444,0.7089227421109902]",12329,12490,10490,11241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_44,63.63323902399265,0.7098742953002093,55.68027110294885,0.6546214004894859,finished,-,stefanfuchs164,,2023-04-05T11:22:54.000Z,7651,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), or( expression( function( is), atom( relation( risk group), variable( storage tank)), data( health hazards)), expression( function( is), atom( relation( safety risk group), variable( storage tank)), data( x1)), expression( function( is), atom( relation( integrity), variable( storage tank)), data( associated plant)))), expression( function( is), atom( variable( storage tank)), data( corrosion threatens), atom( relation( integrity), variable( tank)), data( integrity threatens), atom( relation( risk group), variable( corrosion)), data( associated plant))), then( permission( expression( function( is), atom( relation( design), variable( storage tank)), data( withstand effects))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), or( expression( function( is), atom( relation( risk group), variable( storage tank)), data( health hazards)), expression( function( is), atom( relation( safety risk group), variable( storage tank)), data( x1)), expression( function( is), atom( relation( integrity), variable( storage tank)), data( associated plant)))), expression( function( is), atom( variable( storage tank)), data( corrosion threatens), atom( relation( integrity), variable( tank)), data( integrity threatens), atom( relation( risk group), variable( corrosion)), data( associated plant)))), then( permission( expression( function( is), atom( relation( design), variable( storage tank)), data( withstand effects))))",0.9104084877233012,1.0,17,19,1,1,0.9141921907879356,1.0156570841889117,64.17304329534197,53.28794389752485,63.102440341558776,58.29749899058424,"[0.8746803069053708,0.8194527832575692,0.7516396272005523,0.6861161760875228]","[0.775587566338135,0.7060694744878483,0.6203229113275244,0.5405858820492967]",12831,7792,11730,7914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_45,66.99053688039469,0.7241876781406453,54.85496732688493,0.6515681446549495,finished,-,stefanfuchs164,,2023-04-05T11:08:30.000Z,3664,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( and( plumbing, drainage))), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( as per), atom( relation( bracing unit), variable( chimney connection)), data( nzbc b1as3 1.9.4))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( as per), atom( relation( bracing unit), variable( chimney connection)), data( nzbc b1as3 1.9.4))))","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( convey)), expression( function( is), atom( relation( disposal), variable( waste)), data( plumbing)), expression( function( is), atom( relation( disposal), variable( waste)), data( drainage)), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))))","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( convey)), expression( function( is), atom( relation( disposal), variable( waste)), data( and( plumbing, drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))))",1.0,1.0,19,19,1,1,1.0471587808870528,1.0333675564681726,68.51977510180542,53.202515919728285,65.52806818012003,56.6133582970211,"[0.8057168378740509,0.756791139714136,0.700120373156786,0.644278042508131]","[0.7812965722801788,0.7042640990371389,0.6158398388315286,0.5318879168251553]",12829,7792,13434,8052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_44,68.19933286889172,0.7195129788147165,66.05724971649241,0.6987245236591146,finished,-,stefanfuchs164,,2023-04-05T10:57:00.000Z,1699,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( expression( function( has), atom( space), data( wall)), expression( function( has), atom( space), data( storage bin)), expression( function( into), atom( food waste), data( storage bin)), expression( function( has), atom( storage bin), data( spillage)))), then( obligation( or( expression( function( is), atom( wall. material), data( concrete)), expression( function( is), atom( wall. material), data( galvanised steel sheet)), expression( function( is), atom( wall. material), data( vinyl)), expression( function( similar to), atom( wall. material), data( concrete)), expression( function( similar to), atom( wall. material), data( galvanised steel sheet)), expression( function( similar to), atom( wall. material), data( vinyl)))))","[""if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( chimney), data( reinforcing))), then( obligation( expression( function( comply with), atom( reinforcing), data( nzs 4671))))","if( and( expression( function( has), atom( space), data( waste storage bin)), expression( function( is), atom( waste storage bin. type), data( food waste)), expression( function( has), atom( waste storage bin), data( spillage)))), then( obligation( or( and( expression( function( is), atom( wall. construction), data( concrete)), expression( function( is), atom( wall. material), data( galvanised sheet steel)), expression( function( is), atom( wall), data( vinyl))), expression( function( is), atom( wall). material), data( similar to), atom( wall. material), data( resemble), atom( wall), data( nzbc g15as1)))))","if( and( expression( function( has), atom( variable( space)), data( waste storage bin)), expression( function( is), atom( relation( type), variable( waste storage bin)), data( food waste)), expression( function( has), atom( variable( waste storage bin)), data( spillage)))), then( obligation( or( and( expression( function( is), atom( relation( construction), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised sheet steel)), expression( function( is), atom( variable( wall)), data( vinyl))), expression( function( is), atom( variable( wall)), material), data( similar to), atom( relation( material), variable( wall)), data( resemble), atom( variable( wall)), data( nzbc g15as1))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( chimney), data( reinforcing))), then( obligation( expression( function( comply with), atom( reinforcing), data( nzs 4671))))",0.8876388947950538,0.8667192471335399,17,19,1,1,0.8935031227187931,0.8748598879103283,70.7916242433668,69.41903430783482,65.79018720185404,63.00603034850212,"[0.9078612926652142,0.8507080858839653,0.7812212617252161,0.7155419790798853]","[0.901802873615814,0.8461680176860722,0.7774687065368567,0.7119656524173978]",12329,12490,11016,10927,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_43,65.48148086039733,0.720257550847266,56.26225885471171,0.6593946709522546,finished,-,stefanfuchs164,,2023-04-05T10:39:42.000Z,2585,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 6.1.5 Where a building is proposed to be built over an existing drain, the drain shall be verified as being sound both before and after construction.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( above), atom( relation( construction), variable( building)), data( drain)), expression( function( exist), atom( variable( drain))))), then( obligation( and( expression( function( has), atom( relation( soundness), variable( drain)), data( verification)), expression( function( before), atom( variable( verification)), data( construction)), expression( function( after), atom( variable( verification)), data( construction)))))","[""if( and( expression( function( above), atom( relation( construction), variable( building)), data( drain)), expression( function( exist), atom( variable( drain))))), then( obligation( and( expression( function( has), atom( relation( soundness), variable( drain)), data( verification)), expression( function( before), atom( variable( verification)), data( construction)), expression( function( after), atom( variable( verification)), data( construction)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))","if( and( expression( function( above), atom( relation( building), variable( building)), data( drain)), expression( function( is), atom( relation( type), variable( drain)), data( existing)))), then( obligation( and( expression( function( has), atom( variable( drain)), data( sound)), expression( function( before), atom( relation( construction), variable( building)), data( construction)), expression( function( after), atom( relation( verify), variable( building)), data( sound)))))","if( and( expression( function( above), atom( relation( building), variable( building)), data( drain)), expression( function( is), atom( relation( type), variable( drain)), data( existing)))), then( obligation( and( expression( function( has), atom( variable( drain)), data( sound)), expression( function( before), atom( relation( construction), variable( building)), data( construction)), expression( function( after), atom( relation( verify), variable( building)), data( sound)))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( as per), atom( relation( method), variable( tank)), data( nzs 4219)))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( as per), atom( relation( method), variable( tank)), data( nzs 4219)))))",0.9074330152143144,0.9826541604232308,16,19,1,1,0.91146442210272,0.9828028747433264,67.35313748250006,56.0293127844478,63.71103359706183,56.49714999326043,"[0.8917486105173151,0.833792154163799,0.7648229896996451,0.6979620275213377]","[0.795507965526247,0.7244508746547416,0.6364599894011659,0.5527825970906179]",12831,7792,11695,7658,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_44,66.06426115436416,0.7208120327621861,56.78992805597064,0.6234436351928594,finished,-,stefanfuchs164,,2023-04-05T10:34:41.000Z,2024,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( and( health hazard, safety hazard)))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))","if( and( expression( function( is), atom( relation( design), variable( balustrade)), data( structure)), expression( function( is), atom( relation( type), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( variable( balustrade)), data( nzs 4223 3 t16))))","if( and( expression( function( is), atom( relation( design), variable( balustrade)), data( structure)), expression( function( is), atom( relation( type), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( variable( balustrade)), data( nzs 4223 3 t16))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( health hazards)), expression( function( is), atom( relation( safety hazards), variable( storage tank)), data( corrosion)), or( expression( function( threaten), atom( relation( integrity), variable( tank)), data( integrity)), expression( function( threaten), atom( relation( integrity), variable( tank)), data( plant))))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( health hazards)), expression( function( is), atom( relation( safety hazards), variable( storage tank)), data( corrosion)), expression( function( threaten), atom( relation( integrity), variable( tank)), data( or( integrity, plant))))))",0.900842420091668,1.0,18,19,1,1,0.9054485930314132,1.1226899383983573,69.05194232418441,53.83864910969422,63.32439468261048,60.08353349272056,"[0.8926480716253443,0.8369857080987441,0.7731392713962001,0.7096378146101903]","[0.74039780521262,0.6718049004946509,0.5909932854827507,0.5139228707910987]",12829,7792,11616,8748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_43,68.2024566931996,0.7199378698988932,64.27244294850468,0.6947599908329907,finished,-,stefanfuchs164,,2023-04-05T10:12:52.000Z,2121,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""atom""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_8_u_atom_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( expression( function( by), atom( timber. moisture content), data( measurement)))), then( obligation( and( expression( function( is), atom( measurement. recommended procedure), data( measurement of moisture content of wood)), expression( function( as per), atom( measurement. recommended procedure), data( scion publication)), expression( function( by), atom( measurement), data( moisture meter)), expression( function( is), atom( moisture meter. type), data( electrical resistance)), expression( function( has), atom( moisture meter), data( insulated probe)), expression( function( as per), atom( moisture meter. calibration), data( nzs 1080 1 appendix e)), expression( function( by), atom( measurement. sampling), data( probe)), expression( function( into), atom( probe), data( timber)), expression( function( define), atom( timber. depth), data( x0)), expression( function( greater than equal), atom( probe. depth), data( '1/3 * x0')), expression( function( has), atom( timber), data( board)), expression( function( define), atom( board. end), data( x1)), expression( function( greater than), atom( probe. location), data( 'x1 + 200 mm')), expression( function( include), atom( measurement. correction factor), data( timber species)), expression( function( include), atom( measurement. correction factor), data( temperature)), expression( function( include), atom( measurement. correction factor), data( treatment type)), expression( function( as per), atom( measurement. correction factor), data( scion publication)))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( piped water supply system), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( pressure vacuum breaker. testing), data( as 2845 3)), expression( function( as per), atom( pressure vacuum breaker. testing), data( nz backflow testing standard))), or( expression( function( as per), atom( pressure vacuum breaker. verifying), data( as 2845 3)), expression( function( as per), atom( pressure vacuum breaker. verifying), data( nz backflow testing standard))))))","if( expression( function( is), atom( timber. material), data( moisture content))), then( obligation( and( expression( function( has), atom( timber), data( measurement)), expression( function( as per), atom( measurement), data( nzs 1080.1 appendix e2as1)), expression( function( is), atom( measurement. procedure), data( scion)), expression( function( is), atom( measurement. method), data( moisture meters)), expression( function( is), atom( moisture meters. type), data( electrical resistance)), expression( function( has), atom( moisture meters. type), data( insulated probe))), expression( function( comply with), atom( moisture meters. type), data( nzs 1080.1 Appendix e)), expression( function( has), atom( timber. depth), data( meter)), expression( function( greater than equal), atom( timber. depth), data( 1/3)), expression( function( less than equal), atom( timber. depth), data( 200 mm)), expression( function( is), atom( timber. type), data( correction factor)), expression( function( for), atom( correction factor), data( species)), expression( function( for), atom( correct factor), data( temperature)), expression( function( for), atom( correct factors), data( treatment type)), expression( function( as per), atom( correction factor), data( nzbc e2as1 publication))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( obligation( and( expression( function( has), atom( variable( timber)), data( measurement)), expression( function( as per), atom( variable( measurement)), data( nzs 1080.1 appendix e2as1)), expression( function( is), atom( relation( procedure), variable( measurement)), data( scion)), expression( function( is), atom( relation( method), variable( measurement)), data( moisture meters)), expression( function( is), atom( relation( type), variable( moisture meters)), data( electrical resistance)), expression( function( has), atom( relation( type), variable( moisture meters)), data( insulated probe))), expression( function( comply with), atom( relation( type), variable( moisture meters)), data( nzs 1080.1 Appendix e)), expression( function( has), atom( relation( depth), variable( timber)), data( meter)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 1/3)), expression( function( less than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( is), atom( relation( type), variable( timber)), data( correction factor)), expression( function( for), atom( variable( correction factor)), data( species)), expression( function( for), atom( variable( correct factor)), data( temperature)), expression( function( for), atom( variable( correct factors)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( nzbc e2as1 publication))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), expression( function( comply with), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), or( expression( function( comply with), atom( variable( pressure vacuum breaker)), data( nz backflow testing standard))))))))","if( expression( function( has), atom( piped water supply system), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( pressure vacuum breaker. testing), data( as 2845 3)), expression( function( as per), atom( pressure vacuum breaker. verifying), data( nz backflow testing standard))), or( expression( function( as per), expression( function( comply with), atom( pressure vacuum breaker. verifying), data( as 2845 3)), or( expression( function( comply with), atom( pressure vacuum breaker), data( nz backflow testing standard)))))))",0.8901611451002918,0.8637234330862862,18,19,1,1,0.8957741909319491,0.8722177742193755,70.70970088600869,67.96300418860687,65.8669288547292,60.96205099057157,"[0.9078232524447664,0.8497220450195936,0.7794900018345258,0.7115686455544271]","[0.9066458601064806,0.8469925159382796,0.7739025297619048,0.7044284243048403]",12329,12490,11044,10894,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_43,68.46666417420336,0.7545139143632995,55.10722035166729,0.6118839618601871,finished,-,stefanfuchs164,,2023-04-05T09:53:55.000Z,2442,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( 0.4 mm)), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( and( rolled, crimped, trough))))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( or( rolled, crimped, trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled steel)), expression( function( has), atom( variable( roof cladding)), data( material)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( material)), data( 0.4 mm)), expression( function( equal), atom( relation( grade), variable( material)), data( g550)), or( expression( function( is), atom( relation( grade), variable( profiled steel)), data( g300)), expression( function( is), atom( relation( material), variable( profiled steel)), data( or( rolled, crimped, trough)))), expression( function( for), atom( relation( corrosion protection), variable( roof cladding)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled steel)), expression( function( has), atom( variable( roof cladding)), data( material)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( material)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), expression( function( equal), atom( relation( grade), variable( material)), data( g550)), or( expression( function( is), atom( relation( grade), variable( profiled steel)), data( g300)), expression( function( is), atom( relation( material), variable( profiled steel)), data( rolled)), expression( function( is), atom( relation( material), variable( profiled steel)), data( crimped)), expression( function( is), atom( relation( material), variable( profiled steel)), data( trough))), expression( function( for), atom( relation( corrosion protection), variable( roof cladding)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( as per), atom( relation( method), variable( tank)), data( nzs 4219)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( as per), atom( relation( method), variable( tank)), data( nzs 4219)))))",0.958796725126888,1.0,19,19,1,1,0.9596227297529036,1.1192248459958931,69.9350585452848,52.59505531067765,67.05866413815636,57.87140651840217,"[0.8753147591584761,0.8238562091503268,0.7611143068452626,0.6987105306662258]","[0.7281275083132668,0.6600507731363952,0.5791429566833121,0.5036231884057971]",12829,7792,12311,8721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_45,68.62910621040116,0.7198505629821292,55.34187571414236,0.645706125836932,finished,-,stefanfuchs164,,2023-04-05T09:50:06.000Z,1353,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( is( material, metal), has( material. exposure, water))), then( obligation( as per( material, and( nzbc e2as1 t21, nzbc e2as1 t22))))","[""if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( metal, contact), is( contact. location, wet), or( is( contact. location, water), over( water, metal), onto( water, plastic)), towards( water, metal), is( metal. material, another))), then( obligation( as per( metal. contact, and( nzbc e2as1 t21, nucleus) t22)))","if( and( expression( function( has), atom( variable( metal)), data( contact)), expression( function( is), atom( relation( location), variable( contact)), data( wet)), or( expression( function( is), atom( relation( location), variable( contact)), data( water)), expression( function( over), atom( variable( water)), data( metal)), expression( function( onto), atom( variable( water)), data( plastic))), expression( function( towards), atom( variable( water)), data( metal)), expression( function( is), atom( relation( material), variable( metal)), data( another)))), then( and( obligation( expression( function( as per), atom( relation( contact), variable( metal)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( relation( contact), variable( metal)), data( nucleus)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9033235009178624,1.0,18,19,1,1,0.9077090965780652,1.037987679671458,70.37102577583215,52.14883035949909,66.97134029472255,58.95144134869934,"[0.8784886217260627,0.8301365128736824,0.7719725289055029,0.7163226032190343]","[0.7576656775469832,0.6907755508527325,0.6135622963148659,0.5413353527704152]",12829,7792,11645,8088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_45,66.7830819741458,0.6908914583806143,64.54697657162643,0.6907245459304341,finished,-,stefanfuchs164,,2023-04-05T09:49:24.000Z,3012,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2).","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( and( expression( function( is), atom( relation( type), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( material), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( safety barrier)), data( toughened))), or( expression( function( has), atom( variable( glass)), data( edge)), expression( function( is), atom( relationship( edge), variable( safety barrier)), data( laminated)), expression( function( has), atom( relation( edge), variable( safety barrier)), data( joint)), expression( function( is), expression( function( is), atom( relation( edge), variable( security barrier)), data( continuous clamp)))), then( obligation( and( expression( function( has), atom( variable( pane)), data( resist), atom( relation( pane), variable( safety barrier)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))), expression( function( less than equal), expression( function( less than equal), atom( variable( deflection), variable( pane))), data( baseunit( prefix( metre)), value( 250.0)))))), then( permission( not( expression( function( has), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","if( and( expression( function( is), atom( relation( type), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( material), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( safety barrier)), data( toughened))), or( expression( function( has), atom( variable( glass)), data( edge)), expression( function( is), atom( relationship( edge), variable( safety barrier)), data( laminated)), expression( function( has), atom( relation( edge), variable( safety barrier)), data( joint)), expression( function( is), expression( function( is), atom( relation( edge), variable( security barrier)), data( continuous clamp)))), then( permission( not( expression( function( has), atom( relation( rail), variable( safety barrier)), data( interlinked))))))), then( obligation( and( expression( function( has), atom( variable( pane)), data( resist), atom( relation( pane), variable( safety barrier)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))), expression( function( less than equal), expression( function( less than equal), atom( variable( deflection), variable( pane))), data( baseunit( prefix( metre)), value( 250.0))))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( define), atom( relation( span), variable( underlay)), data( 1.2 metre)), expression( function( adjacent), atom( relation( span), variable( roof)), data( 1.2)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( define), atom( relation( span), variable( underlay)), data( 1.2 metre)), expression( function( adjacent), atom( relation( span), variable( roof)), data( 1.2)))))",0.8776157811880788,0.8847104767706585,18,19,1,1,0.8845280570872527,0.8908726981585269,70.17074318217065,68.33191389923178,63.70745169054067,61.159331980190046,"[0.8839383938393839,0.8275352957460552,0.7589634033067063,0.6918186068256195]","[0.8835265570234565,0.8239869753979739,0.7504779244424215,0.680043980208906]",12332,12490,10908,11127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_44,69.23410659368705,0.6924199920310111,56.61265892496456,0.6448010329102032,finished,-,stefanfuchs164,,2023-04-05T09:06:59.000Z,2584,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.8590518375812443,1.0,18,19,1,1,0.868111310312573,1.011165297741273,72.31135093074298,53.4939894440206,66.40807884121675,60.11747381753071,"[0.8874023525186316,0.8386047352250136,0.781718963165075,0.7255584035151958]","[0.7574565300164996,0.6929959100204499,0.6134637662504827,0.5368161783769769]",12829,7792,11137,7879,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_45,67.95369578028838,0.6678841167886675,65.55824003482603,0.7164975812433921,finished,-,stefanfuchs164,,2023-04-05T08:59:38.000Z,3252,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( 1.2 m)), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( roof)), data( underlay))), then( obligation( and( expression( function( is), atom( relation( support), variable( underlay)), data( full support)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))","if( expression( function( is), atom( relation( type), variable( roof)), data( underlay))), then( obligation( and( expression( function( is), atom( relation( support), variable( underlay)), data( full support)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant))), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( 1.2 m)))))",0.8370324634104663,0.9103857708124168,13,19,1,1,0.8489739638251278,0.9141713370696556,72.37203389496399,69.30411154353617,64.04379931486392,62.19653160934977,"[0.887646890226426,0.8345517506733359,0.7709443099273607,0.7097717963721475]","[0.8854440357330531,0.8260333127698951,0.7575381340901028,0.692458723784025]",12329,12490,10467,11418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_43,68.36994499275536,0.6993863137645825,54.3086352338689,0.6505828137884897,finished,-,stefanfuchs164,,2023-04-05T08:50:04.000Z,1012,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( not( connect( hot water pipe, heat dissipation device))), then( obligation( comply with( hot water pipe. insulation, nzbc h1 3.4)))","[""if( not( expression( function( connect), atom( variable( hot water pipe)), data( heat dissipation device)))), then( obligation( expression( function( comply with), atom( relation( insulation), variable( hot water pipe)), data( nzbc h1 3.4))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( has( hot water pipe, connection)), then( obligation( and( has( hot water pipe, insulation), comply with( insulation, nzbc h1.3.4))))","if( expression( function( has), atom( variable( hot water pipe)), data( connection))), then( obligation( and( expression( function( has), atom( variable( hot water pipe)), data( insulation)), expression( function( comply with), atom( variable( insulation)), data( nzbc h1.3.4)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8744102319326856,0.977680667144326,12,19,1,1,0.8816743315924858,0.9779260780287474,69.78789588380762,51.67074360708101,67.00846656346017,57.2303558428043,"[0.8769339580938909,0.8315836298932384,0.7766138418837855,0.7226527302216615]","[0.789501312335958,0.7159286186384666,0.6307589880159787,0.5499664654594232]",12829,7792,11311,7620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_44,67.51392816098783,0.69184041712495,63.98820620589305,0.6828198384298411,finished,-,stefanfuchs164,,2023-04-05T08:42:17.000Z,4021,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))","[""if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( expression( function( has), atom( variable( space)), data( waste storage bin)), expression( function( is), atom( relation( type), variable( waste storage bin)), data( food waste)), expression( function( has), atom( variable( waste storage bin)), data( spillage))))), then( obligation( and( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( variable( wall)), data( sheet steel)), expression( function( is), atom( relation[ material), variable( wall)), data( vinyl)), expression( function( similar to), atom( variable( wall)), data( material)))))","if( and( expression( function( has), atom( variable( space)), data( waste storage bin)), expression( function( is), atom( relation( type), variable( waste storage bin)), data( food waste)), expression( function( has), atom( variable( waste storage bin)), data( spillage)))), then( obligation( and( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( variable( wall)), data( sheet steel)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( variable( wall)), data( material)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))",0.8686668840926414,0.8619950531617047,17,19,1,1,0.8765812520272462,0.8706965572457966,70.30057241440467,67.50936049639803,64.93978033441931,60.81615617219202,"[0.8913968547641073,0.8354595399944129,0.7681852268466441,0.7033122581862792]","[0.8912183908045977,0.8332099222510181,0.763346687785335,0.6946163946726693]",12332,12490,10810,10875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_45,68.16213483525094,0.6890365415174132,66.0733526097046,0.6999306301170373,finished,-,stefanfuchs164,,2023-04-05T08:35:21.000Z,880,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( chimney. elevation, roof), or( is( chimney. fixing, roof bracket), is( chimney. fixing, roof tie)))), then( connect( chimney, building))","if( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8462280454033542,0.8697073178956911,19,19,1,1,0.8569227025711736,0.877502001601281,71.17960087909042,69.5449139340495,65.39009901401532,62.93190138684125,"[0.8997633696166588,0.8479130931961121,0.7888323899069366,0.7303902627511591]","[0.8977189781021898,0.8420424281384884,0.7766685154372343,0.714524983716386]",12329,12490,10565,10960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_44,68.293661789028,0.6861215427422513,66.07666172671888,0.7344450179431827,finished,-,stefanfuchs164,,2023-04-05T08:31:05.000Z,1648,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( expression( function( has), atom( variable( space)), data( and( wall, storage bin))), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( or( concrete, galvanised steel sheet, vinyl))), expression( function( similar to), atom( relation( material), variable( wall)), data( or( concrete, galvanised steel sheet, vinyl))))))","[""if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( expression( function( has), atom( variable( space)), data( waste storage bin)), expression( function( is), atom( relation( type), variable( waste storage bin)), data( food waste)), expression( function( has), atom( variable( waste storage bin)), data( wall)))), then( obligation( or( and( expression( function( is), atom( relation( material), variable( wall)), data( or( concrete, sheet steel, vinyl))), expression( function( is), atom( variable( wall)), data( or( concrete, galvanised sheet steel, vinyl))), expression( function( as per), atom( variable( material)), data( nzbc g15as1)))))","if( and( expression( function( has), atom( variable( space)), data( waste storage bin)), expression( function( is), atom( relation( type), variable( waste storage bin)), data( food waste)), expression( function( has), atom( variable( waste storage bin)), data( wall)))), then( obligation( or( and( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( sheet steel)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl))), or( expression( function( is), atom( variable( wall)), data( concrete)), expression( function( is), atom( variable( wall)), data( galvanised sheet steel)), expression( function( is), atom( variable( wall)), data( vinyl))), expression( function( as per), atom( variable( material)), data( nzbc g15as1))))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))",0.8560946135001505,0.9497810206280628,17,19,1,1,0.8655203179495499,0.9510008006405124,71.88007651817706,68.83058601222302,65.04812339841976,63.5346296212058,"[0.8862337175522444,0.8367924528301887,0.7767119384556938,0.7162937464142284]","[0.8676544872874221,0.8118912509528246,0.7452283571915473,0.6810972996142306]",12329,12490,10671,11878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_44,68.07697304618183,0.6838238975644476,66.71508612224116,0.7227399171227346,finished,-,stefanfuchs164,,2023-04-05T08:20:16.000Z,902,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( has( solar water heater. installation, fixing)), then( obligation( comply with( fixing, and( nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4))))","[""if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( for( fixing, installation), is( solar water heater. installation, fixture))), then( obligation( comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g12s2 2.1.2, nzbc g12.3 3.1.3, nzbc g 12as2 2.1.4))))","if( and( expression( function( for), atom( variable( fixing)), data( installation)), expression( function( is), atom( relation( installation), variable( solar water heater)), data( fixture)))), then( and( obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12s2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12.3 3.1.3))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g 12as2 2.1.4)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8495882231453596,0.909949592579262,16,19,1,1,0.8598426474166599,0.9137710168134509,71.5726135801086,69.14302268369674,64.90688964387209,64.45187771333866,"[0.8932176209791529,0.8412155745489078,0.7788507505497657,0.7171736619175972]","[0.8888986243757119,0.8347734085699171,0.7663916245231124,0.6998214285714286]",12329,12490,10601,11413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_43,68.87491816255238,0.6878326263126541,66.38804210287135,0.711716044070161,finished,-,stefanfuchs164,,2023-04-05T08:05:23.000Z,890,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or"",""atom"",""expression"",""loop""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_7_u_ao_at_ex_loop_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( timber. material, moisture content)), then( obligation( and( as per( moisture content. measurement, publication :name ( name, name, name, and( scion, new zealand forest research institute)))), is( moisture content. measurement, and( electrical resistance type, moisture meters), is( moisture meters. type, insulated probes), is( moisture meters. type, electrical resistance), comply with( moisture meters, nzs 1080.1 appendix e), define( timber. depth, x0), greater than equal( timber. depth, 1/3), less than equal( timber. depth, '1/3), greater than equal( timber. depth, 200 mm)), and( has( timber. treatment type, correction factor)), as per( correction factor, and( species, temperature, treatment)), as per( correction factor, publication, scion))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( and( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication :name ( name, name, name, and( scion, new zealand forest research institute))))), expression( function( is), atom( relation( measurement), variable( moisture content)), data( electrical resistance type))), obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication :name ( name, name, name, and( scion, new zealand forest research institute))))), expression( function( is), atom( relation( measurement), variable( moisture content)), data( moisture meters)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))",0.8571137749536013,0.9243385160197318,18,19,1,1,0.866412523319004,0.9270616493194556,72.14159671907413,69.80615525088487,65.89126394925128,63.2890443997258,"[0.8854147163452537,0.8374328527000283,0.7781783681214421,0.7187888050434617]","[0.8619051731583038,0.8091762252346194,0.7429395820582321,0.6783389055076544]",12329,12490,10682,11579,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_43,67.01855465934975,0.7061311524218842,64.34923997860629,0.6970882093848798,finished,-,stefanfuchs164,,2023-04-05T08:04:28.000Z,1592,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates"",""unit"",""and_or""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_4_u_ao_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( or( as 2845 3, nz backflow testing standard))), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( or( as 2845 3, nz backflow testing standard))))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( or( as 2845 3, nz backflow testing standard))), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard)))))",0.907482196517847,0.885513440292802,11,19,1,1,0.9115094492659584,0.8915932746196957,69.6462602427821,67.4135400042874,64.58192304160524,61.55140483446516,"[0.8712404342409682,0.8160651920838184,0.7504506128334535,0.6870748299319728]","[0.888739224137931,0.8279258924536828,0.7565945060942332,0.6898288016112789]",12329,12490,11238,11136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_43,66.60145766204003,0.6913169317224109,64.6945569802255,0.679455326597919,finished,-,stefanfuchs164,,2023-04-05T08:03:56.000Z,2294,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""postprocess"",""duplicates""]",False,1,False,0,0.0001,linear,0,1024,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",13,3,0,__main__.post_process,1.2,True,t5-amr_ir-rev_2_postprocess_duplicates_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Fixings shall: a) Be fixed through crests, b) Penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, c) Include sealing washers of: i) neoprene (having a carbon black content of 15% or less by weight).",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( through), atom( variable( fixing)), data( crest)), expression( function( within), atom( variable( fixing)), data( purlins)), expression( function( greater than equal), atom( relation( penetration), variable( purlins)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( greater than equal), expression( function( for), atom( variable( penetration)), data( nail fixing)), expression( function( less than equal), atom( relation( penetration), variable( penetration)), data( baseunit( prefix( milli)), kind( metre)), value( 30.0))), expression( function( for), atom( relation( penetration), variable( fixing)), data( screw fixing)), expression( function( is), atom( relation( sealing washer), variable( roof cladding)), data( neoprene)), expression( function( is), atom( variable( sealing washer)), data( carbon black)), expression( function( equal), atom( relation( weight), variable( neoprene)), data( 15 percent)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( through), atom( variable( fixing)), data( crest)), expression( function( within), atom( variable( fixing)), data( purlins)), expression( function( greater than equal), atom( relation( penetration), variable( purlins)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( greater than equal), expression( function( for), atom( variable( penetration)), data( nail fixing)), expression( function( less than equal), atom( relation( penetration), variable( penetration)), data( baseunit( prefix( milli)), kind( metre)), value( 30.0))), expression( function( for), atom( relation( penetration), variable( fixing)), data( screw fixing)), expression( function( is), atom( relation( sealing washer), variable( roof cladding)), data( neoprene)), expression( function( is), atom( variable( sealing washer)), data( carbon black)), expression( function( equal), atom( relation( weight), variable( neoprene)), data( 15 percent)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))",0.859093554576595,0.8508356324281313,19,19,1,1,0.8681479078819332,0.8609287429943955,69.96099366307581,69.0294923651485,63.54978856251082,60.87190432871314,"[0.9029516159163086,0.844851904090268,0.775747822794396,0.7085676165062422]","[0.8948200502185437,0.838045309867066,0.7700499481669966,0.70426944971537]",12332,12490,10706,10753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
