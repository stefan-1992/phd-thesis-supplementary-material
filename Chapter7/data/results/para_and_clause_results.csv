Name,lrml_f_score,bleu,lrml_f_score_test,bleu_test,prediction_epoch,State,Notes,User,Tags,Created,Runtime,Sweep,adafactor,bs,dataset,decoding_runs,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,experiment,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,mask_percentage,max_length,metric_for_best_model,metric_names,model_name,model_path,no_repeat_ngram_size,num_beams,num_warmup_steps,post_process,repetition_penalty,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,calc_loss,pred_epoch,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,reference_length,reference_length_test,translation_length,translation_length_test,RANDOM_INPUT_test_no_sep,RANDOM_INPUT_test_oracle,RANDOM_LABEL_EVAL_test_no_sep,RANDOM_LABEL_EVAL_test_oracle,RANDOM_LABEL_test_no_sep,RANDOM_LABEL_test_oracle,RANDOM_PRED_EVAL_test_no_sep,RANDOM_PRED_EVAL_test_oracle,RANDOM_PRED_test_no_sep,RANDOM_PRED_test_oracle,bleu_test_no_sep,bleu_test_oracle,brevity_penalty_test_no_sep,brevity_penalty_test_oracle,eval_epoch_test_no_sep,eval_epoch_test_oracle,ir_change_ratio_test_no_sep,ir_change_ratio_test_oracle,length_ratio_test_no_sep,length_ratio_test_oracle,lrml_f_score_test_no_sep,lrml_f_score_test_oracle,lrml_precision_test_no_sep,lrml_precision_test_oracle,lrml_recall_test_no_sep,lrml_recall_test_oracle,precisions_test_no_sep,precisions_test_oracle,reference_length_test_no_sep,reference_length_test_oracle,translation_length_test_no_sep,translation_length_test_oracle,eval_loss
t5-amr_0_para-and-clause_random_split_esp20_e20_45,71.23715417598045,0.7376135232393575,70.25977867352948,0.7521694286988343,,finished,-,stefanfuchs164,,2023-04-11T05:08:45.000Z,1331,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,,"translate English to LegalRuleML: E2AS1 8.4.13 Stopends; The top ends of profiled metal roof cladding shall have stopends as shown in Figure 49 for trapezoidal and trough profile metal roof cladding, where: a) The roof pitch is less than 25°, or b) The building is in a High/Very High/Extra High wind zone.","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( is( roof cladding. type, profiled metal), is( roof cladding. profile, or( trapezoidal, trough)), or( less than( roof. pitch, 25 deg), is( building. wind zone, or( high, very high, extra high))))), then( obligation( and( has( cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), or( expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0))), expression( function( is), atom( relation( wind zone), variable( building)), data( high)), expression( function( is), atom( relation( wind zone), variable( building)), data( very high)), expression( function( is), atom( relation( wind zone), variable( building)), data( extra high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( roof cladding. type, profiled metal), is( roof cladding. profile, or( trapezoidal, trough)), less than( roof. pitch, 25 deg)), and( within( building, wind zone), is( wind zone. type, or( high, very high, extreme high)))), then( obligation( and( has( roof cladding. top end, stopend), as per( stopend, nzbc e2as1 f49))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trapezoidal)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))), expression( function( less than), atom( relation( pitch), variable( roof)), data( baseunit( kind( angleDegree)), value( 25.0)))), and( expression( function( within), atom( variable( building)), data( wind zone)), or( expression( function( is), atom( relation( type), variable( wind zone)), data( high)), expression( function( is), atom( relation( type), variable( wind zone)), data( very high)), expression( function( is), atom( relation( type), variable( wind zone)), data( extreme high))))), then( obligation( and( expression( function( has), atom( relation( top end), variable( roof cladding)), data( stopend)), expression( function( as per), atom( variable( stopend)), data( nzbc e2as1 f49)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full support)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( sagging), variable( underlay)), data( sagging)), expression( function( in between), atom( relation( span), variable( underlay)), data( supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full support), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. sagging, sagging), in between( underlay. span, supports), less than equal( underlay. span, 1.2 m)))))",0.9004612880644977,0.9845902463986668,14,19,1,1,0.9051017925216968,0.9847077662129704,72.85952646444507,71.00904446021025,69.68545924366406,69.52615983330435,"[0.8954207366251457,0.8516414141414141,0.7963147862394482,0.7414580668737438]","[0.8456785104480039,0.7957147530258424,0.7391626223574895,0.6847592255502234]",12329,12490,11159,12299,,"translate English to LegalRuleML: B1AS3 If chimneys are brick, then the chimney shall be fixed at roof level by 'U' straps and wall ties. The 'U' straps are zinc coated 50 length, 1.0 mm depth, mild steel and wall ties are closely spaced.",,"[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]",,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( by), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( by), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( length), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( spacing), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))))))",,"if( is( chimney. material, brick)), then( obligation( and( by( chimney. fixing, and( u strap, wall tie)), is( u strap. length, zinc coated), equal( u strap. depth, 50 mm), is( u strap. material, mild steel), equal( wall tie. spacing, 1 mm))))",,0.8090836285688018,,0.9188999981718972,,19,,1,,0.922017614091273,,83.15322859440126,,85.11785501134943,,81.2772481805266,,"[0.926276484890587,0.8994320664045434,0.8661860383330403,0.832876227550208]",,12490,,11516,
t5-amr_0_para-and-clause_random_split_esp20_e20_44,69.87181741317136,0.7347038192903476,70.52394473566159,0.7597387515441049,,finished,-,stefanfuchs164,,2023-04-11T04:45:31.000Z,1391,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,,translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( is( chimney. elevation, roof level), or( is( chimney. fixing, roof bracket), is( chimney. fixing, roof tie)))), then( connect( chimney, building))","if( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( expression( function( part of), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( part of( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.9229643124094722,0.9521326661439932,10,19,1,1,0.9257847351772244,0.9532425940752602,70.52772646546707,71.08259708933146,69.22799587738851,69.97400502881705,"[0.8818994217627475,0.8307326104205237,0.7700496806245565,0.7117221676636014]","[0.8798084999160087,0.8310942120828052,0.773036382182931,0.7171812195330539]",12329,12490,11414,11906,,"translate English to LegalRuleML: B1AS1 If either the zone is the lowest and either within the Selwyn District Council or Waimakariri District Council boundaries is within Zone 2, or the areas within Selwyn District Council are designated as Zone 1 in NZS 3604, then the zone is is within Zone 2 and the area is is Zone 2.",,"[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]",,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,"if( or( and( expression( function( is), atom( relation( elevation), variable( zone)), data( lowest)), or( expression( function( within), atom( variable( zone)), data( boundary)), and( expression( function( within), atom( variable( zone)), data( Selwyn District Council)), expression( function( within), atom( variable( zone)), data( Waimakariri District Council)))), and( expression( function( within), atom( variable( area)), data( zone 2)), expression( function( is), atom( relation( designation), variable( area)), data( nzs 3604)))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))",,"if( or( and( is( zone. elevation, lowest), within( zone, or( boundary, and( Selwyn District Council, Waimakariri District Council)), within( boundary, zone 2)), and( within( area, zone 2), is( area. designation, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",,0.7944638365702296,,0.9024201904874364,,19,,1,,0.9068855084067252,,82.93250987500136,,85.83670872123594,,80.2184008344645,,"[0.9324622583208264,0.902096659559346,0.8640143048725972,0.826525103473097]",,12490,,11327,
t5-amr_0_para-and-clause_random_split_esp20_e20_43,70.45821222596315,0.7086380603241531,69.44858858406828,0.7585682261948741,,finished,-,stefanfuchs164,,2023-04-11T04:22:20.000Z,1388,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,,"translate English to LegalRuleML: G15AS1 4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9.",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( has( waste chute, site entry hopper), not( exist( waste storage area)), is( waste storage area. type, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute, self cleaning), is( waste chute, vertical), is( waste chute. joint, smooth), has( waste chute. top, ventilation), above( ventilation, roof line), has( waste chute. bottom, ventilation), above( ventilation, container), is( waste chute. termination point, central), above( waste chute. termination point, container), is( container. location, space), comply with( space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9))))","[""if( and( expression( function( has), atom( variable( waste chute)), data( site entry hopper)), not( expression( function( exist), atom( variable( waste storage area)))), expression( function( is), atom( relation( type), variable( waste storage area)), data( common)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( variable( waste chute)), data( self cleaning)), expression( function( is), atom( variable( waste chute)), data( vertical)), expression( function( is), atom( relation( joint), variable( waste chute)), data( smooth)), expression( function( has), atom( relation( top), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( has), atom( relation( bottom), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( is), atom( relation( termination point), variable( waste chute)), data( central)), expression( function( above), atom( relation( termination point), variable( waste chute)), data( container)), expression( function( is), atom( relation( location), variable( container)), data( space)), expression( function( comply with), atom( variable( space)), data( nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( waste chute, side entry hopper), instead( waste chute, storage area), is( storage area. type, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute. type, and( self cleaning, vertical)), has( waste chute, smooth joint)), has( waste chute, ventilation), above( ventilation, roof line), above( ventilation, container), above( ventilation, container), is( termination. location, central), over( termination, container), within( container, room), comply with( termination, and( nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9)))))","if( and( expression( function( has), atom( variable( waste chute)), data( side entry hopper)), expression( function( instead), atom( variable( waste chute)), data( storage area)), expression( function( is), atom( relation( type), variable( storage area)), data( common)))), then( and( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( relation( type), variable( waste chute)), data( self cleaning)), expression( function( is), atom( relation( type), variable( waste chute)), data( vertical)), expression( function( has), atom( variable( waste chute)), data( smooth joint))), expression( function( has), atom( variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( is), atom( relation( location), variable( termination)), data( central)), expression( function( over), atom( variable( termination)), data( container)), expression( function( within), atom( variable( container)), data( room)), expression( function( comply with), atom( variable( termination)), data( nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( x0)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, x0, nz backflow testing standard)))))",0.8635785773176665,1.0,14,19,1,1,0.8720901938518939,1.0119295436349078,73.14490845703386,69.37052515670368,67.96189404815236,69.52682790065776,"[0.8989025297619048,0.8531036419810879,0.7975494816211122,0.7413416832716576]","[0.8344805759949363,0.789147040101846,0.7351364327438585,0.683969097054563]",12329,12490,10752,12639,,"translate English to LegalRuleML: G12AS1 If valves are pressure relief valves or expansion control valves, then the valves shall have: a) A flow rate capacity of no less than the flow rate of the cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel.",,"[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]",,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control valve)))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( capacity), variable( flow rate)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( greater than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))",,"if( is( valve. type, or( pressure relief valve, expansion control valve))), then( obligation( and( define( cold water supply. flow rate capacity, x0), greater than equal( flow rate. capacity, x0), define( hot water storage vessel. working pressure, x1), greater than equal( valve. pressure rating, x1))))",,0.8029733182623592,,0.9383686737559636,,19,,1,,0.9401921537229784,,82.51531215823947,,84.12148115276754,,80.96932861926862,,"[0.9091373584262964,0.8777416038382454,0.8388931988621671,0.8009540329575021]",,12490,,11743,
t5-amr_0_para-and-clause_doc_split_esp20_e20_45,70.75354648183092,0.7382321719072765,56.22429010211458,0.5037398846479308,,finished,-,stefanfuchs164,,2023-04-11T06:53:51.000Z,1347,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,,translate English to LegalRuleML: E1AS1 Drains shall be capable of handling the rainfall during a storm. No drain shall have an internal diameter of less than 85 mm.,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( exist( drain)), then( obligation( and( for( drain, storm water), greater than equal( drain. internal diameter, 85 mm))))","[""if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( for), atom( variable( drain)), data( storm water)), expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( exist( drain)), then( obligation( and( for( drain, rainfall), during( drain, storm), greater than equal( drain. internal diameter, 85 mm))))","if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( for), atom( variable( drain)), data( rainfall)), expression( function( during), atom( variable( drain)), data( storm)), expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)), expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( has), atom( variable( industrial liquid waste)), data( disposal)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))), then( obligation( and( expression( function( has), atom( variable( disposal system)), data( waste)), expression( function( comply with), atom( relation( disposal), variable( disposal system)), data( plumbing)), expression( function( comply with), atom( relation( disposal), variable( disposal system)), data( drainage)), expression( function( comply with), atom( relation( discharge), variable( disposal system)), data( nzbc g14 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer), accept( network utility operator, discharge), has( industrial liquid waste, disposal), comply with( disposal system, nzbc g13 foul water))), then( obligation( and( has( disposal system, waste), comply with( disposal system. disposal, and( plumbing, drainage)), comply with( disposal system. discharge, nzbc g14 foul water))))",0.916068381759165,1.0,13,19,1,1,0.919401356302128,1.3893737166324436,73.04879738491545,53.577636573570295,68.59813878674534,59.14601292959477,"[0.8812208562950403,0.8368304332992152,0.7828885265596842,0.7305301329649456]","[0.5979124330315906,0.5416395877820073,0.47601717058603954,0.4176906481568333]",12829,7792,11795,10826,,"translate English to LegalRuleML: G14VM1 If treatment facilities exists, then treatment facilities shall have a location with access for cleaning, clearing of blockages and maintenance.",,"[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( variable( treatment facility)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))",,"if( exist( treatment facility)), then( obligation( and( has( treatment facility, access point), for( access point, and( cleaning, clearing, maintenance)))))",,0.7331083619188657,,0.8878990849469764,,19,,1,,0.8937371663244353,,71.89311689250368,,74.14021832007383,,69.7782223506436,,"[0.920591614014934,0.8645245332175423,0.7967610154654217,0.7329018973378438]",,7792,,6964,
t5-amr_0_para-and-clause_doc_split_esp20_e20_44,71.02406086499951,0.7747300646343616,57.31551317796395,0.6817538507140627,,finished,-,stefanfuchs164,,2023-04-11T06:00:11.000Z,3217,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( or( is( drain. type, main), and( is( drain. type, branch), greater than equal( drain. length, 10 m)))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( drain. type, main), greater than( drain. length, 10 m))), then( obligation( as per( drain. ventilation, nzbc g13as2 t3)))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( greater than), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0))))), then( obligation( expression( function( as per), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( expression( function( below), atom( relation( location), variable( storage tank)), data( ground))))","if( exist( storage tank)), then( permission( below( storage tank. location, ground)))",1.0,1.0,17,19,1,1,1.033206017616338,1.0080852156057496,70.65112816491994,55.32275467729637,71.40095151527599,59.45719673869833,"[0.8499434175782723,0.8052184466019418,0.7520018302447953,0.6999693298573838]","[0.7947803946530873,0.7278205128205129,0.6494512588766946,0.5750325097529259]",12829,7792,13255,7855,,"translate English to LegalRuleML: G14VM1 If industrial liquid waste or piping systems, or storage or treatment tanks are completed, then the systems and tanks shall be tested to avoid soil contamination, groundwater contamination and waterway contamination.",,"[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]",,"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",,"if( or( expression( function( is), atom( relation( type), variable( industrial liquid waste)), data( piping system)), expression( function( is), atom( relation( type), variable( industrial liquid waste)), data( storage tank)), expression( function( is), atom( relation( type), variable( storage tank)), data( treatment tank)))), then( obligation( and( expression( function( has), atom( variable( system)), data( testing)), expression( function( has), atom( variable( tank)), data( testing)), expression( function( for), atom( variable( testing)), data( soil contamination)), expression( function( for), atom( variable( testing)), data( groundwater contamination)), expression( function( for), atom( variable( testing)), data( waterway contamination)))))",,"if( or( is( industrial liquid waste. type, or( piping system, storage tank)), is( storage tank. type, treatment tank))), then( obligation( and( has( system, testing), has( tank, testing), for( testing, and( soil contamination, groundwater contamination, waterway contamination)))))",,0.7416259647558225,,0.927004071267275,,19,,1,,0.9295431211498972,,70.71809976198473,,72.06429918469594,,69.42127346491867,,"[0.8981085185696535,0.8401502504173622,0.7700827141455208,0.7050014128284826]",,7792,,7243,
t5-amr_0_para-and-clause_doc_split_esp20_e20_43,70.82630487989317,0.7523976620626432,55.91400301065972,0.6501396767351424,,finished,-,stefanfuchs164,,2023-04-11T05:32:01.000Z,1687,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_para-and-clause_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( is( timber. material, timber)), then( obligation( and( as per( timber. moisture content measurement, publication :name ( name, name, e2as1 ""Measurement of"" :op1 ""of"" :op2 ""Wood""), nzbc scion, new zealand forest research institute)), include( measurement. method, and( moisture meters, metering), is( moisture meters. type, electrical resistance), include( probe, probe), is( probe, probe), is( probe. type, insulated))), include( sampling, sampling), is( sampling. type, representative), is( measurement. method, and( meter, calibrated), as per( nzs 1080.1 appendix e), greater than equal( probe. depth, 1/3), define( timber. length, 200 mm), define( timber. measurement, correction factor), for( correction factor, and( species, temperature, treatment type)), as per( correction factor, nzbc e2as1 publication))))","if( expression( function( is), atom( relation( material), variable( timber)), data( timber))), then( and( obligation( and( expression( function( as per), atom( relation( moisture content measurement), variable( timber)), data( publication :name ( name, name, e2as1 ""Measurement of"" :op1 ""of"" :op2 ""Wood"")))), expression( function( include), atom( relation( method), variable( measurement)), data( moisture meters))), obligation( and( expression( function( as per), atom( relation( moisture content measurement), variable( timber)), data( publication :name ( name, name, e2as1 ""Measurement of"" :op1 ""of"" :op2 ""Wood"")))), expression( function( include), atom( relation( method), variable( measurement)), data( metering)))), expression( function( include), atom( variable( sampling)), data( sampling)), expression( function( is), atom( relation( type), variable( sampling)), data( representative)), and( expression( function( is), atom( relation( method), variable( measurement)), data( meter)), expression( function( is), atom( relation( method), variable( measurement)), data( calibrated))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force))), expression( function( as per), atom( relation( security), variable( tank)), data( nzs 4219))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force)), as per( tank. security, nzs 4219)))",0.9405405994131486,1.0,18,19,1,1,0.9422402369631304,1.1323151950718686,71.64315983792243,52.05526417396854,70.02786703161296,60.39062312844285,"[0.8823626737260093,0.8315719397520179,0.7749037334672694,0.7202526315789474]","[0.7673127054289924,0.6957116788321168,0.6158613565935958,0.5434280434280434]",12829,7792,12088,8823,,"translate English to LegalRuleML: G14VM1 If a vehicle access area is for industrial liquid waste collection, then the vehicle access area shall comply with NZBC D1.",,"[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]",,"if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",,"if( expression( function( for), atom( relation( access area), variable( vehicle)), data( industrial liquid waste collection))), then( obligation( expression( function( comply with), atom( relation( access area), variable( vehicle)), data( nzbc d1))))",,"if( for( vehicle. access area, industrial liquid waste collection)), then( obligation( comply with( vehicle. access area, nzbc d1)))",,0.7433616286607971,,0.9319494408022154,,19,,1,,0.9341632443531828,,70.69804343519111,,72.2719549039534,,69.19122298812525,,"[0.8999862618491551,0.8401162790697675,0.7666341191240061,0.6983412988473433]",,7792,,7279,
