Name,lrml_f_score,bleu,lrml_f_score_test,bleu_test,State,Notes,User,Tags,Created,Runtime,Sweep,adafactor,bs,dataset,decoding_runs,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,experiment,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,mask_percentage,max_length,metric_for_best_model,metric_names,model_name,model_path,no_repeat_ngram_size,num_beams,num_warmup_steps,post_process,repetition_penalty,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,calc_loss,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,reference_length,reference_length_test,translation_length,translation_length_test,RANDOM_INPUT_test_no_sep,RANDOM_INPUT_test_oracle,RANDOM_LABEL_EVAL_test_no_sep,RANDOM_LABEL_EVAL_test_oracle,RANDOM_LABEL_test_no_sep,RANDOM_LABEL_test_oracle,RANDOM_PRED_EVAL_test_no_sep,RANDOM_PRED_EVAL_test_oracle,RANDOM_PRED_test_no_sep,RANDOM_PRED_test_oracle,bleu_test_no_sep,bleu_test_oracle,brevity_penalty_test_no_sep,brevity_penalty_test_oracle,eval_epoch_test_no_sep,eval_epoch_test_oracle,ir_change_ratio_test_no_sep,ir_change_ratio_test_oracle,length_ratio_test_no_sep,length_ratio_test_oracle,lrml_f_score_test_no_sep,lrml_f_score_test_oracle,lrml_precision_test_no_sep,lrml_precision_test_oracle,lrml_recall_test_no_sep,lrml_recall_test_oracle,precisions_test_no_sep,precisions_test_oracle,reference_length_test_no_sep,reference_length_test_oracle,translation_length_test_no_sep,translation_length_test_oracle,eval_loss,prediction_epoch
t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_45,69.05831940493043,0.7569407287370116,55.47891230491354,0.634234197951325,finished,-,stefanfuchs164,,2023-04-06T21:57:15.000Z,4165,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1. is( water tank. capacity, 150 l), greater than equal( water tank. height, width ratio), equal( water tank. height, breadth ratio), as per( water tank. height, nzbc g12as1 f4)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( and( has( piped water supply system, water tank), less than equal( water tank. capacity, 150 l), less than equal( water tank. height to breadth ratio, 1/1))), then( permission( as per( water tank. structural support, nzbc g12as1 f4)))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1/1)))), then( permission( expression( function( as per), atom( relation( structural support), variable( water tank)), data( nzbc g12as1 f4))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( water tank, capacity), greater than equal( water tank. capacity, 150 l)), then( obligation( and( greater than equal( water tank. height, width ratio), equal( water tank. height, breadth ratio)), as per( water tank. height, nzbc g12as1 f4))))","if( and( expression( function( has), atom( variable( water tank)), data( capacity)), expression( function( greater than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))))), then( obligation( and( expression( function( greater than equal), atom( relation( height), variable( water tank)), data( width ratio)), expression( function( equal), atom( relation( height), variable( water tank)), data( breadth ratio))), expression( function( as per), atom( relation( height), variable( water tank)), data( nzbc g12as1 f4))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)), expression( function( has), atom( variable( waste)), data( disposal)), or( expression( function( is), atom( relation( type), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal)), data( drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))), then( and( obligation( expression( function( has), atom( variable( disposal)), data( plumbing))), obligation( expression( function( has), atom( variable( disposal)), data( drainage)))))","if( and( for( network utility operator, industrial liquid waste), into( industrial liquid waste. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))), then( obligation( has( disposal, and( plumbing, drainage))))",0.9741033219178226,1.0,15,19,1,1,0.974432925403383,1.1098562628336757,68.24995592566776,52.523152785401294,69.88606117853351,58.78718236660107,"[0.8552915766738661,0.8091713596138375,0.7534590177198802,0.69921875]","[0.7530064754856615,0.6842779006167811,0.601194659170766,0.5223387952375339]",12829,7792,12501,8648,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( has), atom( variable( person)), data( disability))), then( permission( expression( function( approach), atom( variable( building)))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( has( person, disability)), then( permission( approach( building)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, blockage clearing, maintenance)))))",0.6319351063974094,0.7663244889568301,0.9391888706852696,1.0,19.0,19.0,1.0,1.0,0.940965092402464,1.1821098562628336,49.9972130427396,91.09415983162216,51.068452401488685,90.5647554238034,48.96999211697281,91.62978999463276,"[0.8046917621385706,0.7291466263570152,0.637219606757131,0.5482070601367378]","[0.7851481923786777,0.7752293577981652,0.7613449071530601,0.7441963298695556]",7792.0,7792.0,7332.0,9211.0,,
t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_45,66.91417638323604,0.7252620742277144,56.95303455013284,0.6266857844063252,finished,-,stefanfuchs164,,2023-04-06T21:29:49.000Z,1643,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 The scope of this Acceptable Solution is limited to the materials, products and processes contained herein, for buildings within the scope of NZS 3604, and: a) Up to 3 storeys with a height measured from lowest ground level adjacent to the building to the highest point of the roof (except for chimneys, aerials and the like) of 10 m or less, and b) With floor plan area limited only by seismic and structural control joints, and c) External walls that are vertical, and roofs that are 60° or less above the horizontal. is( building. material, or( material, product, process)), material, product, process, as per( building. material, nzs 3604), within( building. elevation, nzs 3604), greater than equal( building. height, 3 storeys), has( building. elevation, ground level), is( ground level. elevation, lowest), adjacent( ground level, building), towards( roof. elevation, roof), greater than equal( roof. elevation, 10 m), has( roof. elevation, floor plan area), is( floor plan area, and( seismic, structural control joint)), seismic, structural control joint, is( building. elevation, and( external wall, horizontal)), external wall, horizontal, greater than equal( roof. elevation, 60 deg)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( and( apply to( nzs 3604, building), less than equal( count( building storey), 3), adjacent( building, ground level), define( min( ground level. elevation), x0), has( building, roof), define( max( roof. elevation), x1), exclude( max( roof. elevation), or( chimney, aerial)), in between( building. height, and( x0, x1)), less than equal( building. height, 10 m), has( building, floor plan area), by( floor plan area. limit, and( seismic control joint, structural control joint)), has( building, external wall), is( external wall. orientation, vertical), has( building, roof), less than equal( roof. slope, 60 deg))), then( and( has( building, or( material, product, process)), apply to( nzbc e2as1, and( material, product, process))))","[""if( and( expression( function( apply to), atom( variable( nzs 3604)), data( building)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( adjacent), atom( variable( building)), data( ground level)), expression( function( define), expression( function( min), atom( relation( elevation), variable( ground level))), data( x0)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), expression( function( max), atom( relation( elevation), variable( roof))), data( x1)), or( expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( chimney)), expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( aerial))), expression( function( in between), atom( relation( height), variable( building)), data( x0)), expression( function( in between), atom( relation( height), variable( building)), data( x1)), expression( function( less than equal), atom( relation( height), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( orientation), variable( external wall)), data( vertical)), expression( function( less than equal), atom( relation( slope), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( and( or( expression( function( has), atom( variable( building)), data( material)), expression( function( has), atom( variable( building)), data( product)), expression( function( has), atom( variable( building)), data( process))), expression( function( apply to), atom( variable( nzbc e2as1)), data( material)), expression( function( apply to), atom( variable( nzbc e2as1)), data( product)), expression( function( apply to), atom( variable( nzbc e2as1)), data( process))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( as per( building. material, nzs 3604), within( building. elevation, nzs 3604), greater than equal( building. height, 3 storeys))), then( obligation( and( has( building. elevation, ground level), is( ground level. elevation, lowest), adjacent( ground level, building), towards( roof. elevation, roof), greater than equal( roof. elevation, 10 m), has( roof. elevation, floor plan area), is( floor plan area, and( seismic, structural control joint)), is( building. elevation, and( external wall, horizontal), less than equal( roof. elevation, 60 deg)))))","if( and( expression( function( as per), atom( relation( material), variable( building)), data( nzs 3604)), expression( function( within), atom( relation( elevation), variable( building)), data( nzs 3604)), expression( function( greater than equal), atom( relation( height), variable( building)), data( 3 storeys)))), then( obligation( and( expression( function( has), atom( relation( elevation), variable( building)), data( ground level)), expression( function( is), atom( relation( elevation), variable( ground level)), data( lowest)), expression( function( adjacent), atom( variable( ground level)), data( building)), expression( function( towards), atom( relation( elevation), variable( roof)), data( roof)), expression( function( greater than equal), atom( relation( elevation), variable( roof)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( relation( elevation), variable( roof)), data( floor plan area)), expression( function( is), atom( variable( floor plan area)), data( seismic)), expression( function( is), atom( variable( floor plan area)), data( structural control joint)), expression( function( is), atom( relation( elevation), variable( building)), data( external wall)), expression( function( is), atom( relation( elevation), variable( building)), data( horizontal)))))","if( and( expression( function( has), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( discharge)), data( sewer)), expression( function( has), atom( variable( waste)), data( disposal)), or( expression( function( is), atom( relation( type), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal)), data( drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))), then( obligation( expression( function( has), atom( variable( waste)), data( disposal))))","if( and( has( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))), then( obligation( has( waste, disposal)))",0.917334762007766,0.9942081377388372,16,19,1,1,0.9205705822745344,0.9942248459958932,67.1747623217862,55.99154032792168,66.65560437456456,57.948127549912535,"[0.8785774767146486,0.827072152653548,0.7636270140555365,0.704147624385617]","[0.7473860849361043,0.6791471658866355,0.5977478067303915,0.5203112635188605]",12829,7792,11810,7747,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if you have a disability, then you need to know that you have a right to approach building.","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.8021563745737862,8.065119212278262e-62,1.0,19.0,19.0,1.0,1.0,0.0070585215605749,1.183264887063655,0.0,96.55211537899876,0.0,97.16835565986162,0.0,95.94364221278428,"[0,0,0,0]","[0.8126898047722343,0.8080741953082379,0.7996706915477497,0.7884041965764771]",7792.0,7792.0,55.0,9220.0,,
t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_45,65.9216096110015,0.7393228754220743,56.39014820916935,0.6537250398021807,finished,-,stefanfuchs164,,2023-04-06T20:42:46.000Z,2820,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1. is( water tank. capacity, 150 l), greater than equal( water tank. height, width ratio), equal( water tank. height, breadth ratio), as per( water tank. height, nzbc g12as1 f4)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( and( has( piped water supply system, water tank), less than equal( water tank. capacity, 150 l), less than equal( water tank. height to breadth ratio, 1/1))), then( permission( as per( water tank. structural support, nzbc g12as1 f4)))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1/1)))), then( permission( expression( function( as per), atom( relation( structural support), variable( water tank)), data( nzbc g12as1 f4))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( is( water tank. capacity, 150 l), greater than equal( water tank. height, width ratio), equal( water tank. height, breadth ratio))), then( permission( as per( water tank. height, nzbc g12as1 f4)))","if( and( expression( function( is), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( greater than equal), atom( relation( height), variable( water tank)), data( width ratio)), expression( function( equal), atom( relation( height), variable( water tank)), data( breadth ratio)))), then( permission( expression( function( as per), atom( relation( height), variable( water tank)), data( nzbc g12as1 f4))))","if( expression( function( exist), atom( variable( network utility operator)))), then( obligation( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( discharge)), data( sewer)), expression( function( has), atom( variable( waste)), data( disposal)), or( expression( function( is), atom( relation( type), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal)), data( drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))))","if( exist( network utility operator)), then( obligation( and( accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))))",0.9523654808413954,1.0,11,19,1,1,0.9534648062982306,1.012705338809035,65.35369034099887,53.76548136476181,66.49948576789174,59.28422320081671,"[0.8674787442773054,0.8133377189375873,0.74863523573201,0.6875780014976287]","[0.7745532885565835,0.7036753445635529,0.6192006168872896,0.5411597204245405]",12829,7792,12232,7891,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( and( expression( function( nzbc d1as1 f1)))), then( permission( expression( function( person with disabilities to approach building))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if( and( nzbc d1as1 f1)), then( permission( person with disabilities to approach building)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.2342256130262667,0.9530161703944876,0.3754331710893385,0.9813476961532598,19.0,19.0,1.0,1.0,0.5051334702258727,0.9815195071868584,26.68321465661156,97.3210316370222,37.42004658130666,97.79818200349492,20.73405017862543,96.8485146300454,"[0.8320630081300813,0.7186292192733832,0.5710925248301097,0.4436488994961549]","[0.9857479079497908,0.9794547609640458,0.96749801008225,0.9521582253107044]",7792.0,7792.0,3936.0,7648.0,,
t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_45,65.85085733018367,0.7133415597332788,56.83483076200454,0.6354879849895144,finished,-,stefanfuchs164,,2023-04-06T18:19:36.000Z,8587,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2. is( chimney connection. type, each), has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( is( chimney connection. type, each)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","if( expression( function( is), atom( relation( type), variable( chimney connection)), data( each))), then( obligation( and( expression( function( has), atom( variable( chimney connection)), data( bracing unit)), expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4)))))","if( expression( function( exist), atom( variable( network utility operator)))), then( obligation( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( discharge)), data( sewer)), expression( function( has), atom( variable( waste)), data( disposal)), or( expression( function( is), atom( relation( type), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal)), data( drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))))","if( exist( network utility operator)), then( obligation( and( accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))))",0.9228054542968286,0.9741321082380232,12,19,1,1,0.9256372281549614,0.9744609856262834,65.29961026184229,54.63612274055754,66.41149068461378,59.21792304379202,"[0.8618105263157895,0.8092172145035581,0.7461859711923634,0.6861601783570571]","[0.7746608718556566,0.7031042716901035,0.6167312575170386,0.5391760904684976]",12829,7792,11875,7593,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if you haven't already, then you're not going to be able to accept this solution.","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.9748370422278092,8.065119212278262e-62,0.9954981103923792,19.0,19.0,1.0,1.0,0.0070585215605749,0.9955082135523614,0.0,98.27723048238046,0.0,98.53208873818168,0.0,98.0236872329141,"[0,0,0,0]","[0.9907180611060976,0.9858478317320176,0.9768536681051392,0.9637776606954688]",7792.0,7792.0,55.0,7757.0,,
t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_45,69.55810850574315,0.708621726587929,55.87697840622998,0.6631070354831707,finished,-,stefanfuchs164,,2023-04-06T17:02:47.000Z,4597,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 Boundary fences and other site development must not significantly hamper the flow of surface water from the site. is( boundary fence. type, or( boundary fence, site development)), boundary fence, site development, hamper( surface water flow, site)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( exist( site development)), then( obligation( and( not( cause( site development, obstruction)), towards( obstruction, surface water flow))))","[""if( expression( function( exist), atom( variable( site development)))), then( obligation( and( not( expression( function( cause), atom( variable( site development)), data( obstruction))), expression( function( towards), atom( variable( obstruction)), data( surface water flow)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( is( boundary fence. type, or( boundary fence, site development))), then( obligation( and( not( has( site, surface water flow), hamper( surface water flow, site)))))","if( or( expression( function( is), atom( relation( type), variable( boundary fence)), data( boundary fence)), expression( function( is), atom( relation( type), variable( boundary fence)), data( site development)))), then( obligation( and( not( expression( function( has), atom( variable( site)), data( surface water flow)), expression( function( hamper), atom( variable( surface water flow)), data( site))))))","if( and( expression( function( for), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( variable( discharge)), data( sewer)), expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal)), expression( function( is), atom( relation( method), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( method), variable( disposal)), data( drainage)), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, discharge), towards( discharge, sewer), is( waste. type, industrial liquid))), then( obligation( and( has( waste, disposal), is( disposal. method, and( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))))",0.8818389149681543,1.0,17,19,1,1,0.8882999454361213,1.0319558521560577,71.00583631896798,54.23762958837129,68.16823611609311,57.61851552786005,"[0.8763601263601264,0.8352317880794702,0.7820330549138085,0.7284270768130198]","[0.7854744434771794,0.7134986225895317,0.6295549111083092,0.547993905535805]",12829,7792,11396,8041,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( building)))), then( permission( and( expression( function( has), atom( variable( person)), data( disability))), expression( function( towards), atom( variable( person)), data( building))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( building)), then( permission( and( has( person, disability)), towards( person, building)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, maintenance)))))",0.6290350364854189,0.7529875349476916,0.8934490220050368,1.0,19.0,19.0,1.0,1.0,0.8987422997946611,1.0333675564681726,54.02716059757664,74.4882559073474,55.27106628505821,75.00981674668114,52.838012129477605,73.97389805352303,"[0.8407825217763816,0.7599309153713298,0.6658929348614536,0.5775080432875109]","[0.8283656234475907,0.7825434537951732,0.7304205489801058,0.6789653860783568]",7792.0,7792.0,7003.0,8052.0,,
t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_45,66.5390510826345,0.735026353345798,57.10340446658368,0.6352316603217636,finished,-,stefanfuchs164,,2023-04-06T16:24:15.000Z,2309,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2. is( chimney connection. type, each), has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4)","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( is( chimney connection. type, each), has( chimney connection, bracing unit))), then( obligation( as per( bracing unit. number, nzbc b1as3 1.9.4)))","if( and( expression( function( is), atom( relation( type), variable( chimney connection)), data( each)), expression( function( has), atom( variable( chimney connection)), data( bracing unit)))), then( obligation( expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4))))","if( and( expression( function( has), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( discharge)), data( sewer)), expression( function( has), atom( variable( waste)), data( disposal)), or( expression( function( is), atom( relation( type), variable( disposal)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal)), data( drainage))), expression( function( comply with), atom( variable( disposal)), data( nzbc g13 foul water)))), then( obligation( expression( function( convey), atom( variable( waste)), data( disposal system))))","if( and( has( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), comply with( disposal, nzbc g13 foul water))), then( obligation( convey( waste, disposal system)))",0.9299180054762638,0.9599478658211502,19,19,1,1,0.9322628419985968,0.960728952772074,66.44494381519729,55.81328556617737,66.63342530006801,58.45457656250184,"[0.8797658862876254,0.8278240390276727,0.7634117447960738,0.7020515876393973]","[0.7846647074539139,0.7117480823576907,0.6273047722342733,0.5473295997814506]",12829,7792,11960,7486,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( treatment facility), has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if you have a disability, then you need to know that you have a right to approach building.","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.90397350550624,8.065119212278262e-62,0.9710995546565212,19.0,19.0,1.0,1.0,0.0070585215605749,0.9715092402464066,0.0,93.07513740531726,0.0,93.44351333110907,0.0,92.70965452056276,"[0,0,0,0]","[0.9520475561426684,0.9414504324683964,0.9250670241286864,0.9056043214044563]",7792.0,7792.0,55.0,7570.0,,
t5-amr_1_ir-exp_ir_doc_split_esp20_e20_45,51.77572956568471,0.5429158300622084,44.0096457936273,0.3898047536244833,finished,-,stefanfuchs164,,2023-04-06T15:27:23.000Z,3409,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,extract LegalRuleML expressions: B1AS3 B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"extract LegalRuleML expressions: G14VM1 G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","exist( chimney), for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2)","[""exist( chimney), for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2)""]","[""accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer), within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), plumbing, drainage, comply with( disposal system, nzbc g13)""]","accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer), within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), plumbing, drainage, comply with( disposal system, nzbc g13)","is( chimney connection. type, each), has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4)","is( chimney connection. type, each), has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4)","exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)","exist( network utility operator), accept( network utility operator, discharge), towards( discharge. discharge, sewer), has( waste, disposal), is( disposal. type, or( plumbing, drainage)), plumbing, drainage, comply with( disposal, nzbc g13 foul water)",0.95258666386979,1.0,12,19,1,1,0.9536759622032728,1.04886630179828,51.393663490677255,41.61480462972483,52.16351882887162,46.69695353289106,"[0.778153697438376,0.6292107204327514,0.512012012012012,0.42089171974522294]","[0.6604547148714126,0.4676560121765601,0.3245239020598523,0.23034154090548056]",4339,2558,4138,2683,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_44,69.35660917504552,0.7174875946529218,56.47221268007229,0.642830487934908,finished,-,stefanfuchs164,,2023-04-06T14:50:41.000Z,2198,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 2.2.4 For risk group VP firecells that require a fire sprinkler system (refer to Table 2.2d), the fire sprinkler system does not need to be extended throughout the remainder of the building where the risk group VP firecells are fire separated from the adjacent firecells. The fire separation between adjacent firecells is required to be provided with the greater of the property rating of the adjacent firecells (refer to Table 2.4). is( firecell. risk group, VP), has( firecell, fire sprinkler system), is( firecell. location, remainder), is( building. location, fire separation), is( fire separation. location, adjacent firecell), greater than equal( fire separation. property rating, x0), as per( fire separation. location, nzbc cas2 t2.4)","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( and( is( firecell. risk group, vp), requires( firecell, fire sprinkler system), as per( fire sprinkler system, nzbc cas2 t2.2.d), has( firecell, fire separation), adjacent( firecells, firecell), towards( fire separation, firecells), define( max( firecells. property rating), x0), as per( property rating, nzbc cas2 t2.4), is( fire separation. fire resistance rating, x0))), then( permission( not( has( building. remainder, fire sprinkler system))))","[""if( and( expression( function( is), atom( relation( risk group), variable( firecell)), data( vp)), expression( function( requires), atom( variable( firecell)), data( fire sprinkler system)), expression( function( as per), atom( variable( fire sprinkler system)), data( nzbc cas2 t2.2.d)), expression( function( has), atom( variable( firecell)), data( fire separation)), expression( function( adjacent), atom( variable( firecells)), data( firecell)), expression( function( towards), atom( variable( fire separation)), data( firecells)), expression( function( define), expression( function( max), atom( relation( property rating), variable( firecells))), data( x0)), expression( function( as per), atom( variable( property rating)), data( nzbc cas2 t2.4)), expression( function( is), atom( relation( fire resistance rating), variable( fire separation)), data( x0)))), then( permission( not( expression( function( has), atom( relation( remainder), variable( building)), data( fire sprinkler system)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( firecell. risk group, VP), has( firecell, fire sprinkler system))), then( permission( not( and( is( firecell. location, remainder), is( building. location, fire separation), adjacent( firecell. location, firecell))), obligation( and( greater than equal( fire separation. property rating, x0), as per( fire separation. location, nzbc cas2 t2.4)))))","if( and( expression( function( is), atom( relation( risk group), variable( firecell)), data( VP)), expression( function( has), atom( variable( firecell)), data( fire sprinkler system)))), then( permission( not( and( expression( function( is), atom( relation( location), variable( firecell)), data( remainder)), expression( function( is), atom( relation( location), variable( building)), data( fire separation)), expression( function( adjacent), atom( relation( location), variable( firecell)), data( firecell)))), obligation( and( expression( function( greater than equal), atom( relation( property rating), variable( fire separation)), data( x0)), expression( function( as per), atom( relation( location), variable( fire separation)), data( nzbc cas2 t2.4))))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))), expression( function( for), atom( variable( corrosion threaten)), data( integrity)), or( expression( function( for), atom( variable( integrity)), data( tank)), expression( function( for), atom( variable( integrity)), data( associated plant))), expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( comply with), atom( relation( location), variable( storage tank)), data( nzbc g14vm1 t2)))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten)), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), has( storage tank, impact), comply with( storage tank. location, nzbc g14vm1 t2))))",0.894486198997335,1.0,14,19,1,1,0.8996804115675423,1.0539014373716633,69.89575585683336,54.59158782865007,68.82571633145454,58.48703162061842,"[0.8860682723964651,0.8361956237468399,0.7769298245614035,0.719127901844823]","[0.7521919142717973,0.6887336030403335,0.6125647988151074,0.5380887287187772]",12829,7792,11542,8212,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( within), atom( relation( location), variable( disposal system)), data( area)), expression( function( has), atom( variable( disposal system)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))","if( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping)), expression( function( is), atom( variable( system)), data( completed)), and( expression( function( is), atom( variable( storage)), data( treatment))), expression( function( is), atom( variable( treatment)), data( completed)), and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination))))), then( obligation( and( or( expression( function( test), atom( variable( runoff)), data( washing down)), expression( function( test), atom( variable( runoff)), data( rain)), expression( function( test), atom( variable( runoff)), data( accidental overflow)), expression( function( test), atom( variable( runoff)), data( other causes))))))","if( exist( disposal system)), then( obligation( and( within( disposal system. location, area), has( disposal system, access point), for( access point, and( cleaning, clearing, maintenance)))))","if( or( is( system. type, or( industrial liquid waste, piping)), is( system, completed), and( is( storage, treatment)), is( treatment, completed), test( system, and( soil contamination, ground water contamination, waterway contamination))))), then( obligation( and( test( runoff, or( washing down, rain, accidental overflow, other causes)))))",0.6246886815236138,0.8911144403938246,0.8866144350169473,0.9795158280928756,19.0,19.0,1.0,1.0,0.892582135523614,0.9797227926078028,53.82566497429417,90.02759440030943,56.91324741369614,90.26605427755143,51.05585031721937,89.79039110377137,"[0.8319194823867722,0.7565217391304347,0.6683710737764792,0.5858615611192931]","[0.935944458999214,0.920965826626204,0.901913875598086,0.8811085821395099]",7792.0,7792.0,6955.0,7634.0,,
t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_44,67.6461837459934,0.669966062043847,54.7014198081967,0.622387060961859,finished,-,stefanfuchs164,,2023-04-06T13:28:04.000Z,4954,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a top capping, corner brackets or a proprietary system and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened)), heat strengthened, toughened, has( safety barrier, top capping, corner bracket, proprietary system), has( safety barrier, pane), is( pane. type, fractured), less than equal( pane. resistance, 0.2 kN), is( pane. resistance, concentrated load), less than equal( pane. deflection, 250 mm), as per( rail, nzbc b1as1 2).","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( glass, or( top capping, corner bracket, proprietary protection system)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( has), atom( variable( glass)), data( top capping)), expression( function( has), atom( variable( glass)), data( corner bracket)), expression( function( has), atom( variable( glass)), data( proprietary protection system))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( safety barrier, top capping, corner bracket, proprietary system))), then( permission( not( and( has( safety barrier, pane), is( pane. type, fractured), less than equal( pane. resistance, 0.2 kN), is( pane. resistance, concentrated load), less than equal( pane. deflection, 250 mm))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( safety barrier)), data( top capping)))), then( permission( not( and( expression( function( has), atom( variable( safety barrier)), data( pane)), expression( function( is), atom( relation( type), variable( pane)), data( fractured)), expression( function( less than equal), atom( relation( resistance), variable( pane)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( resistance), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))))))","if( exist( storage tank)), then( obligation( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)))))",0.836445096114718,0.9297543042651532,12,19,1,1,0.8484683139761477,0.9321098562628336,69.82827043006407,53.87263971463181,65.5963419913362,55.556098335563206,"[0.8836012861736334,0.8353985574255595,0.7762263799683515,0.718328335832084]","[0.7878287209142227,0.719062153163152,0.6367957500349504,0.5566356720202874]",12829,7792,10885,7263,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping)), and( expression( function( is), atom( variable( system)), data( completed)), or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( groundwater contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","if not, then, obligation is to remove and dispose of waste disposal system.","if( or( is( system. type, or( industrial liquid waste, piping)), and( is( system, completed), is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, groundwater contamination, waterway contamination)))))",0.0,0.9402154234329468,8.065119212278262e-62,0.957676333681972,19.0,19.0,1.0,1.0,0.0070585215605749,0.958547227926078,0.0,97.1151743663513,0.0,98.332133539574,0.0,95.92796914846728,"[0,0,0,0]","[0.9926362297496318,0.9878608038845428,0.979345019703764,0.9674151150054764]",7792.0,7792.0,55.0,7469.0,,
t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_45,71.34792820630157,0.7366684317941613,54.95876470245238,0.6670619281132162,finished,-,stefanfuchs164,,2023-04-06T13:14:16.000Z,1935,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1. structure, support, water tank, capacity, 150 l, height to breadth ratio, 1:1","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( and( has( piped water supply system, water tank), less than equal( water tank. capacity, 150 l), less than equal( water tank. height to breadth ratio, 1/1))), then( permission( as per( water tank. structural support, nzbc g12as1 f4)))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1/1)))), then( permission( expression( function( as per), atom( relation( structural support), variable( water tank)), data( nzbc g12as1 f4))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( structure, support), greater than( water tank. capacity, 150 l), greater than equal( water tank. height to breadth ratio, 1:1))), then( obligation( as per( support. height, nzbc g12as1 f4)))","if( and( expression( function( has), atom( variable( structure)), data( support)), expression( function( greater than), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( greater than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1:1)))), then( obligation( expression( function( as per), atom( relation( height), variable( support)), data( nzbc g12as1 f4))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), accept( network utility operator, discharge), towards( waste. discharge, sewer))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9227214981422708,1.0,11,19,1,1,0.925559279756801,1.0206622176591376,72.43467211544834,52.45900910685455,70.29331132592891,57.70867527830087,"[0.8750210544045814,0.8307210031347962,0.7753153767473576,0.7208644198610754]","[0.7858669684395826,0.7151177513294505,0.632666071656254,0.5568823831535696]",12829,7792,11874,7953,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( person)))), then( obligation( and( expression( function( as per), expression( function( person), atom( variable( disabled)))), expression( function( towards), atom( relation( approach), variable( building)), data( nzbc d1as1 f1)))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( has), atom( relation( maintenance), variable( treatment facility)), data( access)))))","if( exist( person)), then( obligation( and( as per( person( disabled)), towards( building. approach, nzbc d1as1 f1))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, blockage clearing)), has( treatment facility. maintenance, access))))",0.5868612624647782,0.7657992370269721,0.8515194762230615,0.9532527439561022,19.0,19.0,1.0,1.0,0.8615246406570842,0.954312114989733,51.49101586545656,74.0085795821936,55.85241529976373,72.12782925292814,47.76142509863154,75.9900379225317,"[0.8373305526590198,0.7511264644037249,0.6474329850068151,0.5540623091020159]","[0.8745293168370092,0.8356591247798402,0.7817362817362817,0.7290606519048274]",7792.0,7792.0,6713.0,7436.0,,
t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_44,65.9762937840657,0.6801793217833292,55.08016409213528,0.6430518314177393,finished,-,stefanfuchs164,,2023-04-06T13:08:55.000Z,1146,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 6.2.6 All bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 40 mm for 10 mm bolts. has( timber roof framing, fixing), define( fixing. centre, x0), define( fixing. edge, x1), greater than equal( bolt. distance, 40 mm), greater than equal( bolt. distance, 10 mm)","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( and( has( timber roof framing, fixing), is( fixing. type, bolt), equal( bolt. size, 10 mm))), then( obligation( and( define( fixing. centre, x0), define( timber roof framing. edge, x1), in between( distance, and( x0, x1)), greater than equal( distance, 40 mm))))","[""if( and( expression( function( has), atom( variable( timber roof framing)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( bolt)), expression( function( equal), atom( relation( size), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))))), then( obligation( and( expression( function( define), atom( relation( centre), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( timber roof framing)), data( x1)), expression( function( in between), atom( variable( distance)), data( x0)), expression( function( in between), atom( variable( distance)), data( x1)), expression( function( greater than equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( has( timber roof framing, fixing)), then( obligation( and( define( fixing. centre, x0), define( fixing. edge, x1), greater than equal( bolt. distance, 40 mm), greater than equal( bolt. distance, 10 mm))))","if( expression( function( has), atom( variable( timber roof framing)), data( fixing))), then( obligation( and( expression( function( define), atom( relation( centre), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( fixing)), data( x1)), expression( function( greater than equal), atom( relation( distance), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( greater than equal), atom( relation( distance), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))))))","if( exist( storage tank)), then( obligation( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2))))",0.8627777308303599,0.9736053499315134,9,19,1,1,0.8713851430353107,0.9739476386036962,66.9311712975358,52.39989505564018,65.04827866962167,58.04940722932972,"[0.875301905358261,0.8245408714440043,0.76252604874513,0.7018967718402335]","[0.7784951904071683,0.7103796124236793,0.628158844765343,0.5478178879310345]",12829,7792,11179,7589,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( and( not( permission( and( expression( function( cleaning)), expression( function( clearing of blockages))))))), then( obligation( and( expression( function( maintenance.)))))","if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed)), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed)))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( groundwater contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","if( and( not( permission( and( cleaning, clearing of blockages)))))), then( obligation( and( maintenance.)))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed), and( is( tank. type, or( storage, treatment)), is( tank, completed))))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, groundwater contamination, waterway contamination)))))",0.2563714339148453,0.9597828071945076,0.3982676516507304,0.9829152522007178,19.0,19.0,1.0,1.0,0.5206622176591376,0.9830595482546202,26.61154514567054,97.76593997015654,37.29365127063944,98.2788640955538,20.686316137790925,97.2583420193969,"[0.8498890806014296,0.7343828085957022,0.5882949075247023,0.4676258992805755]","[0.9922976501305484,0.9854043392504932,0.9725827814569536,0.9559706470980652]",7792.0,7792.0,4057.0,7660.0,,
t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_45,70.58795296579812,0.7252895478358294,55.149701672359775,0.661334446637822,finished,-,stefanfuchs164,,2023-04-06T12:22:53.000Z,3080,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1. structure, support, water tank, capacity, 150 l, height to breadth ratio, 1:1","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( and( has( piped water supply system, water tank), less than equal( water tank. capacity, 150 l), less than equal( water tank. height to breadth ratio, 1/1))), then( permission( as per( water tank. structural support, nzbc g12as1 f4)))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1/1)))), then( permission( expression( function( as per), atom( relation( structural support), variable( water tank)), data( nzbc g12as1 f4))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( structure, support), for( support, water tank), less than equal( water tank. capacity, 150 l))), then( obligation( equal( water tank. height to breadth ratio, 1:1)))","if( and( expression( function( has), atom( variable( structure)), data( support)), expression( function( for), atom( variable( support)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))))), then( obligation( expression( function( equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1:1))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( by), atom( variable( waste)), data( network utility operator)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( plumbing), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), towards( waste. discharge, sewer), by( waste, network utility operator))), then( obligation( and( has( waste, disposal system), is( disposal system. plumbing, drainage), comply with( disposal system, nzbc g13 foul water))))",0.8792225509567385,1.0,11,19,1,1,0.8859614934913087,1.0413244353182751,71.54753677139094,52.75634084081966,69.65376807475683,57.77053816435107,"[0.8993489354214323,0.8543603364320496,0.8023877405559515,0.7510983591858693]","[0.7818585161449347,0.7107581585804691,0.6265617191404298,0.5493772801610265]",12829,7792,11366,8114,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( person)))), then( obligation( and( expression( function( towards), expression( function( person), atom( variable( building))), data( Approach( person( building)))))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( person)), then( obligation( and( towards( person( building). Approach( person( building)), as per( person( building. Approach( person( building))))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, blockage clearing, maintenance)))))",0.3453991032775898,0.7732112824655019,0.48763317750104,1.0,19.0,19.0,1.0,1.0,0.5820071868583162,1.038501026694045,41.27712747437635,76.87465068800843,51.81095111607404,77.39708133257913,34.30291058225817,76.35922557443917,"[0.884013230429989,0.7868303571428571,0.6592090395480226,0.5489702517162471]","[0.8463914977755809,0.8076396665422422,0.7515660235529943,0.6957234767251167]",7792.0,7792.0,4535.0,8092.0,,
t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_44,66.0141738163415,0.6955162220263887,54.79838970625904,0.6493134422480709,finished,-,stefanfuchs164,,2023-04-06T12:21:17.000Z,2856,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;. has( structure, balustrade), is( balustrade. design, two edge support), comply with( balustrade. design, nzs 4223 3 t16)","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( has( structure, balustrade)), then( obligation( and( is( balustrade. design, two edge support), comply with( balustrade. design, nzs 4223 3 t16))))","if( expression( function( has), atom( variable( structure)), data( balustrade))), then( obligation( and( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)), expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))))))","if( exist( storage tank)), then( obligation( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2))))",0.8874004013300534,0.9927872544637846,3,19,1,1,0.893288642918388,0.9928131416837782,66.57735583795625,51.96797992411653,65.46043985694317,57.95487257307798,"[0.8720767888307155,0.8207919922732461,0.7577310478883195,0.6957410865119588]","[0.7750775594622544,0.7051165212862909,0.6205087857330186,0.5395588429533748]",12829,7792,11460,7736,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))))), then( obligation( and( expression( function( is), atom( variable( system)), data( completed)), or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed)), expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( groundwater contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","if not, then it is obligated to be located in areas with access to and/or cleaning and/or clearing of blockages and maintenance.","if( and( is( system. type, or( industrial liquid waste, piping))), then( obligation( and( is( system, completed), is( tank. type, or( storage, treatment)), is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, groundwater contamination, waterway contamination)))))",0.0,0.94083158360026,8.065119212278262e-62,0.9616815845960346,19.0,19.0,1.0,1.0,0.0070585215605749,0.9623973305954824,0.0,97.18934487392254,0.0,98.29043807493343,0.0,96.11264824315757,"[0,0,0,0]","[0.9941325510068008,0.9869693713057496,0.9745567735823522,0.9580038178347424]",7792.0,7792.0,55.0,7499.0,,
t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_45,70.7163577629462,0.7143598462240209,53.60448757540116,0.6466143867329207,finished,-,stefanfuchs164,,2023-04-06T12:03:26.000Z,1164,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 Drains shall be capable of handling the rainfall during a storm. No drain shall have an internal diameter of less than 85 mm. drain, rainfall, storm drain, internal diameter, 85 mm","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( exist( drain)), then( obligation( and( for( drain, storm water), greater than equal( drain. internal diameter, 85 mm))))","[""if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( for), atom( variable( drain)), data( storm water)), expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( is( drain, rainfall), is( drain, storm drain))), then( obligation( less than equal( drain. internal diameter, 85 mm)))","if( and( expression( function( is), atom( variable( drain)), data( rainfall)), expression( function( is), atom( variable( drain)), data( storm drain)))), then( obligation( expression( function( less than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0)))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( by), atom( variable( network utility operator)), data( waste)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), towards( waste. discharge, sewer), by( network utility operator, waste))), then( obligation( and( has( waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water)))))",0.8662268212938025,0.9891613970083188,13,19,1,1,0.874425130563567,0.9892197125256672,71.7986892633847,51.94433995242191,69.6661729438951,55.374255737257805,"[0.902210732750936,0.8570018839149547,0.8013723365836042,0.7464788732394366]","[0.7790607161390762,0.7070429896772508,0.6181889971045011,0.5362587829775951]",12829,7792,11218,7708,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), expression( function( person), atom( variable( disabled))))), then( obligation( expression( function( towards), expression( function( person), atom( variable( building))))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( person( disabled)), then( obligation( towards( person( building))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, blockage clearing, maintenance)))))",0.434731631264153,0.7905674798688489,0.5792438423954855,0.9294795967823212,19.0,19.0,1.0,1.0,0.6468172484599589,0.93185318275154,46.92476537634427,77.59705919337107,55.93283468257286,78.8680040788911,40.41574698076548,76.36642681314098,"[0.9071428571428573,0.8204613841524574,0.7070993914807302,0.6028717948717949]","[0.932103016113483,0.8874548986955315,0.8260383163193958,0.765924464487035]",7792.0,7792.0,5040.0,7261.0,,
t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_44,69.26223971855066,0.7270028203372542,56.86837026579288,0.6619816491655764,finished,-,stefanfuchs164,,2023-04-06T11:58:57.000Z,1337,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3. exist( drain), is( drain. type, main), greater than equal( drain. length, 10 m), has( drain, ventilation), as per( ventilation, nzbc g13as2 t3)","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( or( is( drain. type, main), and( is( drain. type, branch), greater than equal( drain. length, 10 m)))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( drain. type, main), greater than( drain. length, 10 m))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( greater than), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))), expression( function( for), atom( variable( corrosion threaten)), data( integrity)), or( expression( function( for), atom( variable( corrosion threaten)), data( integrity)), and( expression( function( for), atom( variable( corrosion threaten)), data( tank)), expression( function( for), atom( variable( corrosion threaten)), data( associated plant)))), expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( comply with), atom( relation( design), variable( storage tank)), data( nzbc g14vm1 t2)))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten)), for( corrosion threaten, integrity), for( corrosion threaten, or( integrity, and( tank, associated plant))), has( storage tank, impact), comply with( storage tank. design, nzbc g14vm1 t2))))",0.9198631174350276,0.9980730945655704,17,19,1,1,0.9229090342193468,0.9980749486652978,71.01348990208142,54.836222197015694,67.5952852310317,59.05693148418448,"[0.8757601351351352,0.824963888180814,0.763976748162079,0.7068891373527135]","[0.7767776777677767,0.7106967106967107,0.6312769010043041,0.5553074093536521]",12829,7792,11840,7777,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( within), atom( relation( location), variable( disposal system)), data( area)), expression( function( has), atom( variable( disposal system)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))","if( and( or( expression( function( for), atom( variable( system)), data( industrial liquid waste)), expression( function( for), atom( variable( system)), data( storage tank)), expression( function( for), atom( variable( system)), data( treatment tank))), expression( function( for), atom( variable( piping)), data( industrial liquid waste)), expression( function( for), atom( variable( piping)), data( piping)))), then( obligation( and( expression( function( is), expression( function( test), atom( variable( system)), data( completed)), data( avoid( system, contamination))), expression( function( by), atom( variable( contamination)), data( run off)), or( expression( function( is), atom( relation( type), variable( run off)), data( washing down)), expression( function( is), atom( relation( type), variable( run off)), data( rain)), expression( function( is), atom( relation( type), variable( run off)), data( accidental overflow))), or( expression( function( other))))))","if( exist( disposal system)), then( obligation( and( within( disposal system. location, area), has( disposal system, access point), for( access point, and( cleaning, clearing, maintenance)))))","if( and( for( system, or( industrial liquid waste, storage tank, treatment tank)), for( piping, and( industrial liquid waste, piping)))), then( obligation( and( is( test( system, completed), avoid( system, contamination), or( soil, ground water, waterway)), by( contamination, run off), is( run off. type, or( washing down, rain, accidental overflow)), or( other, other)))))",0.5949822568542028,0.6915495961205027,0.8432454330293698,0.9002421679192278,19.0,19.0,1.0,1.0,0.8543377823408624,0.9049024640657084,53.14152153817587,70.34270442622321,55.25483548756598,72.38723613842033,51.183907080316175,68.41049330086395,"[0.8440739071653898,0.7641623750378673,0.6670230639987781,0.5760936537276649]","[0.8530704864558218,0.8044596912521441,0.7432646592709984,0.6826895149578855]",7792.0,7792.0,6657.0,7051.0,,
t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_45,69.43485456513893,0.7199011442247983,54.84301432887045,0.6580225240818377,finished,-,stefanfuchs164,,2023-04-06T11:36:31.000Z,1612,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 3.9.3 Trench slope; These anti-scour blocks shall be: Spaced at: 5.0 m centres for trench slopes greater than 1 in 5. trench, anti scour blocks, slope, 1/5, spacing, 5 mCentres","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( and( has( trench, anti scour blocks), greater than( trench. slope, 1/5))), then( obligation( equal( anti scour blocks. spacing, 5 mCentres)))","[""if( and( expression( function( has), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5 mCentres))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( trench, anti scour blocks), greater than( trench. slope, 1/5))), then( obligation( equal( anti scour blocks. spacing, 5 mCentres)))","if( and( expression( function( has), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5 mCentres))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( variable( disposal system)), data( plumbing)), expression( function( is), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water))))","if( and( is( waste. type, industrial liquid), towards( waste. discharge, sewer), accept( network utility operator, discharge), has( waste, disposal system), is( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.8641055187136026,0.9969151695452148,10,19,1,1,0.8725543690077169,0.9969199178644764,71.16383269900182,52.984917930212426,67.78789728774241,56.83616790977772,"[0.9126317670180454,0.8664029488447361,0.8089938472674629,0.7531190237683271]","[0.7789649845520082,0.7093219240243744,0.6257508487855837,0.5489938182296462]",12829,7792,11194,7768,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( building)))), then( permission( and( expression( function( has), atom( variable( person with disabilities)))), expression( function( towards), expression( function( approach), atom( variable( building))))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( building)), then( permission( and( has( person with disabilities)) towards( approach( building))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, blockage clearing, maintenance)))))",0.2943912706276725,0.7369194108315764,0.4375626444346231,0.8693455162784574,19.0,19.0,1.0,1.0,0.5474845995893224,0.8771817248459959,36.10656632352727,78.368110833328,47.499578999820855,79.81887618200082,29.12160342558401,76.96914145809052,"[0.8663853727144867,0.7565898836380908,0.6183830606352262,0.5054864667154353]","[0.9114850036576444,0.8797935103244838,0.8284014869888476,0.7772113943028486]",7792.0,7792.0,4266.0,6835.0,,
t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_44,67.16253335514931,0.6537525030852077,54.25879563742421,0.6176817885791079,finished,-,stefanfuchs164,,2023-04-06T10:46:36.000Z,4248,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 6.2.6 All bolt fixings into roof framing timber must be installed with minimum distances from the centre of the fixing to the edge of the timber of: 40 mm for 10 mm bolts. has( timber roof framing, fixing), define( fixing. centre, x0), define( fixing. edge, x1), greater than equal( bolt. distance, 40 mm), greater than equal( bolt. distance, 10 mm)","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","if( and( has( timber roof framing, fixing), is( fixing. type, bolt), equal( bolt. size, 10 mm))), then( obligation( and( define( fixing. centre, x0), define( timber roof framing. edge, x1), in between( distance, and( x0, x1)), greater than equal( distance, 40 mm))))","[""if( and( expression( function( has), atom( variable( timber roof framing)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( bolt)), expression( function( equal), atom( relation( size), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))))), then( obligation( and( expression( function( define), atom( relation( centre), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( timber roof framing)), data( x1)), expression( function( in between), atom( variable( distance)), data( x0)), expression( function( in between), atom( variable( distance)), data( x1)), expression( function( greater than equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( has( timber roof framing, fixing)), then( obligation( and( define( fixing. centre, x0), define( fixing. edge, x1), greater than equal( bolt. distance, 40 mm), greater than equal( bolt. distance, 10 mm))))","if( expression( function( has), atom( variable( timber roof framing)), data( fixing))), then( obligation( and( expression( function( define), atom( relation( centre), variable( fixing)), data( x0)), expression( function( define), atom( relation( edge), variable( fixing)), data( x1)), expression( function( greater than equal), atom( relation( distance), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( greater than equal), atom( relation( distance), variable( bolt)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( corrosion threaten))))))","if( exist( storage tank)), then( obligation( and( below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)))))",0.8092440785273336,0.9196819279879258,9,19,1,1,0.8253176397225037,0.922741273100616,69.52467315797877,53.15801649598734,64.95562937981862,55.40612794917129,"[0.8886475255005667,0.8419701435770657,0.7841278958452996,0.7259759036144579]","[0.7917941585535466,0.722354590049054,0.6388418079096045,0.5568683274021352]",12829,7792,10588,7190,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. is( system. type, or( industrial liquid waste, piping)), industrial liquid waste, piping, is( system, completed), is( tank. type, or( storage, treatment)), storage, treatment, is( tank, completed), test( system, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination, test( tank, and( soil contamination, ground water contamination, waterway contamination)), soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))))), then( obligation( and( expression( function( is), atom( variable( system)), data( completed)), or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed)), expression( function( is), expression( function( test), atom( variable( system)), data( soil contamination)), data( is( test( tank, and( soil contamination, waterway contamination)), not( is( soil contamination, ground water contamination), accidental overflow)))), expression( function( is), expression( function( test), atom( variable( system)), data( ground water contamination)), data( is( test( tank, and( soil contamination, waterway contamination)), not( is( soil contamination, ground water contamination), accidental overflow)))), expression( function( is), expression( function( test), atom( variable( system)), data( waterway contamination)), data( is( test( tank, and( soil contamination, waterway contamination)), not( is( soil contamination, ground water contamination), accidental overflow)))))))","if ( exist-01 :ARG1 ( system :ARG2-of ( dispose-01)))), then ( obligation ( and :op1 ( clean-01 :ARG0 system ) :op2 ( clear-01 :ARG0 system :ARG1 ( blockage) ) :op3 ( maintain-01 :ARG1 system ) ) ))","if( and( is( system. type, or( industrial liquid waste, piping))), then( obligation( and( is( system, completed), is( tank. type, or( storage, treatment)), is( tank, completed), is( test( system, and( soil contamination, ground water contamination, waterway contamination)), is( test( tank, and( soil contamination, waterway contamination)), not( is( soil contamination, ground water contamination), accidental overflow))))))",0.0,0.7838506137024114,8.065119212278262e-62,1.0,19.0,19.0,1.0,1.0,0.0070585215605749,1.1524640657084189,0.0,89.50794912084937,0.0,89.05340007290332,0.0,89.96716222108503,"[0,0,0,0]","[0.8108017817371937,0.7957422969187675,0.7765501691093574,0.7534883720930232]",7792.0,7792.0,55.0,8980.0,,
t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_45,69.9819269607069,0.6849673411222761,54.5000075210792,0.6521200373666283,finished,-,stefanfuchs164,,2023-04-06T10:41:41.000Z,3287,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1. structure, support, water tank, capacity, 150 l, height to breadth ratio, 1:1","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( and( has( piped water supply system, water tank), less than equal( water tank. capacity, 150 l), less than equal( water tank. height to breadth ratio, 1/1))), then( permission( as per( water tank. structural support, nzbc g12as1 f4)))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))), expression( function( less than equal), atom( relation( height to breadth ratio), variable( water tank)), data( 1/1)))), then( permission( expression( function( as per), atom( relation( structural support), variable( water tank)), data( nzbc g12as1 f4))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( structure, support), within( support, water tank), less than equal( water tank. capacity, 150 l))), then( obligation( and( greater than equal( support. height to breadth ratio, 1:1))))","if( and( expression( function( has), atom( variable( structure)), data( support)), expression( function( within), atom( variable( support)), data( water tank)), expression( function( less than equal), atom( relation( capacity), variable( water tank)), data( baseunit( kind( litre)), value( 150.0))))), then( obligation( and( expression( function( greater than equal), atom( relation( height to breadth ratio), variable( support)), data( 1:1)))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( is), atom( relation( disposal system), variable( waste)), data( network utility operator)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( plumbing)), expression( function( has), atom( variable( waste disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), towards( waste. discharge, sewer), is( waste. disposal system, network utility operator))), then( obligation( and( has( waste disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.8259845572281647,1.0,15,19,1,1,0.8395042481876998,1.0472279260780288,72.10979280268843,51.93121696215256,67.97604268776011,57.336154667452654,"[0.9083565459610028,0.8629778483970465,0.8057019194580354,0.748792270531401]","[0.776593137254902,0.7030228254164096,0.6160248447204969,0.5377110694183865]",12829,7792,10770,8160,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( as per), atom( relation( approach), variable( building)), data( person with disabilities))), expression( function( as per), atom( relation( approach), variable( building)), data( nzbc d1as1 f1))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( building)), then( obligation( and( as per( building. approach, person with disabilities)), as per( building. approach, nzbc d1as1 f1))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, blockage clearing)), for( access, maintenance))))",0.5809958016511317,0.7952711755901114,0.7950025883964754,0.9785986595831666,19.0,19.0,1.0,1.0,0.8133983572895277,0.9788244353182752,53.06440387928648,73.13378048858308,57.28510708848217,72.86864923767013,49.42297392879259,73.40084813547682,"[0.8624171662985168,0.7865669266274072,0.6946050096339114,0.6053782601652357]","[0.8951094794807919,0.8498415213946118,0.7882133829985366,0.7274189225408738]",7792.0,7792.0,6338.0,7627.0,,
t5-amr_1_ir-exp_ir_doc_split_esp20_e20_44,52.325755366666336,0.52390291331123,41.76457554794668,0.3898649913055925,finished,-,stefanfuchs164,,2023-04-06T09:39:06.000Z,4047,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,extract LegalRuleML expressions: B1AS3 B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"extract LegalRuleML expressions: G14VM1 G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","exist( chimney), for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2)","[""exist( chimney), for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2)""]","[""below( storage tank. location, ground level), cause( storage tank, and( health hazard, safety hazard)), health hazard, safety hazard, has( storage tank, corrosion resistance), greater than( storage tank. design load, true load)""]","below( storage tank. location, ground level), cause( storage tank, and( health hazard, safety hazard)), health hazard, safety hazard, has( storage tank, corrosion resistance), greater than( storage tank. design load, true load)","is( chimney. connection, bracing unit), as per( bracing unit, nzbc b1as3 1.9.4), as per( bracing unit. number, nzbc b 1as3 1.9.4)","is( chimney. connection, bracing unit), as per( bracing unit, nzbc b1as3 1.9.4), as per( bracing unit. number, nzbc b 1as3 1.9.4)","exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)","exist( storage tank), below( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard, corrosion threaten), for( corrosion threaten, integrity), for( integrity, or( tank, associated plant)), tank, associated load, has( storage tank, withstand impact), comply with( storage tank. location, nzbc g14vm1 t2)",0.9099866528429428,1.0,10,19,1,1,0.9138050241991242,1.027756059421423,52.40550716868694,39.072478566117525,52.24624593174272,44.855095297430566,"[0.7919293820933165,0.6386748844375963,0.5158252681140466,0.4211087420042644]","[0.6569037656903766,0.4696969696969697,0.32711393410083367,0.2288961038961039]",4339,2558,3965,2629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_45,69.38140935210203,0.7457962123632367,55.588945311893866,0.6406870322795708,finished,-,stefanfuchs164,,2023-04-06T09:19:05.000Z,4954,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2. chimney connection, bracing unit, number, nzbc b1as3 1.9.4, nzbc b2as3 t2","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( has( chimney connection, bracing unit)), then( obligation( as per( bracing unit. number, nzbc b1as3 1.9.4)))","if( expression( function( has), atom( variable( chimney connection)), data( bracing unit))), then( obligation( expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( towards), atom( relation( discharge), variable( waste)), data( sewer)), expression( function( has), atom( variable( network utility operator)), data( waste disposal system)))), then( obligation( and( expression( function( has), atom( variable( waste)), data( disposal system)), expression( function( is), atom( variable( disposal system)), data( plumbing)), expression( function( is), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( is( waste. type, industrial liquid), towards( waste. discharge, sewer), has( network utility operator, waste disposal system))), then( obligation( and( has( waste, disposal system), is( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9166595420795126,0.9745269996716864,19,19,1,1,0.9199469950892508,0.9748459958932238,69.77011309778372,53.712368973687184,68.99701270875488,57.601394512231984,"[0.8974750042365701,0.8480947915778706,0.7885077186963979,0.730088877383726]","[0.7776461295418642,0.7061397692613711,0.6223617419182474,0.5466289866774324]",12829,7792,11802,7596,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. treatment facility, location, access, cleaning, blockage clearing, maintenance","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), expression( function( person), atom( variable( disability))))), then( obligation( and( expression( function( towards), expression( function( person), atom( variable( disability)))), expression( function( towards), expression( function( building. approach), expression( function( person), atom( variable( disability))))))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( exist( person( disability))), then( obligation( and( towards( person( disability)), towards( building. approach( person( disability)))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, blockage clearing, maintenance)))))",0.3088413734259827,0.783227016604856,0.4463592690555765,0.9996149156070958,19.0,19.0,1.0,1.0,0.5535164271047228,0.9996149897330596,38.72773431383109,74.52737126950802,48.55519141796108,73.39440377638599,32.20875723170528,75.69586574372796,"[0.8715511245073035,0.7684358853922029,0.6414465857720676,0.53351012536162]","[0.8668635254846578,0.8198862167054565,0.7573902851933846,0.7001573976915005]",7792.0,7792.0,4313.0,7789.0,,
t5-amr_0_ir-entities_ir_doc_split_esp20_e20_45,0.0,0.6634529620714664,0.0,0.4323075266202247,finished,-,stefanfuchs164,,2023-04-06T09:08:58.000Z,604,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,extract LegalRuleML entities: G12AS1 G12AS1 Structural support; The method illustrated in Figure 4 is acceptable for water tanks up to 150 litre capacity and the maximum height to breadth ratio of 1:1.,"extract LegalRuleML entities: G14VM1 G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","piped water supply system, water tank, capacity, 150 l, height to breadth ratio, 1/1, structural support, nzbc g12as1 f4","[""piped water supply system, water tank, capacity, 150 l, height to breadth ratio, 1/1, structural support, nzbc g12as1 f4""]","[""network utility operator, discharge, type, industrial liquid waste, sewer, disposal system, plumbing, drainage, nzbc g13""]","network utility operator, discharge, type, industrial liquid waste, sewer, disposal system, plumbing, drainage, nzbc g13","structure, support, water tank, capacity, 150 l, height to breadth ratio, 1:1","structure, support, water tank, capacity, 150 l, height to breadth ratio, 1:1","waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water","waste, type, industrial liquid, discharge, sewer, network utility operator, disposal system, plumbing, drainage, nzbc g13 foul water",1.0,1.0,15,19,1,1,1.0,1.0668127053669223,0.0,0.0,0.0,0.0,"[0.8493421052631579,0.7453416149068323,0.6088534107402032,0.5026778882938026]","[0.7433264887063655,0.5647442872687704,0.3599537037037037,0.2311495673671199]",1520,913,1520,974,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_43,68.8674149945564,0.718107224670157,56.8309936133097,0.6801575134446362,finished,-,stefanfuchs164,,2023-04-06T08:43:46.000Z,3316,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails. is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm), has( barrier, interlinking rail)","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm))), then( obligation( has( barrier, interlinking rail)))","if( and( expression( function( is), atom( relation( type), variable( barrier)), data( structural glass)), expression( function( greater than equal), atom( relation( fall), variable( barrier)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( expression( function( has), atom( variable( barrier)), data( interlinking rail))))","if( expression( function( is), atom( variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.9458946065245454,1.0,15,19,1,1,0.9473068828435576,1.0024383983572895,69.60470431206566,54.93813228267514,68.14558146695767,58.85894423475967,"[0.8337036122768041,0.790845886442642,0.7374906335858796,0.6831658291457287]","[0.7929842529765715,0.7271789582258896,0.6486170627191273,0.5721946115616008]",12829,7792,12153,7811,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( and( expression( function( within), atom( variable( tank)), data( storage)), expression( function( is), atom( relation( location), variable( storage)), data( below ground)))), then( permission( and( or( expression( function( for), atom( variable( precaution)), data( health and safety hazards)), expression( function( for), atom( variable( precaution)), data( corrosion))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( and( within( tank, storage), is( storage. location, below ground))), then( permission( and( for( precaution, or( health and safety hazards, corrosion), threaten( corrosion, integrity), for( corrosion, plant), for( tank. design, load), against( tank. design, load)))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.5910268581488277,0.909912569055244,0.8355105205232164,0.9997432935452424,19.0,19.0,1.0,1.0,0.847664271047228,0.9997433264887065,51.592416872635006,92.29714891909737,54.51584378727855,91.95969095892504,48.96657120583193,92.6370926923994,"[0.8357305071915215,0.7619847328244275,0.6711316397228637,0.5858695652173913]","[0.9315789473684212,0.919715578539108,0.9040364583333332,0.8859016393442622]",7792.0,7792.0,6605.0,7790.0,,
t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_44,72.761683667222,0.7828012540838034,53.840803195718834,0.651642742037299,finished,-,stefanfuchs164,,2023-04-06T08:35:06.000Z,2029,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3. parapet, cladding, material, corrugated steel, orientation, vertical, drained cavity, nzbc e2as1 t3","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( and( has( parapet, cladding), not( is( cladding. material, steel)), is( steel. type, vertical corrugated))), then( obligation( and( has( parapet, drained cavity), for( drained cavity, cladding))))","[""if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( steel))), expression( function( is), atom( relation( type), variable( steel)), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( for), atom( variable( drained cavity)), data( cladding)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( has( parapet, cladding), not( is( cladding. material, corrugated steel)), is( cladding. orientation, vertical), as per( drained cavity, nzbc e2as1 t3))), then( obligation( has( parapet, drained cavity)))","if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( corrugated steel))), expression( function( is), atom( relation( orientation), variable( cladding)), data( vertical)), expression( function( as per), atom( variable( drained cavity)), data( nzbc e2as1 t3)))), then( obligation( expression( function( has), atom( variable( parapet)), data( drained cavity))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health and safety hazards)), expression( function( avoid), atom( variable( precaution)), data( corrosion))), or( expression( function( has), atom( relation( integrity), variable( storage tank)), data( corrosion)), expression( function( has), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( variable( precaution)), data( withstand load)), expression( function( for), atom( variable( precaution)), data( impact)))))","if( exist( storage tank)), then( obligation( and( is( storage tank. location, below ground), has( storage tank, precaution), avoid( precaution, or( health and safety hazards, corrosion)), has( storage tank. integrity, or( corrosion, associated plant)), for( precaution, and( withstand load, impact)))))",1.0,1.0,15,19,1,1,1.0183958219658586,1.0741786447638604,73.06251921714058,50.60850520136045,72.463315344392,57.514155927898834,"[0.8577879831611175,0.8136062798214561,0.760040238334752,0.7079053843759726]","[0.7758661887694146,0.7011425135297655,0.6157384987893463,0.5383302864107252]",12829,7792,13065,8370,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( is), atom( relation( location), variable( disposal system)), data( area)), expression( function( has), atom( variable( area)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( blockage))), expression( function( for), atom( relation( maintenance), variable( disposal system)))))","if( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( storage)), expression( function( is), atom( relation( type), variable( system)), data( treatment)), and( expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( relation( completion), variable( piping)), data( testing)))), then( obligation( and( or( expression( function( has), atom( variable( system)), data( soil contamination)), expression( function( has), atom( variable( system)), data( ground water contamination))), expression( function( has), atom( variable( system)), data( waterway contamination)))))","if( exist( disposal system)), then( obligation( and( is( disposal system. location, area), has( area, access), for( access, and( cleaning, clearing, blockage))), for( disposal system. maintenance))))","if( or( is( system. type, or( industrial liquid waste, storage, treatment)), and( is( system. type, piping)), is( piping. completion, testing))), then( obligation( and( has( system, or( soil contamination, ground water contamination)), has( system, waterway contamination))))",0.5728207813269157,0.7695234799069891,0.8135249389816538,0.9703069816769532,19.0,19.0,1.0,1.0,0.8289271047227926,0.9707392197125256,51.08449191014805,73.24514658232856,53.144314377458,71.59145929857812,49.178385046027984,74.97703714747202,"[0.8442483356556743,0.7668644597126796,0.6665616632540557,0.5695900857959962]","[0.8695134849286092,0.8263417232654149,0.7715320633217064,0.7136099472901744]",7792.0,7792.0,6459.0,7564.0,,
t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_43,66.928213086095,0.6819199122712607,57.069707609417264,0.6695220457681298,finished,-,stefanfuchs164,,2023-04-06T07:51:50.000Z,3113,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 3.4 Grease traps 3.4.6 The top of the outlet junction shall be extended to finished ground level and fitted with a watertight rodding point access cover as shown in Figures 4 and 10. is( outlet junction. top, grease trap), towards( grease trap. top, finished ground level), has( outlet junction, access cover), is( access cover. type, rodding point), is( access cover. type, watertight), as per( access cover, and( nzbc g13as2 f4 10)), nzbc g14as2 f4 10","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( has( grease trap, outlet junction)), then( obligation( and( is( top of( outlet junction), finished ground level), has( outlet junction, rodding point), has( rodding point, access cover), is( access cover, watertight))))","[""if( expression( function( has), atom( variable( grease trap)), data( outlet junction))), then( obligation( and( expression( function( is), expression( function( top of), atom( variable( outlet junction))), data( finished ground level)), expression( function( has), atom( variable( outlet junction)), data( rodding point)), expression( function( has), atom( variable( rodding point)), data( access cover)), expression( function( is), atom( variable( access cover)), data( watertight)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( is( outlet junction. top, grease trap)), then( obligation( and( towards( grease trap. top, finished ground level), has( outlet junction, access cover), is( access cover. type, rodding point), is( access cover. type, watertight), as per( access cover, and( nzbc g13as2 f4 10)))))","if( expression( function( is), atom( relation( top), variable( outlet junction)), data( grease trap))), then( obligation( and( expression( function( towards), atom( relation( top), variable( grease trap)), data( finished ground level)), expression( function( has), atom( variable( outlet junction)), data( access cover)), expression( function( is), atom( relation( type), variable( access cover)), data( rodding point)), expression( function( is), atom( relation( type), variable( access cover)), data( watertight)), expression( function( as per), atom( variable( access cover)), data( nzbc g13as2 f4 10)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8850574815234394,0.9907169313391312,14,19,1,1,0.8911840361680567,0.9907597535934292,69.45445194490955,55.55994544673302,64.57929630353524,58.66381293800327,"[0.8530569404355812,0.8049639148037318,0.7461695155433531,0.687789661319073]","[0.7838082901554404,0.7215916503587736,0.6461235216819974,0.570747849106552]",12829,7792,11433,7720,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if not, then you must comply with the following: 1.4.2. permission ( and :op1 ( prevent-01 :ARG1 ( or :op1 ( health hazard ) :op2 ( safety hazard) ) :op2 ( threaten-01 :ARG0 ( corrosion ) :ARG1 ( integrity :poss ( tank)) ) ) :op3 ( design-01 :ARG1 tank :ARG2 ( withstand-01 :ARG0 tank :ARG1 ( affect-01 :ARG0 ( load :ARG1-of ( associate-01 ))))))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.0,0.9500112069531392,8.065119212278262e-62,0.9759736357019267,19.0,19.0,1.0,1.0,0.0070585215605749,0.9762577002053388,0.0,97.2260305620697,0.0,97.7982927288069,0.0,96.66042656632334,"[0,0,0,0]","[0.9836992243985804,0.979740466101695,0.9713218620781646,0.9590163934426228]",7792.0,7792.0,55.0,7607.0,,
t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_44,72.1679086269631,0.7698715383666542,55.28092764687956,0.6050628027323537,finished,-,stefanfuchs164,,2023-04-06T07:28:17.000Z,4006,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3. drain, type, main, branch, length, 10 m, ventilation, nzbc g13as2 t3","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( or( is( drain. type, main), and( is( drain. type, branch), greater than equal( drain. length, 10 m)))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( drain. type, or( main, branch)), less than( drain. length, 10 m))), then( obligation( and( has( drain, ventilation), as per( ventilation, nzbc g13as2 t3))))","if( and( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch))), expression( function( less than), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), expression( function( for), atom( variable( precaution)), data( health and safety hazards)), expression( function( for), atom( variable( precaution)), data( corrosion)), expression( function( for), atom( variable( corrosion)), data( integrity)), expression( function( for), atom( variable( integrity)), data( tank)), expression( function( for), atom( variable( integrity)), data( associated plant)), expression( function( for), atom( relation( design), variable( tank)), data( withstand load)))))","if( exist( storage tank)), then( obligation( and( is( storage tank. location, below ground), for( precaution, and( health and safety hazards, corrosion)), for( corrosion, integrity), for( integrity, and( tank, associated plant)), for( tank. design, withstand load)))))",0.9602565510739666,1.0,17,19,1,1,0.9610258009197912,1.1395020533880904,72.666897074186,52.65639813743718,71.67572634271322,58.18080786117565,"[0.8753345770135453,0.8339859683472018,0.7797653237055879,0.725817101353582]","[0.7220407703570222,0.6529918404351768,0.5715589006728248,0.49736056919899013]",12829,7792,12329,8879,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( waste disposal system)))), then( obligation( expression( function( is), expression( function( waste disposal system located in), expression( function( area with sufficient access for), atom( variable( cleaning)), data( clearing of blockages))))))","if( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( piping)), data( completed)))), then( obligation( and( or( expression( function( has), atom( variable( system)), data( storage)), expression( function( has), atom( variable( system)), data( treatment))), or( expression( function( has), atom( variable( tank)), data( soil contamination)), expression( function( has), atom( variable( tank)), data( ground water contamination)), expression( function( has), atom( variable( tank)), data( waterway contamination))))))","if( exist( waste disposal system)), then( obligation( is( waste disposal system located in( area with sufficient access for( cleaning, clearing of blockages))))","if( or( is( system. type, industrial liquid waste), is( piping. type, completed))), then( obligation( and( has( system, or( storage, treatment)), has( tank, or( soil contamination, ground water contamination, waterway contamination)))))",0.354236174745113,0.783710885373478,0.5230625908418256,0.9427223999235188,19.0,19.0,1.0,1.0,0.606776180698152,0.9443018480492812,40.81183714779939,75.86467824994371,49.22331474521095,77.24742527663074,34.85557635592953,74.53056368287882,"[0.8606175972927242,0.7573293387545474,0.6266782156777826,0.5150120534735919]","[0.9097580864365316,0.866630151992332,0.8073951434878587,0.7503128041151119]",7792.0,7792.0,4728.0,7358.0,,
t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_43,65.87450378379003,0.6691942031334634,56.390414922596285,0.6667363460388877,finished,-,stefanfuchs164,,2023-04-06T06:25:19.000Z,5188,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails. is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm), has( barrier, interlinking rail)","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm))), then( obligation( has( barrier, interlinking rail)))","if( and( expression( function( is), atom( relation( type), variable( barrier)), data( structural glass)), expression( function( greater than equal), atom( relation( fall), variable( barrier)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( expression( function( has), atom( variable( barrier)), data( interlinking rail))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( is), atom( relation( type), variable( tank)), data( freestanding)), expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( exist( tank)), then( obligation( and( is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8299975484229967,1.0,15,19,1,1,0.8429339777067582,1.0195071868583163,68.21063087144032,53.25595038770163,63.69309648561096,59.91692162277573,"[0.8923617532827816,0.8424090105184772,0.7810157421289355,0.7197434204320348]","[0.7788267875125882,0.7131448852833059,0.6358182282358948,0.559583494022368]",12829,7792,10814,7944,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( and( not( and( expression( function( health or safety hazards)))), not( and( expression( function( corrosion that threatens), atom( variable( integrity of the tank or associated plant))))))), then( permission( and( expression( function( design), atom( variable( tank to withstand effects of associated load))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( and( not( and( health or safety hazards)), not( and( corrosion that threatens( integrity of the tank or associated plant)))))), then( permission( and( design( tank to withstand effects of associated load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.1897053773866165,0.9445481837862676,0.2924473371683005,0.9595473666087208,19.0,19.0,1.0,1.0,0.4485369609856263,0.9603439425051334,26.609076432750552,97.30789366443273,39.322446896809936,98.64248982753683,20.10795732761619,96.00892860421428,"[0.8560801144492132,0.7438953488372093,0.5935007385524372,0.46846846846846846]","[0.9955900040090871,0.9904415724286484,0.9812830598128306,0.97034708936868]",7792.0,7792.0,3495.0,7483.0,,
t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_44,72.1047957701809,0.7436468692428123,55.14410473815195,0.6399493534166583,finished,-,stefanfuchs164,,2023-04-06T06:23:39.000Z,3875,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3. parapet, cladding, material, corrugated steel, orientation, vertical, drained cavity, nzbc e2as1 t3","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( and( has( parapet, cladding), not( is( cladding. material, steel)), is( steel. type, vertical corrugated))), then( obligation( and( has( parapet, drained cavity), for( drained cavity, cladding))))","[""if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( steel))), expression( function( is), atom( relation( type), variable( steel)), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( for), atom( variable( drained cavity)), data( cladding)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( parapet, cladding), not( is( cladding. material, corrugated steel), is( corrugated steel. orientation, vertical)))), then( obligation( and( has( parapet, drained cavity), as per( drained cavity, nzbc e2as1 t3))))","if( and( expression( function( for), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( corrugated steel)), expression( function( is), atom( relation( orientation), variable( corrugated steel)), data( vertical))))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( as per), atom( variable( drained cavity)), data( nzbc e2as1 t3)))))","if( and( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), not( expression( function( is), atom( relation( health and safety hazards), variable( storage tank)), data( corrosion))), or( not( expression( function( threaten), atom( relation( integrity), variable( corrosion)), data( tank))), not( expression( function( threaten), atom( relation( integrity), variable( corrosion)), data( associated plant)))))), then( permission( and( expression( function( is), atom( relation( design), variable( storage tank)), data( withstand load)))))","if( and( is( storage tank. location, below ground), not( is( storage tank. health and safety hazards, corrosion)), not( threaten( corrosion. integrity, or( tank, associated plant)))), then( permission( and( is( storage tank. design, withstand load, impact)))))",0.8855785503376343,0.959280281602114,11,19,1,1,0.8916517265570193,0.9600872689938398,73.84428875409064,53.84261721498007,70.44536852978102,56.51007012020916,"[0.91520237783023,0.8721850809289233,0.817119589271488,0.762337430963834]","[0.7924074321614757,0.718691085375707,0.630579297245964,0.5515308911973756]",12829,7792,11439,7481,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( within), atom( relation( area), variable( disposal system)), data( access)), expression( function( for), atom( variable( access)), data( clean)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( blockage)))))","if( and( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( storage), variable( system)), data( treatment)))), then( obligation( and( expression( function( is), atom( variable( piping)), data( completed)), or( expression( function( is), atom( relation( type), variable( piping)), data( storage)), expression( function( is), atom( relation( type), variable( piping)), data( treatment))), or( expression( function( is), atom( relation( testing), variable( piping)), data( soil contamination)), expression( function( is), atom( relation( testing), variable( piping)), data( ground water contamination)), expression( function( is), atom( relation( testing), variable( piping)), data( waterway contamination))))))","if( exist( disposal system)), then( obligation( and( within( disposal system. area, access), for( access, and( clean, clearing, blockage)))))","if( and( is( system. type, industrial liquid waste), is( system. storage, treatment))), then( obligation( and( is( piping, completed), is( piping. type, or( storage, treatment)), is( piping. testing, or( soil contamination, ground water contamination, waterway contamination)))))",0.4787023655828986,0.7824695327935444,0.6603888457400264,0.9980730945655704,19.0,19.0,1.0,1.0,0.7067505133470225,0.9980749486652978,47.85595214484791,72.94249780052081,53.76060568650309,71.56827947347708,43.11998315758839,74.37052341494868,"[0.8576357363355729,0.7846661775495231,0.6883453770613304,0.5960314488955447]","[0.8675581843898675,0.8221963221963222,0.759619146993609,0.6971886495007882]",7792.0,7792.0,5507.0,7777.0,,
t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_44,70.24296808037637,0.720773389395433,55.73609145530618,0.6574732926348904,finished,-,stefanfuchs164,,2023-04-06T05:29:02.000Z,3273,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 3.1.4 Escape routes shall comply with NZBC D1. escape route, nzbc d1","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( and( expression( function( has), atom( relation( location), variable( storage tank)), data( below ground)), or( expression( function( is), atom( relation( precaution), variable( storage tank)), data( health and safety hazards)), expression( function( is), atom( relation( precaution), variable( storage tank)), data( corrosion))), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( for), atom( variable( integrity)), data( tank)), expression( function( for), atom( variable( tank)), data( associated plant)))), then( obligation( and( expression( function( has), atom( variable( storage tank)), data( design)), expression( function( for), atom( variable( design)), data( withstand load)))))","if( and( has( storage tank. location, below ground), is( storage tank. precaution, or( health and safety hazards, corrosion)), threaten( corrosion, integrity), for( integrity, tank), for( tank, associated plant))), then( obligation( and( has( storage tank, design), for( design, withstand load), for( design, withstand load)))))",0.8741471584042181,0.9863033555451812,19,19,1,1,0.8814404863980045,0.9863963039014374,71.77961239307598,54.26680776650669,68.77073719656278,57.28715149994368,"[0.9037849310222852,0.857880217139806,0.8001970266881605,0.7450202794051375]","[0.7959927140255009,0.7202201546324204,0.6293558606124604,0.5472676505783806]",12829,7792,11308,7686,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( area)))), then( obligation( and( expression( function( has), expression( function( area), atom( variable( access)))), expression( function( for), expression( function( sufficient for), expression( function( access), expression( function( and), atom( variable( cleaning)), data( clearing))))))))","if( and( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( variable( piping)), data( completed)), or( expression( function( has), atom( variable( system)), data( tank)), expression( function( has), atom( variable( system)), data( storage)), expression( function( has), atom( variable( system)), data( treatment))))), then( obligation( and( expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)), not( expression( function( has), atom( variable( system)), data( completed))))))","if( exist( area)), then( obligation( and( has( area( access)) for( sufficient for( access( and( cleaning, clearing, blockage)))))","if( and( is( system. type, industrial liquid waste), is( piping, completed), has( system, or( tank, storage, treatment)))), then( obligation( and( test( tank, and( soil contamination, ground water contamination, waterway contamination)), not( has( system, completed)))))",0.2800912126801977,0.7663712536557636,0.4191687205218935,0.886900039184016,19.0,19.0,1.0,1.0,0.5349075975359343,0.8928388090349076,34.621852211366914,77.09853458555374,46.005173190198896,79.04538764158916,27.754418898987872,75.24527658971539,"[0.8730806142034548,0.7592997811816192,0.6113849186791523,0.4918810891831127]","[0.9376167888457668,0.8997392060272384,0.8418285380458596,0.7850412249705536]",7792.0,7792.0,4168.0,6957.0,,
t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_43,65.73166901865413,0.6671917307051598,56.302337039414766,0.6629298854932102,finished,-,stefanfuchs164,,2023-04-06T05:27:46.000Z,3450,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Use 304 or 316 stainless steel fixings for corrosion zones B, C or hot dip galvanised fixings at 450 g/m2 for Zone B and Zone C. is( corrosion zone. type, or( 304, 316)), 304, 316, for( fixing, corrosion zone), for( fixing, corrosion zone), is( fixing. material, stainless steel), is( fixing. type, or( hot dip galvanised)), hot dip galvanised, less than equal( fixing. rate, 450 g/m2)","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( and( is( corrosion zone, or( b, c)), for( fixing, corrosion zone))), then( obligation( or( and( is( fixing. material, stainless steel), is( stainless steel. grade, or( 304, 306))), and( is( fixing. material, hot dip galvanized), is( fixing. weight, 450 g/m2)))))","[""if( and( or( expression( function( is), atom( variable( corrosion zone)), data( b)), expression( function( is), atom( variable( corrosion zone)), data( c))), expression( function( for), atom( variable( fixing)), data( corrosion zone)))), then( obligation( or( and( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel)), or( expression( function( is), atom( relation( grade), variable( stainless steel)), data( 304)), expression( function( is), atom( relation( grade), variable( stainless steel)), data( 306)))), and( expression( function( is), atom( relation( material), variable( fixing)), data( hot dip galvanized)), expression( function( is), atom( relation( weight), variable( fixing)), data( derivedunit( baseunit( kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 450.0)))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( corrosion zone. type, or( 304, 316)), for( fixing, corrosion zone), for( fixing, corrosion zone))), then( obligation( and( is( fixing. material, stainless steel), is( fixing. type, or( hot dip galvanised)), less than equal( fixing. rate, 450 g/m2))))","if( and( or( expression( function( is), atom( relation( type), variable( corrosion zone)), data( 304)), expression( function( is), atom( relation( type), variable( corrosion zone)), data( 316))), expression( function( for), atom( variable( fixing)), data( corrosion zone)))), then( obligation( and( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel)), or( expression( function( is), atom( relation( type), variable( fixing)), data( hot dip galvanised))), expression( function( less than equal), atom( relation( rate), variable( fixing)), data( derivedunit( baseunit( kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 450.0))))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( is), atom( relation( type), variable( tank)), data( freestanding)), expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( exist( tank)), then( obligation( and( is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8293600057070896,1.0,9,19,1,1,0.8423883389196352,1.0206622176591376,67.89170486984354,53.08331030452143,63.70484198798512,59.936977210546026,"[0.8917368372351254,0.8405365126676602,0.7789029535864979,0.7173872003020577]","[0.774676222809003,0.7092934920232971,0.6317735560372306,0.5563687724704673]",12829,7792,10807,7953,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if not, then it is possible to place storage tanks below ground if: and ( precautions are taken to avoid: i) or :op1 ( health or safety hazards) :op2 ( corrosion that threatens the integrity of the tank or associated plant))) and b)","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.0,0.9523511170477924,8.065119212278262e-62,0.9762364412268396,19.0,19.0,1.0,1.0,0.0070585215605749,0.9765143737166324,0.0,97.1876723501513,0.0,98.06123387970212,0.0,96.32953733950627,"[0,0,0,0]","[0.9900118280983048,0.9838496160974318,0.9719962661688224,0.956609349811929]",7792.0,7792.0,55.0,7609.0,,
t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_44,71.68516860079777,0.7344481387200051,56.5879432867693,0.6737646164757454,finished,-,stefanfuchs164,,2023-04-06T05:04:42.000Z,1457,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Parapets require a drained cavity for claddings except for vertical corrugated steel as outlined in Table 3. parapet, cladding, material, corrugated steel, orientation, vertical, drained cavity, nzbc e2as1 t3","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( and( has( parapet, cladding), not( is( cladding. material, steel)), is( steel. type, vertical corrugated))), then( obligation( and( has( parapet, drained cavity), for( drained cavity, cladding))))","[""if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( steel))), expression( function( is), atom( relation( type), variable( steel)), data( vertical corrugated)))), then( obligation( and( expression( function( has), atom( variable( parapet)), data( drained cavity)), expression( function( for), atom( variable( drained cavity)), data( cladding)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( has( parapet, cladding), not( is( cladding. material, corrugated steel), is( corrugated steel. orientation, vertical)))), then( obligation( and( has( cladding, drained cavity), as per( drained cavity, nzbc e2as1 t3))))","if( and( expression( function( has), atom( variable( parapet)), data( cladding)), not( expression( function( is), atom( relation( material), variable( cladding)), data( corrugated steel)), expression( function( is), atom( relation( orientation), variable( corrugated steel)), data( vertical))))), then( obligation( and( expression( function( has), atom( variable( cladding)), data( drained cavity)), expression( function( as per), atom( variable( drained cavity)), data( nzbc e2as1 t3)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), expression( function( has), atom( variable( storage tank)), data( precaution)), or( expression( function( avoid), atom( variable( precaution)), data( health and safety hazards)), expression( function( avoid), atom( variable( precaution)), data( corrosion))), expression( function( has), atom( variable( storage tank)), data( integrity)), expression( function( has), atom( variable( storage tank)), data( associated plant)), expression( function( has), atom( relation( design), variable( associated plant)), data( withstand load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), has( storage tank, precaution), avoid( precaution, or( health and safety hazards, corrosion)), has( storage tank, integrity), has( storage tank, associated plant), has( associated plant. design, withstand load))))",0.8700177803087705,1.0,15,19,1,1,0.8777769116844649,1.040554414784394,73.9963595368991,54.38159911442065,69.51397963068817,58.98088758641055,"[0.9206109581742296,0.8764075067024129,0.82120694307042,0.7664735698769009]","[0.801677355698076,0.7232087420836956,0.6351587896974243,0.5596122371899785]",12829,7792,11261,8108,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( waste disposal system)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( access point)), expression( function( for), atom( relation( cleaning), variable( access point)), data( clearing))), expression( function( for), atom( relation( maintenance), variable( disposal system)), data( access point))))","if( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( storage tank)), expression( function( is), atom( relation( type), variable( system)), data( treatment tank))), and( expression( function( is), atom( relation( type), variable( system)), data( piping))))), then( obligation( and( expression( function( test), atom( variable( system)), data( completion)), or( expression( function( avoid), atom( relation( contamination), variable( system)), data( soil contamination)), expression( function( avoid), atom( relation( contamination), variable( system)), data( ground water contamination)), expression( function( avoid), atom( relation( contamination), variable( system)), data( waterway))), or( expression( function( by), atom( variable( runoff)), data( washing down)), expression( function( by), atom( variable( runoff)), data( rain)), expression( function( by), atom( variable( runoff)), data( accidental overflow))))))","if( exist( waste disposal system)), then( obligation( and( has( waste disposal system, access point), for( access point. cleaning, clearing, blockage)), for( disposal system. maintenance, access point))))","if( and( is( system. type, or( industrial liquid waste, storage tank, treatment tank)), and( is( system. type, piping)))), then( obligation( and( test( system, completion), avoid( system. contamination, or( soil contamination, ground water contamination, waterway)), by( runoff, or( washing down, rain, accidental overflow)))))",0.5135805335735608,0.7202892191968785,0.7204494488103301,0.8974167151056578,19.0,19.0,1.0,1.0,0.7530800821355236,0.902335728952772,51.2649028180015,73.60756712983564,55.056880958301925,73.0330371076977,47.96160358963798,74.19120815245138,"[0.8466257668711656,0.7708584207810081,0.6740187565126781,0.5870594423987375]","[0.8835158583416299,0.8394495412844036,0.7785002167316861,0.718759102825517]",7792.0,7792.0,5868.0,7031.0,,
t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_43,70.14292703435146,0.7190177805649636,58.63588027181326,0.6564036284762798,finished,-,stefanfuchs164,,2023-04-06T05:01:25.000Z,1578,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a brick chimney stack – single skin (see Figure 2) 500 mm wide x 500 mm deep. is( chimney stack. material, brick), is( brick. type, skin), is( skin. type, single), define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm)","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( and( is( chimney stack. material, brick), is( brick. type, single skin))), then( obligation( and( define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm))))","[""if( and( expression( function( is), atom( relation( material), variable( chimney stack)), data( brick)), expression( function( is), atom( relation( type), variable( brick)), data( single skin)))), then( obligation( and( expression( function( define), atom( relation( width), variable( chimney stack)), data( x0)), expression( function( is), atom( relation(measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( chimney stack)), data( x1)), expression( function( is), atom( relation(measurement), variable( x1)), data( perpendicular building line)), expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))), expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( chimney stack. material, brick), is( brick. skin, skin), is( skin. type, single))), then( obligation( and( define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm))))","if( and( expression( function( is), atom( relation( material), variable( chimney stack)), data( brick)), expression( function( is), atom( relation( skin), variable( brick)), data( skin)), expression( function( is), atom( relation( type), variable( skin)), data( single)))), then( obligation( and( expression( function( define), atom( relation( width), variable( chimney stack)), data( x0)), expression( function( is), atom( relation(measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( chimney stack)), data( x1)), expression( function( is), atom( relation(measurement), variable( x1)), data( perpendicular building line)), expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))), expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8752867074966472,1.0,17,19,1,1,0.88245381557409,1.07379363449692,71.35368138396751,56.25840809761705,68.97257611598364,61.22316223651163,"[0.9000088331419486,0.8540444444444445,0.7977457733249843,0.7426179330212459]","[0.7711246563881917,0.7023580365736285,0.6241976504783819,0.5491343574737869]",12829,7792,11321,8367,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( expression( function( below), atom( relation( location), variable( storage tank)), data( ground))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( below( storage tank. location, ground)))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area, nzbc d1)))",0.568082644136428,0.7372062047207609,0.825470481786188,0.9439428100001808,19.0,19.0,1.0,1.0,0.8390657084188912,0.9454568788501028,52.46904662759723,72.77693697162596,55.35842687590314,74.21879606005051,49.86632157307388,71.39003267117656,"[0.8228816151728358,0.7457966990590776,0.6502800248911015,0.5620586850776714]","[0.8656169404099362,0.8140043763676149,0.755821964999311,0.6985559566787004]",7792.0,7792.0,6538.0,7367.0,,
t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_44,71.21800102332784,0.7487390189718558,55.86312635729234,0.6196646435622547,finished,-,stefanfuchs164,,2023-04-06T04:32:17.000Z,1942,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 2.2.4 For risk group VP firecells that require a fire sprinkler system (refer to Table 2.2d), the fire sprinkler system does not need to be extended throughout the remainder of the building where the risk group VP firecells are fire separated from the adjacent firecells. The fire separation between adjacent firecells is required to be provided with the greater of the property rating of the adjacent firecells (refer to Table 2.4). firecell, risk group, vp, fire separation, adjacent firecell, fire sprinkler system, nzbc cas2 t2.4, extension, remainder, building","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","if( and( is( firecell. risk group, vp), requires( firecell, fire sprinkler system), as per( fire sprinkler system, nzbc cas2 t2.2.d), has( firecell, fire separation), adjacent( firecells, firecell), towards( fire separation, firecells), define( max( firecells. property rating), x0), as per( property rating, nzbc cas2 t2.4), is( fire separation. fire resistance rating, x0))), then( permission( not( has( building. remainder, fire sprinkler system))))","[""if( and( expression( function( is), atom( relation( risk group), variable( firecell)), data( vp)), expression( function( requires), atom( variable( firecell)), data( fire sprinkler system)), expression( function( as per), atom( variable( fire sprinkler system)), data( nzbc cas2 t2.2.d)), expression( function( has), atom( variable( firecell)), data( fire separation)), expression( function( adjacent), atom( variable( firecells)), data( firecell)), expression( function( towards), atom( variable( fire separation)), data( firecells)), expression( function( define), expression( function( max), atom( relation( property rating), variable( firecells))), data( x0)), expression( function( as per), atom( variable( property rating)), data( nzbc cas2 t2.4)), expression( function( is), atom( relation( fire resistance rating), variable( fire separation)), data( x0)))), then( permission( not( expression( function( has), atom( relation( remainder), variable( building)), data( fire sprinkler system)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( firecell. risk group, vp), is( firecell. fire separation, adjacent firecell))), then( permission( not( and( include( firecell. fire separation, fire sprinkler system), as per( firecell. fire separation, nzbc cas2 t2.4), not( include( firecell. extension, remainder), part of( firecell. extension, building)))))","if( and( expression( function( is), atom( relation( risk group), variable( firecell)), data( vp)), expression( function( is), atom( relation( fire separation), variable( firecell)), data( adjacent firecell)))), then( permission( not( and( expression( function( include), atom( relation( fire separation), variable( firecell)), data( fire sprinkler system)), expression( function( as per), atom( relation( fire separation), variable( firecell)), data( nzbc cas2 t2.4)), not( expression( function( include), atom( relation( extension), variable( firecell)), data( remainder)), expression( function( part of), atom( relation( extension), variable( firecell)), data( building)))))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( is), atom( relation( location), variable( storage tank)), data( below ground)), or( expression( function( for), atom( variable( precaution)), data( health and safety hazards)), expression( function( for), atom( variable( precaution)), data( corrosion))), expression( function( for), atom( variable( corrosion)), data( integrity)), expression( function( for), atom( variable( integrity)), data( tank)), expression( function( for), atom( variable( tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( tank)), data( withstand load))))","if( exist( storage tank)), then( obligation( and( is( storage tank. location, below ground), for( precaution, or( health and safety hazards, corrosion)), for( corrosion, integrity), for( integrity, tank), for( tank, associated plant)), for( tank. design, withstand load))))",0.9189367352727869,1.0,14,19,1,1,0.9220516018395822,1.1099845995893225,72.20380957436488,54.32187396737312,70.25874865673852,57.49439128811904,"[0.8970327162059346,0.8493791461132846,0.7897664071190211,0.7324380165289256]","[0.73731067175396,0.6667442401675587,0.5849631104344771,0.5127298444130127]",12829,7792,11829,8649,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. system, type, industrial liquid waste, piping, completed, tank, storage, treatment, soil contamination, ground water contamination, waterway contamination","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( waste disposal system)))), then( obligation( and( expression( function( has), atom( relation( area), variable( waste disposal system)), data( access))), expression( function( for), expression( function( access), expression( function( and), atom( variable( cleaning)), data( clearing))))))","if( and( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( piping)), data( completed)))), then( obligation( and( expression( function( test), atom( variable( system)), data( tank)), expression( function( test), atom( variable( system)), data( storage)), expression( function( test), atom( variable( system)), data( treatment)), or( expression( function( avoid), atom( relation( contamination), variable( system)), data( soil contamination)), expression( function( avoid), atom( relation( contamination), variable( system)), data( ground water contamination)), expression( function( avoid), atom( relation( contamination), variable( system)), data( waterway contamination))))))","if( exist( waste disposal system)), then( obligation( and( has( waste disposal system. area, access)), for( access( and( cleaning, clearing, blockage)))))","if( and( is( system. type, industrial liquid waste), is( piping. type, completed))), then( obligation( and( test( system, and( tank, storage, treatment)), avoid( system. contamination, or( soil contamination, ground water contamination, waterway contamination)))))",0.3875807983289682,0.7909297551273702,0.5893456664197947,0.9743953860750614,19.0,19.0,1.0,1.0,0.6541324435318275,0.974717659137577,39.03527816316688,75.79747809403048,46.59751914395264,75.80682432396445,33.584844491710555,75.78813416840742,"[0.8446144791053561,0.738992463308211,0.6047724082614798,0.4955393349553934]","[0.892034233048058,0.8480106100795756,0.7874415497661991,0.7288021534320323]",7792.0,7792.0,5097.0,7595.0,,
t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_43,66.54837085763715,0.6675390061979781,57.70694289134662,0.6557435703461498,finished,-,stefanfuchs164,,2023-04-06T04:18:40.000Z,2562,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device. has( hot water pipe, insulation), comply with( insulation, nzbc h1.3.4), is( hot water pipe. connection, heat dissipation device)","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","if( not( connect( hot water pipe, heat dissipation device))), then( obligation( comply with( hot water pipe. insulation, nzbc h1 3.4)))","[""if( not( expression( function( connect), atom( variable( hot water pipe)), data( heat dissipation device)))), then( obligation( expression( function( comply with), atom( relation( insulation), variable( hot water pipe)), data( nzbc h1 3.4))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( has( hot water pipe, insulation)), then( obligation( and( comply with( insulation, nzbc h1.3.4), is( hot water pipe. connection, heat dissipation device))))","if( expression( function( has), atom( variable( hot water pipe)), data( insulation))), then( obligation( and( expression( function( comply with), atom( variable( insulation)), data( nzbc h1.3.4)), expression( function( is), atom( relation( connection), variable( hot water pipe)), data( heat dissipation device)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8709855613633034,0.9703069816769532,12,19,1,1,0.8786343440642295,0.9707392197125256,69.37149679848818,56.009776685016334,63.94603809432462,59.51017555651672,"[0.8468772178850248,0.8003749665208464,0.7427672955974842,0.6853241703589836]","[0.7843733474352195,0.7212678119589826,0.6456935873356587,0.5710231112312475]",12829,7792,11272,7564,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. for( vehicle access area, collection), is( collection. type, industrial liquid waste), comply with( vehicle access area. area, nzbc d1)","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( expression( function( for), atom( variable( vehicle access area)), data( collection))), then( obligation( and( expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)), expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1)))))","if not, then it is possible to place storage tank below ground if: condition ( and :li ""a"" :op1 ( prevent-01 :ARG1 ( or :op1 ( health hazard ) :op2 ( safety hazard) ) :op2 ( corrosion threatens integrity of tank or :op3 ( plant :ARG1-of ( associate-01 )))) ) ) )","if( for( vehicle access area, collection)), then( obligation( and( is( collection. type, industrial liquid waste), comply with( vehicle access area, nzbc d1))))",0.0,0.916802152088414,8.065119212278262e-62,0.9930457460898238,19.0,19.0,1.0,1.0,0.0070585215605749,0.993069815195072,0.0,93.41232161885496,0.0,93.5530828258714,0.0,93.27198335781974,"[0,0,0,0]","[0.9515378650814164,0.9360926721332812,0.9150498164656528,0.8913244420969233]",7792.0,7792.0,55.0,7738.0,,
t5-amr_0_ir-entities_ir_doc_split_esp20_e20_44,0.0,0.6860933624033528,0.0,0.4636374801063732,finished,-,stefanfuchs164,,2023-04-06T03:57:49.000Z,2065,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,extract LegalRuleML entities: B1AS1 B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade – two-edge support;.,"extract LegalRuleML entities: G14VM1 G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","structure, balustrade, design, two edge support, nzs 4223 3 t16","[""structure, balustrade, design, two edge support, nzs 4223 3 t16""]","[""storage tank, location, ground level, health hazard, safety hazard, corrosion resistance, design load, true load""]","storage tank, location, ground level, health hazard, safety hazard, corrosion resistance, design load, true load","structure, balustrade, design, two edge support, nzs 4223 3 t16","structure, balustrade, design, two edge support, nzs 4223 3 t16","storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load","storage tank, location, below ground, precaution, health and safety hazards, corrosion, integrity, tank, associated plant, design, withstand load",1.0,1.0,18,19,1,1,1.0032894736842106,1.0339539978094194,0.0,0.0,0.0,0.0,"[0.861639344262295,0.7675378266850069,0.6334056399132321,0.5289634146341463]","[0.7574152542372882,0.5905511811023622,0.394484412470024,0.26187419768934533]",1520,913,1525,944,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_1_ir-exp_ir_doc_split_esp20_e20_43,52.3486855845637,0.5183096604800429,44.04704631331949,0.4251292413136292,finished,-,stefanfuchs164,,2023-04-06T03:37:12.000Z,2485,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,extract LegalRuleML expressions: B1AS1 B1AS1 Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails.,extract LegalRuleML expressions: G14VM1 G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm), has( structure, rail), is( rail, interlinked)","[""is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm), has( structure, rail), is( rail, interlinked)""]","[""is( tank. type, free standing), has( tank, seismic resistance), as per( tank. seismic resistance, nzs 4219)""]","is( tank. type, free standing), has( tank, seismic resistance), as per( tank. seismic resistance, nzs 4219)","is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm), has( barrier, interlinking rail)","is( barrier. type, structural glass), greater than equal( barrier. fall, 1000 mm), has( barrier, interlinking rail)","exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)","exist( tank), is( tank. type, freestanding), against( tank. security, earthquake force), comply with( tank. security, nzs 4219)",0.8734804836037514,1.0,15,19,1,1,0.8808481216870246,1.053948397185301,54.087020854902704,40.951517122223706,50.7186097046467,47.64882571721433,"[0.8021978021978022,0.6531591575579845,0.535054347826087,0.4422277639235246]","[0.6739614243323442,0.4929950776221128,0.36272235112142304,0.27103911497431843]",4339,2558,3822,2696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_43,71.57081450600344,0.7680028211515868,56.5631717399779,0.6832777085319424,finished,-,stefanfuchs164,,2023-04-06T03:29:03.000Z,1723,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Use 304 or 316 stainless steel fixings for corrosion zones B, C or hot dip galvanised fixings at 450 g/m2 for Zone B and Zone C. corrosion zone, type, b, c, fixing, material, stainless steel, grade, 304, 316, hot dip galvanised, rate, 450 g/m2, zone, corrosion zone, zone b, zone c","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( and( is( corrosion zone, or( b, c)), for( fixing, corrosion zone))), then( obligation( or( and( is( fixing. material, stainless steel), is( stainless steel. grade, or( 304, 306))), and( is( fixing. material, hot dip galvanized), is( fixing. weight, 450 g/m2)))))","[""if( and( or( expression( function( is), atom( variable( corrosion zone)), data( b)), expression( function( is), atom( variable( corrosion zone)), data( c))), expression( function( for), atom( variable( fixing)), data( corrosion zone)))), then( obligation( or( and( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel)), or( expression( function( is), atom( relation( grade), variable( stainless steel)), data( 304)), expression( function( is), atom( relation( grade), variable( stainless steel)), data( 306)))), and( expression( function( is), atom( relation( material), variable( fixing)), data( hot dip galvanized)), expression( function( is), atom( relation( weight), variable( fixing)), data( derivedunit( baseunit( kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 450.0)))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( corrosion zone. type, or( b, c)), for( fixing, corrosion zone))), then( obligation( or( and( is( fixing. material, stainless steel), is( stainless steel. grade, or( 304, 316)), is( fixing. type, hot dip galvanised), less than equal( fixing. rate, 450 g/m2)))))","if( and( or( expression( function( is), atom( relation( type), variable( corrosion zone)), data( b)), expression( function( is), atom( relation( type), variable( corrosion zone)), data( c))), expression( function( for), atom( variable( fixing)), data( corrosion zone)))), then( obligation( or( and( expression( function( is), atom( relation( material), variable( fixing)), data( stainless steel)), or( expression( function( is), atom( relation( grade), variable( stainless steel)), data( 304)), expression( function( is), atom( relation( grade), variable( stainless steel)), data( 316))), expression( function( is), atom( relation( type), variable( fixing)), data( hot dip galvanised)), expression( function( less than equal), atom( relation( rate), variable( fixing)), data( derivedunit( baseunit( kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 450.0)))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( secured), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank, earthquake force), comply with( tank. secured, nzs 4219))))",0.9479466509276588,0.9918820111327572,9,19,1,1,0.949255592797568,0.9919147843942504,72.19641462549886,55.49380153844437,70.95596321049713,57.674565444553615,"[0.8911151256363935,0.8434789791029983,0.7860584911930873,0.7292101964061847]","[0.8224867382585069,0.7418556163669533,0.6508728179551122,0.567028027498678]",12829,7792,12178,7729,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( variable( precaution)), data( health hazard)), expression( function( for), atom( variable( precaution)), data( safety hazard))), or( expression( function( against), atom( variable( corrosion)), data( integrity)), expression( function( against), atom( variable( corrosion)), data( tank))))), and( expression( function( for), atom( relation( design), variable( tank)), data( withstand( load, impact)))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground), for( precaution, or( health hazard, safety hazard)), against( corrosion, or( integrity, tank), threaten( corrosion, associated plant)))), and( for( tank. design, withstand( load, impact)))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( access area, nzbc d1)))",0.5991139030843563,0.7775024205314928,0.8888972462893909,0.9250747276743352,19.0,19.0,1.0,1.0,0.894635523613963,0.9277464065708418,52.07429940587084,77.41409107593688,56.75132630801192,77.64729952391119,48.10947068259077,77.18227928501126,"[0.8112179027399226,0.7306246385193753,0.6354758781518729,0.547898912724067]","[0.9103610457877992,0.8716197379425704,0.8199185278831297,0.7669875424688561]",7792.0,7792.0,6971.0,7229.0,,
t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_45,70.02457223219423,0.7356600641085377,66.18552342139945,0.6983205169520226,finished,-,stefanfuchs164,,2023-04-06T02:45:15.000Z,3113,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened)), heat strengthened, toughened, has( safety barrier, edge), is( edge. support, or( structural sealant joint, continuous clamp)), structural sealant joint, continuous clamp, less than equal( edge. support, 2), has( edge. support, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. magnitude, 0.2 kN), is( pane. deflection, 250 mm), has( pane. resistance, concentrated load)","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( safety barrier, edge), or( is( edge. support, or( structural sealant joint, continuous clamp)), less than equal( edge. support, 2), has( edge. support, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. magnitude, 0.2 kN), is( pane. deflection, 250 mm), has( pane. resistance, concentrated load)))), then( permission( not( is( safety barrier. rail, interlinked))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( safety barrier)), data( edge)), or( expression( function( is), atom( relation( support), variable( edge)), data( structural sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp)), expression( function( less than equal), atom( relation( support), variable( edge)), data( 2)), expression( function( has), atom( relation( support), variable( edge)), data( pane)), expression( function( is), atom( relation( resistance), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( magnitude), variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))), expression( function( has), atom( relation( resistance), variable( pane)), data( concentrated load))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( in between), atom( relation( span), variable( underlay)), data( support)), expression( function( in between), atom( relation( span), variable( underlay)), data( nzbc r2)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), in between( underlay. span, and( support, nzbc r2)), less than equal( underlay. span, 1.2 m)))))",0.9032216373620712,1.0,18,19,1,1,0.9076161894719766,1.065652522017614,71.21207606036764,66.14184649352833,68.87602347376286,66.22925807171707,"[0.8927613941018767,0.8484575951074736,0.791545981173063,0.7339892502505239]","[0.7797896318557476,0.7313241181358109,0.6738304981773997,0.618844010078644]",12329,12490,11190,13310,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( and( expression( function( has), atom( variable( structure)), data( glazing)), expression( function( is), atom( relation( type), variable( glazing)), data( cantilevered glass)), expression( function( as per), atom( relation( design), variable( glazing)), data( nzbc b1as1 t14 to nzbc b2as1 t17)))), then( obligation( and( expression( function( has), atom( variable( glazing)), data( specific design)), or( not( expression( function( as per), atom( relation( design), variable( glazing)), data( nzbc b0as1 t14 to u b1as1 t17)))), expression( function( has), atom( variable( structure)), data( glazing)), not( expression( function( has), atom( variable( glazing)), data( cantilevered glass))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( obligation( and( expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if( and( has( structure, glazing), is( glazing. type, cantilevered glass), as per( glazing. design, and( nzbc b1as1 t14 to nzbc b2as1 t17)))), then( obligation( and( has( glazing, specific design), not( as per( glazing. design, or( nzbc b0as1 t14 to u b1as1 t17))), has( structure, glazing), not( has( glazing, and( cantilevered glass))))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level))), then( obligation( and( include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close))))",0.6557664167525231,0.9196674846987368,0.8030250858247007,1.0,19.0,19.0,1.0,1.0,0.8200960768614892,1.0190552441953562,63.37362638568224,95.50753080441892,69.01518986273908,95.8225809712077,58.58469142625731,95.1945455232825,"[0.9114517231279898,0.8552890287062525,0.7882387882387882,0.7237288135593221]","[0.9341609050911376,0.9265228727186536,0.9158588908310822,0.9024370755093888]",12490.0,12490.0,10243.0,12728.0,,
t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_43,70.52375613328373,0.7340640018551042,54.48034108612592,0.6452771472034734,finished,-,stefanfuchs164,,2023-04-06T02:42:49.000Z,2771,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails. barrier, material, glass, type, structural, fall, width, 1000 mm, interlinked rail","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. material, glass), is( glass. type, structural), has( barrier, fall), greater than equal( fall. width, 1000 mm))), then( obligation( has( barrier, interlinked rail)))","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( structural)), expression( function( has), atom( variable( barrier)), data( fall)), expression( function( greater than equal), atom( relation( width), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( expression( function( has), atom( variable( barrier)), data( interlinked rail))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( security)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( security, nzs 4219))))",0.9196105459686448,1.0,15,19,1,1,0.9226751890248656,1.049152977412731,71.43804485537831,53.28651130752804,69.63257444384493,55.728889857812106,"[0.8731097406437441,0.8282338942716301,0.775716117999145,0.7237611837577426]","[0.7713761467889908,0.6974137931034483,0.6095474271543707,0.5287141073657927]",12829,7792,11837,8175,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( expression( function( is), expression( function( storage tank placed below), atom( relation( location), variable( storage tank))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( is( storage tank placed below( storage tank. location)))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.359263656660073,0.7855947381215913,0.5133805130564191,0.9404133449565488,19.0,19.0,1.0,1.0,0.5999743326488707,0.9421201232032854,38.99992231320221,78.3862042285681,48.274494441717216,78.30058390976667,32.71471885019118,78.47201200098851,"[0.8785026737967915,0.7779220779220779,0.6510405257393209,0.5390243902439025]","[0.9080506742950551,0.8671424650013725,0.8134421241875259,0.7603121516164995]",7792.0,7792.0,4675.0,7341.0,,
t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_43,72.07583818408428,0.7554441456146873,56.28832731423196,0.6032355528718166,finished,-,stefanfuchs164,,2023-04-06T02:18:26.000Z,1460,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 Drains shall be capable of handling the rainfall during a storm. No drain shall have an internal diameter of less than 85 mm. drain, rainfall, storm drain, internal diameter, 85 mm","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( exist( drain)), then( obligation( and( for( drain, storm water), greater than equal( drain. internal diameter, 85 mm))))","[""if( expression( function( exist), atom( variable( drain)))), then( obligation( and( expression( function( for), atom( variable( drain)), data( storm water)), expression( function( greater than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( drain, rainfall), is( drain, storm drain))), then( obligation( less than equal( drain. internal diameter, 85 mm)))","if( and( expression( function( is), atom( variable( drain)), data( rainfall)), expression( function( is), atom( variable( drain)), data( storm drain)))), then( obligation( expression( function( less than equal), atom( relation( internal diameter), variable( drain)), data( baseunit( prefix( milli), kind( metre)), value( 85.0)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( secured)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( secured, nzs 4219))))",0.907162480787487,1.0,13,19,1,1,0.9112167744952842,1.111011293634497,73.22507255612433,55.76467939281562,70.96211983085308,56.821902897688624,"[0.9080410607356716,0.8638437042774766,0.8100969864911673,0.7568179837936743]","[0.713411112394594,0.6495001162520344,0.5723645723645724,0.4992934526613283]",12829,7792,11690,8657,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.4633946182915008,0.7506585457143042,0.6201978928668639,0.886185893285299,19.0,19.0,1.0,1.0,0.6767197125256673,0.8921971252566735,49.66953119454221,77.47434156125532,59.76038044331401,77.86017121662255,42.49417073559697,77.09231694438976,"[0.8761615778494216,0.8060559601379839,0.7119891535928724,0.619812059514487]","[0.916283084004603,0.8806727562708424,0.8263665594855305,0.7720642404597023]",7792.0,7792.0,5273.0,6952.0,,
t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_45,66.90652931657336,0.716018597208738,64.54055113702137,0.7187435085629174,finished,-,stefanfuchs164,,2023-04-06T01:13:09.000Z,5523,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G14VM1 1.4.1 Collection facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. exist( collection facility), has( collection facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)), cleaning, blockage clearing, maintenance","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( exist( collection facility)), then( obligation( and( has( collection facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( collection facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( collection facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( exist( collection facility)), then( obligation( and( has( collection facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( collection facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( collection facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m))))",0.8993909212925784,0.9278632544054564,7,19,1,1,0.9041284775732014,0.9303442754203364,67.80137096347231,65.12685225869767,66.03500020882605,63.96471212186702,"[0.8860680003588409,0.8347778981581798,0.7693775556565198,0.7058715931955368]","[0.8690189328743546,0.814356221317863,0.7469071266771214,0.6811606908038923]",12329,12490,11147,11620,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( obligation( and( expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))",if and/or: 14 :op1 ( glazing ) :op2 ( glass :mod ( cantilevered) ) :op3 ( fixed-02 :ARG1 ( balustrade :mod ( structure ) ) :ARG2 ( point :quant 2 ) ) :op4 ( support :mod structure :mod 2 ) :op5 ( support :mod 3 :mod structure ) :op6 ( require specific design :mod ( glass types :ARG1-of ( show-01 :polarity - :ARG0 ( table_0 :mod 14 ) ) ) ) ),"if( and( is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level))), then( obligation( and( include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.0,0.9260756234993176,1.0843428223518904e-76,0.9418476529271164,19.0,19.0,1.0,1.0,0.0056845476381104,0.9434747798238592,0.0,97.05659087393308,0.0,98.71833820000468,0.0,95.44986251225536,"[0,0,0,0]","[0.9947386286490156,0.9889012208657048,0.9802439443394606,0.9693198513525192]",12490.0,12490.0,71.0,11784.0,,
t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_43,69.28837696812343,0.7439554110308922,54.672556775573455,0.5380572911999884,finished,-,stefanfuchs164,,2023-04-06T01:08:07.000Z,2103,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above). timber, moisture content, measurement, procedure, new zealand forest research institute, measurement, electrical resistance type moisture meters, insulation probe, nzs 1080.1 appendix e, inserting probe, depth, '1/3', board end, distance, 200 mm, correction factor, species, temperature, treatment type","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( for( timber. moisture content, measurement), is( measurement. procedure, new zealand forest research institute))), then( obligation( and( by( measurement, electrical resistance type moisture meters), by( measurement, insulation probe), comply with( insulation probe, nzs 1080.1 appendix e), define( moisture content. depth, x0), greater than equal( moisture content. depth, '1/3'), relative( timber. depth, board end), greater than equal( timber. distance, 200 mm), by( timber. depth, correction factor), for( correction factor, and( species, temperature, treatment type))))))","if( and( expression( function( for), atom( relation( moisture content), variable( timber)), data( measurement)), expression( function( is), atom( relation( procedure), variable( measurement)), data( new zealand forest research institute)))), then( obligation( and( expression( function( by), atom( variable( measurement)), data( electrical resistance type moisture meters)), expression( function( by), atom( variable( measurement)), data( insulation probe)), expression( function( comply with), atom( variable( insulation probe)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( moisture content)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( moisture content)), data( '1/3')), expression( function( relative), atom( relation( depth), variable( timber)), data( board end)), expression( function( greater than equal), atom( relation( distance), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( by), atom( relation( depth), variable( timber)), data( correction factor)), expression( function( for), atom( variable( correction factor)), data( species)), expression( function( for), atom( variable( correction factor)), data( temperature)), expression( function( for), atom( variable( correction factor)), data( treatment type)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( secured)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( secured, nzs 4219))))",0.9102240762792522,1.0,18,19,1,1,0.9140229168290592,1.243069815195072,70.24412853161638,53.95820378424363,68.35828446613169,55.40607818498808,"[0.9002217294900222,0.8513084513084513,0.7926450276243094,0.7346477894553982]","[0.644848234565352,0.5818710414287197,0.5079365079365079,0.4397647305955257]",12829,7792,11726,9686,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( has), expression( function( tank), expression( function( tank), atom( variable( tank))))), expression( function( to), expression( function( and), expression( function( above), expression( function( tank), expression( function( tank), atom( variable( tank)))), data( for( tank( tank( tank))))))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( exist( tank)), then( obligation( and( has( tank( tank( tank))) to( and( above( tank( tank( tank)), for( tank( tank( tank))), not( is( tank( tank( tank( tank)):ARG1-of( associate( tank( plant)))))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.3483858668787695,0.7827371515192173,0.5441186529612452,0.9603482111244988,19.0,19.0,1.0,1.0,0.6216632443531828,0.9611139630390144,36.40240626379039,75.6519877417417,46.14274139025144,75.45913184614778,30.05752229318679,75.845831952381,"[0.8263831544178365,0.7214449780747546,0.5893536121673004,0.4783073306262022]","[0.887701962878889,0.8478611783696529,0.7930613904323079,0.7393500819224468]",7792.0,7792.0,4844.0,7489.0,,
t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_43,70.21092596617021,0.7488937553423324,55.82275848176541,0.6382552041753871,finished,-,stefanfuchs164,,2023-04-06T00:10:04.000Z,2235,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; All structural glass barriers safeguarding a fall of 1000 mm or more shall have interlinking rails. barrier, material, glass, type, structural, fall, width, 1000 mm, interlinked rail","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( and( is( structure. material, glass), is( structure, safety barrier), against( safety barrier, fall), greater than equal( fall. height, 1000 mm))), then( obligation( and( has( structure, rail), is( rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( structure)), data( glass)), expression( function( is), atom( variable( structure)), data( safety barrier)), expression( function( against), atom( variable( safety barrier)), data( fall)), expression( function( greater than equal), atom( relation( height), variable( fall)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( structure)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( barrier. material, glass), is( glass. type, structural), less than equal( barrier. fall, 1000 mm))), then( obligation( and( has( barrier, interlinked rail))))","if( and( expression( function( is), atom( relation( material), variable( barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( structural)), expression( function( less than equal), atom( relation( fall), variable( barrier)), data( baseunit( prefix( milli), kind( metre)), value( 1000.0))))), then( obligation( and( expression( function( has), atom( variable( barrier)), data( interlinked rail)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( secured)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( secured, nzs 4219))))",0.9095444572291008,1.0,15,19,1,1,0.9133993296437758,1.0718685831622177,71.84477209775004,55.246345992483455,68.64973915361422,56.41132578216602,"[0.9070660522273426,0.8566154374517043,0.7984623358673116,0.7408083441981748]","[0.7576628352490421,0.6879595034349765,0.604343605920893,0.5268107976059607]",12829,7792,11718,8352,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( variable( ground)), data( health and safety hazards))), and( expression( function( has), atom( variable( storage tank)), data( corrosion)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( has), atom( variable( storage tank)), data( associated plant))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( access route)), expression( function( comply with), atom( variable( access route)), data( nzbc d1))))","if( exist( storage tank)), then( obligation( and( below( storage tank. location, ground), for( ground, or( health and safety hazards)), and( has( storage tank, corrosion), threaten( corrosion, integrity), has( storage tank, associated plant)))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area, access route), comply with( access route, nzbc d1)))",0.5148418037214214,0.7995658167534804,0.7224044852887177,0.9831762769913576,19.0,19.0,1.0,1.0,0.7546201232032854,0.9833162217659136,51.25145226100398,75.06817518745777,56.323563405756005,73.79033595568806,47.017390755841895,76.39105143149493,"[0.8454081632653061,0.7697854077253219,0.6750433275563258,0.5872265966754155]","[0.8901070216653615,0.8482976206125936,0.7907838983050848,0.7325596905428838]",7792.0,7792.0,5880.0,7662.0,,
t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_45,66.19072599358742,0.7209206416263707,63.84302620191266,0.7177726773878033,finished,-,stefanfuchs164,,2023-04-06T00:07:27.000Z,3939,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8. exist( storage water heater), is( storage water heater. type, open vented), has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8)","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( exist( storage water heater)), then( obligation( and( is( storage water heater. type, open vented), has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( exist), atom( variable( storage water heater)))), then( obligation( and( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented)), expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)))))",0.924186449916881,0.9428637401842188,13,19,1,1,0.9269202692838024,0.944435548438751,66.25353036705374,63.88286825117462,66.12804057691633,63.80323381853257,"[0.8690934546727337,0.81852601919521,0.7535885167464115,0.6906821221578243]","[0.8570701932858596,0.8023027718550106,0.7333962587952634,0.6659759993093326]",12329,12490,11428,11796,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( and( expression( function( structure design 7.0)), expression( function( cantilevered glass))), or( and( expression( function( structural balustrade - two edge point fixed))), and( expression( function( table 16 - Structural balustrade - two edge support)))), and( expression( function( table 17 - Structural balaustrade - three edge support)))), then( obligation( and( expression( function( specific design)), expression( function( not shown in nzbc b1st 14 to 17)))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( obligation( and( expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if( and( structure design 7.0, cantilevered glass), or( and( structural balustrade - two edge point fixed), and( table 16 - Structural balustrade - two edge support)), and( table 17 - Structural balaustrade - three edge support)))), then( obligation( and( specific design, not shown in nzbc b1st 14 to 17))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level))), then( obligation( and( include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.1869538033221778,0.944005986443086,0.2687913278520836,0.973062345915751,19.0,19.0,1.0,1.0,0.4321857485988791,0.9734187349879904,30.61927237680863,97.62830013630769,45.19353059268059,98.07000991018464,23.15282279087603,97.19055146523075,"[0.889218228973694,0.7878730993054252,0.6436453576864536,0.5189971070395372]","[0.9819049185721336,0.9758418135186564,0.9671271637816246,0.955881121808288]",12490.0,12490.0,5398.0,12158.0,,
t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_43,69.38355248200682,0.7324636996065672,55.01405951482404,0.6209654877369705,finished,-,stefanfuchs164,,2023-04-05T23:54:37.000Z,924,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above). timber, moisture content, measurement, procedure, new zealand forest research institute, measurement, electrical resistance type moisture meters, insulation probe, nzs 1080.1 appendix e, inserting probe, depth, '1/3', board end, distance, 200 mm, correction factor, species, temperature, treatment type","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, freestanding, secured, earthquake force, nzs 4219","if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( has( timber, moisture content), is( moisture content. measurement, procedure), is( measurement. procedure, new zealand forest research institute), has( timber, moisture content), has( timber, insulation probe))), then( obligation( and( by( measurement, electrical resistance type moisture meters), as per( measurement, nzs 1080.1 appendix e), define( timber. depth, '1/3'), relative to( inserting probe, timber), greater than equal( distance, 200 mm), define( timber. depth, x0), has( timber. correction factor), for( correction factor, and( species, temperature, treatment type)))))","if( and( expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( is), atom( relation( measurement), variable( moisture content)), data( procedure)), expression( function( is), atom( relation( procedure), variable( measurement)), data( new zealand forest research institute)), expression( function( has), atom( variable( timber)), data( insulation probe)))), then( obligation( and( expression( function( by), atom( variable( measurement)), data( electrical resistance type moisture meters)), expression( function( as per), atom( variable( measurement)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( timber)), data( '1/3')), expression( function( relative to), atom( variable( inserting probe)), data( timber)), expression( function( greater than equal), atom( variable( distance)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( has), atom( relation( correction factor), variable( timber))), expression( function( for), atom( variable( correction factor)), data( species)), expression( function( for), atom( variable( correction factor)), data( temperature)), expression( function( for), atom( variable( correction factor)), data( treatment type)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( secured)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( secured, nzs 4219))))",0.891985352394626,1.0,18,19,1,1,0.8974199080208902,1.0868839835728952,70.78566587993095,54.02061909738292,68.03590597585594,56.044723253873975,"[0.9029792408581604,0.8542212899842685,0.7965878110984083,0.74]","[0.740701381509033,0.6682909436653197,0.587031941619811,0.5116811175337187]",12829,7792,11513,8469,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. vehicle access area, collection, type, industrial liquid waste, area, nzbc d1","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( below), atom( relation( location), variable( storage tank)), data( ground)))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( and( below( storage tank. location, ground))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.3182116664800646,0.7733626277331763,0.4648258428437724,0.9309896203295502,19.0,19.0,1.0,1.0,0.5662217659137577,0.9332648870636552,38.17218857852249,76.38772492363788,49.82783652902628,76.45383542301931,30.93574784426922,76.3217286584754,"[0.8603807796917498,0.765664448014689,0.6366806136680614,0.5236637626559925]","[0.9074532453245324,0.8650408757101289,0.8074560178721027,0.7512311805262417]",7792.0,7792.0,4412.0,7272.0,,
t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_45,66.04293416746475,0.7162815839197465,63.75860697748587,0.7063444144523875,finished,-,stefanfuchs164,,2023-04-05T23:48:04.000Z,1160,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 Roof Framing 6.2.7 The centre of all fixings must be no closer than 10 fixing diameters from the end of a piece of timber. has( roof framing, fixing), define( end of( piece of timber), x0), define( end of( timber. piece), x1), define( fixing. centre, x1), greater than equal( fixing. centre, 'x0 + 10')","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( has( timber section, fixing)), then( obligation( and( define( fixing. centre, x0), define( timber section. end, x1), in between( distance, and( x0, x1)), define( fixing. diameter, x2), greater than equal( distance, '10 * x2'))))","[""if( expression( function( has), atom( variable( timber section)), data( fixing))), then( obligation( and( expression( function( define), atom( relation( centre), variable( fixing)), data( x0)), expression( function( define), atom( relation( end), variable( timber section)), data( x1)), expression( function( in between), atom( variable( distance)), data( x0)), expression( function( in between), atom( variable( distance)), data( x1)), expression( function( define), atom( relation( diameter), variable( fixing)), data( x2)), expression( function( greater than equal), atom( variable( distance)), data( '10 * x2')))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( has( roof framing, fixing)), then( obligation( and( define( end of( piece of timber), x0), define( end of( timber. piece), x1), define( fixing. centre, x1), greater than equal( fixing. centre, 'x0 + 10'))))","if( expression( function( has), atom( variable( roof framing)), data( fixing))), then( obligation( and( expression( function( define), expression( function( end of), atom( variable( piece of timber))), data( x0)), expression( function( define), expression( function( end of), atom( relation( piece), variable( timber))), data( x1)), expression( function( define), atom( relation( centre), variable( fixing)), data( x1)), expression( function( greater than equal), atom( relation( centre), variable( fixing)), data( 'x0 + 10')))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m))))",0.9208660090717437,0.9269187216616912,9,19,1,1,0.9238381052802336,0.9294635708566852,66.25711190476783,63.96749080321998,65.83013663817034,63.551082918578906,"[0.8681299385425812,0.8164148776393675,0.7510668563300142,0.6876621633712088]","[0.856921354121802,0.8022187554168834,0.7342809802040638,0.668041418041418]",12329,12490,11390,11609,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( obligation( and( expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if and/or ( and/or ( design type :mod ( glass type :ARG1-of ( show-01 :polarity - :location ( table 14 to 17))))))), then and/or ( require specific design))","if( and( is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level))), then( obligation( and( include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close))))",2.130766152485487e-35,0.9354222014576146,4.601469415736104e-35,0.9572377191517848,19.0,19.0,1.0,1.0,0.0124899919935948,0.9581265012009608,0.1644905931942017,97.32783882401051,0.3219315895372233,98.13418010903835,0.1104667219000276,96.53464051132158,"[0.4166666666666667,0.6470588235294118,0.4880952380952381,0.3493975903614458]","[0.9915601236734352,0.9841123066577,0.973615221987315,0.9598434575463672]",12490.0,12490.0,156.0,11967.0,,
t5-amr_0_ir-entities_ir_doc_split_esp20_e20_43,0.0,0.6762334023810584,0.0,0.4625077207897894,finished,-,stefanfuchs164,,2023-04-05T23:44:29.000Z,605,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,extract LegalRuleML entities: B1AS3 B1AS3 1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a brick chimney stack – single skin (see Figure 2) 500 mm wide x 500 mm deep.,extract LegalRuleML entities: G14VM1 G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"chimney stack, material, brick, type, single skin, width, measurement, along building line, depth, perpendicular building line, 500 mm","[""chimney stack, material, brick, type, single skin, width, measurement, along building line, depth, perpendicular building line, 500 mm""]","[""tank, type, free standing, seismic resistance, nzs 4219""]","tank, type, free standing, seismic resistance, nzs 4219","chimney stack, material, brick, type, single skin, width, measurement, along building line, depth, perpendicular building line, 500 mm, 500 mm","chimney stack, material, brick, type, single skin, width, measurement, along building line, depth, perpendicular building line, 500 mm, 500 mm","tank, type, freestanding, secured, earthquake force, nzs 4219","tank, type, freestanding, secured, earthquake force, nzs 4219",1.0,1.0,17,19,1,1,1.0039473684210527,1.0427163198247535,0.0,0.0,0.0,0.0,"[0.8571428571428571,0.763573883161512,0.6242774566473989,0.5118050266565118]","[0.7615546218487395,0.5930880713489409,0.3966745843230404,0.2554002541296061]",1520,913,1526,952,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_45,69.94986204232389,0.7491975322949909,66.56765396932427,0.7235691436547256,finished,-,stefanfuchs164,,2023-04-05T22:45:32.000Z,3741,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened)), heat strengthened, toughened, has( safety barrier, edge), is( edge. support, or( structural sealant joint, continuous clamp)), structural sealant joint, continuous clamp, less than equal( edge. support, 2), has( edge. support, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. magnitude, 0.2 kN), is( pane. deflection, 250 mm), has( pane. resistance, concentrated load)","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( glass, edge), is( edge. support, or( structural sealant joint, continuous clamp)), less than equal( edge. support, 2), has( edge, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. magnitude, 0.2 kN), is( pane. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( glass)), data( edge)), or( expression( function( is), atom( relation( support), variable( edge)), data( structural sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( less than equal), atom( relation( support), variable( edge)), data( 2)), expression( function( has), atom( variable( edge)), data( pane)), expression( function( is), atom( relation( resistance), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( magnitude), variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( or( and( expression( function( has), atom( variable( underlay)), data( self supporting)), expression( function( in between), atom( relation( span), variable( underlay)), data( r1)), expression( function( in between), atom( relation( span), variable( underlay)), data( supports))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( or( and( has( underlay, self supporting), in between( underlay. span, and( r1, supports), less than equal( underlay. span, 1.2 m))))))",0.9866091669126122,0.9004858070138503,18,19,1,1,0.9866980290372293,0.9051240992794236,70.51820082940773,68.63294780189058,69.3906110228722,64.62302618208597,"[0.8335388409371147,0.7913014718042004,0.7376694668551942,0.6834002677376171]","[0.8974789915966387,0.8424425850097917,0.7752396309235868,0.7112333213126578]",12329,12490,12165,11305,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( has), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( type), variable( balustrade)), data( cantilevered glass)), expression( function( as per), atom( relation( design), variable( balustrade)), data( nzbc b1as1 t14)), expression( function( has), atom( variable( balustrade)), data( two edge point fixed)), expression( function( as per), atom( variable( balustrade)), data( nzbc b1)), and( expression( function( has), atom( variable( structure)), data( support)), expression( function( is), atom( relation( type), variable( support)), data( two edge)), expression( function( as per), atom( variable( support)), data( in between( design, and( t14 to t17)))), expression( function( as per), atom( variable( support)), data( not( include( balustrade, three edge support))))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( restraint)), expression( function( is), atom( relation( elevation), variable( restraint)), data( roof level)))), then( obligation( and( expression( function( include), atom( variable( fixing)), data( u strap)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( thickness), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if( exist( structure)), then( obligation( and( has( structure, balustrade), is( balustrade. type, cantilevered glass), as per( balustrade. design, nzbc b1as1 t14), has( balustrade, two edge point fixed), as per( balustrade, nzbc b1,as1), and( has( structure, support), is( support. type, two edge), as per( support, and( in between( design, and( t14 to t17)), not( include( balustrade, three edge support)))))))","if( and( is( chimney. material, brick), has( chimney, restraint), is( restraint. elevation, roof level))), then( obligation( and( include( fixing, u strap), is( u strap. material, mild steel), is( u strap. thickness, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close))))",0.6502104428328731,0.8399959778131704,0.7996747817817449,0.9850779156010968,19.0,19.0,1.0,1.0,0.8172938350680544,0.9851881505204164,62.95467812560396,85.83747045363683,68.20902211336097,86.72855053377084,58.451950411560205,84.96451470714014,"[0.913205329153605,0.8541974943277104,0.7828333002185576,0.7157578789394697]","[0.8916700528240553,0.8690534575772437,0.8404176601167476,0.8118590803837248]",12490.0,12490.0,10208.0,12305.0,,
t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_45,69.76699906469109,0.7434195451380037,71.03896741980284,0.7485894979409696,finished,-,stefanfuchs164,,2023-04-05T22:38:11.000Z,3659,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 8.0 Small Chimneys; See Acceptable Solution B1/AS3. chimney, size, small, design, nzbc b1as1","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( is( structure, chimney), is( chimney. size, small))), then( as per( chimney. design, nzbc b1as3))","[""if( and( expression( function( is), atom( variable( structure)), data( chimney)), expression( function( is), atom( relation( size), variable( chimney)), data( small)))), then( expression( function( as per), atom( relation( design), variable( chimney)), data( nzbc b1as3)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( chimney. size, small)), then( permission( comply with( chimney. design, nzbc b1as1)))","if( expression( function( is), atom( relation( size), variable( chimney)), data( small))), then( permission( expression( function( comply with), atom( relation( design), variable( chimney)), data( nzbc b1as1))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( or( and( expression( function( define), atom( relation( underlay), variable( roof)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay))), expression( function( in between), atom( relation( laid), variable( underlay)), data( supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( or( and( define( roof. underlay. type, r2), is( underlay. self supporting), in between( underlay. laid, supports), less than equal( underlay. span, 1.2 m)))))",0.948938356903095,0.9210614017522492,17,19,1,1,0.9501987184686512,0.9240192153722978,71.13045875439907,72.00664042134228,68.45482705166987,70.09695799751442,"[0.861288945795988,0.8156990724836826,0.7599585241510413,0.7055294731351069]","[0.9026080928862316,0.8476896251089799,0.7854197736643566,0.72607697740113]",12329,12490,11715,11541,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( as per), atom( relation( design), variable( structure)), data( nzbc b1as1 t14)), not( expression( function( is), atom( relation( balustrade), variable( structure)), data( cantilevered glass))), expression( function( as per), atom( relation( balustrade), variable( structure)), data( two edge point fixed))), expression( function( as per), atom( variable( structural balustrade)), data( nzbc b1.16))), and( expression( function( as per), atom( relation( construction balustrade), variable( structure)), data( nzbC b1as1 t17))), expression( function( has), atom( relation( balustrade), variable( structure)), data( three edge support)))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)))), then( obligation( and( expression( function( is), atom( relation( type), variable( restraint)), data( u strap)), expression( function( is), atom( relation( type), variable( u strap)), data( wall tie)), expression( function( is), atom( relation( material), variable( wall tie)), data( mild steel)), expression( function( is), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( is), atom( relation( depth), variable( chimney)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( chimney)), data( close)))))","if( exist( structure)), then( obligation( and( as per( structure. design, nzbc b1as1 t14), not( is( structure. balustrade, cantilevered glass)), as per( structure. balustrade, two edge point fixed)), as per( structural balustrade, nzbc b1.16, two edge support)), and( as per( structure. construction balustrade, nzbC b1as1 t17)), has( structure. balustrade, three edge support))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( chimney. elevation, roof level))), then( obligation( and( is( restraint. type, u strap), is( u strap. type, wall tie), is( wall tie. material, mild steel), is( u strap. length, 50 mm), is( chimney. depth, 1 mm), is( chimney. spacing, close))))",0.6302633124727005,0.8038873926071214,0.7857966510481449,0.9124770185852202,19.0,19.0,1.0,1.0,0.8057646116893514,0.9160928742994396,60.07714258888063,82.03026865520015,65.88708671312544,83.89199121958491,55.20881209445025,80.24938249436686,"[0.9084856915739268,0.845892124487141,0.7713162668816771,0.6982032280986702]","[0.9320048942492573,0.904845660012312,0.8656637168141593,0.8251847893846291]",12490.0,12490.0,10064.0,11442.0,,
t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_45,66.9353169996723,0.7144332171489756,64.88520281972302,0.7063178296802607,finished,-,stefanfuchs164,,2023-04-05T22:18:28.000Z,1621,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 2.3.11 Structural framing members connected to building elements with an FRR shall be rated at no less than the building elements to which they are connected. is( framing. material, structural), connect( framing, building element), has( framing, rating), greater than equal( rating. value, building element)","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","if( and( has( building, structural framing member), has( building, element), connect( building. structural framing member, element), has( element, fire resistance rating))), then( obligation( greater than equal( structural framing member. fire resistance rating, fire resistance rating)))","[""if( and( expression( function( has), atom( variable( building)), data( structural framing member)), expression( function( has), atom( variable( building)), data( element)), expression( function( connect), atom( relation( structural framing member), variable( building)), data( element)), expression( function( has), atom( variable( element)), data( fire resistance rating)))), then( obligation( expression( function( greater than equal), atom( relation( fire resistance rating), variable( structural framing member)), data( fire resistance rating))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( framing. material, structural)), then( obligation( and( connect( framing, building element), has( framing, rating), greater than equal( rating. value, building element))))","if( expression( function( is), atom( relation( material), variable( framing)), data( structural))), then( obligation( and( expression( function( connect), atom( variable( framing)), data( building element)), expression( function( has), atom( variable( framing)), data( rating)), expression( function( greater than equal), atom( relation( value), variable( rating)), data( building element)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m))))",0.9097831489900412,0.9031227672935488,15,19,1,1,0.9136182983210316,0.9075260208166532,67.49255434715786,66.19197112061147,66.3872057186654,63.6290323050108,"[0.8729580965909091,0.8229250424372375,0.7591260564646646,0.6973124604108225]","[0.8786943096603441,0.8226207386363636,0.7538640221567051,0.6865671641791045]",12329,12490,11264,11335,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), u strap, wall tie, is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( obligation( and( expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if not, then, obligation to comply with x0 ( and :op1 14 :op2 15 :op3 15 :op4 15 :op5 16 :op6 16 :op7 16 :op8 17 :op9 17 :op10 17 ) ) :ARG1 ( and :op1 ( design :mod ( structure ) ) :op2 ( glass :ARG1-of ( cantilevered ) ) ) )","if( and( is( chimney. material, brick), has( chimney, fixing), is( fixing. elevation, roof level))), then( obligation( and( include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.0,0.8937365205720136,1.0843428223518904e-76,0.9270046224569451,19.0,19.0,1.0,1.0,0.0056845476381104,0.9295436349079264,0.0,95.00357063724375,0.0,97.12104063951,0.0,92.97646231375526,"[0,0,0,0]","[0.983634797588286,0.9720079729612618,0.9583188001395186,0.9429674475739228]",12490.0,12490.0,71.0,11610.0,,
t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_45,70.23032105104785,0.7442810262392955,69.41608354103896,0.743154162986519,finished,-,stefanfuchs164,,2023-04-05T21:52:04.000Z,2764,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). safety barrier, material, glass, type, laminated, heat strengthened, toughened, edge, 2, support, structural sealant joint, continuous clamp, panes, laminate, fractured, resistance, concentrated load, 0.2 kN, deflection, 250 mm, rail, interlinked","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( safety barrier. edge, 2), is( edge. support, or( structural sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( edge. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( rail. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( relation( edge), variable( safety barrier)), data( 2)), or( expression( function( is), atom( relation( support), variable( edge)), data( structural sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( edge)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( rail)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( type)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( or( and( expression( function( for), atom( variable( underlay)), data( roof)), expression( function( for), atom( variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( laid)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))","if( and( is( roof. underlay, type), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( or( and( for( underlay, roof), for( underlay, r2), is( underlay. self supporting, laid), less than equal( underlay. span, 1.2 m)))))",0.9113733014700268,0.9575716082522896,18,19,1,1,0.9150782707437748,0.9584467574059248,71.8722727223408,70.18979291887402,68.66171587325599,68.65924554587176,"[0.8933699698634994,0.8486308090268486,0.7938061041292639,0.7390911554792664]","[0.8636705371314009,0.8111764705882353,0.7494293685011413,0.6909338322844021]",12329,12490,11282,11971,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( and( obligation( and( expression( function( is), atom( relation( design type – cantilevered glass), variable( structure))), expression( function( as per), atom( relation( design type :value 14 to 17), variable( structure)))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)))), then( obligation( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)), expression( function( is), atom( relation( type), variable( chimney)), data( u strap)), expression( function( is), atom( relation( fixing), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( type), variable( wall tie)), data( mild steel)), expression( function( is), atom( relation( type), variable( wall tie)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close-10)))))","if( exist( structure)), then( and( obligation( and( is( structure. design type – cantilevered glass), as per( structure. design type :value 14 to 17))))","if( and( is( chimney. material, brick), has( chimney, fixing))), then( obligation( and( is( chimney. elevation, roof level), is( chimney. type, u strap), is( chimney. fixing, wall tie), is( wall tie. type, mild steel), is( wall tie. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close-10)))))",0.3372807974078315,0.8249605086176492,0.484142287414235,0.9545627610155196,19.0,19.0,1.0,1.0,0.5795836669335468,0.955564451561249,40.08549668053398,82.3801712343396,50.09270343020089,83.01983023456478,33.41088016705432,81.75029387730427,"[0.8711147948611687,0.7730189732142857,0.6475975764407497,0.5401366353543979]","[0.9134478424801006,0.887137559002023,0.8492325956075638,0.8106125234601603]",12490.0,12490.0,7239.0,11935.0,,
t5-amr_1_ir-exp_ir_random_split_esp20_e20_45,52.78128463357983,0.5369358021909308,47.34818950617768,0.5033737302178266,finished,-,stefanfuchs164,,2023-04-05T21:41:01.000Z,2244,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,extract LegalRuleML expressions: CAS2 CAS2 2.3.11 Structural framing members connected to building elements with an FRR shall be rated at no less than the building elements to which they are connected.,"extract LegalRuleML expressions: E2AS1 E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","has( building, structural framing member), has( building, element), connect( building. structural framing member, element), has( element, fire resistance rating), greater than equal( structural framing member. fire resistance rating, fire resistance rating)","[""has( building, structural framing member), has( building, element), connect( building. structural framing member, element), has( element, fire resistance rating), greater than equal( structural framing member. fire resistance rating, fire resistance rating)""]","[""has( roof, underlay), is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant), is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)""]","has( roof, underlay), is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant), is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)","is( framing. material, structural), connect( framing, building element), has( framing, rating), greater than equal( rating. value, building element)","is( framing. material, structural), connect( framing, building element), has( framing, rating), greater than equal( rating. value, building element)","has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)","has( roof, underlay), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant), is( underlay. type, self supporting), less than equal( underlay. span, 1.2 m)",0.9743231346503184,0.961776086103601,15,19,1,1,0.9746472135852668,0.9624883504193849,52.07106116409187,47.36500631627446,53.511150203907775,47.331384633363314,"[0.7590184049079755,0.6081418581418582,0.49529621154335113,0.4034179181771103]","[0.7533284918905834,0.5864532019704434,0.46051642015542743,0.36881061766207246]",4181,4292,4075,4131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_45,68.95986141594173,0.7072773005655805,69.36788184624572,0.7452628558901825,finished,-,stefanfuchs164,,2023-04-05T21:23:48.000Z,1487,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design 8.0 Small Chimneys; See Acceptable Solution B1/AS3. chimney, size, small, design, nzbc b1as1","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( is( structure, chimney), is( chimney. size, small))), then( as per( chimney. design, nzbc b1as3))","[""if( and( expression( function( is), atom( variable( structure)), data( chimney)), expression( function( is), atom( relation( size), variable( chimney)), data( small)))), then( expression( function( as per), atom( relation( design), variable( chimney)), data( nzbc b1as3)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( chimney. size, small)), then( permission( comply with( chimney. design, nzbc b1as1)))","if( expression( function( is), atom( relation( size), variable( chimney)), data( small))), then( permission( expression( function( comply with), atom( relation( design), variable( chimney)), data( nzbc b1as1))))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( laid)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( is( roof. underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, r2), is( underlay. self supporting, laid), equal( underlay. span, 1.2 m))))",0.8689996619036615,1.0,17,19,1,1,0.8768756590153297,1.0088871096877503,71.61926936190322,70.0678931146781,66.49088364131272,68.68171910929675,"[0.8946443437239848,0.8476722532588454,0.7900459274533695,0.732402340064163]","[0.8324736132053012,0.7808459696727853,0.7193193675254835,0.6597513722957701]",12329,12490,10811,12601,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( as per), atom( relation( design), variable( structure)), data( nzbc b1as1 t14)), expression( function( is), atom( relation( balustrade), variable( structure)), data( cantilevered glass)), or( not( expression( function( as per), atom( relation( design), variable( structure)), data( nzbc t14 to nzbc t17)))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( u strap)), expression( function( is), atom( relation( type), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( u strap)), data( close)))))","if( exist( structure)), then( obligation( and( as per( structure. design, nzbc b1as1 t14), is( structure. balustrade, cantilevered glass), not( as per( structure. design, or( nzbc t14 to nzbc t17))))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( chimney. elevation, roof level))), then( obligation( and( has( chimney, u strap), is( u strap. type, mild steel), is( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( u strap. spacing, close))))",0.5425559372154728,0.8019355197379231,0.7119856500077346,0.952635906356296,19.0,19.0,1.0,1.0,0.7464371497197758,0.953722978382706,55.7326120800924,81.65853667073124,63.85702562790612,83.43763005950025,49.44217396404979,79.95372854330257,"[0.8805105652686903,0.8121487246000865,0.727480666594053,0.6481888035126235]","[0.8953156480859638,0.8672409424879656,0.8257434154630416,0.7832293358406701]",12490.0,12490.0,9323.0,11912.0,,
t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_45,69.74710904893689,0.7202223357035041,69.50479373909693,0.7194295059533329,finished,-,stefanfuchs164,,2023-04-05T21:08:04.000Z,942,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. waste disposal system, type, industrial liquid waste, discharge, network utility operator, sewer, disposal system, plumbing, drainage, nzbc g13 foul water","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( waste disposal system. type, industrial liquid waste), towards( waste disposal system. discharge, network utility operator), into( waste disposal system. discharge, sewer), is( waste disposal system. disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))), then( obligation( and( has( waste disposal system, disposal system), comply with( disposal system. discharge, nzbc g 13 foul water))))","if( and( expression( function( is), atom( relation( type), variable( waste disposal system)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( waste disposal system)), data( network utility operator)), expression( function( into), atom( relation( discharge), variable( waste disposal system)), data( sewer)), expression( function( is), atom( relation( disposal system), variable( waste disposal system)), data( plumbing)), expression( function( is), atom( relation( disposal system), variable( waste disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( disposal system)), expression( function( comply with), atom( relation( discharge), variable( disposal system)), data( nzbc g 13 foul water)))))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( type)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( roof)), data( laid)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( is( roof. underlay, type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, r2), is( roof. self supporting, laid), less than equal( underlay. span, 1.2 m))))",0.880582790029828,0.8725072509121227,16,19,1,1,0.8871765755535729,0.8799839871897518,71.8747249186888,72.3265713574873,67.74183388465434,66.89492839918402,"[0.8995245931614555,0.8523051440139873,0.7938125231567247,0.7352913752913753]","[0.9229369484123374,0.8628205128205129,0.7943589270900544,0.730747819632585]",12329,12490,10938,10991,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structural balustrade)))), then( obligation( and( expression( function( has), atom( variable( structural balustrade – two-edge support))), expression( function(; not), expression( function( is), atom( variable( structural balustrade – three-edge support)))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)))), then( obligation( and( expression( function( is), atom( relation( type), variable( chimney)), data( u strap)), expression( function( is), atom( relation( type), variable( chimney)), data( wall tie)), expression( function( is), atom( relation( material), variable( wall tie)), data( mild steel)), expression( function( is), atom( relation( type), variable( wall tie)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( equal), atom( relation( spacing), variable( wall tie)), data( close)))))","if( exist( structural balustrade)), then( obligation( and( has( structural balustrade – two-edge support); not( is( structural balustrade – three-edge support)))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( chimney. elevation, roof level))), then( obligation( and( is( chimney. type, u strap), is( chimney. type, wall tie), is( wall tie. material, mild steel), is( wall tie. type, zinc coated), equal( wall tie. length, 50 mm), equal( wall tie. depth, 1 mm), equal( wall tie. spacing, close))))",0.1808300316410301,0.7945511123408893,0.2561603691861177,0.8916505832082755,19.0,19.0,1.0,1.0,0.4233787029623699,0.8971176941553243,33.88434174957012,81.80364068368401,48.27331092045519,84.95176928067383,26.103572391998046,78.88050017185512,"[0.8976928895612708,0.793942879049262,0.6537116206762534,0.5330049261083744]","[0.9470771976796072,0.919435961918448,0.8741751785230046,0.8283296943231441]",12490.0,12490.0,5288.0,11205.0,,
t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_44,69.42277501930985,0.7325893181262391,65.38396473028305,0.7144091847830751,finished,-,stefanfuchs164,,2023-04-05T20:46:30.000Z,3266,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.6 Flashing overlaps and upstands; Overlaps and upstands to flashings shall be as specified in this paragraph and Table 7. is( flashing. type, or( overlap, upstand)), overlap, upstand, as per( flashing. overlap, and( nzbc e2as1 t7)), nzbc e 2as1 t7","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( has( flashing, or( lap, upstand))), then( obligation( and( as per( lap, and( nzbc e2as1 4.6, nzbc e2as1 t7)), as per( upstand, and( nzbc e2as1 4.6, nzbc e2as1 t7)))))","[""if( or( expression( function( has), atom( variable( flashing)), data( lap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( variable( lap)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 t7)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( has( flashing, or( overlap, upstand))), then( obligation( and( as per( flashing. overlap, and( nzbc e2as1 t7), as per( upstand, and( nucleus, x0, x1))))))","if( or( expression( function( has), atom( variable( flashing)), data( overlap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( relation( overlap), variable( flashing)), data( nzbc e2as1 t7)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.9173598097800651,0.909949592579262,11,19,1,1,0.9205937221185824,0.9137710168134509,70.52054620672799,66.30093971099011,68.35865727765176,64.49200817268834,"[0.8804405286343613,0.8320773118184236,0.7738222698072805,0.7174283918469965]","[0.8812757381932883,0.8244577675894904,0.7560997249578565,0.6916071428571429]",12329,12490,11350,11413,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( Selwyn)), expression( function( for), atom( variable( boundary)), data( Waimakariri)))), then( expression( function( zone 2)), expression( function( area)), expression( function( is), atom( relation( designation), variable( zone 1)), data( nzs 3604)))","if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( Selwyn District)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604)), expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2)))))","if( within( zone, boundary), for( boundary, or( Selwyn, Waimakariri))), then( zone 2, area, is( zone 1. designation, nzs 3604)))","if( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, Selwyn District), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2))))",0.6695972280617961,0.909299531278814,0.8532227943049168,0.97330897708669,19.0,19.0,1.0,1.0,0.8630104083266613,0.9736589271417134,61.614124497349046,93.85430493959753,65.76235553620035,93.89603242431204,57.95817428733091,93.81261452587518,"[0.883477131459319,0.8254576017930519,0.7559462254395036,0.6880560287715314]","[0.9528821642956994,0.9417700578990902,0.9286962309676344,0.9140441914964847]",12490.0,12490.0,10779.0,12161.0,,
t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_45,69.66330662051449,0.7051047648074164,68.46838110869268,0.7133225797553769,finished,-,stefanfuchs164,,2023-04-05T20:13:28.000Z,3273,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 Pipes penetrating concrete or masonry elements shall be either wrapped with a flexible material, or passed through a sleeve or duct, to permit free movement for expansion and contraction. pipe, penetration, material, concrete, masonry, element, wrapping, flexible material, passing through sleeve, duct, free movement, expansion, contraction","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( into( pipe, element), is( element. material, or( concrete, masonry)))), then( obligation( or( and( has( pipe, wrapping), is( wrapping. material, flexible)), through( pipe, and( sleeve, duct)))))","[""if( and( expression( function( into), atom( variable( pipe)), data( element)), or( expression( function( is), atom( relation( material), variable( element)), data( concrete)), expression( function( is), atom( relation( material), variable( element)), data( masonry))))), then( obligation( or( and( expression( function( has), atom( variable( pipe)), data( wrapping)), expression( function( is), atom( relation( material), variable( wrapping)), data( flexible))), and( expression( function( through), atom( variable( pipe)), data( sleeve)), expression( function( through), atom( variable( pipe)), data( duct))))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( pipe. penetration, element), is( element. material, or( concrete, masonry)))), then( obligation( or( and( has( pipe, wrapping), is( wrapping. material, flexible material), through( pipe. passing through( pipe, or( sleeve, duct)), through( pipe. passing, free movement), for( free movement, and( expansion, contraction))))))","if( and( expression( function( is), atom( relation( penetration), variable( pipe)), data( element)), or( expression( function( is), atom( relation( material), variable( element)), data( concrete)), expression( function( is), atom( relation( material), variable( element)), data( masonry))))), then( obligation( or( and( expression( function( has), atom( variable( pipe)), data( wrapping)), expression( function( is), atom( relation( material), variable( wrapping)), data( flexible material)), or( expression( function( through), expression( function( pipe. passing through), atom( variable( pipe)), data( sleeve)), data( through( pipe. passing, free movement))), expression( function( through), expression( function( pipe. passing through), atom( variable( pipe)), data( duct)), data( through( pipe. passing, free movement))))))))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( self supporting), variable( underlay)), data( laid)), expression( function( equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( is( roof. underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( is( underlay. type, r2), is( underlay. self supporting, laid), equal( underlay. span, 1.2 m))))",0.8452929681962819,0.8872957639106878,10,19,1,1,0.8561116067807608,0.8931945556445157,72.90102583741646,70.49581236489271,66.7009485412309,66.55430599304512,"[0.916816674561819,0.8691339183517741,0.8096610006722367,0.7504351189325082]","[0.8964682681964862,0.8403247631935047,0.7759215543853277,0.7146120807822353]",12329,12490,10555,11156,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( as per), atom( relation( design), variable( structure)), data( nzbc b1as1)), expression( function( is), atom( relation( balustrade), variable( structure)), data( cantilevered glass)), expression( function( as per), atom( relation( type), variable( structural balustrade)), data( two edge point fixed)), expression( function( as per), atom( relation( balustrade), variable( structure)), data( nzbc br1as1 t16)), expression( function( has), atom( relation( balustrade), variable( structure)), data( two edge support)), expression( function( as per), atom( relation( design), variable( structure)), data( nzb1 t14 to nzb1 t17)), expression( function( has), atom( relation( balustrade), variable( structure)), data( three edge support)))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof level)))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( u strap)), expression( function( is), atom( relation( type), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( u strap)), data( close)))))","if( exist( structure)), then( obligation( and( as per( structure. design, nzbc b1as1, t14), is( structure. balustrade, cantilevered glass), as per( structural balustrade. type, two edge point fixed), as per( structure. balustrade. design, nzbc br1as1 t16), has( structure. balustrade, two edge support), as per( structure. design, and( nzb1 t14 to nzb1 t17)), has( structure. balustrade. type, three edge support))))","if( and( is( chimney. material, brick), has( chimney, fixing), is( chimney. fixing, roof level))), then( obligation( and( has( chimney, u strap), is( u strap. type, mild steel), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( u strap. spacing, close))))",0.5649860621975569,0.7570184986299257,0.7128039060695338,0.8844426955842359,19.0,19.0,1.0,1.0,0.7470776621297037,0.8906325060048038,58.559468179773,77.66753245099358,66.56329796735217,80.30020876320111,52.27385641124051,75.20200297224194,"[0.9016182617082842,0.839524838012959,0.7613450865164871,0.6849089712656284]","[0.9195433297375044,0.8850990681263006,0.8363686031688217,0.7884703510219045]",12490.0,12490.0,9331.0,11124.0,,
t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_44,67.84979498939053,0.6959827888118091,64.37386543559211,0.6943455215173686,finished,-,stefanfuchs164,,2023-04-05T20:01:40.000Z,2687,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 3.3.1 All gully traps shall have (see Figures 2 and 3): Wastepipes that discharge to the gullytrap arranged to permit easy cleaning of the gullytrap. exist( gully trap), has( gully trap, wastepipe), towards( wastepipe. discharge, gullytrap), for( wastepipe. arrangement, easy cleaning)","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( towards( waste pipe, gully trap)), then( obligation( and( for( waste pipe. arrangement, easily cleaned), is( gully trap, easily cleaned))))","[""if( expression( function( towards), atom( variable( waste pipe)), data( gully trap))), then( obligation( and( expression( function( for), atom( relation( arrangement), variable( waste pipe)), data( easily cleaned)), expression( function( is), atom( variable( gully trap)), data( easily cleaned)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( gully trap)), then( obligation( and( has( gully trap, wastepipe), towards( wastepipe. discharge, gullytrap), for( wastepipe. arrangement, easy cleaning))))","if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( has), atom( variable( gully trap)), data( wastepipe)), expression( function( towards), atom( relation( discharge), variable( wastepipe)), data( gullytrap)), expression( function( for), atom( relation( arrangement), variable( wastepipe)), data( easy cleaning)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8515439215425631,0.8885417177325311,7,19,1,1,0.8615459485765269,0.8943154523618895,69.82524862887306,65.38877022254296,65.98304271238659,63.38998398361264,"[0.908303520994163,0.854705715098095,0.7902671755725191,0.7273513305793063]","[0.8787824529991047,0.8221461392918281,0.7526296699310845,0.6857716528246783]",12329,12490,10622,11170,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604)), expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2)))))","if not, then, obligation to become part of Zone 2 ( area :location ( district :name ( name_0 :op1 ""Selwyn"" :op2 ""District"" ) ) :ARG1-of ( designate-01 :ARG2 1 :ARG0 ( law :name ( name_1 :op1 ""NZS 3604"" ) ) ) )","if( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2))))",1.3187218452940348e-17,0.9303308680020212,2.6921538614635218e-17,0.99831724067147,19.0,19.0,1.0,1.0,0.0255404323458767,0.9983186549239392,0.5488495302488248,96.53520598086868,0.7549607717146335,97.12479272463132,0.4311434098893797,95.95273410659216,"[0.6175548589341693,0.6129032258064516,0.44715447154471544,0.3401639344262295]","[0.9451439570133932,0.9381351830940474,0.9284497444633732,0.9161227154046996]",12490.0,12490.0,319.0,12469.0,,
t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_45,68.69813503742932,0.706497487660281,68.33506191065621,0.7091954429891579,finished,-,stefanfuchs164,,2023-04-05T19:57:46.000Z,939,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). safety barrier, material, glass, type, laminated, heat strengthened, toughened, edge, 2, support, structural sealant joint, continuous clamp, panes, laminate, fractured, resistance, concentrated load, 0.2 kN, deflection, 250 mm, rail, interlinked","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)))), then( obligation( and( greater than equal( safety barrier. edge, 2), is( edge. support, or( structural sealant joint, continuous clamp)), and( has( safety barrier. edge, panes), is( laminate, fractured), resist( concentrated load, 0.2 kN), less than equal( panes. deflection, 250 mm))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))))), then( obligation( and( expression( function( greater than equal), atom( relation( edge), variable( safety barrier)), data( 2)), or( expression( function( is), atom( relation( support), variable( edge)), data( structural sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), and( expression( function( has), atom( relation( edge), variable( safety barrier)), data( panes)), expression( function( is), atom( variable( laminate)), data( fractured)), expression( function( resist), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))))","if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( for), atom( variable( underlay)), data( roof)), expression( function( is), atom( relation( self supporting), variable( roof)), data( laid)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( is( roof. underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( and( for( underlay, roof), is( roof. self supporting, laid), less than equal( underlay. span, 1.2 m))))",0.8696411563548497,0.874670262194293,18,19,1,1,0.8774434260686187,0.8819055244195356,70.59103844024975,70.47808112293389,66.90409720955695,66.31852195366366,"[0.8980403031983731,0.8489811110077231,0.7871862120644436,0.7257897218293258]","[0.9038583749432592,0.8480445906432749,0.7826726754345626,0.7204221440473987]",12329,12490,10818,11015,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade – cantilevered glass; Table 15 - Structural balustrade – two-edge point fixed; Table 16 - Structural balustrade – two-edge support; Table 17 - Structural balustrade – three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, fixing, elevation, roof level, type, u strap, wall tie, mild steel, zinc coated, length, 50 mm, depth, 1 mm, spacing, close","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( has), atom( relation( design type), variable( structure)), data( glass types)), expression( function( has), atom( relation( design type), variable( structure)), data( not shown in( table_0 :op1 14 to :op2 17))))))","if( and( expression( function( is), atom( relation( material), variable( chimney)), data( brick)), expression( function( is), atom( relation( fixing), variable( chimney)), data( elevation)), expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)))), then( obligation( and( expression( function( is), atom( relation( fixing), variable( chimney)), data( u strap)), expression( function( is), atom( relation( type), variable( u strap)), data( wall tie)), expression( function( is), atom( relation( material), variable( wall tie)), data( mild steel)), expression( function( is), atom( relation( type), variable( wall tie)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( wall tie)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( equal), atom( relation( spacing), variable( wall tie)), data( close)))))","if( exist( structure)), then( obligation( and( has( structure. design type, and( glass types, not shown in( table_0 :op1 14 to :op2 17))))))","if( and( is( chimney. material, brick), is( chimney. fixing, elevation), is( chimney. elevation, roof level))), then( obligation( and( is( chimney. fixing, u strap), is( u strap. type, wall tie), is( wall tie. material, mild steel), is( wall tie. type, zinc coated), equal( wall tie. length, 50 mm), equal( wall tie. depth, 1 mm), equal( wall tie. spacing, close))))",0.2277513830705552,0.7950330360760186,0.3065354692701012,0.9009257356253672,19.0,19.0,1.0,1.0,0.4582065652522017,0.9055244195356285,37.0359963741157,80.51102693017339,52.21612891840247,82.77599705612779,28.69411921851052,78.36670664726417,"[0.9082648960335488,0.8170559094125973,0.6979036015051067,0.5883847549909256]","[0.9408488063660476,0.9098674259275736,0.8642550143266475,0.8196809948634766]",12490.0,12490.0,5723.0,11310.0,,
t5-amr_0_ir-entities_ir_random_split_esp20_e20_45,0.0,0.6364446850041264,0.0,0.6344962958770272,finished,-,stefanfuchs164,,2023-04-05T18:49:48.000Z,539,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,extract LegalRuleML entities: G12AS1 G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8.,"extract LegalRuleML entities: E2AS1 E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","storage water heater, type, open vented, ventilation pipe, nzbc g12as1 6.8","[""storage water heater, type, open vented, ventilation pipe, nzbc g12as1 6.8""]","[""roof, underlay, type, r1, support, material, corrosion resistant, r2, self supporting, span, 1.2 m, adjacent supports""]","roof, underlay, type, r1, support, material, corrosion resistant, r2, self supporting, span, 1.2 m, adjacent supports","storage water heater, type, open vented, vent pipe, nzbc g12as1 6.8","storage water heater, type, open vented, vent pipe, nzbc g12as1 6.8","roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m","roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, laid, span, 1.2 m",0.99105613144038,0.9668767859440088,13,19,1,1,0.9910958904109588,0.9674134419551936,0.0,0.0,0.0,0.0,"[0.8458880442294402,0.7354651162790697,0.5846743295019157,0.4675850891410049]","[0.8652631578947368,0.7466765140324964,0.5946999220576773,0.48267326732673266]",1460,1473,1447,1425,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_44,67.23592064708524,0.7193865979532053,63.9432608326229,0.7051168210333346,finished,-,stefanfuchs164,,2023-04-05T18:05:37.000Z,6960,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 4.1.1 Adjoining firecells are required to be fire separated from each other by the highest: a) Life rating specified in Paragraph 2.3 if both firecells are under common ownership, or b) Property rating specified in Paragraph 2.3 if both firecells are under different ownership. is( firecell. type, adjoining), has( firecell, fire separation), define( firecell. life rating, x0), as per( fire separation. fire rating, nzbc cas2 2.3), is( fire separation. property rating, or( common ownership, x0)), common ownership, x0, is( fire separation. fire rating, x1), is( fire separation. property rating, x1), as per( property rating, nzbc cas2)","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( adjoin( firecells)), then( obligation( and( in between( fire separation, firecells), max( firecells. rating), or( and( define( max( firecells. life rating), x0), as per( firecells. life rating, nzbc cas2 2.3.0), is( fire separation. fire resistance rating, x0), equal( firecells. owner)), and( define( max( firecells. property rating), x0), as per( property rating, nzbc cas2 2.3.0), is( fire separation. fire resistance rating, x0), not( equal( firecells. owner)))))))","[""if( expression( function( adjoin), atom( variable( firecells)))), then( obligation( and( expression( function( in between), atom( variable( fire separation)), data( firecells)), expression( function( max), atom( relation( rating), variable( firecells))), or( and( expression( function( define), expression( function( max), atom( relation( life rating), variable( firecells))), data( x0)), expression( function( as per), atom( relation( life rating), variable( firecells)), data( nzbc cas2 2.3.0)), expression( function( is), atom( relation( fire resistance rating), variable( fire separation)), data( x0)), expression( function( equal), atom( relation( owner), variable( firecells)))), and( expression( function( define), expression( function( max), atom( relation( property rating), variable( firecells))), data( x0)), expression( function( as per), atom( variable( property rating)), data( nzbc cas2 2.3.0)), expression( function( is), atom( relation( fire resistance rating), variable( fire separation)), data( x0)), not( expression( function( equal), atom( relation( owner), variable( firecells)))))))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( is( firecell. type, adjoining), has( firecell, fire separation))), then( obligation( and( define( firecell. life rating, x0), as per( fire separation. fire rating, nzbc cas2 2.3), is( fire separation. property rating, or( common ownership, x0)), is( fire separation. fire rating, x1), is( fire separation. property rating, x1), as per( property rating, nzbc cas2))))","if( and( expression( function( is), atom( relation( type), variable( firecell)), data( adjoining)), expression( function( has), atom( variable( firecell)), data( fire separation)))), then( obligation( and( expression( function( define), atom( relation( life rating), variable( firecell)), data( x0)), expression( function( as per), atom( relation( fire rating), variable( fire separation)), data( nzbc cas2 2.3)), or( expression( function( is), atom( relation( property rating), variable( fire separation)), data( common ownership)), expression( function( is), atom( relation( property rating), variable( fire separation)), data( x0))), expression( function( is), atom( relation( fire rating), variable( fire separation)), data( x1)), expression( function( is), atom( relation( property rating), variable( fire separation)), data( x1)), expression( function( as per), atom( variable( property rating)), data( nzbc cas2)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.9133136980818524,0.9115190245354794,13,19,1,1,0.9168626814826832,0.9152121697357888,67.68635217063397,64.29258681454854,66.79144445475134,63.59771037763849,"[0.8765923566878981,0.8248019229057242,0.7616914531445977,0.6989450906140113]","[0.8729769923891173,0.8147887323943662,0.744352909912304,0.6763237653770726]",12329,12490,11304,11431,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( within), expression( function( boundary of), expression( function( or), atom( variable( Selwyn or Waimakariri District Council)))))), then( obligation( expression( function( become), atom( variable( area)), data( zone 2))))","if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604)), expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2)))))","if( within( boundary of( or( Selwyn or Waimakariri District Council))), then( obligation( become( area, zone 2)))","if( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2))))",0.1843202544809108,0.9362989801639536,0.2630391218436749,1.0,19.0,19.0,1.0,1.0,0.4281825460368295,1.0132906325060047,31.981650080854457,97.54829256019482,47.97848329078408,97.57305889659229,23.984735800390467,97.52353879316392,"[0.8797681376215407,0.7826416524540458,0.650787552823665,0.5380720545277508]","[0.9482458912768648,0.9419149781485896,0.933035000799105,0.9222052559672104]",12490.0,12490.0,5348.0,12656.0,,
t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_44,70.90248089011307,0.7644454241797805,70.67263074131928,0.7550557497250584,finished,-,stefanfuchs164,,2023-04-05T17:47:49.000Z,3716,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: CAS2 3.1.4 Escape routes shall comply with NZBC D1. escape route, nzbc d1","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","[""if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( escape route)), then( obligation( comply with( escape route, nzbc d1)))","if( expression( function( exist), atom( variable( escape route)))), then( obligation( expression( function( comply with), atom( variable( escape route)), data( nzbc d1))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.9609742085334156,1.0,14,19,1,1,0.9617162786925136,1.020416333066453,72.02281470954243,71.30958516378564,69.81646738344575,70.04695444115411,"[0.8784684152821118,0.8304768369251655,0.7711481007255655,0.7117828924768121]","[0.8331894860729698,0.7864920309294618,0.7320479250971991,0.6775454835620811]",12329,12490,11857,12745,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( and( or( expression( function( within), atom( variable( zone)), data( Selwyn District)), expression( function( within), atom( variable( zone)), data( Waimakariri District Council))))), then( obligation( expression( function( become), atom( variable( zone 2)))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( Selwyn District)), expression( function( as per), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( zone)), data( nzs 3604)), expression( function( become), atom( variable( zone 2))))))","if( and( within( zone, or( Selwyn District, Waimakariri District Council))), then( obligation( become( zone 2)))","if( and( within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, Selwyn District), as per( area, zone 1), as per( zone, nzs 3604), become( zone 2))))",0.591101885928228,0.8410007662695841,0.7315964085279076,0.9662981242711468,19.0,19.0,1.0,1.0,0.7618895116092874,0.966853482786229,59.02335144882131,83.19910206910974,67.67184344789653,84.49115276806545,52.33492457315053,81.94597262609231,"[0.9156158049600672,0.8535733192165167,0.7769362065286964,0.7018166182951736]","[0.9183504471679363,0.8930445647646814,0.8556225909167086,0.8176683806794234]",12490.0,12490.0,9516.0,12076.0,,
t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_44,67.1513844013061,0.7105237167666474,63.84692608244704,0.678988771365391,finished,-,stefanfuchs164,,2023-04-05T17:47:42.000Z,1072,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie. exist( chimney), connect( chimney, building), is( chimney. elevation, roof level), by( chimney. holding, or( roof bracket, roof tie)), roof bracket, roof tie","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( chimney)), then( obligation( and( connect( chimney, building), is( chimney. elevation, roof level), by( chimney. holding, or( roof bracket, roof tie)))))","if( expression( function( exist), atom( variable( chimney)))), then( obligation( and( expression( function( connect), atom( variable( chimney)), data( building)), expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)), or( expression( function( by), atom( relation( holding), variable( chimney)), data( roof bracket)), expression( function( by), atom( relation( holding), variable( chimney)), data( roof tie))))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.900104613605014,0.8704305339574879,10,19,1,1,0.9047773542055316,0.878142514011209,67.69087252021937,64.91656142527654,66.62042759976305,62.81196828803425,"[0.8788883908561184,0.8266871165644172,0.7633705620630165,0.7000548345823433]","[0.8795587162654996,0.822887033128384,0.7514317384075374,0.6807996280799629]",12329,12490,11155,10968,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604)), expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2)))))","if not, then it is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.","if( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2))))",8.550972898011942e-32,0.958902665814739,1.819439865323416e-31,1.0,19.0,19.0,1.0,1.0,0.0139311449159327,1.0062449959967974,0.1119022052016784,97.8646117417248,0.1862691299311017,98.0245833655113,0.0799733038755408,97.70516139993464,"[0.4942528735632184,0.6699029126213593,0.4509803921568627,0.32673267326732675]","[0.9720719287078294,0.9651916459950388,0.9555770159343312,0.9430190206394172]",12490.0,12490.0,174.0,12568.0,,
t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_44,70.10721653821666,0.7169281146150981,69.51829331090494,0.7265944723046417,finished,-,stefanfuchs164,,2023-04-05T16:34:51.000Z,4375,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie. chimney, elevation, roof level, fixing, bracket, roof tie","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( is( chimney. elevation, roof level), or( is( chimney. fixing, roof bracket), is( chimney. fixing, roof tie)))), then( connect( chimney, building))","if( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof level)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8714720308448891,0.9078535267112616,10,19,1,1,0.8790656176494444,0.9118494795836668,72.16088807837161,72.05096604978564,68.16720374148139,67.15762696126582,"[0.9033031924709356,0.8571561251973623,0.7995512341062079,0.7398588235294118]","[0.8854157520414435,0.8360134299346175,0.7752289499422068,0.7150143163922692]",12329,12490,10838,11389,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( exist), atom( variable( area)))), then( obligation( expression( function( become), expression( function( area), expression( function( area within), expression( function( area), expression( function( area within), expression( function( area), atom( variable( Selwyn District))))))))))","if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( variable( boundary)), data( selwyn district council)), expression( function( is), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( zone)), expression( function( equal), atom( relation( zone 1), variable( area)), data( nzs 3604)), expression( function( equal), atom( relation( zone 2), variable( area)), data( area)))))","if( exist( area)), then( obligation( become( area( area within( area( area within( area( Selwyn District)))))","if( and( is( zone, lowest), within( zone, boundary), is( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, zone), equal( area. zone 1, nzs 3604), equal( area. zone 2, area))))",0.2282452826995339,0.7843864793574545,0.3163669770288734,0.8856026232815218,19.0,19.0,1.0,1.0,0.4649319455564452,0.8916733386709368,36.29445971166464,81.86882103952999,50.20791784813723,84.67564436793675,28.4190603143507,79.24210824993962,"[0.9016703977957636,0.8029986052998606,0.671315092674316,0.557382910260994]","[0.9405584986980337,0.9116211819989156,0.8687585266030013,0.8261625778103259]",12490.0,12490.0,5807.0,11137.0,,
t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_44,70.60023299376282,0.6763191262377568,65.93339892987802,0.6857129314493076,finished,-,stefanfuchs164,,2023-04-05T16:34:31.000Z,3781,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS1 5.1.1 Discharge pipes shall be vented where required by Table 5. exist( discharge pipe), has( discharge pipe, ventilation), comply with( ventilation, nzbc g13as1 t5)","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( exist( discharge pipe)), then( obligation( as per( discharge pipe. ventilation, nzbc g13as1 t5)))","[""if( expression( function( exist), atom( variable( discharge pipe)))), then( obligation( expression( function( as per), atom( relation( ventilation), variable( discharge pipe)), data( nzbc g13as1 t5))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( discharge pipe)), then( obligation( and( has( discharge pipe, ventilation), comply with( ventilation, nzbc g13as1 t5))))","if( expression( function( exist), atom( variable( discharge pipe)))), then( obligation( and( expression( function( has), atom( variable( discharge pipe)), data( ventilation)), expression( function( comply with), atom( variable( ventilation)), data( nzbc g13as1 t5)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8095966026927824,0.8550557794795239,8,19,1,1,0.8256144050612377,0.8646116893514811,73.42051667266334,69.19146048549145,67.98860399825476,62.96836801963291,"[0.9140387071421554,0.8685199841709537,0.8115970907641725,0.7558699578567128]","[0.8975831095471803,0.8410700969425802,0.7731068781082856,0.7086718307198187]",12329,12490,10179,10799,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( within), atom( variable( zone)), data( boundary)), or( not( expression( function( is), atom( relation( type), variable( boundary)), data( Selwyn))), not( expression( function( is), atom( relation( type), variable( boundary)), data( Waimakariri District Council))))), then( obligation( expression( function( become), atom( variable( area)), data( zone 1))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( expression( function( become), atom( variable( area)), data( zone 2))))","if( within( zone, boundary), not( is( boundary. type, or( Selwyn, Waimakariri District Council)))), then( obligation( become( area, zone 1)))","if( and( within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), then( obligation( become( area, zone 2)))",0.6558565339541725,0.7966928117536323,0.8281026195179951,0.9249411151151716,19.0,19.0,1.0,1.0,0.8413130504403523,0.9276220976781424,62.07683124968255,83.6288666346318,66.31516451911853,85.24727520651537,58.34771352492852,82.07076372527494,"[0.8905595736581652,0.8329979879275654,0.7633609878448775,0.6948033025740651]","[0.9051441394786812,0.8792010421189752,0.8481300244669696,0.8155280049239426]",12490.0,12490.0,10508.0,11586.0,,
t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_44,70.6885298660458,0.7323563310980293,68.02891400365905,0.7244455994426628,finished,-,stefanfuchs164,,2023-04-05T16:18:38.000Z,970,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7. cladding system, nzbc e2as1 e2 2 to nzbc e2 3.7","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2as1 e2 2 to nzbc e2 3.7)))","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2as1 e2 2 to nzbc e2 3.7))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8884502341955606,0.9149986322015418,18,19,1,1,0.8942331089301646,0.9184147317854284,72.17450829447306,70.1230257132205,69.26250574929877,66.05625002821228,"[0.9068480725623584,0.8595033777615483,0.8000551318570247,0.7403810580836108]","[0.8823990933658792,0.8283333333333334,0.7645864595286433,0.7031444306271096]",12329,12490,11025,11471,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( expression( function( exist), atom( variable( boundary)), data( Selwyn District)), expression( function( exist), atom( variable( boundary)), data( Waimakariri District Council)))), then( and( obligation( expression( function( become), atom( variable( area)), data( x0)), expression( function( in between), atom( variable( zone_0)), data( x0))), obligation( expression( function( become), atom( variable( area)), data( x0)), expression( function( in between), atom( variable( zone_0)), data( x1)))), expression( function( as per), expression( function( zone_1 ), atom( variable( x0)), data( nzs 3604))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( zone)), expression( function( as per), atom( relation( area), variable( zone)), data( nzs 3604)), expression( function( become), atom( variable( zone 2)), data( area)))))","if( exist( boundary, or( Selwyn District, Waimakariri District Council))), then( obligation( become( area, x0), in between( zone_0, and( x0, x1))), as per( zone_1 ( x0, nzs 3604))))","if( and( within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, zone), as per( zone. area, nzs 3604), become( zone 2, area))))",0.594262029906123,0.7997290389304951,0.8116941265880031,0.9040880835241468,19.0,19.0,1.0,1.0,0.8273819055244195,0.9084067253803042,56.17979923854147,82.3848424568008,63.28272617065641,84.45610611018175,50.51044772354453,80.41274125649198,"[0.8442035997677569,0.7795966091786027,0.6998626373626373,0.6237525936172315]","[0.9375110170985368,0.9090022172949004,0.8684398429132453,0.8272702775532201]",12490.0,12490.0,10334.0,11346.0,,
t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_44,67.71182984724298,0.6839867382936815,64.34053611179878,0.6840405712056764,finished,-,stefanfuchs164,,2023-04-05T16:17:41.000Z,1007,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 Waste Storage Area 3.0.6 opening windows shall be screened to prevent entry by insects and other vermin. has( waste storage area, opening window), has( waste storage area, screening), for( screening, and( insect, vermin)), insect, vermin, for( screening, entry)","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","if( and( has( waste storage area, window), is( window, openable))), then( obligation( screened from( window, vermin)))","[""if( and( expression( function( has), atom( variable( waste storage area)), data( window)), expression( function( is), atom( variable( window)), data( openable)))), then( obligation( expression( function( screened from), atom( variable( window)), data( vermin))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( has( waste storage area, opening window)), then( obligation( and( has( waste storage area, screening), for( screening, and( insect, vermin)), for( screening, entry))))","if( expression( function( has), atom( variable( waste storage area)), data( opening window))), then( obligation( and( expression( function( has), atom( variable( waste storage area)), data( screening)), expression( function( for), atom( variable( screening)), data( insect)), expression( function( for), atom( variable( screening)), data( vermin)), expression( function( for), atom( variable( screening)), data( entry)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8449187308853326,0.8658122429575101,5,19,1,1,0.8557871684645957,0.8740592473979183,69.52526647870378,65.74016943877432,65.99058867975761,62.99925784007464,"[0.8982087005970998,0.8461832061068703,0.7833605533672783,0.7213194041400658]","[0.8922780983786754,0.8327494007007191,0.76,0.6899289985052317]",12329,12490,10551,10917,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), selwyn district council, waimakariri district council, within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))), expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604)), expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2)))), then( obligation( expression( function( is), atom( variable( area)), data( zone 2))))","if not, then, obligation to become part of zone 2 ( area :location ( city-district :name ( name_0 :op1 ""Selwyn"" :op2 ""District"" ) ) :ARG1-of ( designate-01 :ARG2 1 :ARG0 ( law :name ( name_1 :op1 ""NZS 3604"" ) ) ) ) )","if( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)), within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604), within( zone, zone 2), is( area, zone 2)))), then( obligation( is( area, zone 2)))",0.0,0.8838888931459619,1.0843428223518904e-76,0.907153950858544,19.0,19.0,1.0,1.0,0.0056845476381104,0.911208967173739,0.0,95.11834618311022,0.0,97.44520771602744,0.0,92.9000177223068,"[0,0,0,0]","[0.9895439768034444,0.9816091954022989,0.9703710294510188,0.9562141833810888]",12490.0,12490.0,71.0,11381.0,,
t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_44,68.79755126100345,0.7360014388798317,67.17232295691858,0.6928177894176044,finished,-,stefanfuchs164,,2023-04-05T15:16:37.000Z,3718,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material. wall, space, storage bin, food waste, spillage risk, material, concrete, sheet steel, vinyl","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( and( has( space, and( wall, storage bin)), into( food waste, storage bin), has( storage bin, spillage))), then( obligation( or( is( wall. material, or( concrete, galvanised steel sheet, vinyl)), similar to( wall. material, or( concrete, galvanised steel sheet, vinyl)))))","[""if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( within( wall, space), is( space. storage bin, food waste), has( storage bin, spillage risk))), then( obligation( and( is( wall. material, or( concrete, sheet steel, vinyl)), is( wall. material, or( sheet steel, vinyl)), similar to( wall. material, spillage risk)))))","if( and( expression( function( within), atom( variable( wall)), data( space)), expression( function( is), atom( relation( storage bin), variable( space)), data( food waste)), expression( function( has), atom( variable( storage bin)), data( spillage risk)))), then( obligation( and( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( sheet steel)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl))), or( expression( function( is), atom( relation( material), variable( wall)), data( sheet steel)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl))), expression( function( similar to), atom( relation( material), variable( wall)), data( spillage risk)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.905531478830818,0.891473165189874,17,19,1,1,0.90972503852705,0.8969575660528423,70.08677994802429,70.47180857933506,67.55489594336046,64.1679820921028,"[0.8984486447931527,0.8488111260655002,0.7880621275058696,0.7261655912023993]","[0.8656609836650897,0.813600431189364,0.7506554561070428,0.6899909008189263]",12329,12490,11216,11203,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( exist), atom( variable( area)))), then( obligation( expression( function( become), expression( function( area within), expression( function( area within), expression( function( area), atom( variable( area))))))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( variable( boundary)), data( selwyn district council)), expression( function( is), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( define), atom( relation( area), variable( boundary)), data( x0)), expression( function( in between), atom( relation( area), variable( zone)), data( x0)), expression( function( in between), atom( relation( area), variable( zone)), data( x1)), expression( function( as per), atom( variable( zone 1)), data( nzs 3604)), expression( function( is), atom( relation( area), variable( zone 2)), data( x1)))))","if( exist( area))), then( obligation( become( area within( area within( area( area))))","if( and( within( zone, boundary), is( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( define( boundary. area, x0), in between( zone. area, and( x0, x1)), as per( zone 1, nzs 3604, x1), is( zone 2. area, x1))))",0.2321917176218238,0.7877361645857064,0.3331509248616788,0.8832815781920965,19.0,19.0,1.0,1.0,0.4763811048839071,0.889591673338671,34.7829124255072,81.37547185951992,47.86746714164765,84.50197071479003,27.31607364073081,78.47207390148024,"[0.8897478991596639,0.7861881272325225,0.6429063360881543,0.5246644587763639]","[0.9487894878948788,0.9194746376811594,0.8745555656851126,0.8291429620113783]",12490.0,12490.0,5950.0,11111.0,,
t5-amr_1_ir-exp_ir_random_split_esp20_e20_44,54.85405199828693,0.5346673770878655,49.07430754574696,0.4898214362474687,finished,-,stefanfuchs164,,2023-04-05T15:12:11.000Z,2883,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"extract LegalRuleML expressions: G12AS2 G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",extract LegalRuleML expressions: B1AS3 B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"has( solar water heater. installation, fixing), comply with( fixing, and( nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4)), nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4","[""has( solar water heater. installation, fixing), comply with( fixing, and( nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4)), nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4""]","[""has( chimney, reinforcing), comply with( reinforcing, nzs 4671)""]","has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","is( fixture. type, solar water heater), comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g11as2 2.1.2, nzbc g14.exemplify( fixture), nzbc g12ams2 2.1.3, nzbc g12pms2 2.1.4)), nzbc g13as2 21.1, nzbc gla12as2 21.2, nzbc gle12as2 2.1.3, as per( fixture. installation, and( nzbc law g12as2 2.1.4)),","is( fixture. type, solar water heater), comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g11as2 2.1.2, nzbc g14.exemplify( fixture), nzbc g12ams2 2.1.3, nzbc g12pms2 2.1.4)), nzbc g13as2 21.1, nzbc gla12as2 21.2, nzbc gle12as2 2.1.3, as per( fixture. installation, and( nzbc law g12as2 2.1.4)),","has( chimney, reinforcing), comply with( reinforcing, nzs 4671)","has( chimney, reinforcing), comply with( reinforcing, nzs 4671)",0.9006635460958506,0.8863648382157768,16,19,1,1,0.9052858167902416,0.8923578751164958,55.72930989672391,49.83745334562402,54.005861752465854,48.33418090065088,"[0.8089828269484809,0.648626817447496,0.5347241284655504,0.44260918253079506]","[0.7872062663185379,0.613194998669859,0.4883405639913232,0.39563173901022947]",4181,4292,3785,3830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_44,69.92637146682506,0.7270100089554972,69.61064827779543,0.7186747216076411,finished,-,stefanfuchs164,,2023-04-05T13:42:24.000Z,5650,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.6 Flashing overlaps and upstands; Overlaps and upstands to flashings shall be as specified in this paragraph and Table 7. flashing, overlap, upstand, nzbc e2as1 t7","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( has( flashing, or( lap, upstand))), then( obligation( and( as per( lap, and( nzbc e2as1 4.6, nzbc e2as1 t7)), as per( upstand, and( nzbc e2as1 4.6, nzbc e2as1 t7)))))","[""if( or( expression( function( has), atom( variable( flashing)), data( lap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( variable( lap)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 t7)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( flashing)), then( obligation( and( has( flashing. overlap, upstand), as per( upstand, and( nzbc e2as1 t7)))))","if( expression( function( exist), atom( variable( flashing)))), then( obligation( and( expression( function( has), atom( relation( overlap), variable( flashing)), data( upstand)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 t7)))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8909706692879384,0.9473398385119756,11,19,1,1,0.8965041771433206,0.9486789431545236,72.00015657489841,70.72220959707914,67.96870235249408,68.53348772992513,"[0.896136795440152,0.8498452012383901,0.7925029786454038,0.7345018450184502]","[0.837285846906912,0.7912209203599933,0.7353719996583241,0.6798728085252664]",12329,12490,11053,11849,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( expression( function( within), atom( variable( boundary)), data( Selwyn District)), expression( function( within), atom( variable( boundary)), data( Waimakariri District Council)))), then( obligation( and( expression( function( within), atom( variable( area)), data( x0)), expression( function( as per), atom( variable( x0)), data( nzs 3604)), expression( function( as per), atom( variable( zone_0)), data( nzbc b1as1)))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( variable( boundary)), data( selwyn district council)), expression( function( is), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( area)), data( x0)), expression( function( as per), atom( variable( zone)), data( nzs 3604)), expression( function( become), atom( variable( zone 2))))))","if( within( boundary, or( Selwyn District, Waimakariri District Council))), then( obligation( and( within( area, x0), as per( x0, nzs 3604), as per( zone_0, nzbc b1as1))))","if( and( within( zone, boundary), is( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( area, x0), as per( zone, nzs 3604), become( zone 2))))",0.5983005997851569,0.7892523177566315,0.7735290051541982,0.9259733614924102,19.0,19.0,1.0,1.0,0.7956765412329864,0.9285828662930344,58.57409265490321,79.70239566888094,66.28433267202516,82.35017006366247,52.47066781249333,77.2195831279496,"[0.8787482390823104,0.8181818181818182,0.7419354838709677,0.6709511568123393]","[0.9093809277461632,0.8787195280645441,0.8357192737430168,0.7903381642512077]",12490.0,12490.0,9938.0,11598.0,,
t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_44,69.51235657175674,0.7101978594887169,68.30540864629629,0.7054927626205068,finished,-,stefanfuchs164,,2023-04-05T12:13:44.000Z,5318,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 3.0.3 Walls in spaces where storage bins are likely to receive food wastes and are subject to spillage shall be constructed of concrete, galvanised sheet steel, vinyl or similar material. wall, space, storage bin, food waste, spillage risk, material, concrete, sheet steel, vinyl","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671","if( and( has( space, and( wall, storage bin)), into( food waste, storage bin), has( storage bin, spillage))), then( obligation( or( is( wall. material, or( concrete, galvanised steel sheet, vinyl)), similar to( wall. material, or( concrete, galvanised steel sheet, vinyl)))))","[""if( and( expression( function( has), atom( variable( space)), data( wall)), expression( function( has), atom( variable( space)), data( storage bin)), expression( function( into), atom( variable( food waste)), data( storage bin)), expression( function( has), atom( variable( storage bin)), data( spillage)))), then( obligation( or( expression( function( is), atom( relation( material), variable( wall)), data( concrete)), expression( function( is), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( is), atom( relation( material), variable( wall)), data( vinyl)), expression( function( similar to), atom( relation( material), variable( wall)), data( concrete)), expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised steel sheet)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( within( wall, space), is( space. storage bin, food waste))), then( obligation( and( has( wall, spillage risk), is( spillage risk. material, or( concrete, sheet steel, vinyl)), similar to( wall. material, or( galvanised sheet steel, vinyl)))))","if( and( expression( function( within), atom( variable( wall)), data( space)), expression( function( is), atom( relation( storage bin), variable( space)), data( food waste)))), then( obligation( and( expression( function( has), atom( variable( wall)), data( spillage risk)), or( expression( function( is), atom( relation( material), variable( spillage risk)), data( concrete)), expression( function( is), atom( relation( material), variable( spillage risk)), data( sheet steel)), expression( function( is), atom( relation( material), variable( spillage risk)), data( vinyl))), or( expression( function( similar to), atom( relation( material), variable( wall)), data( galvanised sheet steel)), expression( function( similar to), atom( relation( material), variable( wall)), data( vinyl))))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))",0.8621962816330943,0.8565201076384885,17,19,1,1,0.8708735501662747,0.8658927141713371,72.09688810417435,71.40792928590174,67.10671299499303,65.46125805622889,"[0.9090062401043122,0.8601162572660791,0.7992449268522888,0.7366970733561383]","[0.9117891816920944,0.861783320923306,0.7975264686592336,0.7344840596113941]",12329,12490,10737,10815,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. zone, lowest, boundary, selwyn district council, waimakariri district council, area, zone 1, nzs 3604, zone 2","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( within), expression( function( area within), expression( function( area within), expression( function( area within), atom( variable( zone 1 in NZS 3604))))))), then( obligation( expression( function( become), expression( function( area within), atom( variable( zone 2))))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( variable( boundary)), data( selwyn district council)), expression( function( is), atom( variable( boundary)), data( waimakariri district council))))), then( obligation( and( expression( function( within), atom( variable( zone)), data( area)), expression( function( is), atom( relation( area), variable( area)), data( zone 1)), expression( function( is), atom( relation( zone 2), variable( area)), data( zone 2)))))","if( within( area within( area within( area within( zone 1 in NZS 3604)))), then( obligation( become( area within( zone 2)))","if( and( within( zone, boundary), is( boundary, or( selwyn district council, waimakariri district council)))), then( obligation( and( within( zone, area), is( area. area, zone 1, nzs 3604), is( area. zone 2, zone 2))))",0.2256833855895376,0.7613566989354661,0.312501773895427,0.8471536141665763,19.0,19.0,1.0,1.0,0.4622898318654924,0.8577261809447558,36.59183014879606,80.44823923284946,50.10483214673089,84.14553423249346,28.819395256021053,77.06218171118485,"[0.902493938344302,0.8029107487287392,0.671875,0.5587124617874483]","[0.9566881359096424,0.926517571884984,0.8810897739097531,0.8353333333333334]",12490.0,12490.0,5774.0,10713.0,,
t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_43,70.28832389999606,0.72086114601237,67.49205457599507,0.7451225113960032,finished,-,stefanfuchs164,,2023-04-05T12:09:04.000Z,10983,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7. is( building. chimney type, or( room, chimney), less than equal( room. area, 24 m2), has( building, floor), is( floor. area, or( chimney type, nzbc b1as3 t2)), chimney type 1, less than equal( floor. area, 50 m2), is( floor. area, 75 m2), is( chimney type, and( nzbc brigade, and( nzbc b 1as3 t4)), nzbc b-1as3 b1as3 t4, is( chimney type. area, and( chimney type, and( chimney type 2, nzbc b1, nzbc b1s3 b1s3 1.9.2 1.9.2 1.9.3 1.9.4 nzbc b1aves3 1.9.2 1.9.6 nzbc b1ains3 b1as3 1.9.3 1.9.2 1.9.1 f0 f0 f1 f1 f0 f1 f2 f0 f1 f0 f2 f0 f0 f2 f1 f2 f6 f7 f0 f2 f3 f0 f1as3 f1as3 f0 f2 f2 f0 f2 f5 f6 f7 x0 x0 x0 x1 x0 x1 x2 x0 x1 x1 x2 x1 x0 x2 x1 x2 x7","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), is( chimney. type, or( type 2, type 3, type 4))), and( less than( building storey. floor area, 150 m2), is( chimney. type, or( type 5, type 6, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( building, chimney), greater than( count( chimney. area), 24 m2), or( and( has( building, floor), is( floor. area, or( chimney type, nzbc b1as3 t2))), and( less than equal( floor. area, 50 m2), and( greater than equal( floor. area, 75 m2)), and( greater than equal( chimney. type, 2, nzbc b1s3 b1s3 t4))), and( not( is( chimney. type, and( nzbc b1b1as3 t4)))))), then( obligation( and( has( building, floor area), has( building, chimney), greater than equal( floor. area, 150 m2))))","if( and( expression( function( has), atom( variable( building)), data( chimney)), expression( function( greater than), expression( function( count), atom( relation( area), variable( chimney))), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), or( and( expression( function( has), atom( variable( building)), data( floor)), or( expression( function( is), atom( relation( area), variable( floor)), data( chimney type)), expression( function( is), atom( relation( area), variable( floor)), data( nzbc b1as3 t2)))), and( expression( function( less than equal), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), and( expression( function( greater than equal), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0)))), and( expression( function( greater than equal), atom( relation( type), variable( chimney)), data( 2)))), and( not( expression( function( is), atom( relation( type), variable( chimney)), data( nzbc b1b1as3 t4))))))), then( obligation( and( expression( function( has), atom( variable( building)), data( floor area)), expression( function( has), atom( variable( building)), data( chimney)), expression( function( greater than equal), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), expression( function( as per), expression( function( pressure vacuum breaker. verify), atom( variable( as 2845 3)), data( nzbackflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify( as 2845 3, nzbackflow testing standard)))))",0.8847494002942045,0.9746233440321208,17,19,1,1,0.890907616189472,0.9749399519615692,72.26069258678844,67.63452250795206,68.42076668587897,67.35018558215866,"[0.8933903860160233,0.8479794740218088,0.792197011621472,0.7342865100733451]","[0.8543976348854397,0.80290764909962,0.7377648525135023,0.675025075225677]",12329,12490,10984,12177,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))), then( obligation( expression( function( greater than), atom( variable( energy rating)), data( water heating source))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if( is( valve. type, or( temperature relief valve, pressure relief valve))), then( obligation( greater than( energy rating, water heating source)))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.645824456569729,0.9179084403758908,0.7917905146497071,0.9788834339834748,19.0,19.0,1.0,1.0,0.810728582866293,0.9791032826261008,63.69027935837413,95.10753279345693,69.58669851493326,95.69681417221672,58.7150664249376,94.52546434697706,"[0.9118111791428009,0.8565887618100447,0.7877604166666666,0.7193584182386765]","[0.9524899828277046,0.9445632505346274,0.9332340531149168,0.9208555259653796]",12490.0,12490.0,10126.0,12229.0,,
t5-amr_0_ir-entities_ir_random_split_esp20_e20_44,0.0,0.6382786190444274,0.0,0.6199204346431492,finished,-,stefanfuchs164,,2023-04-05T12:02:10.000Z,691,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,extract LegalRuleML entities: E2AS1 E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7.,extract LegalRuleML entities: B1AS3 B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"cladding system, nzbc e2 2 to nzbc e2 3.7","[""cladding system, nzbc e2 2 to nzbc e2 3.7""]","[""chimney, reinforcing, nzs 4671""]","chimney, reinforcing, nzs 4671","cladding system, nzbc e2as1 e2 2 to nzbc e2 3.7","cladding system, nzbc e2as1 e2 2 to nzbc e2 3.7","chimney, reinforcing, nzs 4671","chimney, reinforcing, nzs 4671",0.975737773355988,0.9506189881552752,18,19,1,1,0.976027397260274,0.9517990495587236,0.0,0.0,0.0,0.0,"[0.8540350877192983,0.7481536189069424,0.5978176149649259,0.4793729372937294]","[0.8487874465049928,0.7407963936889557,0.5968253968253968,0.4819175777964676]",1460,1473,1425,1402,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_43,70.82275980535347,0.742791378632133,71.22320911561879,0.739843882436029,finished,-,stefanfuchs164,,2023-04-05T11:05:34.000Z,3197,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above). timber, moisture content, measurement, procedure, nzbc e2as1 publication, 'Scion', research institute, electrical resistance type, moisture meters, insulated probes, measurement sampling, nzs 1080.1 appendix e, inserting probe, depth, '1/3', board end, distance, 200 mm', correction factor, species, temperature, treatment type","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( timber, moisture content), is( moisture content. measurement, procedure)), then( obligation( and( as per( moisture content. measurement, publication), by( publication, nzbc e2as1, 'Scion'), by( moisture content. measurement, and( electrical resistance type, moisture meters)), has( moisture meters, insulated probes)), by( moisture content. measurement, sampling), as per( measurement sampling, nzs 1080.1 appendix e), by( measurement sampling, inserting probe), greater than equal( probe. depth, '1/3/'), within( timber. measurement, board end), less than equal( probe. distance, 200 mm'), by( measurement. correction factor, and( species, temperature, treatment type)))))","if( and( expression( function( has), atom( variable( timber)), data( moisture content)), expression( function( is), atom( relation( measurement), variable( moisture content)), data( procedure)))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( by), atom( variable( publication)), data( nzbc e2as1)), expression( function( by), atom( relation( measurement), variable( moisture content)), data( electrical resistance type)), expression( function( by), atom( relation( measurement), variable( moisture content)), data( moisture meters)), expression( function( has), atom( variable( moisture meters)), data( insulated probes))), expression( function( by), atom( relation( measurement), variable( moisture content)), data( sampling)), expression( function( as per), atom( variable( measurement sampling)), data( nzs 1080.1 appendix e)), expression( function( by), atom( variable( measurement sampling)), data( inserting probe)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3/')), expression( function( within), atom( relation( measurement), variable( timber)), data( board end)), expression( function( less than equal), atom( relation( distance), variable( probe)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( x0)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, x0, nz backflow testing standard)))))",0.902153929547967,0.9677867561781092,18,19,1,1,0.9066428745234812,0.9682946357085668,72.33973754233024,73.01637492104331,69.36809790372847,69.51600677353112,"[0.8987296475219181,0.8548663005311965,0.800833635375136,0.746922024623803]","[0.8378534810649909,0.7948099476004326,0.7424698795180723,0.6907667704738658]",12329,12490,11178,12094,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))), then( obligation( expression( function( greater than), expression( function( energy rating), atom( variable( energy source)), data( water heating)))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( pressure relief)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( greater than equal), atom( relation( maximum pressure rating), variable( expansion control)), data( x1)))))","if( is( valve. type, or( temperature relief valve, pressure relief valve))), then( obligation( greater than( energy rating( energy source, water heating))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( pressure relief. flow rate capacity, x0), define( hot water storage vessel. working pressure, x1), greater than equal( expansion control. maximum pressure rating, x1))))",0.6030902244152635,0.7866831261853895,0.7654829197888662,0.8993411771857575,19.0,19.0,1.0,1.0,0.789111289031225,0.9040832666132906,59.17055001694656,80.66579544305797,66.97306060663516,82.45629657248043,52.996356550837376,78.95140152202596,"[0.8963068181818182,0.832805314256515,0.7554045707226683,0.6832935808358395]","[0.9283563584838824,0.8982265395241066,0.8585650224215247,0.8177633360411589]",12490.0,12490.0,9856.0,11292.0,,
t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_43,68.19963559033759,0.6667355931527195,66.47953279695605,0.6991285784833366,finished,-,stefanfuchs164,,2023-04-05T11:05:30.000Z,3811,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.2.1.1 Tile profiles; Type II: Single profile tiles having one water- course depth of a minimum of 25 mm. is( tile. type, single profile), greater than equal( tile. depth, 25 mm)","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( is( tile. type, single profile)), then( and( equal( count( tile. watercourse), 1), greater than equal( watercourse. depth, 25 mm)))","[""if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( and( expression( function( equal), expression( function( count), atom( relation( watercourse), variable( tile))), data( 1)), expression( function( greater than equal), atom( relation( depth), variable( watercourse)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( tile. type, single profile)), then( obligation( greater than equal( tile. depth, 25 mm)))","if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( obligation( expression( function( greater than equal), atom( relation( depth), variable( tile)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3 nz backflow testing standard)))))",0.8207213447391896,0.8863158339744469,9,19,1,1,0.8350231162300268,0.8923138510808647,71.61248664496408,68.40331991061215,65.0972810340462,64.66099548000757,"[0.9021855269548325,0.8505477308294209,0.7862700679602088,0.7218805792501488]","[0.8820995962314939,0.8285172476070074,0.7609742797418886,0.6961214782290523]",12329,12490,10295,11145,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if not, then, obligation is greater than that of the energy source that heats water.","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",7.145603448401865e-40,0.936546571936962,1.3412100782790582e-39,0.9927682116243915,19.0,19.0,1.0,1.0,0.011048839071257,0.9927942353883108,0.2090041235948709,96.96742854739551,0.5747126436781609,97.72650730486154,0.1277271471969069,96.2200510059769,"[0.42028985507246375,0.746268656716418,0.5757575757575758,0.4461538461538462]","[0.9569354838709676,0.9497120609944034,0.9399575787240986,0.9271354722245015]",12490.0,12490.0,138.0,12400.0,,
t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_43,66.5520928601281,0.6770914242811504,65.69917170083298,0.6981409034966192,finished,-,stefanfuchs164,,2023-04-05T10:37:55.000Z,1652,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7. is( building. chimney type, or( room, chimney), less than equal( room. area, 24 m2), has( building, floor), is( floor. area, or( chimney type, nzbc b1as3 t2)), chimney type 1, less than equal( floor. area, 50 m2), is( floor. area, 75 m2), is( chimney type, and( nzbc brigade, and( nzbc b 1as3 t4)), nzbc b-1as3 b1as3 t4, is( chimney type. area, and( chimney type, and( chimney type 2, nzbc b1, nzbc b1s3 b1s3 1.9.2 1.9.2 1.9.3 1.9.4 nzbc b1aves3 1.9.2 1.9.6 nzbc b1ains3 b1as3 1.9.3 1.9.2 1.9.1 f0 f0 f1 f1 f0 f1 f2 f0 f1 f0 f2 f0 f0 f2 f1 f2 f6 f7 f0 f2 f3 f0 f1as3 f1as3 f0 f2 f2 f0 f2 f5 f6 f7 x0 x0 x0 x1 x0 x1 x2 x0 x1 x1 x2 x1 x0 x2 x1 x2 x7","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), is( chimney. type, or( type 2, type 3, type 4))), and( less than( building storey. floor area, 150 m2), is( chimney. type, or( type 5, type 6, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( building. chimney type, or( room, chimney)), less than equal( room. area, 24 m2)), then( obligation( and( has( building, floor), is( floor. area, or( chimney type, nzbc b1as3 t2)), less than equal( floor. area, 50 m2), is( floor. area, 75 m2), is( chimney type, and( nzbc brigade, and( nzbc b 1as3 t4))), is( chimney type. area, and( chimney type, and( chimney type 2, nzbc b1, nzbc b1.as3 b1as3 b1as 3 1.9.2 1.9.2 1.9.3 1.9.2 1.9.31.9.3 1.9.4 nzbc b1aves3 1.9.3 1.9.3 1.9.1 f0 f0 f0 f2 f0 f2 f2 f6 f7 x0 x0 x0 x1 x0 x1 x2 x0 x1 x1 x2 x1 x0 x2 x1 x2 x2 x2 x7","if( and( or( expression( function( is), atom( relation( chimney type), variable( building)), data( room)), expression( function( is), atom( relation( chimney type), variable( building)), data( chimney))), expression( function( less than equal), atom( relation( area), variable( room)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))))), then( obligation( and( expression( function( has), atom( variable( building)), data( floor)), or( expression( function( is), atom( relation( area), variable( floor)), data( chimney type)), expression( function( is), atom( relation( area), variable( floor)), data( nzbc b1as3 t2))), expression( function( less than equal), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( area), variable( floor)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), expression( function( is), atom( variable( chimney type)), data( nzbc brigade)), expression( function( is), atom( variable( chimney type)), data( nzbc b 1as3 t4)), expression( function( is), atom( relation( area), variable( chimney type)), data( chimney type)), expression( function( is), atom( relation( area), variable( chimney type)), data( chimney type 2)), expression( function( is), atom( relation( area), variable( chimney type)), data( nzbc b1)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)))))",0.8472557791044988,0.9171677799322668,17,19,1,1,0.8578149079406278,0.9204163330664532,68.74386945115056,66.83602486053029,64.49575972787383,64.60034650594623,"[0.8912632375189108,0.8383626844359828,0.7723787617404638,0.7067451510180449]","[0.8526443980514962,0.7998249452954048,0.7338382948740532,0.670832225471949]",12329,12490,10576,11496,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))), then( obligation( expression( function( greater than equal), expression( function( energy rating of), atom( relation( heating the water), variable( energy source))))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if( is( valve. type, or( temperature relief valve, pressure relief valve))), then( obligation( greater than equal( energy rating of( energy source. heating the water))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.1865083788977651,0.9466078585154214,0.2597110143994698,1.0,19.0,19.0,1.0,1.0,0.4258606885508407,1.0022417934347478,33.620033323232065,97.65845579406374,50.87275594233199,97.9604422816236,25.10578694113036,97.35832547553636,"[0.8979131415679639,0.8027820121951219,0.6673749275642263,0.5528789659224442]","[0.9585397028279278,0.9524383385554752,0.9434389140271492,0.932222673709874]",12490.0,12490.0,5319.0,12518.0,,
t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_43,69.08986956336756,0.6989096066258875,70.07940756080693,0.7412526204485581,finished,-,stefanfuchs164,,2023-04-05T10:34:43.000Z,1848,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS1 5.8.2 Air admittance valves shall be manufactured to ASSE 1050, ASSE 1051, EN 12380 or AS/NZS 4936. air admittance valve, manufacture, ass 1050, ass 1051, en 12380, nzs 4936","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( exist( air admittance valve)), then( obligation( comply with( air admittance valve. manufacturing, or( asse 1050, asse 1051, en 12380, nzs 4936))))","[""if( expression( function( exist), atom( variable( air admittance valve)))), then( or( obligation( expression( function( comply with), atom( relation( manufacturing), variable( air admittance valve)), data( asse 1050))), obligation( expression( function( comply with), atom( relation( manufacturing), variable( air admittance valve)), data( asse 1051))), obligation( expression( function( comply with), atom( relation( manufacturing), variable( air admittance valve)), data( en 12380))), obligation( expression( function( comply with), atom( relation( manufacturing), variable( air admittance valve)), data( nzs 4936)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( exist( air admittance valve)), then( obligation( and( comply with( air admittance valve. manufacture, or( ass 1050, ass 1051, en 12380, nzs 4936)))))","if( expression( function( exist), atom( variable( air admittance valve)))), then( obligation( and( or( expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( ass 1050)), expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( ass 1051)), expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( en 12380)), expression( function( comply with), atom( relation( manufacture), variable( air admittance valve)), data( nzs 4936))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( x0)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, x0, nz backflow testing standard)))))",0.8691829824698261,0.9047896033357408,12,19,1,1,0.8770378781734123,0.9090472377902322,71.17819170217005,71.51725034222574,67.12059469805422,68.69824051717586,"[0.8803292333302506,0.8368087879352076,0.781744916127823,0.7259433962264151]","[0.9014444248722916,0.8528760081538598,0.7941491259364966,0.7378152769051252]",12329,12490,10813,11354,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( obligation( and( expression( function( has), atom( variable( valve: source of energy heating water))))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control))), expression( function( for), atom( variable( valve)), data( cold water supply))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x1)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( define), atom( relation( maximum pressure rating), variable( expansion control)), data( x1)), expression( function( greater than equal), atom( relation( maximum pressure rating), variable( valve)), data( x1)))))","if( exist( valve)), then( obligation( and( has( valve: source of energy heating water))))","if( is( valve. type, or( pressure relief, expansion control)), for( valve, cold water supply))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x1), define( hot water storage vessel. working pressure, x1), define( expansion control. maximum pressure rating, x1), greater than equal( valve. maximum pressure rating, x1))))",0.306750183608477,0.7953537580764333,0.4353317612480266,0.8929803249869365,19.0,19.0,1.0,1.0,0.5459567654123298,0.8983186549239391,39.06501083521236,82.21662371216945,50.91654928401571,84.51897549530553,31.68896203972924,80.03638072187204,"[0.8749083443320135,0.7799347954949615,0.6558334581398831,0.5508628519527702]","[0.9409090909090908,0.9148802583191318,0.875428777757718,0.8351049332243118]",12490.0,12490.0,6819.0,11220.0,,
t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_43,69.37305688230082,0.7042690403062108,69.23734226463479,0.7226281202991415,finished,-,stefanfuchs164,,2023-04-05T10:11:21.000Z,1399,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7. building, chimney, room, area, 24 m2, floor area, level, 50 m2, chimney type 1, 75 m2, chimney type 3, 4, 150 m2, chimney type 5, 6","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), is( chimney. type, or( type 2, type 3, type 4))), and( less than( building storey. floor area, 150 m2), is( chimney. type, or( type 5, type 6, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( building, chimney), include( building. room, bracing), as per( bracing, and( 1.9.2 to 1.9.6)))), then( obligation( and( define( count( building. room. area), 24 m2), define( building. floor area, level), greater than equal( floor area. area, 50 m2), or( equal( chimney. type 1, 75 m2), and( equal( chimney. type 3, 150 m2), and( chimney. type 5, 6))))))","if( and( expression( function( has), atom( variable( building)), data( chimney)), expression( function( include), atom( relation( room), variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( 1.9.2 to 1.9.6)))), then( obligation( and( expression( function( define), expression( function( count), atom( relation( room), variable( building))), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), expression( function( define), atom( relation( floor area), variable( building)), data( level)), expression( function( greater than equal), atom( relation( area), variable( floor area)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), or( expression( function( equal), atom( relation( type 1), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), and( expression( function( equal), atom( relation( type 3), variable( chimney)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), and( expression( function( chimney. type 5)), expression( function( 6))))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))",0.8513578042943987,0.951209432499275,17,19,1,1,0.8613837294184443,0.9523618895116092,71.89937370456731,72.0856329734774,67.0182474156608,66.60558258909222,"[0.9054613935969869,0.8608398900369704,0.8042565375071579,0.7469972134140482]","[0.8442202606137033,0.7944857916102842,0.734535863183868,0.6760828625235404]",12329,12490,10620,11895,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( or( obligation( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve))), obligation( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( has), atom( variable( valve)), data( cold water supply)), expression( function( has), atom( variable( valve)), data( flow rate)))))","if( exist( valve)), then( obligation( is( valve. type, or( temperature relief valve, pressure relief valve))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( has( valve, and( cold water supply, flow rate), greater than equal( flow rate capacity, cold water supply), has( hot water storage vessel, working pressure), greater than equal( working pressure, maximum pressure rating)))))",0.5747703720137428,0.7942815305218891,0.7644983240241727,0.8881858714134808,19.0,19.0,1.0,1.0,0.788310648518815,0.8939951961569256,54.921070277797,82.7293491150426,62.66908778127983,86.10672052327585,48.8780866575308,79.60691995146847,"[0.8682713792403006,0.8034782608695652,0.7189818631492169,0.6369770580296896]","[0.9487730610782732,0.9199639477242,0.8780841799709724,0.8344745731762987]",12490.0,12490.0,9846.0,11166.0,,
t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_43,66.4688204480005,0.6689162372918346,65.58194772747744,0.6837535941098755,finished,-,stefanfuchs164,,2023-04-05T10:10:06.000Z,1667,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.3.10 Bituminous flashings; Bituminous flashings shall only be used in accordance with Table 20. is( flashing. material, bituminous), as per( flashing, nzbc e2as1 t20)","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( is( flashing. material, bituminous)), then( obligation( as per( flashing. application, nzbc e2as1 t20)))","[""if( expression( function( is), atom( relation( material), variable( flashing)), data( bituminous))), then( obligation( expression( function( as per), atom( relation( application), variable( flashing)), data( nzbc e2as1 t20))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( flashing. material, bituminous)), then( obligation( as per( flashing, nzbc e2as1 t20)))","if( expression( function( is), atom( relation( material), variable( flashing)), data( bituminous))), then( obligation( expression( function( as per), atom( variable( flashing)), data( nzbc e2as1 t20))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)))))",0.8376916439123184,0.8649045273949404,6,19,1,1,0.8495417308784168,0.8732586068855084,68.70078106553812,67.00628709389447,64.37732100762973,64.21690177208602,"[0.891063586022532,0.8376429875997309,0.7713898567557104,0.7061689893772537]","[0.8848445952140827,0.8309339239571798,0.7625638643752903,0.6966523284084534]",12329,12490,10474,10907,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if not, then the obligation is to have a rating of energy greater than that of the energy source heating the water: temperature/pressure relief valve.","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.0001125468534953,0.938569484889506,0.0002269053827148,0.9718283017663684,19.0,19.0,1.0,1.0,0.1064851881505204,0.9722177742193756,2.5932814375152016,97.33585466475311,4.176346400869938,97.66836704805785,1.8804771725951224,97.00559867926223,"[0.7240601503759398,0.5830023828435266,0.4376508447304907,0.3276283618581907]","[0.980564934530182,0.973078197481776,0.9620031664027998,0.9477787091366304]",12490.0,12490.0,1330.0,12143.0,,
t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_43,68.42906386762603,0.664369590876693,69.36245392750713,0.7049854424982063,finished,-,stefanfuchs164,,2023-04-05T09:47:05.000Z,1454,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9. waste chute, side entry hopper, storage area, type, common, internal diameter, 450 mm, self cleaning, vertical, smooth joint, vented, roof line, bottom, container, location, central, nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( and( has( waste chute, site entry hopper), not( exist( waste storage area)), is( waste storage area. type, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute, self cleaning), is( waste chute, vertical), is( waste chute. joint, smooth), has( waste chute. top, ventilation), above( ventilation, roof line), has( waste chute. bottom, ventilation), above( ventilation, container), is( waste chute. termination point, central), above( waste chute. termination point, container), is( container. location, space), comply with( space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9))))","[""if( and( expression( function( has), atom( variable( waste chute)), data( site entry hopper)), not( expression( function( exist), atom( variable( waste storage area)))), expression( function( is), atom( relation( type), variable( waste storage area)), data( common)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( variable( waste chute)), data( self cleaning)), expression( function( is), atom( variable( waste chute)), data( vertical)), expression( function( is), atom( relation( joint), variable( waste chute)), data( smooth)), expression( function( has), atom( relation( top), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( has), atom( relation( bottom), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( is), atom( relation( termination point), variable( waste chute)), data( central)), expression( function( above), atom( relation( termination point), variable( waste chute)), data( container)), expression( function( is), atom( relation( location), variable( container)), data( space)), expression( function( comply with), atom( variable( space)), data( nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( waste chute, side entry hopper), is( waste chute. storage area, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute. self cleaning, vertical), has( waste chute, smooth joint), is( self cleaning, vented), above( vented, roof line), above( vented, container), is( container. location, central), comply with( container, nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9))))","if( and( expression( function( has), atom( variable( waste chute)), data( side entry hopper)), expression( function( is), atom( relation( storage area), variable( waste chute)), data( common)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( relation( self cleaning), variable( waste chute)), data( vertical)), expression( function( has), atom( variable( waste chute)), data( smooth joint)), expression( function( is), atom( variable( self cleaning)), data( vented)), expression( function( above), atom( variable( vented)), data( roof line)), expression( function( above), atom( variable( vented)), data( container)), expression( function( is), atom( relation( location), variable( container)), data( central)), expression( function( comply with), atom( variable( container)), data( nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( no. nz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, no. nz backflow testing standard)))))",0.8046737804007147,0.8927145027195356,14,19,1,1,0.8214778165301322,0.8980784627702162,71.9041940588028,73.23197884892771,65.27435389686883,65.88133188762029,"[0.9059044233807269,0.8601968777965596,0.8020228319647507,0.7435199193141705]","[0.872693233484889,0.8246904719181769,0.7653273137697517,0.7061068702290076]",12329,12490,10128,11217,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( obligation( expression( function( has), expression( function( valve), atom( variable( energy source))))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( has), atom( variable( valve)), data( cold water supply)), expression( function( greater than equal), atom( relation( flow rate), variable( valve)), data( flow rate capacity)), expression( function( has), atom( variable( hot water storage vessel)), data( working pressure)), expression( function( has), atom( variable( hot water storage vessel)), data( maximum pressure rating)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( working pressure)))))","if( exist( valve)), then( obligation( has( valve( energy source)))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( has( valve, cold water supply), greater than equal( valve. flow rate, flow rate capacity), has( hot water storage vessel, working pressure), has( hot water storage vessel, maximum pressure rating), less than equal( valve. maximum pressure rating, working pressure))))",0.2258571226708793,0.781001867964229,0.3273941741782869,0.8552389206052576,19.0,19.0,1.0,1.0,0.4724579663730985,0.8647718174539631,34.88416281486183,82.35724997654991,48.45703379672148,86.4495806595363,27.251098684158915,78.634851188541,"[0.8920521945432978,0.779073756432247,0.6339642299010245,0.5140646976090014]","[0.9641699842607168,0.939049394221808,0.8977389999061826,0.8555912353607857]",12490.0,12490.0,5901.0,10801.0,,
t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_43,70.12925757310921,0.7135026401212677,68.19066133864632,0.7369963316391751,finished,-,stefanfuchs164,,2023-04-05T09:13:57.000Z,3366,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_1_ir-exp_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_1_ir-exp_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9. is( waste chute. type, side entry hopper), as per( waste chute. internal diameter, nzbc g15as1 f2), has( waste chute, internal diameter), greater than equal( internal diameter, 450 mm), is( waste chute. type, and( self cleaning, vertical)), self cleaning, vertical, has( waste chute, smooth joint), is( waste chute. ventilation, and( top, roof line)), top, roof line, bottom, above( waste chute. ventilation, container)), top, bottom, above( waste chute. termination, container), is( waste chute. termination, central)","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( and( has( waste chute, site entry hopper), not( exist( waste storage area)), is( waste storage area. type, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute, self cleaning), is( waste chute, vertical), is( waste chute. joint, smooth), has( waste chute. top, ventilation), above( ventilation, roof line), has( waste chute. bottom, ventilation), above( ventilation, container), is( waste chute. termination point, central), above( waste chute. termination point, container), is( container. location, space), comply with( space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9))))","[""if( and( expression( function( has), atom( variable( waste chute)), data( site entry hopper)), not( expression( function( exist), atom( variable( waste storage area)))), expression( function( is), atom( relation( type), variable( waste storage area)), data( common)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( variable( waste chute)), data( self cleaning)), expression( function( is), atom( variable( waste chute)), data( vertical)), expression( function( is), atom( relation( joint), variable( waste chute)), data( smooth)), expression( function( has), atom( relation( top), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( has), atom( relation( bottom), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( is), atom( relation( termination point), variable( waste chute)), data( central)), expression( function( above), atom( relation( termination point), variable( waste chute)), data( container)), expression( function( is), atom( relation( location), variable( container)), data( space)), expression( function( comply with), atom( variable( space)), data( nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( has( waste chute, side entry hopper)), then( obligation( and( as per( waste chute. internal diameter, nzbc g15as1 f2), greater than equal( waste chute. internal diameter, 450 mm), is( waste chute, and( self cleaning, vertical)), has( waste chute, smooth joint), is( waste chute. ventilation, and( top, roof line)), above( waste chute. ventilation, container), above( waste chute. termination, container), is( waste chute. termination, central)))))","if( expression( function( has), atom( variable( waste chute)), data( side entry hopper))), then( obligation( and( expression( function( as per), atom( relation( internal diameter), variable( waste chute)), data( nzbc g15as1 f2)), expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( variable( waste chute)), data( self cleaning)), expression( function( is), atom( variable( waste chute)), data( vertical)), expression( function( has), atom( variable( waste chute)), data( smooth joint)), expression( function( is), atom( relation( ventilation), variable( waste chute)), data( top)), expression( function( is), atom( relation( ventilation), variable( waste chute)), data( roof line)), expression( function( above), atom( relation( ventilation), variable( waste chute)), data( container)), expression( function( above), atom( relation( termination), variable( waste chute)), data( container)), expression( function( is), atom( relation( termination), variable( waste chute)), data( central)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3 nz backflow testing standard)))))",0.877402280663235,0.9226149538665012,14,19,1,1,0.8843377402871279,0.9254603682946356,72.38688055288863,69.65078694894079,68.00819820558822,66.79049746196235,"[0.8949830321929744,0.8470273264401772,0.788681349316978,0.7314312441534144]","[0.8933298728263691,0.8379178272980501,0.7696417622843129,0.7067689053410894]",12329,12490,10903,11559,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( energy source)))), then( obligation( expression( function( greater than equal), atom( variable( energy rating)), data( water heater))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( pressure relief)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( pressure relief)), data( x1)))))","if( exist( energy source)), then( obligation( greater than equal( energy rating, water heater)))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( pressure relief. flow rate capacity, x0), define( hot water storage vessel. working pressure, x1), less than equal( pressure relief. maximum pressure rating, x1))))",0.6271474508243203,0.8315896545766417,0.7643998242023616,0.971992926560128,19.0,19.0,1.0,1.0,0.7882305844675741,0.9723779023218576,61.314276757034726,86.51578533566071,68.25975326419501,88.43465522739974,55.65168028516393,84.67841888624046,"[0.9257491112239716,0.8643339472068754,0.789446562918685,0.717296511627907]","[0.891889666529436,0.8712936889183369,0.8446221777888862,0.8162923231645994]",12490.0,12490.0,9845.0,12145.0,,
t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_43,70.0043749149404,0.7334380634554871,70.80499814057083,0.7546602471288828,finished,-,stefanfuchs164,,2023-04-05T08:55:59.000Z,3064,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-entities_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-entities_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7. building, chimney, room, area, 24 m2, floor area, level, 50 m2, chimney type 1, 75 m2, chimney type 3, 4, 150 m2, chimney type 5, 6","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( or( and( include( building. space, chimney), greater than( space. area, 24 m2)), and( less than( building storey. floor area, 50 m2), is( chimney. type, type 1)), and( less than( building storey. floor area, 75 m2), is( chimney. type, or( type 2, type 3, type 4))), and( less than( building storey. floor area, 150 m2), is( chimney. type, or( type 5, type 6, type 7))))), then( obligation( and( has( building, bracing), as per( bracing, nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( building, chimney), greater than( count( chimney. room. area), 24 m2), or( and( define( chimney. floor area, x0), is( x0.floor area, x1), is( x1.floor area, level), for( x0, chimney type), as per( x0, nzbc b1as3 t2))), then( obligation( and( greater than equal( x0, 50 m2), or( is( x0, chimney type 1, 75 m2), is( x1.floor area), is( x1.floor area, and( x0, chimney type), is( chimney type 2, 3), is( chimney type 4, 150 m2), is( chimney type 5, 6), is( chimney type 7, x1))))))","if( and( expression( function( has), atom( variable( building)), data( chimney)), expression( function( greater than), expression( function( count), atom( relation( room), variable( chimney))), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0))), or( and( expression( function( define), atom( relation( floor area), variable( chimney)), data( x0)), expression( function( is), atom( relation(floor area), variable( x0)), data( x1)), expression( function( is), atom( relation(floor area), variable( x1)), data( level)), expression( function( for), atom( variable( x0)), data( chimney type)), expression( function( as per), atom( variable( x0)), data( nzbc b1as3 t2)))))), then( obligation( and( expression( function( greater than equal), atom( variable( x0)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), or( expression( function( is), atom( variable( x0)), data( chimney type 1)), expression( function( is), atom( relation(floor area), variable( x1))), and( expression( function( is), atom( relation(floor area), variable( x1)), data( x0)), expression( function( is), atom( relation(floor area), variable( x1)), data( chimney type)))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( lz backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, lz backflow testing standard)))))",0.9462069061851396,0.9547301463402956,17,19,1,1,0.94760321193933,0.955724579663731,71.4081749675094,72.3704294134485,68.65470482072092,69.30585608235452,"[0.8521783788410511,0.8086462280399587,0.752881032839442,0.6958151700087184]","[0.875848203066097,0.8262261924827238,0.7654090716405256,0.7047935858068919]",12329,12490,11683,11937,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( or( obligation( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve))), obligation( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( pressure relief)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( define), atom( relation( maximum pressure rating), variable( expansion control)), data( x1)))))","if( exist( valve)), then( obligation( is( valve. type, or( temperature relief valve, pressure relief valve))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( pressure relief. flow rate capacity, x0), define( hot water storage vessel. working pressure, x1), define( expansion control. maximum pressure rating, x1))))",0.556593718471321,0.8028482201712479,0.6869109197150413,0.9437097367406818,19.0,19.0,1.0,1.0,0.7269815852682145,0.9452361889511608,57.11684271978725,80.21562298368325,65.3450670494591,81.55611127103461,50.72906005991974,78.91848771341819,"[0.9233480176211454,0.8579198579198579,0.7771313492951444,0.7002368332017593]","[0.905810604777232,0.8757562846186622,0.8345336076817559,0.7912533425342879]",12490.0,12490.0,9080.0,11806.0,,
t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_43,68.22346130384794,0.6672337529435953,65.6923824195215,0.674591848242028,finished,-,stefanfuchs164,,2023-04-05T08:50:51.000Z,1383,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_1_ir-exp_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 5.10.1 Where a drain or part of a drain is no longer required, it shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary. exist( drain), is( drain. part, or( drain. junction, live drain)), drain. connection, to( drain. disconnect, foul water drainage system)","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","if( or( not( is( drain, required)), not( is( drain. part, required)))), then( obligation( or( disconnect( drain, or( live drain junction, property boundary)), disconnect( drain. part, or( live drain junction, property boundary)))))","[""if( or( not( expression( function( is), atom( variable( drain)), data( required))), not( expression( function( is), atom( relation( part), variable( drain)), data( required))))), then( obligation( or( expression( function( disconnect), atom( variable( drain)), data( live drain junction)), expression( function( disconnect), atom( variable( drain)), data( property boundary)), expression( function( disconnect), atom( relation( part), variable( drain)), data( live drain junction)), expression( function( disconnect), atom( relation( part), variable( drain)), data( property boundary)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( or( is( drain. part, or( drain. junction, live drain)))), then( obligation( and( to( drain. disconnect, foul water drainage system))))","if( or( expression( function( is), atom( relation( part), variable( drain)), data( drain. junction)), expression( function( is), atom( relation( part), variable( drain)), data( live drain)))), then( obligation( and( expression( function( to), atom( relation( disconnect), variable( drain)), data( foul water drainage system)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3 nz backflow testing standard)))))",0.8192884444174481,0.8431826343484686,16,19,1,1,0.8338064725444075,0.8542834267413931,71.53013509989073,68.00576325318852,65.20899910139784,63.53121421446575,"[0.9021400778210116,0.851797433636987,0.7888143618070625,0.7257375583589948]","[0.8935332708528585,0.8401736012831399,0.7719414893617021,0.70699053265755]",12329,12490,10280,10670,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. is( valve. type, or( pressure relief, expansion control)), pressure relief, expansion control, define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0)","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if not, then, obligation to have a rating of more than equal to that of the energy source that warms the water, such as the valve that relieves pressure and temperature.","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.0,0.8841430140625297,1.0843428223518904e-76,0.9177743695443804,19.0,19.0,1.0,1.0,0.0056845476381104,0.9209767814251402,0.0,94.7256040287013,0.0,96.8321891571294,0.0,92.7087249014918,"[0,0,0,0]","[0.9827870990176476,0.9716585024492652,0.9577501980459466,0.941718334809566]",12490.0,12490.0,71.0,11503.0,,
t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_43,68.87038538818506,0.6748767497027949,67.81755800282319,0.7004694929295401,finished,-,stefanfuchs164,,2023-04-05T08:40:56.000Z,900,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-entities_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.2.1.1 Tile profiles; Type II: Single profile tiles having one water- course depth of a minimum of 25 mm. tile, type, single profile, depth, water course, 25 mm","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","if( is( tile. type, single profile)), then( and( equal( count( tile. watercourse), 1), greater than equal( watercourse. depth, 25 mm)))","[""if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( and( expression( function( equal), expression( function( count), atom( relation( watercourse), variable( tile))), data( 1)), expression( function( greater than equal), atom( relation( depth), variable( watercourse)), data( baseunit( prefix( milli), kind( metre)), value( 25.0)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( tile. type, single profile)), then( obligation( and( greater than equal( tile. depth, water course), greater than equal( tile. depth, 25 mm))))","if( expression( function( is), atom( relation( type), variable( tile)), data( single profile))), then( obligation( and( expression( function( greater than equal), atom( relation( depth), variable( tile)), data( water course)), expression( function( greater than equal), atom( relation( depth), variable( tile)), data( baseunit( prefix( milli), kind( metre)), value( 25.0))))))","if( and( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker)))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( and( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3 nz backflow testing standard)))))",0.8149796902589236,0.8583479449745924,9,19,1,1,0.8301565414875497,0.8674939951961569,72.53911363078332,70.76392046885499,65.55489026667165,65.10674073986459,"[0.910210063507572,0.8621605667060213,0.8039235113444961,0.7453602075434045]","[0.9082602676511304,0.8538647342995169,0.7881791826428505,0.7255695725852005]",12329,12490,10235,10835,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. valve, type, pressure relief, expansion control, cold water supply, flow rate, flow rate capacity, hot water storage vessel, working pressure, maximum pressure rating","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( obligation( and( expression( function( has), atom( variable( valve: source of energy heating water))))))","if( and( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control))), expression( function( has), atom( variable( valve)), data( cold water supply)))), then( obligation( and( expression( function( has), atom( variable( valve)), data( flow rate)), expression( function( greater than equal), atom( variable( flow rate capacity)), data( cold water storage vessel)), expression( function( has), atom( variable( hot water storage vessel)), data( working pressure)), expression( function( greater than equal), atom( variable( maximum pressure rating)), data( working pressure)))))","if( exist( valve)), then( obligation( and( has( valve: source of energy heating water))))","if( and( is( valve. type, or( pressure relief, expansion control)), has( valve, cold water supply))), then( obligation( and( has( valve, flow rate), greater than equal( flow rate capacity, cold water storage vessel), has( hot water storage vessel, working pressure), greater than equal( maximum pressure rating, working pressure))))",0.2103732517863937,0.7665172084400016,0.2909084040368502,0.8599905563191426,19.0,19.0,1.0,1.0,0.4474779823859087,0.8689351481184948,35.55457025324692,80.16633339680459,50.536340054395154,83.44417621321716,27.42444580235314,77.13627663632867,"[0.9006977992485239,0.8031895614353026,0.6722966770699468,0.5623139880952381]","[0.948677784944255,0.9194954553886108,0.8749883297544581,0.8268796992481203]",12490.0,12490.0,5589.0,10853.0,,
t5-amr_1_ir-exp_ir_random_split_esp20_e20_43,53.59992343894995,0.507390602683051,50.14619535921761,0.4975226455767003,finished,-,stefanfuchs164,,2023-04-05T08:31:38.000Z,1149,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_expressions""]",False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_1_ir-exp_ir_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"extract LegalRuleML expressions: G13AS2 G13AS2 5.10.1 Where a drain or part of a drain is no longer required, it shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary.",extract LegalRuleML expressions: G12AS1 G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"is( drain, required), is( drain. part, required), disconnect( drain, or( live drain junction, property boundary)), live drain junction, property boundary, disconnect( drain. part, or( live drain junction, property boundary)), live drain junction, property boundary","[""is( drain, required), is( drain. part, required), disconnect( drain, or( live drain junction, property boundary)), live drain junction, property boundary, disconnect( drain. part, or( live drain junction, property boundary)), live drain junction, property boundary""]","[""has( piped water supply system, pressure vacuum breaker), as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as 2845 3, nz backflow testing standard, as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)), as 2845 3, nz backflow testing standard""]","has( piped water supply system, pressure vacuum breaker), as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as 2845 3, nz backflow testing standard, as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)), as 2845 3, nz backflow testing standard","exist( drain), is( drain. part, or( drain. junction, live drain)), drain. connection, to( drain. disconnect, foul water drainage system)","exist( drain), is( drain. part, or( drain. junction, live drain)), drain. connection, to( drain. disconnect, foul water drainage system)","is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard","is( piped water supply system. type, pressure vacuum breaker), as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as 2845 3, nzbackflow testing standard",0.8613470017449644,0.8790798556888173,16,19,1,1,0.8701267639320737,0.885834109972041,54.52434930360506,51.67072825273953,52.706321092998365,48.70904620978671,"[0.80043980208906,0.6462012895991028,0.5311784897025171,0.43824817518248177]","[0.7927406628090479,0.6269096756901635,0.5030054644808744,0.4104207300083589]",4181,4292,3638,3802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_0_ir-entities_ir_random_split_esp20_e20_43,0.0,0.6182248169801455,0.0,0.6333492144535441,finished,-,stefanfuchs164,,2023-04-05T08:31:33.000Z,560,,False,8,lrml,5,False,20,20,500,epoch,False,test,"[""__main__.get_ir_entities""]",False,1,False,0,0.0001,linear,0,512,bleu,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,,1.2,True,t5-amr_0_ir-entities_ir_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"extract LegalRuleML entities: G15AS1 G15AS1 4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9.",extract LegalRuleML entities: G12AS1 G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"waste chute, site entry hopper, waste storage area, type, common, internal diameter, 450 mm, self cleaning, vertical, joint, smooth, top, ventilation, roof line, bottom, container, termination point, central, location, space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9","[""waste chute, site entry hopper, waste storage area, type, common, internal diameter, 450 mm, self cleaning, vertical, joint, smooth, top, ventilation, roof line, bottom, container, termination point, central, location, space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9""]","[""piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying""]","piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","waste chute, side entry hopper, storage area, type, common, internal diameter, 450 mm, self cleaning, vertical, smooth joint, vented, roof line, bottom, container, location, central, nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9","waste chute, side entry hopper, storage area, type, common, internal diameter, 450 mm, self cleaning, vertical, smooth joint, vented, roof line, bottom, container, location, central, nzbc g15as1 3.0.1 to nzbc g16as1 3.0.9","piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying","piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying",0.95375756213075,0.941317149175596,14,19,1,1,0.9547945205479452,0.9429735234215886,0.0,0.0,0.0,0.0,"[0.8579626972740315,0.7505668934240363,0.5886581469648562,0.4657070279424217]","[0.8754499640028798,0.7647951441578149,0.6142742582197274,0.4982993197278911]",1460,1473,1394,1389,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
