Name,lrml_f_score,bleu,lrml_f_score_test,bleu_test,State,Notes,User,Tags,Created,Runtime,Sweep,adafactor,bs,dataset,decoding_runs,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,experiment,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,mask_percentage,max_length,metric_for_best_model,metric_names,model_name,model_path,no_repeat_ngram_size,num_beams,num_warmup_steps,post_process,repetition_penalty,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,calc_loss,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,reference_length,reference_length_test,translation_length,translation_length_test,RANDOM_INPUT_test_no_sep,RANDOM_INPUT_test_oracle,RANDOM_LABEL_EVAL_test_no_sep,RANDOM_LABEL_EVAL_test_oracle,RANDOM_LABEL_test_no_sep,RANDOM_LABEL_test_oracle,RANDOM_PRED_EVAL_test_no_sep,RANDOM_PRED_EVAL_test_oracle,RANDOM_PRED_test_no_sep,RANDOM_PRED_test_oracle,bleu_test_no_sep,bleu_test_oracle,brevity_penalty_test_no_sep,brevity_penalty_test_oracle,eval_epoch_test_no_sep,eval_epoch_test_oracle,ir_change_ratio_test_no_sep,ir_change_ratio_test_oracle,length_ratio_test_no_sep,length_ratio_test_oracle,lrml_f_score_test_no_sep,lrml_f_score_test_oracle,lrml_precision_test_no_sep,lrml_precision_test_oracle,lrml_recall_test_no_sep,lrml_recall_test_oracle,precisions_test_no_sep,precisions_test_oracle,reference_length_test_no_sep,reference_length_test_oracle,translation_length_test_no_sep,translation_length_test_oracle,eval_loss,prediction_epoch
t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_45,70.40221151314272,0.7480978613791317,55.76951001,0.6569107939874012,finished,-,stefanfuchs164,,2023-04-06T15:12:16.000Z,1624,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 The scope of this Acceptable Solution is limited to the materials, products and processes contained herein, for buildings within the scope of NZS 3604, and: a) Up to 3 storeys with a height measured from lowest ground level adjacent to the building to the highest point of the roof (except for chimneys, aerials and the like) of 10 m or less, and b) With floor plan area limited only by seismic and structural control joints, and c) External walls that are vertical, and roofs that are 60Â° or less above the horizontal. if( and( within( building, scope), as per( building. material, nzs 3604), greater than equal( building. storey, height), is( roof. elevation, ground level), not( is( roof. elevation, or( chimney, aerial, et-cetera))), less than equal( roof. elevation, 10 m), has( roof, floor plan area), is( floor plan area, limited by( floor plan area, and( seismic control joint, structural control joint)), is( building. elevation, and( external wall, vertical), greater than equal( roof. elevation, 60 deg))))), then( apply to( nzs 3604), apply to( nzs 3604, building. material, and( material, product), process)))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( and( apply to( nzs 3604, building), less than equal( count( building storey), 3), adjacent( building, ground level), define( min( ground level. elevation), x0), has( building, roof), define( max( roof. elevation), x1), exclude( max( roof. elevation), or( chimney, aerial)), in between( building. height, and( x0, x1)), less than equal( building. height, 10 m), has( building, floor plan area), by( floor plan area. limit, and( seismic control joint, structural control joint)), has( building, external wall), is( external wall. orientation, vertical), has( building, roof), less than equal( roof. slope, 60 deg))), then( and( has( building, or( material, product, process)), apply to( nzbc e2as1, and( material, product, process))))","[""if( and( expression( function( apply to), atom( variable( nzs 3604)), data( building)), expression( function( less than equal), expression( function( count), atom( variable( building storey))), data( 3)), expression( function( adjacent), atom( variable( building)), data( ground level)), expression( function( define), expression( function( min), atom( relation( elevation), variable( ground level))), data( x0)), expression( function( has), atom( variable( building)), data( roof)), expression( function( define), expression( function( max), atom( relation( elevation), variable( roof))), data( x1)), or( expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( chimney)), expression( function( exclude), expression( function( max), atom( relation( elevation), variable( roof))), data( aerial))), expression( function( in between), atom( relation( height), variable( building)), data( x0)), expression( function( in between), atom( relation( height), variable( building)), data( x1)), expression( function( less than equal), atom( relation( height), variable( building)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( building)), data( floor plan area)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( seismic control joint)), expression( function( by), atom( relation( limit), variable( floor plan area)), data( structural control joint)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( is), atom( relation( orientation), variable( external wall)), data( vertical)), expression( function( less than equal), atom( relation( slope), variable( roof)), data( baseunit( kind( angleDegree)), value( 60.0))))), then( and( or( expression( function( has), atom( variable( building)), data( material)), expression( function( has), atom( variable( building)), data( product)), expression( function( has), atom( variable( building)), data( process))), expression( function( apply to), atom( variable( nzbc e2as1)), data( material)), expression( function( apply to), atom( variable( nzbc e2as1)), data( product)), expression( function( apply to), atom( variable( nzbc e2as1)), data( process))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( within( building, scope), as per( building. material, nzs 3604), greater than equal( building. storey, height), is( roof. elevation, ground level), not( is( roof. elevation, or( chimney, aerial, et-cetera))), less than equal( roof. elevation, 10 m), has( roof, floor plan area), is( floor plan area, limited by( floor plan area, and( seismic control joint, structural control joint)), is( building. elevation, and( external wall, vertical), greater than equal( roof. elevation, 60 deg)))), then( apply to( nzs 3604, building. material, and( material, product), process)))","if( and( expression( function( within), atom( variable( building)), data( scope)), expression( function( as per), atom( relation( material), variable( building)), data( nzs 3604)), expression( function( greater than equal), atom( relation( storey), variable( building)), data( height)), expression( function( is), atom( relation( elevation), variable( roof)), data( ground level)), or( not( expression( function( is), atom( relation( elevation), variable( roof)), data( chimney))), not( expression( function( is), atom( relation( elevation), variable( roof)), data( aerial))), not( expression( function( is), atom( relation( elevation), variable( roof)), data( et-cetera)))), expression( function( less than equal), atom( relation( elevation), variable( roof)), data( baseunit( kind( metre)), value( 10.0))), expression( function( has), atom( variable( roof)), data( floor plan area)), expression( function( is), atom( variable( floor plan area)), data( limited by( floor plan area, and( seismic control joint, structural control joint)))))), then( expression( function( apply to), atom( variable( nzs 3604)), data( building. material)))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9346614122930212,1.0,16,19,1,1,0.9367059006937408,1.000641683778234,71.06102163235187,52.73498296230882,69.75550490177993,59.174591187921656,"[0.8790047432803528,0.8318265528210279,0.7759157894736842,0.7233988478481871]","[0.7613184558163396,0.7002066649444588,0.6271627422921816,0.5569968553459119]",12829,7792,12017,7797,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( has), atom( variable( person)), data( disability))), then( and( expression( function( apply to), atom( variable( nzbc d1as1)), data( building))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( clearing)), expression( function( for), atom( variable( access)), data( maintenance)))))","if( has( person, disability)), then( and( apply to( nzbc d1as1, building)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, and( cleaning, clearing, maintenance)))))",0.5905057894789848,0.9151871029181194,0.8749866081601407,1.0,19.0,19.0,1.0,1.0,0.8821868583162218,1.0251540041067762,51.95469390930203,91.38962070564862,51.92719819199867,90.55686179,51.98221876027799,92.23783783604294,"[0.8101542042478906,0.7322188004106174,0.637344766410408,0.548665971083619]","[0.9332749123685528,0.9228539014244296,0.9094947956334096,0.8955643614981464]",7792.0,7792.0,6874.0,7988.0,,
t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_45,68.73775752166598,0.7188837539486267,55.35528184429753,0.6479351659061803,finished,-,stefanfuchs164,,2023-04-06T14:29:11.000Z,2582,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2. if( exist( chimney connection)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( exist( chimney connection)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( and( expression( function( has), atom( variable( chimney connection)), data( bracing unit)), expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.8994711712436546,1.0,12,19,1,1,0.9042014186608464,1.0297741273100616,70.58382258343659,52.21734352423716,66.98579604953463,58.894474289567455,"[0.8803448275862069,0.8323358487292913,0.774306161633793,0.7191534205673136]","[0.7581006979062812,0.6929351236039654,0.6165024008086935,0.5442168214785597]",12829,7792,11600,8024,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))",nzbc d1as1 1.1.4 Figure 1 illustrates an acceptable solution with provision for person with disabilities to approach building.,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.9814200441008786,8.065119212278262e-62,0.9882528951979106,19.0,19.0,1.0,1.0,0.007058522,0.9883213552361396,0.0,98.73200801,0.0,99.23869227884116,0.0,98.23047141940656,"[0,0,0,0]","[0.9962342552915204,0.9943761443892232,0.9920959030430774,0.9896496815286624]",7792.0,7792.0,55.0,7701.0,,
t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_45,68.64610192729688,0.7195686517855614,55.31859772483746,0.6453958814278683,finished,-,stefanfuchs164,,2023-04-06T13:25:56.000Z,3792,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 3.2.1 Where a solar water heater has a controller, the controller must meet the requirements specified in AS/NZS 2712: clause 6.3. if( and( has( solar water heater, controller))), then( obligation( comply with( controller, nzs 2712 6.3)))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( has( solar water heater, controller)), then( obligation( comply with( controller, nzs 2712 6.3)))","[""if( expression( function( has), atom( variable( solar water heater)), data( controller))), then( obligation( expression( function( comply with), atom( variable( controller)), data( nzs 2712 6.3))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( solar water heater, controller))), then( obligation( comply with( controller, nzs 2712 6.3)))","if( and( expression( function( has), atom( variable( solar water heater)), data( controller)))), then( obligation( expression( function( comply with), atom( variable( controller)), data( nzs 2712 6.3))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9028961241707328,1.0,9,19,1,1,0.9073193545872632,1.0446611909650925,70.40701643623926,52.10661360894901,66.97112087570024,58.952584914179376,"[0.8785223367697594,0.830235975451638,0.7720473125761002,0.7163735013564365]","[0.7582309582309582,0.6907854050711194,0.6130759651307597,0.5403134796238245]",12829,7792,11640,8140,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( has), atom( variable( building)), data( access point)), expression( function( for), atom( variable( person with disability))), expression( function( approach), atom( variable( building))))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))","if( exist( building)), then( obligation( and( has( building, access point), for( person with disability), approach( building))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.4095427105033922,0.9777388622758676,0.590935865,0.9826541604232308,19.0,19.0,1.0,1.0,0.6552874743326489,0.9828028747433264,46.68522499631486,98.66186798469164,51.23530951722291,99.24365763645795,42.87738742030625,98.08685975405784,"[0.8411672542107325,0.7527222332211443,0.6513210568454764,0.5594009309856305]","[0.9976495168451291,0.9960541891358674,0.9941706412294647,0.9921259842519684]",7792.0,7792.0,5106.0,7658.0,,
t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_45,68.62910621040116,0.7198795650406521,55.48424326142853,0.6498164176765928,finished,-,stefanfuchs164,,2023-04-06T13:07:32.000Z,1101,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 Drainage 3.3.1 All gully traps shall be constructed to prevent the ingress of surface water and foreign bodies likely to cause a blockage, shall be located within the legal boundary of the land on which the building is erected. if( exist( gully trap)), then( obligation( and( has( gully trap, ingress prevention), is( ingress prevention. purpose, and( surface water, foreign body)), within( gully trap. location, boundary), is( boundary. location, building))))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( exist( gully trap)), then( obligation( and( prevent( gully trap, ingress), for( ingress, and( surface water, foreign bodies)), within( gully trap. location, site boundary))))","[""if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( prevent), atom( variable( gully trap)), data( ingress)), expression( function( for), atom( variable( ingress)), data( surface water)), expression( function( for), atom( variable( ingress)), data( foreign bodies)), expression( function( within), atom( relation( location), variable( gully trap)), data( site boundary)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( exist( gully trap)), then( obligation( and( has( gully trap, ingress prevention), is( ingress prevention. purpose, and( surface water, foreign body)), within( gully trap. location, boundary), is( boundary. location, building))))","if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( has), atom( variable( gully trap)), data( ingress prevention)), expression( function( is), atom( relation( purpose), variable( ingress prevention)), data( surface water)), expression( function( is), atom( relation( purpose), variable( ingress prevention)), data( foreign body)), expression( function( within), atom( relation( location), variable( gully trap)), data( boundary)), expression( function( is), atom( relation( location), variable( boundary)), data( building)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9034944054664246,1.0,1,19,1,1,0.9078649933743862,1.0003850102669405,70.37102577583215,52.52420225320931,66.97134029472255,58.7978398448962,"[0.8784236284021636,0.8299930891499654,0.771838331160365,0.7161973062795173]","[0.7554842847979474,0.6931524547803618,0.620039037085231,0.5491480996068152]",12829,7792,11647,7795,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))",ML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for person with disabilities to approach building.,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.989175084,8.065119212278262e-62,0.9925286964847548,19.0,19.0,1.0,1.0,0.007058522,0.9925564681724846,0.0,99.47674957092728,0.0,99.62833106,0.0,99.32562863286584,"[0,0,0,0]","[0.9985777088182052,0.9973954942049746,0.9960650577124868,0.9944510503369004]",7792.0,7792.0,55.0,7734.0,,
t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_45,69.43623974332762,0.7399356531700803,55.51907999266752,0.6391343355260287,finished,-,stefanfuchs164,,2023-04-06T12:21:31.000Z,2758,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 3.9.3 Trench slope; These anti-scour blocks shall be: Spaced at: 5.0 m centres for trench slopes greater than 1 in 5. if( greater than( trench. slope, 1/5)), then( obligation( and( has( trench, anti scour blocks), greater than equal( anti scour blocks. spacing, 5.0 mCentres))))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( and( has( trench, anti scour blocks), greater than( trench. slope, 1/5))), then( obligation( equal( anti scour blocks. spacing, 5 mCentres)))","[""if( and( expression( function( has), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5 mCentres))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( greater than( trench. slope, 1/5)), then( obligation( equal( anti scour blocks. spacing, 5 mCentres)))","if( expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5 mCentres))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9268277111848884,1.0,10,19,1,1,0.9293787512666616,1.0823921971252566,70.61981994327105,52.16814957994585,68.29167892371727,59.33004212462495,"[0.8798121278201795,0.8318427269659129,0.7737034207622443,0.7174210076857387]","[0.7525492055963955,0.6840911803317818,0.6067996155694377,0.5341637441044866]",12829,7792,11923,8434,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( expression( function( has), atom( variable( person)), data( disability))), then( obligation( and( expression( function( towards), atom( variable( person)), data( building)), expression( function( as per), atom( relation( approach), variable( building)), data( nzbc d1as1 f1)))))","if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))","if( has( person, disability)), then( obligation( and( towards( person, building), as per( building. approach, nzbc d1as1 f1))))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access point), for( access point, and( cleaning, clearing, maintenance)))))",0.6715462762187646,0.7068166676313522,1.0,1.0,19.0,19.0,1.0,1.0,1.000641683778234,1.1596509240246409,52.54804730600478,78.72770557517897,51.81836484755126,77.47861608195305,53.29857338246825,80.01772998252302,"[0.80723355136591,0.7275897700852493,0.6340574996747756,0.5461215932914046]","[0.7605135015493582,0.729428794120922,0.6911270445888416,0.650997632735881]",7792.0,7792.0,7797.0,9036.0,,
t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_45,68.76451499402926,0.7091044666234795,55.40751529061889,0.6510473546040789,finished,-,stefanfuchs164,,2023-04-06T12:03:24.000Z,1084,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.0 Roof; Hips, ridges, valleys and barges shall be made weathertight by using flashings and seals as shown in Figure 23 to Figure 28. if( exist( roof)), then( obligation( and( is( roof. type, or( hip, ridge, valley, barge)), is( roof. weathertight, flashing), is( seal, seal))))","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water. if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))","if( is( roof. component, or( hip, ridge, valley, barge))), then( obligation( and( by( component. weathertightness, and( flashing, seal)), as per( flashing, nzbc e2as1 f23 to nzbc e2as1 f28), as per( seal, nzbc e2as1 f23 to nzbc e2as1 f28))))","[""if( or( expression( function( is), atom( relation( component), variable( roof)), data( hip)), expression( function( is), atom( relation( component), variable( roof)), data( ridge)), expression( function( is), atom( relation( component), variable( roof)), data( valley)), expression( function( is), atom( relation( component), variable( roof)), data( barge)))), then( obligation( and( expression( function( by), atom( relation( weathertightness), variable( component)), data( flashing)), expression( function( by), atom( relation( weathertightness), variable( component)), data( seal)), expression( function( as per), atom( variable( flashing)), data( nzbc e2as1 f23 to nzbc e2as1 f28)), expression( function( as per), atom( variable( seal)), data( nzbc e2as1 f23 to nzbc e2as1 f28)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( exist( roof)), then( obligation( and( is( roof. type, or( hip, ridge, valley, barge)), is( roof. weathertight, flashing), is( seal, seal))))","if( expression( function( exist), atom( variable( roof)))), then( obligation( and( or( expression( function( is), atom( relation( type), variable( roof)), data( hip)), expression( function( is), atom( relation( type), variable( roof)), data( ridge)), expression( function( is), atom( relation( type), variable( roof)), data( valley)), expression( function( is), atom( relation( type), variable( roof)), data( barge))), expression( function( is), atom( relation( weathertight), variable( roof)), data( flashing)), expression( function( is), atom( variable( seal)), data( seal)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.8773000560804941,1.0,0,19,1,1,0.8842466287317796,1.0391427104722792,70.90440284,52.25471322,66.75000642,58.965196142653866,"[0.888663610719323,0.8414796416215736,0.7838778789501875,0.7281466175545773]","[0.7587995553908855,0.6944789853270331,0.620383122574183,0.5495461422087746]",12829,7792,11344,8097,translate English to LegalRuleML: D1AS1 1.1.4 Figure 1 illustrates an acceptable solution with provision for people with disabilities to approach buildings.,"translate English to LegalRuleML: G14VM1 1.4.1 Treatment facilities shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance. if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","[""if( expression( function( exist), atom( variable( building)))), then( permission( expression( function( comply with), atom( relation( accessible route), variable( building)), data( nzbc d1as1 f1.1))))""]","[""if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","if( exist( building)), then( permission( comply with( building. accessible route, nzbc d1as1 f1.1)))","if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",roo,"if( expression( function( exist), atom( variable( treatment facility)))), then( obligation( and( expression( function( has), atom( relation( location), variable( treatment facility)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))",RULE: D1AS1 1.1.4 Figure 1 illustrates a solution with provision for person with disabilities to approach building.,"if( exist( treatment facility)), then( obligation( and( has( treatment facility. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))",0.0,0.963310882,8.065119212278262e-62,0.9710995546565212,19.0,19.0,1.0,1.0,0.007058522,0.9715092402464066,0.0,98.73658678247082,0.0,99.48816964922456,0.0,97.99627443,"[0,0,0,0]","[0.997093791281374,0.994011976047904,0.9903485254691688,0.986495611073599]",7792.0,7792.0,55.0,7570.0,,
t5-amr_0_ir-consi_ir_doc_split_esp20_e20_45,68.62910621040116,0.7198505629821292,55.34187571414236,0.645706126,finished,-,stefanfuchs164,,2023-04-06T11:33:12.000Z,1809,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.2.2 Surrounding materials; Metals which are in contact in locations where they will become wet, or where water can flow over metals or certain plastics onto another metal, shall be selected in accordance with Table 21 and Table 22.","translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( and( is( material, metal), has( material. exposure, water))), then( obligation( as per( material, and( nzbc e2as1 t21, nzbc e2as1 t22))))","[""if( and( expression( function( is), atom( variable( material)), data( metal)), expression( function( has), atom( relation( exposure), variable( material)), data( water)))), then( and( obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( variable( material)), data( nzbc e2as1 t22)))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( accept( network utility operator, discharge), is( discharge. type, industrial liquid waste), into( discharge, sewer))), then( obligation( and( within( industrial liquid waste, disposal system), for( disposal system, and( plumbing, drainage)), comply with( disposal system, nzbc g13))))","if( and( has( metal, contact), is( contact. location, wet), or( is( contact. location, water), over( water, metal), onto( water, plastic)), towards( water, metal), is( metal. material, another))), then( obligation( as per( metal. contact, and( nzbc e2as1 t21, nucleus) t22)))","if( and( expression( function( has), atom( variable( metal)), data( contact)), expression( function( is), atom( relation( location), variable( contact)), data( wet)), or( expression( function( is), atom( relation( location), variable( contact)), data( water)), expression( function( over), atom( variable( water)), data( metal)), expression( function( onto), atom( variable( water)), data( plastic))), expression( function( towards), atom( variable( water)), data( metal)), expression( function( is), atom( relation( material), variable( metal)), data( another)))), then( and( obligation( expression( function( as per), atom( relation( contact), variable( metal)), data( nzbc e2as1 t21))), obligation( expression( function( as per), atom( relation( contact), variable( metal)), data( nucleus)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( relation( discharge), variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( is), atom( relation( type), variable( disposal system)), data( plumbing)), expression( function( is), atom( relation( type), variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13 foul water)))))","if( and( for( network utility operator, industrial liquid waste), towards( industrial liquid waste. discharge, sewer))), then( obligation( and( has( industrial liquid waste, disposal system), is( disposal system. type, and( plumbing, drainage)), comply with( disposal system, nzbc g13 foul water))))",0.9033235009178624,1.0,18,19,1,1,0.9077090965780652,1.037987679671458,70.37102577583215,52.14883035949909,66.97134029472255,58.95144134869934,"[0.8784886217260627,0.8301365128736824,0.7719725289055029,0.7163226032190343]","[0.7576656775469832,0.6907755508527325,0.6135622963148659,0.5413353527704152]",12829,7792,11645,8088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_44,70.04826665724487,0.6925565338844816,56.61969661841382,0.5794526229285453,finished,-,stefanfuchs164,,2023-04-06T09:40:30.000Z,6759,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2. if( exist( chimney connection)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( exist( chimney)), then( obligation( loop( for each( chimney. connection), as per( count( bracing. unit), nzbc b1as3 t2))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( exist( chimney connection)), then( obligation( and( has( chimney connection, bracing unit), as per( bracing unit. number, nzbc b1as3 1.9.4))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( and( expression( function( has), atom( variable( chimney connection)), data( bracing unit)), expression( function( as per), atom( relation( number), variable( bracing unit)), data( nzbc b1as3 1.9.4)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.8494161116361268,1.0,10,19,1,1,0.8596928833112479,1.2207392197125255,73.32991374542289,53.043708104685415,67.04775749379178,60.71269678968606,"[0.8922839786018678,0.8462310640627851,0.7918618535868467,0.7390902366863905]","[0.6852396972245585,0.6239822353811991,0.5499893639651138,0.4794051567347812]",12829,7792,11029,9512,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( within), atom( relation( location), variable( disposal system)), data( area)), expression( function( has), atom( variable( area)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))","if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( relation( type), variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( accidental overflow)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","if( exist( disposal system)), then( obligation( and( within( disposal system. location, area), has( area, access point), for( access point, and( cleaning, clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank. type, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, accidental overflow, waterway contamination)))))",0.6597577986902556,0.7428094094068026,1.0,1.0,19.0,19.0,1.0,1.0,1.0051334702258727,1.235112936344969,52.38250076961105,89.86309730669538,50.811917197367976,89.04479862724158,54.05327386,90.69657538755789,"[0.7909856996935649,0.712999871415713,0.6227661227661228,0.539454806312769]","[0.765378221113882,0.751593687950674,0.7359680470885012,0.7191034993128238]",7792.0,7792.0,7832.0,9624.0,,
t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_44,69.39310541198364,0.6866027799619826,56.55385567023229,0.6439253403872562,finished,-,stefanfuchs164,,2023-04-06T08:47:22.000Z,3186,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade â two-edge support;. if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.8349044573030646,1.0,3,19,1,1,0.8471431912074207,1.007828542094456,72.70414369199048,53.42818688675338,66.37050884078465,60.06796645273623,"[0.9044902465955098,0.8553301843104566,0.7977810926720119,0.7410605349601126]","[0.756780848083535,0.692228776609387,0.6125532739248354,0.5357700312174818]",12829,7792,10868,7853,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( groundwater contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))",xli 1 :ARG1-of ( include-91 :ARG2 ( area :ARG0-of ( access-01 :ARG1 ( and :op1 ( clean-01 ) :op2 ( clear-01 :ARG1 ( blockage) ) :op3 ( maintain-01 ) ) :ARG1-of ( suffice-01 ) ) ) ),"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, groundwater contamination, waterway contamination)))))",0.0,0.9818382805947732,8.065119212278262e-62,0.9868235997356136,19.0,19.0,1.0,1.0,0.007058522,0.9869096509240246,0.0,99.05118801,0.0,99.22712773714385,0.0,98.87587110364134,"[0,0,0,0]","[0.9981794538361508,0.996332678454486,0.9939313984168864,0.9913621262458472]",7792.0,7792.0,55.0,7690.0,,
t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_44,69.24733410910517,0.6908018684711001,56.61265892496456,0.6448010329102032,finished,-,stefanfuchs164,,2023-04-06T08:29:05.000Z,1094,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 2.0.1 Suspended floors and slabs on ground shall be, for sites below the road, no less than 150 mm above the lowest point on the site boundary (see Figure 2). if( and( is( floor. type, suspended), is( slab. location, ground))), then( obligation( and( below( floor. location, road), greater than equal( slab. elevation, 150 mm), define( boundary. location, lowest point), as per( slab. elevation, nzbc e1as1 f2))))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( and( less than( site. elevation, road), or( is( floor. type, suspended), on( slab, ground)))), then( obligation( and( define( min( site boundary. elevation), x0), greater than equal( floor. elevation, 'x0 + 150 mm'), greater than equal( slab. elevation, 'x0 + 150 mm'))))","[""if( and( expression( function( less than), atom( relation( elevation), variable( site)), data( road)), or( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( on), atom( variable( slab)), data( ground))))), then( obligation( and( expression( function( define), expression( function( min), atom( relation( elevation), variable( site boundary))), data( x0)), expression( function( greater than equal), atom( relation( elevation), variable( floor)), data( 'x0 + 150 mm')), expression( function( greater than equal), atom( relation( elevation), variable( slab)), data( 'x0 + 150 mm')))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( floor. type, suspended), is( slab. location, ground))), then( obligation( and( below( floor. location, road), greater than equal( slab. elevation, 150 mm), define( boundary. location, lowest point), as per( slab. elevation, nzbc e1as1 f2))))","if( and( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( is), atom( relation( location), variable( slab)), data( ground)))), then( obligation( and( expression( function( below), atom( relation( location), variable( floor)), data( road)), expression( function( greater than equal), atom( relation( elevation), variable( slab)), data( baseunit( prefix( milli), kind( metre)), value( 150.0))), expression( function( define), atom( relation( location), variable( boundary)), data( lowest point)), expression( function( as per), atom( relation( elevation), variable( slab)), data( nzbc e1as1 f2)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.8563831791349183,1.0,13,19,1,1,0.8657728583677605,1.011165297741273,72.35798347420936,53.49398944,66.39311285482219,60.11747381753071,"[0.887548392905375,0.8389815150416817,0.7824897400820794,0.7266385166146503]","[0.7574565300164996,0.6929959100204499,0.6134637662504827,0.5368161783769769]",12829,7792,11107,7879,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( within), atom( variable( area with sufficient access for cleaning)), data( clearing of blockages)))))","if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( groundwater contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","if( exist( disposal system)), then( obligation( and( within( area with sufficient access for cleaning, clearing of blockages, and maintenance))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, groundwater contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",0.4186796769520016,0.9742659857300844,0.6144529613416433,0.9780741934098386,19.0,19.0,1.0,1.0,0.6724845995893224,0.978311088,45.04197331514298,98.73967388970136,51.47641888875334,99.42887325632056,40.03738344215548,98.05996323485026,"[0.8374045801526717,0.7456123432979749,0.6401559454191034,0.5393103448275862]","[0.9981634527089072,0.99696088794926,0.9954745108478638,0.9938321265754894]",7792.0,7792.0,5240.0,7623.0,,
t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_44,69.27210251123552,0.6847441760761654,56.66201236538749,0.6456320097380337,finished,-,stefanfuchs164,,2023-04-06T07:49:08.000Z,2394,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 Trench 3.9.6 Placing and compacting a) Granular bedding and selected fill shall be placed in layers of no greater than 100 mm loose thickness and compacted. if( and( is( trench. type, or( bedding, selected fill)), is( bedding. type, granular))), then( obligation( and( within( bedding. layer, layer), less than equal( layer. thickness, 100 mm), is( fill. layer, loose), is( fill. layer, compacted))))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( or( exist( granular material), exist( selected fill))), then( obligation( and( within( granular bedding, layer), within( selected fill, layer), less than equal( layer. thickness, 100 mm), is( layer, compacted))))","[""if( or( expression( function( exist), atom( variable( granular material))), expression( function( exist), atom( variable( selected fill))))), then( obligation( and( expression( function( within), atom( variable( granular bedding)), data( layer)), expression( function( within), atom( variable( selected fill)), data( layer)), expression( function( less than equal), atom( relation( thickness), variable( layer)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))), expression( function( is), atom( variable( layer)), data( compacted)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( trench. type, or( bedding, selected fill)), is( bedding. type, granular))), then( obligation( and( within( bedding. layer, layer), less than equal( layer. thickness, 100 mm), is( fill. layer, loose), is( fill. layer, compacted))))","if( and( or( expression( function( is), atom( relation( type), variable( trench)), data( bedding)), expression( function( is), atom( relation( type), variable( trench)), data( selected fill))), expression( function( is), atom( relation( type), variable( bedding)), data( granular)))), then( obligation( and( expression( function( within), atom( relation( layer), variable( bedding)), data( layer)), expression( function( less than equal), atom( relation( thickness), variable( layer)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))), expression( function( is), atom( relation( layer), variable( fill)), data( loose)), expression( function( is), atom( relation( layer), variable( fill)), data( compacted)))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.846815253,1.0,2,19,1,1,0.8574323797645959,1.0145020533880904,72.51303280008801,53.543507,66.30848125570367,60.16624208402512,"[0.888,0.8402415591545429,0.7848590900718364,0.7300454250486696]","[0.7581277672359267,0.6937579617834395,0.6143681847338037,0.5377260981912144]",12829,7792,11000,7905,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( groundwater contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))","RULEML: G14VM1 1.4.1 Disposal systems shall be located: in areas with sufficient access for cleaning and clearing of blockages, and maintenance.","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, groundwater contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",0.0,0.9754483357642968,8.065119212278262e-62,0.9799086482632552,19.0,19.0,1.0,1.0,0.007058522,0.9801078028747432,0.0,99.10506594199524,0.0,99.54878390470036,0.0,98.66528598717572,"[0,0,0,0]","[0.998166819431714,0.9963070429965708,0.9944200876843364,0.992906852248394]",7792.0,7792.0,55.0,7637.0,,
t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_44,70.38620059,0.7194645728170165,57.27723158828033,0.6604526640558529,finished,-,stefanfuchs164,,2023-04-06T06:26:06.000Z,4979,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 6.2.3 All fixings that penetrate metal cladding must be provided with sealing washers or boots to prevent leakage in accordance with Paragraph 5.2. if( and( has( cladding. material, metal), has( cladding, fixing))), then( obligation( and( has( fixing, or( sealing washer, sealing boot)), has( fixing, leakage prevention), as per( leakage prevention, nzbc g12as2 5.2))))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( through( fixing, metal cladding)), then( obligation( and( has( fixing, or( sealing washer, boot)), comply with( fixing, nzbc g12as2 5.2))))","[""if( expression( function( through), atom( variable( fixing)), data( metal cladding))), then( obligation( and( or( expression( function( has), atom( variable( fixing)), data( sealing washer)), expression( function( has), atom( variable( fixing)), data( boot))), expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 5.2)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( has( cladding. material, metal), has( cladding, fixing))), then( obligation( and( has( fixing, or( sealing washer, sealing boot)), has( fixing, leakage prevention), as per( leakage prevention, nzbc g12as2 5.2))))","if( and( expression( function( has), atom( relation( material), variable( cladding)), data( metal)), expression( function( has), atom( variable( cladding)), data( fixing)))), then( obligation( and( or( expression( function( has), atom( variable( fixing)), data( sealing washer)), expression( function( has), atom( variable( fixing)), data( sealing boot))), expression( function( has), atom( variable( fixing)), data( leakage prevention)), expression( function( as per), atom( variable( leakage prevention)), data( nzbc g12as2 5.2)))))","if( expression( function( exist), atom( variable( storage tank)))), then( or( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), expression( function( for), atom( relation( health hazard), variable( storage tank)), data( safety hazard))), expression( function( for), atom( relation( corrosion), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load))), obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), expression( function( for), atom( relation( health hazard), variable( storage tank)), data( safety hazard))), expression( function( for), atom( relation( corrosion), variable( storage tank)), data( associated plant)), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. health hazard, safety hazard)), for( storage tank. corrosion, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load))))",0.8940554166558168,1.0,6,19,1,1,0.8992906695767402,1.013988706365503,73.34314285,54.68041860149528,67.65844568391378,60.13299122857551,"[0.8813383028516946,0.836473050758765,0.7819218955682317,0.7274814553161427]","[0.7735729654474117,0.7078766250318633,0.6290591708381466,0.5523526370217167]",12829,7792,11537,7901,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","if( expression( function( exist), atom( variable( waste disposal system)))), then( obligation( and( expression( function( within), atom( relation( location), variable( waste disposal system)), data( area)), expression( function( has), atom( variable( area)), data( access point)), expression( function( for), atom( variable( access point)), data( cleaning)), expression( function( for), atom( variable( access point)), data( clearing)), expression( function( for), atom( variable( access point)), data( maintenance)))))","if( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( storage tank)), expression( function( is), atom( relation( type), variable( system)), data( treatment tank)), and( expression( function( is), atom( relation( type), variable( system)), data( piping))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil)), expression( function( test), atom( variable( system)), data( ground water)), expression( function( test), atom( variable( system)), data( waterway)), or( expression( function( by), atom( variable( runoff)), data( washing down)), expression( function( by), atom( variable( runoff)), data( rain)), expression( function( by), atom( variable( runoff)), data( accidental overflow)), expression( function( by), atom( variable( runoff)), data( other))))))","if( exist( waste disposal system)), then( obligation( and( within( waste disposal system. location, area), has( area, access point), for( access point, and( cleaning, clearing, maintenance)))))","if( or( is( system. type, or( industrial liquid waste, storage tank, treatment tank)), and( is( system. type, piping)))), then( obligation( and( test( system, and( soil, ground water, waterway)), by( runoff, or( washing down, rain, accidental overflow, other)))))",0.6602754968832987,0.7118442916937014,0.9660696132485522,0.8847562461671583,19.0,19.0,1.0,1.0,0.9666324435318276,0.8909137577002053,54.20557757,74.77494743996091,53.731762029005445,76.02173326226743,54.687823825743656,73.56839727650024,"[0.8169144981412639,0.7359903704694396,0.6445701967124764,0.5630514456359441]","[0.8830308268510516,0.83708436184115,0.7811768149882904,0.7256898332595544]",7792.0,7792.0,7532.0,6942.0,,
t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_44,69.37650704349151,0.6916895760837772,56.50411041418164,0.6434462610714228,finished,-,stefanfuchs164,,2023-04-06T05:30:15.000Z,3348,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS1 6.1.1 Jointing methods for PVC-U pipe shall comply with AS/NZS 2032. if( is( pipe. material, pvc u)), then( obligation( comply with( pipe. joint, nzs 2032)))","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads. if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))","if( is( pipe. material, pvc u)), then( obligation( comply with( pipe. jointing method, nzs 2032)))","[""if( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u))), then( obligation( expression( function( comply with), atom( relation( jointing method), variable( pipe)), data( nzs 2032))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( is( pipe. material, pvc u)), then( obligation( comply with( pipe. joint, nzs 2032)))","if( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u))), then( obligation( expression( function( comply with), atom( relation( joint), variable( pipe)), data( nzs 2032))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load)))))",0.8460967679983961,1.0,5,19,1,1,0.8568087925793125,1.004876796714579,72.62966046931956,53.43810398728819,66.40228389630602,59.943355037022016,"[0.9005640465793304,0.850837835363062,0.7925345622119816,0.7355042211707951]","[0.7564495530012771,0.6918327974276527,0.6120466321243523,0.5351598173515981]",12829,7792,10992,7830,"translate English to LegalRuleML: G14VM1 1.4.1 Disposal systems shall be located: In areas with sufficient access for cleaning, clearing of blockages, and maintenance.","translate English to LegalRuleML: G14VM1 1.6.1 Industrial liquid waste systems, storage and treatment tanks and piping systems shall be tested on completion to avoid contamination of any soil, ground water or waterways through run-off from washing-down, rain, accidental overflows or other causes. if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))","[""if( expression( function( exist), atom( variable( disposal system)))), then( obligation( and( expression( function( has), atom( relation( location), variable( disposal system)), data( access)), or( expression( function( for), atom( variable( access)), data( cleaning)), expression( function( for), atom( variable( access)), data( blockage clearing)), expression( function( for), atom( variable( access)), data( maintenance))))))""]","[""if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( ground water contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))""]","if( exist( disposal system)), then( obligation( and( has( disposal system. location, access), for( access, or( cleaning, blockage clearing, maintenance)))))","if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, ground water contamination, waterway contamination)))))",roo,"if( or( and( or( expression( function( is), atom( relation( type), variable( system)), data( industrial liquid waste)), expression( function( is), atom( relation( type), variable( system)), data( piping))), expression( function( is), atom( variable( system)), data( completed))), and( or( expression( function( is), atom( relation( type), variable( tank)), data( storage)), expression( function( is), atom( relation( type), variable( tank)), data( treatment))), expression( function( is), atom( variable( tank)), data( completed))))), then( obligation( and( expression( function( test), atom( variable( system)), data( soil contamination)), expression( function( test), atom( variable( system)), data( ground water contamination)), expression( function( test), atom( variable( system)), data( waterway contamination)), expression( function( test), atom( variable( tank)), data( soil contamination)), expression( function( test), atom( variable( tank)), data( groundwater contamination)), expression( function( test), atom( variable( tank)), data( waterway contamination)))))",xli 1 :ARG1-of ( mean-01 :ARG2 1.4.1 :ARG2 ( be-located-at-91 :ARG1 ( system :ARG0-of ( dispose-01 ) ) :ARG2 ( area :ARG1-of ( access-01 :ARG1-of ( suffice-01 :ARG2 ( and :op1 ( clean-01 ) :op2 ( clear-01 :ARG1 ( blockage ) ) :op3 ( maintain-01 ) ) ) ) :ARG1-of ( sufficient-02 ) ) ) ),"if( or( and( is( system. type, or( industrial liquid waste, piping)), is( system, completed)), and( is( tank. type, or( storage, treatment)), is( tank, completed)))), then( obligation( and( test( system, and( soil contamination, ground water contamination, waterway contamination)), test( tank, and( soil contamination, groundwater contamination, waterway contamination)))))",0.0,0.8117928991335465,8.065119212278262e-62,1.0,19.0,19.0,1.0,1.0,0.007058522,1.207905544147844,0.0,98.26918869092071,0.0,98.05040877657795,0.0,98.48894711602684,"[0,0,0,0]","[0.817254568635784,0.814149834348616,0.8102558589550635,0.8055585595328214]",7792.0,7792.0,55.0,9412.0,,
t5-amr_0_ir-consi_ir_doc_split_esp20_e20_44,69.23410659368705,0.6924199920310111,56.61265892496456,0.6448010329102032,finished,-,stefanfuchs164,,2023-04-06T05:03:58.000Z,1574,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS1 NZS 4223.3 Glass design for these types shall comply with the following tables (see note 1): Table 16 - Structural balustrade â two-edge support;.,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( is( structure, balustrade), is( balustrade. design, two edge support))), then( obligation( comply with( balustrade. design, nzs 4223 3 t16)))","if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support)))), then( obligation( expression( function( comply with), atom( relation( design), variable( balustrade)), data( nzs 4223 3 t16))))","if( expression( function( exist), atom( variable( storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( storage tank)), data( ground)), or( expression( function( for), atom( relation( location), variable( storage tank)), data( health hazard)), expression( function( for), atom( relation( location), variable( storage tank)), data( safety hazard))), or( expression( function( for), atom( relation( integrity), variable( storage tank)), data( integrity)), expression( function( for), atom( relation( integrity), variable( storage tank)), data( associated plant))), expression( function( for), atom( relation( design), variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)))))","if( exist( storage tank)), then( obligation( and( above( storage tank. location, ground), for( storage tank. location, or( health hazard, safety hazard)), for( storage tank. integrity, or( integrity, associated plant)), for( storage tank. design, impact), for( impact, load), for( impact, load))))",0.8590518375812443,1.0,18,19,1,1,0.86811131,1.011165297741273,72.31135093074298,53.49398944,66.40807884121675,60.11747381753071,"[0.8874023525186316,0.8386047352250136,0.781718963165075,0.7255584035151958]","[0.7574565300164996,0.6929959100204499,0.6134637662504827,0.5368161783769769]",12829,7792,11137,7879,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_43,69.47497773109592,0.7029295579820704,54.23721131583738,0.639063178,finished,-,stefanfuchs164,,2023-04-06T04:19:04.000Z,2691,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20. if( is( roof cladding. type, profiled metal), then( obligation( and( greater than equal( roof cladding. base metal thickness, 0.4 mm), is( roof cladding. material, or( rolled, crimped, trough)), is( roof cladding. grade, g550), has( roof cladding, corrosion protection), as per( corrosion protection, intended exposure zone), as per( intended exposure zone, nzbc e2as1 t20))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( and( is( roof cladding. type, profiled metal), is( roof cladding. material, steel))), then( obligation( and( greater than equal( steel. base metal thickness, 0.4 mm), or( and( is( steel. grade, g550), not( is( roof cladding. profile, and( rolled, crimped, trough)))), and( is( steel. grade, g300), is( roof cladding. profile, or( rolled, crimped, trough)))), for( steel. corrosion protection, exposure zone), as per( exposure zone, nzbc e2as1 t20))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( is( roof cladding. type, profiled metal)), then( obligation( and( greater than equal( roof cladding. base metal thickness, 0.4 mm), is( roof cladding. material, or( rolled, crimped, trough)), is( roof cladding. grade, g550), has( roof cladding, corrosion protection), as per( corrosion protection, intended exposure zone), as per( intended exposure zone, nzbc e2as1 t20))))","if( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( roof cladding)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( expression( function( is), atom( relation( material), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( material), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( material), variable( roof cladding)), data( trough))), expression( function( is), atom( relation( grade), variable( roof cladding)), data( g550)), expression( function( has), atom( variable( roof cladding)), data( corrosion protection)), expression( function( as per), atom( variable( corrosion protection)), data( intended exposure zone)), expression( function( as per), atom( variable( intended exposure zone)), data( nzbc e2as1 t20)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8679034317620099,0.9555338976521416,19,19,1,1,0.8759061501286148,0.95649384,70.93425129851897,52.00189360280284,68.07453482,56.67333229,"[0.8847557177182522,0.8409457281031704,0.7873817034700316,0.7344883889695211]","[0.7961894539111767,0.7208705055420384,0.6333923464524036,0.5503567508232712]",12829,7792,11237,7453,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( waste storage tank)))), then( obligation( and( expression( function( above), atom( relation( location), variable( waste storage tank)), data( ground)), expression( function( has), atom( variable( waste storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)), expression( function( is), atom( relation( type), variable( impact)), data( load)), expression( function( is), atom( relation( type), variable( impact)), data( impact)))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))","if( exist( waste storage tank)), then( obligation( and( above( waste storage tank. location, ground), has( waste storage tank, impact), for( impact, load), is( impact. type, and( load, impact)))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area, nzbc d1)))",0.6281453861121332,0.9169109341901024,0.888326977,1.0,19.0,19.0,1.0,1.0,0.8941221765913757,1.0162987679671458,52.41596263903702,91.26784847920912,53.95547800148773,90.42708047929597,50.96186426314861,92.12439770306408,"[0.8472800344481125,0.7650462962962963,0.6682222546303048,0.5771831814172302]","[0.9343351433261776,0.9242115971515767,0.9113843001664744,0.8981171008511736]",7792.0,7792.0,6967.0,7919.0,,
t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_43,68.42137322788011,0.6992637907393109,54.30863523,0.6505828137884897,finished,-,stefanfuchs164,,2023-04-06T03:28:37.000Z,3000,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 3.9.3 Trench slope; These anti-scour blocks shall be: Spaced at: 5.0 m centres for trench slopes greater than 1 in 5. if( greater than( trench. slope, 1/5)), then( obligation( and( has( trench, anti scour blocks), greater than equal( anti scour blocks. spacing, 5.0 mCentres))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( and( has( trench, anti scour blocks), greater than( trench. slope, 1/5))), then( obligation( equal( anti scour blocks. spacing, 5 mCentres)))","[""if( and( expression( function( has), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5)))), then( obligation( expression( function( equal), atom( relation( spacing), variable( anti scour blocks)), data( 5 mCentres))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( greater than( trench. slope, 1/5)), then( obligation( and( has( trench, anti scour blocks), greater than equal( anti scour blocks. spacing, 5.0 mCentres))))","if( expression( function( greater than), atom( relation( slope), variable( trench)), data( 1/5))), then( obligation( and( expression( function( has), atom( variable( trench)), data( anti scour blocks)), expression( function( greater than equal), atom( relation( spacing), variable( anti scour blocks)), data( 5.0 mCentres)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8736208301011347,0.977680667,1,19,1,1,0.880972796,0.9779260780287474,69.81045076,51.67074360708101,67.08649651314933,57.23035584,"[0.8773668377278357,0.8322500222598166,0.7772401433691756,0.7232392460997384]","[0.789501312335958,0.7159286186384666,0.6307589880159787,0.5499664654594232]",12829,7792,11302,7620,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))","if there is no such thing, it is possible to place storage tanks below ground. a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated load.","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area, nzbc d1)))",0.0,0.9667891296633698,8.065119212278262e-62,0.9732101038338395,19.0,19.0,1.0,1.0,0.007058522,0.9735626283367556,0.0,98.80518614750784,0.0,99.36842499605812,0.0,98.2482964,"[0,0,0,0]","[0.9978908515686792,0.9950869738414552,0.9919743178170144,0.9886807707856085]",7792.0,7792.0,55.0,7586.0,,
t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_43,68.37628932,0.6993786029921798,54.30863523,0.6505828137884897,finished,-,stefanfuchs164,,2023-04-06T02:45:26.000Z,2588,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device. if( has( hot water pipe, connection)), then( obligation( and( has( hot water pipe, insulation), comply with( insulation, nzbc h1.3.4))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( not( connect( hot water pipe, heat dissipation device))), then( obligation( comply with( hot water pipe. insulation, nzbc h1 3.4)))","[""if( not( expression( function( connect), atom( variable( hot water pipe)), data( heat dissipation device)))), then( obligation( expression( function( comply with), atom( relation( insulation), variable( hot water pipe)), data( nzbc h1 3.4))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( has( hot water pipe, connection)), then( obligation( and( has( hot water pipe, insulation), comply with( insulation, nzbc h1.3.4))))","if( expression( function( has), atom( variable( hot water pipe)), data( connection))), then( obligation( and( expression( function( has), atom( variable( hot water pipe)), data( insulation)), expression( function( comply with), atom( variable( insulation)), data( nzbc h1.3.4)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8743225474684722,0.977680667,12,19,1,1,0.8815963831943253,0.9779260780287474,69.80111759194155,51.67074360708101,67.00846656346017,57.23035584,"[0.8770114942528736,0.8316576207847673,0.7766833810888252,0.722717851671623]","[0.789501312335958,0.7159286186384666,0.6307589880159787,0.5499664654594232]",12829,7792,11310,7620,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( expression( function( exist), atom( variable( storage tank)))), then( permission( and( expression( function( has), atom( variable( storage tank)), data( below ground)), expression( function( for), atom( variable( precautions))), expression( function( to avoid), atom( variable( health or safety hazards)), data( ii)), expression( function( corrosion that threaten), atom( variable( integrity of tank or associated plant))), and( expression( function( b))), expression( function( is), expression( function( designed to withstand), atom( variable( load)), data( effects))))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if( exist( storage tank)), then( permission( and( has( storage tank, below ground), for( precautions), to avoid( health or safety hazards, ii) corrosion that threaten( integrity of tank or associated plant), and( b) is( designed to withstand( load, effects))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.3889815933895796,0.9813558507650328,0.5509742602227289,0.9850015762874104,19.0,19.0,1.0,1.0,0.6265400410677618,0.9851129363449692,43.986478535044256,98.86775482013792,51.76858501380435,99.43035775530092,38.23830918543812,98.31148277,"[0.8699303564113069,0.7760513776672882,0.661986588432523,0.5558617765528938]","[0.9983064095883272,0.9971132397323186,0.9956383822363204,0.994141925176408]",7792.0,7792.0,4882.0,7676.0,,
t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_43,68.36994499275536,0.6993863137645825,54.30863523,0.6505828137884897,finished,-,stefanfuchs164,,2023-04-06T02:20:01.000Z,1523,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 1.1.3 Size; The width (measured along the building line) and depth (measured perpendicular to the building line) shall not exceed: For a brick chimney stack â single skin (see Figure 2) 500 mm wide x 500 mm deep. if( and( is( chimney stack. material, brick), is( brick. type, skin), is( skin. type, single))), then( obligation( and( define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( and( is( chimney stack. material, brick), is( brick. type, single skin))), then( obligation( and( define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm))))","[""if( and( expression( function( is), atom( relation( material), variable( chimney stack)), data( brick)), expression( function( is), atom( relation( type), variable( brick)), data( single skin)))), then( obligation( and( expression( function( define), atom( relation( width), variable( chimney stack)), data( x0)), expression( function( is), atom( relation(measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( chimney stack)), data( x1)), expression( function( is), atom( relation(measurement), variable( x1)), data( perpendicular building line)), expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))), expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( is( chimney stack. material, brick), is( brick. type, skin), is( skin. type, single))), then( obligation( and( define( chimney stack. width, x0), is( x0.measurement, along building line), define( chimney stack. depth, x1), is( x1.measurement, perpendicular building line), less than equal( x0, 500 mm), less than equal( x1, 500 mm))))","if( and( expression( function( is), atom( relation( material), variable( chimney stack)), data( brick)), expression( function( is), atom( relation( type), variable( brick)), data( skin)), expression( function( is), atom( relation( type), variable( skin)), data( single)))), then( obligation( and( expression( function( define), atom( relation( width), variable( chimney stack)), data( x0)), expression( function( is), atom( relation(measurement), variable( x0)), data( along building line)), expression( function( define), atom( relation( depth), variable( chimney stack)), data( x1)), expression( function( is), atom( relation(measurement), variable( x1)), data( perpendicular building line)), expression( function( less than equal), atom( variable( x0)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))), expression( function( less than equal), atom( variable( x1)), data( baseunit( prefix( milli), kind( metre)), value( 500.0))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8744102319326856,0.977680667,3,19,1,1,0.8816743315924858,0.9779260780287474,69.78789588380762,51.67074360708101,67.00846656346017,57.23035584,"[0.8769339580938909,0.8315836298932384,0.7766138418837855,0.7226527302216615]","[0.789501312335958,0.7159286186384666,0.6307589880159787,0.5499664654594232]",12829,7792,11311,7620,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","a) precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.0,0.9855758933471196,8.065119212278262e-62,0.9900690831229544,19.0,19.0,1.0,1.0,0.007058522,0.9901180698151952,0.0,99.29187262357996,0.0,99.54926914861323,0.0,99.03580372,"[0,0,0,0]","[0.9981853532080364,0.9963446475195824,0.9944773175542406,0.9928476821192052]",7792.0,7792.0,55.0,7715.0,,
t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_43,70.09071623664454,0.7240401360997211,54.75453524719913,0.6517006494762048,finished,-,stefanfuchs164,,2023-04-06T01:10:36.000Z,4163,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_doc_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 6.1.5 Where a building is proposed to be built over an existing drain, the drain shall be verified as being sound both before and after construction. if( and( above( building, drain), is( drain. type, existing))), then( obligation( and( has( drain, soundness), before( soundness, construction), after( soundness, construction)))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( and( above( building. construction, drain), exist( drain))), then( obligation( and( has( drain. soundness, verification), before( verification, construction), after( verification, construction))))","[""if( and( expression( function( above), atom( relation( construction), variable( building)), data( drain)), expression( function( exist), atom( variable( drain))))), then( obligation( and( expression( function( has), atom( relation( soundness), variable( drain)), data( verification)), expression( function( before), atom( variable( verification)), data( construction)), expression( function( after), atom( variable( verification)), data( construction)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( and( above( building, drain), is( drain. type, existing))), then( obligation( and( has( drain, soundness), before( soundness, construction), after( soundness, construction))))","if( and( expression( function( above), atom( variable( building)), data( drain)), expression( function( is), atom( relation( type), variable( drain)), data( existing)))), then( obligation( and( expression( function( has), atom( variable( drain)), data( soundness)), expression( function( before), atom( variable( soundness)), data( construction)), expression( function( after), atom( variable( soundness)), data( construction)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.9063957511288976,0.9780741934098386,16,19,1,1,0.9105152389118404,0.978311088,70.55073265246438,51.96131500572079,69.63665990730739,57.86511898851673,"[0.8746682647033645,0.8304048234280792,0.7761504463125054,0.7222706662016045]","[0.7894529712711531,0.7152484143763214,0.6314388393451351,0.552829176722982]",12829,7792,11681,7623,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","if( and( expression( function( has), atom( variable( storage tank)), data( below ground)), or( expression( function( has), atom( variable( storage tank)), data( health and safety hazards)), expression( function( has), atom( variable( storage tank)), data( corrosion threats))))), then( permission( and( expression( function( has), atom( variable( storage tank)), data( impact)), expression( function( for), atom( variable( impact)), data( load)), expression( function( has), atom( variable( impact)), data( load)))))","if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( area), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( variable( vehicle access area)), data( nzbc d1))))","if( and( has( storage tank, below ground), has( storage tank, or( health and safety hazards, corrosion threats))), then( permission( and( has( storage tank, impact), for( impact, load), has( impact, load))))","if( and( for( vehicle access area, collection), is( collection. area, industrial liquid waste))), then( obligation( comply with( vehicle access area, nzbc d1)))",0.6006463870695611,0.7840019805033269,0.8813177118681337,0.9759736357019267,19.0,19.0,1.0,1.0,0.8878336755646817,0.9762577002053388,52.42221978820729,74.93732902278316,51.88571169886114,74.51487179211765,52.96993899319693,75.36460375366912,"[0.8193119398670136,0.7390354072563019,0.6423325499412456,0.554716422330816]","[0.8802418824766662,0.8328919491525424,0.780578898225957,0.7276269819940876]",7792.0,7792.0,6918.0,7607.0,,
t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_43,68.39730240976955,0.7008982576762887,54.110295375138406,0.6588624452994598,finished,-,stefanfuchs164,,2023-04-06T00:13:32.000Z,3421,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS3 Pumice concrete units for use in precast chimneys shall: a) Have pumice aggregate which: i) is free of combustible and organic matter, and ii) has a maximum aggregate size of no greater than 19 mm, with at least 40% but not more than 60% of the aggregate retained by a 4.75 mm standard test sieve, and b) Have a mix ratio by volume of no more than five parts of mixed pumice aggregate to one part of cement, c) Have a compressive strength of no less than 7 MPa at 28 days when cured and tested in accordance with NZS 3112: Part 2, d) After adequate curing, be air dried and kept under cover during storage, transport and on the site, e) Be laid dry. (Work left unfinished should be protected from rain.) f) Be joined with mortar which complies with NZS 4210, and g) Have ducts filled with grout complying with NZS 4210. if( is( chimney. type, precast)), then( obligation( and( has( chimney, pumice aggregate), is( pumice aggregate. free of( pumice aggregate, and( combustible, organic matter)), greater than equal( pumice aggregate. size, 19 mm), has( pumice aggregate, aggregate), less than equal( aggregate. size, 40 percent), has( aggregate, retention), is( retention. size, test sieve), greater than equal( retention. size, 60 percent), has( pumice aggregate. mix ratio, volume), greater than equal( aggregate. compressive strength, 7 MPa), is( pumice aggregate. compressive strength, x0), is( pumice aggregate. mix, cement)), is( concrete. material, and( x0), is( concrete. type, and( x0), has( pumice concrete. mix, x0), is( x0, air dried), is( air dried, under cover), as per( air dried, nzs 3112 2), greater than equal( cement. compressive strength, nzs 3112 2, x0), has( concrete. material, x0), is( work, finished), is( work, left unfinished)), is( work, protected from( rain, and( join, mortar), comply with( mortar, nzs 4210)), has( duct, duct), is( grout, grout, comply with( grout, nzs 4210)))))","translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))","if( and( is( chimney. type, precast), has( chimney, unit), is( unit. material, pumice concrete))), then( obligation( and( has( pumice concrete, aggregate), not( include( aggregate, and( combustible material, organic matter))), less than equal( aggregate. size, 19 mm), test( sieve, aggregate), equal( sieve. size, 4.75 mm), greater than equal( sieve. remainder, 40 percent), less than equal( sieve. remainder, 60 percent), define( aggregate. volume, x0), define( cement. volume, x1), greater than equal( x1, 'x0 / 5'), is( pumice concrete. mix, 'x0 + x1'), has( aggregate, compressive strength), greater than equal( pumice concrete. compressive strength, 7 MPa), is( pumice concrete. compressive strength, 28 days), as per( pumice concrete, nzs 3112 2), has( pumice concrete, protection), by( protection, and( curing, air drying, covering)), within( protection, and( storage, transport, on site)), against( protection, rain), connect( mortar, pumice concrete), comply with( mortar, nzs 4210), has( unit, duct), include( duct, grout), comply with( grout, nzs 4210))))","[""if( and( expression( function( is), atom( relation( type), variable( chimney)), data( precast)), expression( function( has), atom( variable( chimney)), data( unit)), expression( function( is), atom( relation( material), variable( unit)), data( pumice concrete)))), then( obligation( and( expression( function( has), atom( variable( pumice concrete)), data( aggregate)), not( expression( function( include), atom( variable( aggregate)), data( combustible material))), not( expression( function( include), atom( variable( aggregate)), data( organic matter))), expression( function( less than equal), atom( relation( size), variable( aggregate)), data( baseunit( prefix( milli), kind( metre)), value( 19.0))), expression( function( test), atom( variable( sieve)), data( aggregate)), expression( function( equal), atom( relation( size), variable( sieve)), data( baseunit( prefix( milli), kind( metre)), value( 4.75))), expression( function( greater than equal), atom( relation( remainder), variable( sieve)), data( 40 percent)), expression( function( less than equal), atom( relation( remainder), variable( sieve)), data( 60 percent)), expression( function( define), atom( relation( volume), variable( aggregate)), data( x0)), expression( function( define), atom( relation( volume), variable( cement)), data( x1)), expression( function( greater than equal), atom( variable( x1)), data( 'x0 / 5')), expression( function( is), atom( relation( mix), variable( pumice concrete)), data( 'x0 + x1')), expression( function( has), atom( variable( aggregate)), data( compressive strength)), expression( function( greater than equal), atom( relation( compressive strength), variable( pumice concrete)), data( baseunit( prefix( mega), kind( pascal)), value( 7.0))), expression( function( is), atom( relation( compressive strength), variable( pumice concrete)), data( 28 days)), expression( function( as per), atom( variable( pumice concrete)), data( nzs 3112 2)), expression( function( has), atom( variable( pumice concrete)), data( protection)), expression( function( by), atom( variable( protection)), data( curing)), expression( function( by), atom( variable( protection)), data( air drying)), expression( function( by), atom( variable( protection)), data( covering)), expression( function( within), atom( variable( protection)), data( storage)), expression( function( within), atom( variable( protection)), data( transport)), expression( function( within), atom( variable( protection)), data( on site)), expression( function( against), atom( variable( protection)), data( rain)), expression( function( connect), atom( variable( mortar)), data( pumice concrete)), expression( function( comply with), atom( variable( mortar)), data( nzs 4210)), expression( function( has), atom( variable( unit)), data( duct)), expression( function( include), atom( variable( duct)), data( grout)), expression( function( comply with), atom( variable( grout)), data( nzs 4210)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( is( chimney. type, precast)), then( obligation( and( has( chimney, pumice aggregate), is( pumice aggregate. free of( pumice aggregate, and( combustible, organic matter)), greater than equal( pumice aggregate. size, 19 mm), has( pumice aggregate, aggregate), less than equal( aggregate. size, 40 percent), has( aggregate, retention), is( retention. size, test sieve), greater than equal( retention. size, 60 percent), is( retention. type, concrete), is( concrete. material, and( x0), is( concrete. material, air dried), is( air dried, under cover), as per( air dried, nzs 3112 2), greater than equal( cement. compressive strength, 7 MPa), is( work, finished), is( work, left unfinished)), is( work, protected from( rain, and( join, mortar), comply with( mortar, nzs 4210)), is( grout, comply with( grout, nzs 4210))))))","if( expression( function( is), atom( relation( type), variable( chimney)), data( precast))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( pumice aggregate)), expression( function( is), expression( function( pumice aggregate. free of), atom( variable( pumice aggregate)), data( combustible)), data( greater than equal( pumice aggregate. size, 19 mm))), expression( function( is), expression( function( pumice aggregate. free of), atom( variable( pumice aggregate)), data( organic matter)), data( greater than equal( pumice aggregate. size, 19 mm))))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8734453336212338,0.9933041713796548,4,19,1,1,0.8808168992127212,0.9933264887063656,69.76862003232631,51.42437471119669,67.07885276,57.09225209332159,"[0.8804424778761062,0.8346246326476089,0.7790822728087471,0.7242716695228646]","[0.7923772609819122,0.714508783344177,0.6272608125819135,0.545082508250825]",12829,7792,11300,7740,"translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: a) Comply with NZBC D1 Access Routes. if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","[""if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))""]","if( below( storage tank. location, ground level)), then( obligation( and( not( cause( storage tank, and( health hazard, safety hazard))), has( storage tank, corrosion resistance), greater than( storage tank. design load, true load))))","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",roo,"if( and( expression( function( for), atom( variable( vehicle access area)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( obligation( expression( function( comply with), atom( relation( area), variable( vehicle access area)), data( nzbc d1))))","if not, then it is possible to place storage tank below ground. a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated load.","if( and( for( vehicle access area, collection), is( collection. type, industrial liquid waste))), then( obligation( comply with( vehicle access area. area, nzbc d1)))",0.0,0.9526422168456972,8.065119212278262e-62,0.95861227,19.0,19.0,1.0,1.0,0.007058522,0.9594455852156056,0.0,98.68284879,0.0,99.40863437118692,0.0,97.96758436026674,"[0,0,0,0]","[0.9985286249331192,0.99609217086646,0.992261743144176,0.9882369032964028]",7792.0,7792.0,55.0,7476.0,,
t5-amr_0_ir-consi_ir_doc_split_esp20_e20_43,68.36994499275536,0.6993863137645825,54.30863523,0.6505828137884897,finished,-,stefanfuchs164,,2023-04-05T23:55:44.000Z,1065,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.4.1 Hot water pipes must be insulated to satisfy the requirements of NZBC Clause H1.3.4, except where connected to a heat dissipation device.",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( not( connect( hot water pipe, heat dissipation device))), then( obligation( comply with( hot water pipe. insulation, nzbc h1 3.4)))","[""if( not( expression( function( connect), atom( variable( hot water pipe)), data( heat dissipation device)))), then( obligation( expression( function( comply with), atom( relation( insulation), variable( hot water pipe)), data( nzbc h1 3.4))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))","if( has( hot water pipe, connection)), then( obligation( and( has( hot water pipe, insulation), comply with( insulation, nzbc h1.3.4))))","if( expression( function( has), atom( variable( hot water pipe)), data( connection))), then( obligation( and( expression( function( has), atom( variable( hot water pipe)), data( insulation)), expression( function( comply with), atom( variable( insulation)), data( nzbc h1.3.4)))))","if( expression( function( is), atom( relation( type), variable( tank)), data( freestanding))), then( obligation( and( expression( function( against), atom( relation( security), variable( tank)), data( earthquake force)), expression( function( comply with), atom( relation( security), variable( tank)), data( nzs 4219)))))","if( is( tank. type, freestanding)), then( obligation( and( against( tank. security, earthquake force), comply with( tank. security, nzs 4219))))",0.8744102319326856,0.977680667,12,19,1,1,0.8816743315924858,0.9779260780287474,69.78789588380762,51.67074360708101,67.00846656346017,57.23035584,"[0.8769339580938909,0.8315836298932384,0.7766138418837855,0.7226527302216615]","[0.789501312335958,0.7159286186384666,0.6307589880159787,0.5499664654594232]",12829,7792,11311,7620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_45,68.97352370359984,0.6933849825354965,67.70357156505897,0.7086644219774993,finished,-,stefanfuchs164,,2023-04-05T23:07:58.000Z,2863,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened))), then( obligation( and( not( has( safety barrier, rail), is( rail. type, interlinked)), is( safety barrier. edge, support), is( support. type, or( structural sealant joint, continuous clamp)), resist( pane, concentrated load), less than equal( concentrated load, 0.2 kN), less than equal( pane. deflection, 250 mm))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened))), then( obligation( and( not( has( safety barrier, rail), is( rail, interlinked)), is( safety barrier. edge, support), is( support. type, or( structural sealant joint, continuous clamp)), resist( pane, concentrated load), less than equal( concentrated load, 0.2 kN), less than equal( pane. deflection, 250 mm))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))))), then( obligation( and( not( expression( function( has), atom( variable( safety barrier)), data( rail)), expression( function( is), atom( variable( rail)), data( interlinked))), expression( function( is), atom( relation( edge), variable( safety barrier)), data( support)), or( expression( function( is), atom( relation( type), variable( support)), data( structural sealant joint)), expression( function( is), atom( relation( type), variable( support)), data( continuous clamp))), expression( function( resist), atom( variable( pane)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8426708286162636,0.8891641784568938,18,19,1,1,0.8538405385676048,0.8948759007205764,71.95472913001748,70.8160766,66.22952318687231,64.85314887,"[0.9072860264082836,0.8564460596786534,0.7975926817525277,0.7396742292030251]","[0.8867316811308938,0.833063209076175,0.7694608065246942,0.7098686610726013]",12329,12490,10527,11177,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( not( expression( function( is), atom( variable( structure)), data( glazing)))), then( obligation( and( expression( function( as per), atom( relation( type), variable( glazing)), data( nzbc b1as1 t14)), expression( function( as per), atom( relation( type), variable( glazing)), data( nzbc b11as1 t15)), expression( function( as per), atom( relation( type), variable( glazing)), data( nzbc b12as1 t16)), expression( function( as per), atom( relation( type), variable( glazing)), data( nzbc b13as1 t16)), expression( function( as per), atom( relation( type), variable( glazing)), data( nucleustrade)), expression( function( as per), atom( variable( balustrade)), data( three edge support)))))","if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if( not( is( structure, glazing))), then( obligation( and( as per( glazing. type, and( nzbc b1as1 t14, nzbc b11as1 t15, nzbc b12as1 t16, nzbc b13as1 t16, nucleustrade), is( balustrade. type, two edge point fixed), as per( balustrade, two edge support)), as per( balustrade, three edge support))))","if( is( chimney. material, brick)), then( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.7279637169093017,0.9540537930814114,0.9250271733027056,0.9862148999751696,19.0,19.0,1.0,1.0,0.9277021617293836,0.9863090472377902,66.13645271096428,96.03808686,67.92945095987584,96.34695548,64.43567275779768,95.73119225,"[0.8789160265815138,0.8240708579367836,0.7596330275229358,0.6971162299982416]","[0.979056741618638,0.9723220117570216,0.9637020612630368,0.95465058648604]",12490.0,12490.0,11587.0,12319.0,,
t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_45,68.19840765,0.6895929910880457,66.21765606978136,0.7003745940819589,finished,-,stefanfuchs164,,2023-04-05T22:15:12.000Z,2011,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8. if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8466953076119665,0.8699785771527706,13,19,1,1,0.8573282504663801,0.877742194,71.20049329483666,69.70031922100895,65.43923857460989,63.06646185386513,"[0.9,0.8480807695971044,0.7890295358649789,0.7306169740272279]","[0.8976557511630028,0.8421777451340433,0.7770076702707698,0.7150697674418605]",12329,12490,10570,10963,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))","x0, if you haven't already, then you need to know what you need to know.","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.0,0.9477192055598193,1.0843428223518904e-76,0.9627332626453624,19.0,19.0,1.0,1.0,0.005684548,0.9634107285828662,0.0,98.16403664217242,0.0,98.92216964111826,0.0,97.41743582418644,"[0,0,0,0]","[0.9932685115931188,0.9868751044975757,0.9813304179631654,0.9762267343485618]",12490.0,12490.0,71.0,12033.0,,
t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_45,68.17572812841249,0.6868108565423193,66.11469437027696,0.6993679148141104,finished,-,stefanfuchs164,,2023-04-05T21:41:25.000Z,2024,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 5.1.1 Rigid pipes shall have flexible joints to resist damage from differential settlement. if( is( pipe. type, rigid)), then( obligation( and( has( pipe, flexible joint), resist( flexible joint, damage))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( is( pipe, rigid)), then( obligation( and( has( pipe, joint), is( joint, flexible))))","[""if( expression( function( is), atom( variable( pipe)), data( rigid))), then( obligation( and( expression( function( has), atom( variable( pipe)), data( joint)), expression( function( is), atom( variable( joint)), data( flexible)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( pipe. type, rigid)), then( obligation( and( has( pipe, flexible joint), resist( flexible joint, damage))))","if( expression( function( is), atom( relation( type), variable( pipe)), data( rigid))), then( obligation( and( expression( function( has), atom( variable( pipe)), data( flexible joint)), expression( function( resist), atom( variable( flexible joint)), data( damage)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8420143897639173,0.866265834,1,19,1,1,0.8532727715143158,0.8744595676541232,71.23162906695244,69.63979536087493,65.37124302091387,62.92927368030351,"[0.9004752851711026,0.8492678725236865,0.7905184043168241,0.732220820801397]","[0.9006592199230911,0.8446226154271496,0.7791280148423005,0.7167802782706135]",12329,12490,10520,10922,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( expression( function( exist), atom( variable( structure)))), then( obligation( and( expression( function( has), atom( variable( structure)), data( balustrade)), expression( function( is), atom( variable( cantilevered glass)), data( x0)), expression( function( is), atom( relation(type), variable( x0)), data( two edge point fixed)), expression( function( is), atom( relation(value 16), variable( x0)), data( x1-of)), expression( function( is), atom( relation(value 17), variable( x0)), data( x1)), expression( function( has), atom( variable( structure)), data( three edge support)), expression( function( requires), atom( relation( type), variable( design)), data( specific design)), not( expression( function( shown in x0)), expression( function( nzbc b1as1 t14 to nzbc b0as1 t17))))))","if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))","if( exist( structure)), then( obligation( and( has( structure, balustrade), is( cantilevered glass, x0), is( x0.type, two edge point fixed), is( x0.value 16, x1-of, two-edge support), is( x0.value 17, x1), has( structure, three edge support), requires( design. type, specific design), not( shown in x0, nzbc b1as1 t14 to nzbc b0as1 t17)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close))))",0.484441741,0.967735192,0.6196307971447175,0.9788016762383596,19.0,19.0,1.0,1.0,0.6763010408326662,0.979023219,56.11338741843106,98.37450887187556,64.01406069354653,98.90273827409044,49.94867657425013,97.85189193241514,"[0.9050550491298686,0.8335721107927412,0.7452137266706803,0.6645615739616225]","[0.9953385672227674,0.9909517150612815,0.9865960615588284,0.9819392426134]",12490.0,12490.0,8447.0,12228.0,,
t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_45,68.16213483525094,0.6890365415174132,65.98334476201121,0.6926092155862077,finished,-,stefanfuchs164,,2023-04-05T21:15:39.000Z,1543,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.0 Flashings 4.6.1.3 Change in metal roof pitches; a) There shall be a minimum effective lap under roof cladding in accordance with Table 7, with a hem at upper edge. if( is( flashing. material, metal), has( flashing, pitch), then( obligation( and( below( lap, roof cladding), as per( lap, nzbc e2as1 t7), has( flashing, upper edge), has( hem, upper edge))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( and( has( metal roofing. pitch, change), for( flashing, change))), then( obligation( and( below( lap, cladding), is( lap, minimum effective), as per( lap, nzbc e2as1 t7), is( lap. edge, upper), has( lap. edge, hem))))","[""if( and( expression( function( has), atom( relation( pitch), variable( metal roofing)), data( change)), expression( function( for), atom( variable( flashing)), data( change)))), then( obligation( and( expression( function( below), atom( variable( lap)), data( cladding)), expression( function( is), atom( variable( lap)), data( minimum effective)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( is), atom( relation( edge), variable( lap)), data( upper)), expression( function( has), atom( relation( edge), variable( lap)), data( hem)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( flashing. material, metal), has( flashing, pitch), then( obligation( and( below( lap, roof cladding), as per( lap, nzbc e2as1 t7), has( flashing, upper edge), has( hem, upper edge))))","if( expression( function( is), atom( relation( material), variable( flashing)), data( metal)), expression( function( has), atom( variable( flashing)), data( pitch))), then( obligation( and( expression( function( below), atom( variable( lap)), data( roof cladding)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( has), atom( variable( flashing)), data( upper edge)), expression( function( has), atom( variable( hem)), data( upper edge)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8462280454033542,0.8593520378232266,0,19,1,1,0.8569227025711736,0.8683746997598079,71.17960087909042,69.55410347173904,65.39009901401532,62.76131334920345,"[0.8997633696166588,0.8479130931961121,0.7888323899069366,0.7303902627511591]","[0.8978425225889729,0.8432482598607889,0.7782137518684604,0.7161666509921941]",12329,12490,10565,10846,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))",7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balusetrade â two-edge point fixed; Table 16 - Structural balustra â two-edge support; Table 17 - Structural balustre â three-edge support. require specific design.,"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",0.0,0.9573970193374226,1.0843428223518904e-76,0.9670427080916868,19.0,19.0,1.0,1.0,0.005684548,0.967574059,0.0,98.51307142,0.0,99.22375775,0.0,97.81249322342715,"[0,0,0,0]","[0.995945386843194,0.9921757949059432,0.9881101900694969,0.9839117250673854]",12490.0,12490.0,71.0,12085.0,,
t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_45,69.64146172814901,0.7220433226110041,66.70164773223658,0.7178448402090685,finished,-,stefanfuchs164,,2023-04-05T20:39:41.000Z,2155,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_45_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 6.3.2 Open vented storage water heaters shall have a vent pipe complying with Paragraph 6.8. if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, ventilation pipe), comply with( ventilation pipe, nzbc g12as1 6.8))))","[""if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( ventilation pipe)), expression( function( comply with), atom( variable( ventilation pipe)), data( nzbc g12as1 6.8)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented)), then( obligation( and( has( storage water heater, vent pipe), comply with( vent pipe, nzbc g12as1 6.8))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented))), then( obligation( and( expression( function( has), atom( variable( storage water heater)), data( vent pipe)), expression( function( comply with), atom( variable( vent pipe)), data( nzbc g12as1 6.8)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.922702246,0.9240801564993651,13,19,1,1,0.9255414064401004,0.9268214571657326,72.2162378,69.50039694952008,67.24396555576766,64.11958149,"[0.8649548681097187,0.8164902998236332,0.7581861744609104,0.7003036256474371]","[0.8644609536973048,0.8122555410691004,0.7501311876858492,0.691366716536126]",12329,12490,11411,11576,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","if( and( expression( function( has), atom( variable( structure)), data( glazing)), expression( function( is), atom( relation( type), variable( glazing)), data( cantilevered glass)), or( expression( function( as per), atom( relation( design), variable( glazing)), data( nzbc b1as1 t14)), expression( function( is), atom( relation( type), variable( balustrade)), data( two edge point fixed))), and( expression( function( as per), atom( variable( balustrade)), data( nzbc british b1as1 t16)), expression( function( has), atom( variable( balustrade)), data( two edge support)), expression( function( has), atom( variable( balustrade)), data( three edge support))))), then( permission( and( or( not( expression( function( is), atom( relation( design), variable( balustrade)), data( nzbc bungas1 t14 to nzbc bungais1 t17)))))))","if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( is), atom( relation( type), variable( fixing)), data( u strap)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( adjoin), atom( variable( u strap)), data( wall tie)), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))","if( and( has( structure, glazing), is( glazing. type, cantilevered glass), or( as per( glazing. design, nzbc b1as1 t14, nzbc br1as1 t15), is( balustrade. type, two edge point fixed)), and( as per( balustrade, nzbc british b1as1 t16), has( balustrade, two edge support), has( balustrade, three edge support)))), then( permission( and( not( is( balustrade. design, or( nzbc bungas1 t14 to nzbc bungais1 t17)))))","if( is( chimney. material, brick)), then( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), is( fixing. type, u strap), is( u strap. material, mild steel), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( u strap. type, zinc coated), adjoin( u strap, wall tie), is( wall tie. spacing, close)))))",0.6951384527524179,0.8176566196072496,0.855788172,0.9086400191261356,19.0,19.0,1.0,1.0,0.8652522017614092,0.912570056,66.91800374939464,84.39865700194152,70.31876656386436,86.97853683,63.83100277843662,81.96741267573299,"[0.90061996853891,0.8484538002980626,0.7855602437880919,0.7252218236737776]","[0.9417441656430952,0.9165710249845502,0.8863717128642502,0.8570406794814484]",12490.0,12490.0,10807.0,11398.0,,
t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_45,68.20737312533772,0.6909400565653824,65.88846866173803,0.6839283778028357,finished,-,stefanfuchs164,,2023-04-05T20:04:31.000Z,2107,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS1 6.9.1 NZS 4603 is an acceptable solution for open vented low pressure storage water heaters, but may exceed the performance criteria of NZBC G12. if( is( storage water heater. type, open vented), has( storage water heater, low pressure)), then( permission( and( comply with( storage water heater, nzbc g12), comply with( storage water heater. performance criteria, nzbc g10))))","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))","if( is( storage water heater. type, and( open vented, low pressure))), then( permission( comply with( storage water heater, nzs 4603)))","[""if( and( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented)), expression( function( is), atom( relation( type), variable( storage water heater)), data( low pressure)))), then( permission( expression( function( comply with), atom( variable( storage water heater)), data( nzs 4603))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( is( storage water heater. type, open vented), has( storage water heater, low pressure)), then( permission( and( comply with( storage water heater, nzbc g12), comply with( storage water heater. performance criteria, nzbc g10)))))","if( expression( function( is), atom( relation( type), variable( storage water heater)), data( open vented)), expression( function( has), atom( variable( storage water heater)), data( low pressure))), then( permission( and( expression( function( comply with), atom( variable( storage water heater)), data( nzbc g12)), expression( function( comply with), atom( relation( performance criteria), variable( storage water heater)), data( nzbc g10)))))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8480026619041751,0.8457698972732461,2,19,1,1,0.858463785,0.85652522,71.38085783190374,69.72462075001764,65.30405391,62.45242283326515,"[0.9016439909297052,0.8489489203842862,0.7889293238843134,0.7298235464275383]","[0.902318190315947,0.8466171073680249,0.7801250473664266,0.7175011921793037]",12329,12490,10584,10698,translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade â cantilevered glass; Table 15 - Structural balustrade â two-edge point fixed; Table 16 - Structural balustrade â two-edge support; Table 17 - Structural balustrade â three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design.,"translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))","[""if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))""]","[""if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))""]","if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))","if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))",roo,"if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))",xls1-of ( cite-01 :ARG2 7.0 :ARG1 ( glazing) ) :ARG2 ( and_0 :op1 14 :op2 15 :op3 15 :op4 15 :op5 16 :op6 16 :op7 16 :op8 17 :op9 17 :op10 17 :op11 17 :op12 18 ) :op12 18 :op13 18 :op14 18 :op17 :op18 :op19 - :op20 - :op21 - :op22 - :op23 - :op24 - :ARG1-of ( fixed-03 :ARG1 ( balustrade :mod ( structure ) ) ) ) ),"if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close))))))",0.0,0.9211341446085646,1.0843428223518904e-76,0.9318041670392913,19.0,19.0,1.0,1.0,0.005684548,0.934027222,0.0,97.04783796624729,0.0,98.51039832263704,0.0,95.62807083763326,"[0,0,0,0]","[0.9958854791702384,0.991203104786546,0.986029156542867,0.9811403125818564]",12490.0,12490.0,71.0,11666.0,,
t5-amr_0_ir-consi_ir_random_split_esp20_e20_45,68.16213483525094,0.6890365415174132,66.07335261,0.6999306301170373,finished,-,stefanfuchs164,,2023-04-05T18:48:02.000Z,4586,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,False,,translate English to LegalRuleML: B1AS3 1.9.4 A chimney shall be considered as connected to the building when: a) At roof level: it is held either by a roof bracket or by a roof tie.,"translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material â¢ For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( has( chimney, fixing), is( fixing. type, or( roof bracket, roof tie)), is( fixing. elevation, roof level))), then( connect( chimney, building))","[""if( and( expression( function( has), atom( variable( chimney)), data( fixing)), or( expression( function( is), atom( relation( type), variable( fixing)), data( roof bracket)), expression( function( is), atom( relation( type), variable( fixing)), data( roof tie))), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)))), then( expression( function( connect), atom( variable( chimney)), data( building)))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))","if( and( is( chimney. elevation, roof), or( is( chimney. fixing, roof bracket), is( chimney. fixing, roof tie)))), then( connect( chimney, building))","if( and( expression( function( is), atom( relation( elevation), variable( chimney)), data( roof)), or( expression( function( is), atom( relation( fixing), variable( chimney)), data( roof bracket)), expression( function( is), atom( relation( fixing), variable( chimney)), data( roof tie))))), then( expression( function( connect), atom( variable( chimney)), data( building)))","if( and( expression( function( has), atom( variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( and( expression( function( prevent), atom( relation( span), variable( underlay)), data( sagging)), expression( function( is), atom( relation( location), variable( sagging)), data( adjacent supports)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))))))","if( and( has( roof, underlay), is( underlay. type, r1), is( underlay. material, corrosion resistant))), then( obligation( and( prevent( underlay. span, sagging), is( sagging. location, adjacent supports), less than equal( underlay. span, 1.2 m))))",0.8462280454033542,0.8697073178956911,19,19,1,1,0.8569227025711736,0.877502002,71.17960087909042,69.54491393,65.39009901401532,62.93190138684125,"[0.8997633696166588,0.8479130931961121,0.7888323899069366,0.7303902627511591]","[0.8977189781021898,0.8420424281384884,0.7766685154372343,0.714524983716386]",12329,12490,10565,10960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_44,69.09761373021671,0.7305410694739655,67.50875719698941,0.7311526592586302,finished,-,stefanfuchs164,,2023-04-05T17:35:49.000Z,4330,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4. if( and( for( fixing, installation), is( solar water heater. installation, fixture))), then( obligation( comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g12s2 2.1.2, nzbc g12.3 3.1.3, nzbc g 12as2 2.1.4))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( has( solar water heater. installation, fixing)), then( obligation( comply with( fixing, and( nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4))))","[""if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( for( fixing, installation), is( solar water heater. installation, fixture))), then( obligation( comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g12s2 2.1.2, nzbc g12.3 3.1.3, nzbc g 12as2 2.1.4))))","if( and( expression( function( for), atom( variable( fixing)), data( installation)), expression( function( is), atom( relation( installation), variable( solar water heater)), data( fixture)))), then( and( obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12s2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12.3 3.1.3))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g 12as2 2.1.4)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.9770294901300528,0.9186403409444482,16,19,1,1,0.9772893178684404,0.921777422,71.73348772924827,69.64699625179658,66.64858634590145,65.49789994251972,"[0.82604365507511,0.7800133578226749,0.7246997564457882,0.6693984454207502]","[0.8888213324068445,0.8350812794965915,0.7683581039486412,0.7036283185840708]",12329,12490,12049,11513,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( and( expression( function( within), atom( variable( zone)), data( boundaries)), or( expression( function( is), atom( relation( type), variable( boundary)), data( Selwyn)), expression( function( is), atom( relation( type), variable( boundary)), data( Waimakariri))), or( expression( function( is), atom( relation( elevation), variable( zone)), data( low)), expression( function( is), atom( relation( elevation), variable( zone)), data( medium))))), then( obligation( expression( function( become), atom( variable( zone 2)), data( area)), expression( function( as per), atom( relation( elevation), variable( area)), data( nzs 3604))))","if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))","if( and( within( zone, boundaries), is( boundary. type, or( Selwyn, Waimakariri)), is( zone. elevation, or( low, medium)))), then( obligation( become( zone 2, area), as per( area. elevation, nzs 3604)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",0.6927629385321133,0.90494874,0.8753003721141203,0.9444705566774384,19.0,19.0,1.0,1.0,0.8824659727782226,0.945956765,65.97447727807464,94.12889687158156,69.26264392854841,95.33771401058752,62.98436491079903,92.95034988020603,"[0.8858646343676284,0.8300611816272486,0.7630514705882353,0.6993246368766769]","[0.97316969953449,0.9638113079019074,0.9531397241497472,0.9427684881916912]",12490.0,12490.0,11022.0,11815.0,,
t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_44,68.08363764189379,0.6832594921387627,66.73648760220641,0.7227452900846685,finished,-,stefanfuchs164,,2023-04-05T16:24:30.000Z,4277,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7. if( exist( cladding system)), then( obligation( comply with( cladding system, and( nzbc e2 2 to nzbc e2 3.7))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( cladding system)), then( obligation( comply with( cladding system, nzbc e2 2 to nzbc e2 3.7)))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( cladding system)), then( obligation( comply with( cladding system, and( nzbc e2 2 to nzbc e2 3.7))))","if( expression( function( exist), atom( variable( cladding system)))), then( and( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8466018699084934,0.9100368420714334,3,19,1,1,0.8572471408873388,0.9138510808646918,71.60653645976707,69.15920205164939,64.89112374000209,64.47776835,"[0.895732803481881,0.8433987426176415,0.7809532943320227,0.7191000386249518]","[0.8888207464517259,0.8346998148637926,0.7663236337828248,0.6997589500937417]",12329,12490,10569,11414,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))","RULE: B1AS1 ( zone_0 :ARG1-of ( have-degree-91 :ARG2 ( low-04 :ARG1 zone_0 ) :ARG3 ( most ) ) :location ( boundary :poss ( or :op1 ( city :name ( name_0 :op1 ""Selwyn"" ) ) :op2 ( city :name ( name_1 :op1 ""Waimakariri"" :op2 ""District"" :op3 ""Council"" ) ) ) ) :mod 2 )","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",0.0,0.948113976,1.0843428223518904e-76,0.9610710069839222,19.0,19.0,1.0,1.0,0.005684548,0.9618094475580464,0.0,98.30007087230284,0.0,99.12368540949016,0.0,97.49003030672316,"[0,0,0,0]","[0.9956713560309663,0.9889465751130464,0.9834049363996292,0.9781355932203388]",12490.0,12490.0,71.0,12013.0,,
t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_44,68.12296985881619,0.6821316740607531,66.71508612224116,0.7227399171227346,finished,-,stefanfuchs164,,2023-04-05T15:47:44.000Z,2203,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 Waste Storage Area 3.0.6 opening windows shall be screened to prevent entry by insects and other vermin. if( exist( waste storage area)), then( obligation( and( has( waste storage area, opening window), is( opening window. screening, entry), for( entry, and( insect, vermin)))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( has( waste storage area, window), is( window, openable))), then( obligation( screened from( window, vermin)))","[""if( and( expression( function( has), atom( variable( waste storage area)), data( window)), expression( function( is), atom( variable( window)), data( openable)))), then( obligation( expression( function( screened from), atom( variable( window)), data( vermin))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( exist( waste storage area)), then( obligation( and( has( waste storage area, opening window), is( opening window. screening, entry), for( entry, and( insect, vermin)))))","if( expression( function( exist), atom( variable( waste storage area)))), then( obligation( and( expression( function( has), atom( variable( waste storage area)), data( opening window)), expression( function( is), atom( relation( screening), variable( opening window)), data( entry)), expression( function( for), atom( variable( entry)), data( insect)), expression( function( for), atom( variable( entry)), data( vermin)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8446379754737962,0.909949593,5,19,1,1,0.8555438397274718,0.9137710168134509,71.72085278592048,69.14302268369674,64.86881977,64.45187771333866,"[0.89419795221843,0.8435620883840794,0.7823371132039209,0.7208514755684567]","[0.8888986243757119,0.8347734085699171,0.7663916245231124,0.6998214285714286]",12329,12490,10548,11413,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( is), atom( relation( type), variable( boundary)), data( Selwyn or Waimakariri District Council)))), then( obligation( expression( function( become), atom( variable( zone 2)), data( area)), expression( function( as per), atom( variable( area)), data( nzs 3604))))","if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))","if( within( zone, boundary), is( boundary. type, or( Selwyn or Waimakariri District Council))), then( obligation( become( zone 2, area), as per( area, nzs 3604)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",0.4488891767337157,0.9622767046389497,0.6122397405480924,1.0,19.0,19.0,1.0,1.0,0.6708566853482786,1.012570056044836,52.71878609942442,97.98503037328692,60.56065336002108,98.10774002,46.67494854810961,97.86262730911209,"[0.8646616541353384,0.7883967260471835,0.6953988102464489,0.609600783737448]","[0.9711394006483752,0.9654103053435116,0.9593762495002,0.9532732829338908]",12490.0,12490.0,8379.0,12647.0,,
t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_44,68.15002989180134,0.6887654981059155,66.71508612224116,0.7227399171227346,finished,-,stefanfuchs164,,2023-04-05T13:42:27.000Z,7515,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS1 Individual floor waste pipes connected to a floor waste stack need not be vented (see Figure 3). if( connect( floor waste pipe, stack)), then( obligation( not( has( floor waste pipe, ventilation))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( within( pipe, floor waste stack)), then( permission( not( has( pipe, ventilation))))","[""if( expression( function( within), atom( variable( pipe)), data( floor waste stack))), then( permission( not( expression( function( has), atom( variable( pipe)), data( ventilation)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( connect( floor waste pipe, stack)), then( obligation( not( has( floor waste pipe, ventilation))))","if( expression( function( connect), atom( variable( floor waste pipe)), data( stack))), then( obligation( not( expression( function( has), atom( variable( floor waste pipe)), data( ventilation)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8621962816330943,0.909949593,9,19,1,1,0.8708735501662747,0.9137710168134509,71.50286077821244,69.14302268369674,65.09754957868364,64.45187771333866,"[0.8855359970196517,0.8345209075567223,0.7733836715431808,0.7125617635879894]","[0.8888986243757119,0.8347734085699171,0.7663916245231124,0.6998214285714286]",12329,12490,10737,11413,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))",RULE: B1AS1 The lowest zone within the boundaries of the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",0.0,0.9684154845863422,1.0843428223518904e-76,0.9805172156028288,19.0,19.0,1.0,1.0,0.005684548,0.9807045636509208,0.0,98.58833456852528,0.0,98.98315581882852,0.0,98.19665050865976,"[0,0,0,0]","[0.9949383623152912,0.9902282805058302,0.9851325679359048,0.9803921568627452]",12490.0,12490.0,71.0,12249.0,,
t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_44,70.00095495477557,0.7300900774491024,67.33548636,0.7284898943508172,finished,-,stefanfuchs164,,2023-04-05T12:11:42.000Z,5443,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_44_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 4.6 Flashing overlaps and upstands; Overlaps and upstands to flashings shall be as specified in this paragraph and Table 7. if( and( towards( flashing. overlap, flashing), towards( flashing. upstand, flashing))), then( obligation( and( as per( flashing. overlap, and( nzbc e2as1 t7)), as per( flashing. upstand, and( this, nzbc e2,as1 t7)))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( has( flashing, or( lap, upstand))), then( obligation( and( as per( lap, and( nzbc e2as1 4.6, nzbc e2as1 t7)), as per( upstand, and( nzbc e2as1 4.6, nzbc e2as1 t7)))))","[""if( or( expression( function( has), atom( variable( flashing)), data( lap)), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( and( expression( function( as per), atom( variable( lap)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( lap)), data( nzbc e2as1 t7)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 4.6)), expression( function( as per), atom( variable( upstand)), data( nzbc e2as1 t7)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( has( flashing, or( overlap, upstand)))), then( obligation( and( as per( flashing. overlap, and( nzbc e2as1 t7)), as per( flashing. upstand, and( nzbc ce2as1 t7)))))","if( and( or( expression( function( has), atom( variable( flashing)), data( overlap)), expression( function( has), atom( variable( flashing)), data( upstand))))), then( obligation( and( expression( function( as per), atom( relation( overlap), variable( flashing)), data( nzbc e2as1 t7)), expression( function( as per), atom( relation( upstand), variable( flashing)), data( nzbc ce2as1 t7)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8937545708648788,0.9410001701742328,15,19,1,1,0.8990185740936004,0.9426741393114492,73.37877646793918,69.24949912710022,66.92042848789838,65.52443211281236,"[0.8985023457235655,0.850994279487878,0.7926338877718881,0.734707018673535]","[0.8638525564803805,0.8113304280953602,0.7470770288858322,0.6860133206470028]",12329,12490,11084,11774,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( and( or( expression( function( within), atom( variable( zone)), data( Selwyn District)), expression( function( within), atom( variable( zone)), data( Waimakariri District Council))))), then( obligation( expression( function( become), atom( variable( zone 1)), data( area)), expression( function( within), atom( variable( area)), data( Selwyn District)), expression( function( as per), atom( relation( designation), variable( area)), data( nzs 3604))))","if( and( expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council))))), then( and( expression( function( within), atom( variable( zone)), data( 2)), expression( function( is), atom( relation( location), variable( area)), data( city centre)), expression( function( is), atom( relation( elevation), variable( area)), data( low)), expression( function( as per), atom( relation( elevation), variable( area)), data( nzs 3604)))), then( expression( function( becomes), atom( relation( elevation), variable( area)), data( zone 2)))","if( and( within( zone, or( Selwyn District, Waimakariri District Council))), then( obligation( become( zone 1, area), within( area, Selwyn District), as per( area. designation, nzs 3604))))","if( and( within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council)))), then( and( within( zone, 2), is( area. location, city centre), is( area. elevation, low), as per( area. elevation, nzs 3604))), then( becomes( area. elevation, zone 2)))",0.7030016716802107,0.8535116792372719,0.8783559754470913,0.9748696005695054,19.0,19.0,1.0,1.0,0.8851881505204163,0.9751801441152922,66.56869532298676,86.71795952092965,70.36864159032932,87.24403095094057,63.15812121579373,86.19819436474016,"[0.8901953690303908,0.8389622212107419,0.7735019241341397,0.7103200221340957]","[0.9116584564860428,0.8889255925344784,0.8640970260840671,0.8390574078716471]",12490.0,12490.0,11056.0,12180.0,,
t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_44,68.0555116,0.6773784754822229,66.37045805032139,0.7004147524645069,finished,-,stefanfuchs164,,2023-04-05T11:22:46.000Z,2933,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS1 Individual floor waste pipes connected to a floor waste stack need not be vented (see Figure 3). if( connect( floor waste pipe, stack)), then( obligation( not( has( floor waste pipe, ventilation))))","translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))","if( within( pipe, floor waste stack)), then( permission( not( has( pipe, ventilation))))","[""if( expression( function( within), atom( variable( pipe)), data( floor waste stack))), then( permission( not( expression( function( has), atom( variable( pipe)), data( ventilation)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( connect( floor waste pipe, stack)), then( obligation( not( has( floor waste pipe, ventilation))))","if( expression( function( connect), atom( variable( floor waste pipe)), data( stack))), then( obligation( not( expression( function( has), atom( variable( floor waste pipe)), data( ventilation)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8443571536861985,0.8764696563050255,1,19,1,1,0.855300511,0.8835068054443554,71.52245314338082,69.32406379667115,64.90914027722108,63.65824876736143,"[0.8895211000474158,0.8380752339125453,0.7765067768912813,0.7155439411536972]","[0.8938830992297236,0.8398394746442904,0.77132103185532,0.7043060432452412]",12329,12490,10545,11035,translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2.,"translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","[""if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))""]","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))",roo,"if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))))), then( and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))","abide by :li ""B1AS1"" :ARG1-of ( mean-01 :ARG2 ( zone_0 :ARG1-of ( have-degree-91 :ARG2 ( low-04 :ARG1 zone_0 ) :ARG3 ( most ) ) :location ( or :op1 ( boundary_0 :part-of ( council :name ( name_0 :op1 ""Selwyn"" ) ) ) :op2 ( boundary_1 :part-of ( city :name ( name_1 :op1 ""Waimakariri"" :op2 ""District"" :op3 ""Council"" ) ) ) ) :mod 2 ) ) :ARG2 2 )","if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), then( and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))))",0.0,0.9118597798318632,1.0843428223518904e-76,0.9279490800097666,19.0,19.0,1.0,1.0,0.005684548,0.9304243394715772,0.0,97.12559187572856,0.0,98.74009395,0.0,95.56303793829106,"[0,0,0,0]","[0.9930298597366836,0.9853679653679652,0.9790051398205418,0.9733520336605892]",12490.0,12490.0,71.0,11621.0,,
t5-amr_0_ir-consi_ir_random_split_esp20_e20_44,68.07697304618183,0.6838238975644476,66.71508612224116,0.7227399171227346,finished,-,stefanfuchs164,,2023-04-05T11:04:21.000Z,1102,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G12AS2 5.0.3 Fixings used for the installation of a solar water heater must meet the requirements described in Paragraphs 2.1.1, 2.1.2, 2.1.3 and 2.1.4.",translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( has( solar water heater. installation, fixing)), then( obligation( comply with( fixing, and( nzbc g12as2 2.1.1, nzbc g12as2 2.1.2, nzbc g12as2 2.1.3, nzbc g12as2 2.1.4))))","[""if( expression( function( has), atom( relation( installation), variable( solar water heater)), data( fixing))), then( and( obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.3))), obligation( expression( function( comply with), atom( variable( fixing)), data( nzbc g12as2 2.1.4)))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))","if( and( for( fixing, installation), is( solar water heater. installation, fixture))), then( obligation( comply with( fixture, and( nzbc g12as2 2.1.1, nzbc g12s2 2.1.2, nzbc g12.3 3.1.3, nzbc g 12as2 2.1.4))))","if( and( expression( function( for), atom( variable( fixing)), data( installation)), expression( function( is), atom( relation( installation), variable( solar water heater)), data( fixture)))), then( and( obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12as2 2.1.1))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12s2 2.1.2))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g12.3 3.1.3))), obligation( expression( function( comply with), atom( variable( fixture)), data( nzbc g 12as2 2.1.4)))))","if( and( expression( function( has), atom( variable( chimney)), data( reinforcing)))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( and( has( chimney, reinforcing))), then( obligation( comply with( reinforcing, nzs 4671)))",0.8495882231453596,0.909949593,16,19,1,1,0.8598426474166599,0.9137710168134509,71.57261358,69.14302268369674,64.90688964387209,64.45187771333866,"[0.8932176209791529,0.8412155745489078,0.7788507505497657,0.7171736619175972]","[0.8888986243757119,0.8347734085699171,0.7663916245231124,0.6998214285714286]",12329,12490,10601,11413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_43,70.27269591216202,0.6912576969239285,67.99393274285843,0.7184969053306995,finished,-,stefanfuchs164,,2023-04-05T10:29:58.000Z,2060,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Fixings shall: a) Be fixed through crests, b) Penetrate purlins by a minimum of 40 mm for nail fixings and 30 mm for screw fixings, c) Include sealing washers of: i) neoprene (having a carbon black content of 15% or less by weight). if( and( is( roof cladding. type, profiled metal), has( roof cladding, fixing))), then( obligation( and( through( fixing. route, crest), through( fixing. penetration, purlins), greater than equal( penetration, 40 mm), for( penetration, nail fixing), for( penetration, screw fixing), greater than equal( penetration, 30 mm), for( penetration, screw fixing)), and( is( fixing. type, sealing washer), is( sealing washer. material, neoprene), greater than equal( sealing washer. carbon black content, 15 percent))))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( and( is( roof cladding. type, profiled metal), has( roof cladding, fixing))), then( obligation( and( has( roof cladding, crest), through( fixing, crest), into( fixing. penetration, purlin), or( and( is( fixing. type, nail), greater than equal( fixing. penetration, 40 mm)), and( is( fixing. type, screw), greater than equal( fixing. penetration, 30 mm))), include( fixing, sealing washer), is( sealing washer. type, neoprene), less than equal( sealing washer. carbon black content, 15 percent))))","[""if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( has), atom( variable( roof cladding)), data( crest)), expression( function( through), atom( variable( fixing)), data( crest)), expression( function( into), atom( relation( penetration), variable( fixing)), data( purlin)), or( and( expression( function( is), atom( relation( type), variable( fixing)), data( nail)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 40.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( penetration), variable( fixing)), data( baseunit( prefix( milli), kind( metre)), value( 30.0))))), expression( function( include), atom( variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( type), variable( sealing washer)), data( neoprene)), expression( function( less than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( roof cladding. type, profiled metal), has( roof cladding, fixing))), then( obligation( and( through( fixing. route, crest), through( fixing. penetration, purlins), greater than equal( penetration, 40 mm), for( penetration, nail fixing), for( penetration, screw fixing), greater than equal( penetration, 30 mm), for( penetration, screw fixing)), and( is( fixing. type, sealing washer), is( sealing washer. material, neoprene), greater than equal( sealing washer. carbon black content, 15 percent)))))","if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( fixing)))), then( obligation( and( expression( function( through), atom( relation( route), variable( fixing)), data( crest)), expression( function( through), atom( relation( penetration), variable( fixing)), data( purlins)), expression( function( greater than equal), atom( variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 40.0))), expression( function( for), atom( variable( penetration)), data( nail fixing)), expression( function( for), atom( variable( penetration)), data( screw fixing)), expression( function( greater than equal), atom( variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 30.0)))), and( expression( function( is), atom( relation( type), variable( fixing)), data( sealing washer)), expression( function( is), atom( relation( material), variable( sealing washer)), data( neoprene)), expression( function( greater than equal), atom( relation( carbon black content), variable( sealing washer)), data( 15 percent)))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",0.848469224,0.9210614017522492,19,19,1,1,0.8588693324681644,0.9240192153722978,73.66014400987208,70.88900390943915,67.18311058474224,65.32604981577063,"[0.8897912928510718,0.8475945997337897,0.7929549152866852,0.7367000771010023]","[0.8694220604800277,0.8178727114210985,0.7534871479954381,0.6911193502824858]",12329,12490,10589,11541,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( temperature)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)))), then( obligation( and( expression( function( define), atom( relation( source), variable( energy rating)), data( x0)), expression( function( greater than), atom( variable( x0)), data( energy source)))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if( is( valve. type, or( temperature, pressure relief))), then( obligation( and( define( energy rating. source, x0), greater than( x0, energy source))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.6980611701583818,0.931357463,0.9245107214412146,1.0,19.0,19.0,1.0,1.0,0.9272217774219376,1.0177742193755004,64.36365133752207,94.81927406962927,67.93586930948004,94.72513982136508,61.14833680751901,94.91359559809077,"[0.8454364908039029,0.7925282363162467,0.7283853483696128,0.6659922589725545]","[0.9461139081183134,0.9371885135669646,0.926571201272872,0.9158332666613328]",12490.0,12490.0,11581.0,12712.0,,
t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_43,68.91891043247448,0.6869010263949746,66.63949816976526,0.7126744633460389,finished,-,stefanfuchs164,,2023-04-05T09:47:06.000Z,2569,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G15AS1 4.0.1 Where waste chutes with side-entry hoppers (see Figure 2) are used as an alternative to common storage areas, the chute shall: a) Have a minimum internal diameter of 450 mm, b) Be self-cleaning, vertical and have smooth joints, c) Be vented at the top above the roof line, and at the bottom above the container, and d) Terminate centrally over a suitable container located in a room complying with Paragraphs 3.0.1 to 3.0.9. if( and( has( waste chute, side entry hopper), as per( waste chute. internal diameter, nzbc g15as1 f2), is( waste chute. type, common storage area))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute. type, and( self cleaning, vertical), has( waste chute, smooth joint)), has( waste chute, ventilation), above( ventilation, roof line), above( ventilation, container), above( ventilation, container), below( ventilation, container), is( termination, central), above( termination, container), within( termination, container), comply with( termination, and( nzbc g15s1 3.0.1 to nzbc g15x1 3.0.9)))))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( and( has( waste chute, site entry hopper), not( exist( waste storage area)), is( waste storage area. type, common))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute, self cleaning), is( waste chute, vertical), is( waste chute. joint, smooth), has( waste chute. top, ventilation), above( ventilation, roof line), has( waste chute. bottom, ventilation), above( ventilation, container), is( waste chute. termination point, central), above( waste chute. termination point, container), is( container. location, space), comply with( space, nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9))))","[""if( and( expression( function( has), atom( variable( waste chute)), data( site entry hopper)), not( expression( function( exist), atom( variable( waste storage area)))), expression( function( is), atom( relation( type), variable( waste storage area)), data( common)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( variable( waste chute)), data( self cleaning)), expression( function( is), atom( variable( waste chute)), data( vertical)), expression( function( is), atom( relation( joint), variable( waste chute)), data( smooth)), expression( function( has), atom( relation( top), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( has), atom( relation( bottom), variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( is), atom( relation( termination point), variable( waste chute)), data( central)), expression( function( above), atom( relation( termination point), variable( waste chute)), data( container)), expression( function( is), atom( relation( location), variable( container)), data( space)), expression( function( comply with), atom( variable( space)), data( nzbc g15as1 3.0.1 to nzbc g15as1 3.0.9)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( has( waste chute, side entry hopper), as per( waste chute. internal diameter, nzbc g15as1 f2), is( waste chute. type, common storage area))), then( obligation( and( greater than equal( waste chute. internal diameter, 450 mm), is( waste chute. type, and( self cleaning, vertical), has( waste chute, smooth joint)), has( waste chute, ventilation), above( ventilation, roof line), above( ventilation, container), below( ventilation, container), is( termination, central), above( termination, container), within( termination, container), comply with( termination, and( nzbc g15s1 3.0.1 to nzbc g15x1 3.0.9)))))","if( and( expression( function( has), atom( variable( waste chute)), data( side entry hopper)), expression( function( as per), atom( relation( internal diameter), variable( waste chute)), data( nzbc g15as1 f2)), expression( function( is), atom( relation( type), variable( waste chute)), data( common storage area)))), then( obligation( and( expression( function( greater than equal), atom( relation( internal diameter), variable( waste chute)), data( baseunit( prefix( milli), kind( metre)), value( 450.0))), expression( function( is), atom( relation( type), variable( waste chute)), data( self cleaning)), expression( function( is), atom( relation( type), variable( waste chute)), data( vertical)), expression( function( has), atom( variable( waste chute)), data( ventilation)), expression( function( above), atom( variable( ventilation)), data( roof line)), expression( function( above), atom( variable( ventilation)), data( container)), expression( function( below), atom( variable( ventilation)), data( container)), expression( function( is), atom( variable( termination)), data( central)), expression( function( above), atom( variable( termination)), data( container)), expression( function( within), atom( variable( termination)), data( container)), expression( function( comply with), atom( variable( termination)), data( nzbc g15s1 3.0.1 to nzbc g15x1 3.0.9)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))",0.8545177995188608,0.9247689781941804,14,19,1,1,0.864141455,0.9274619695756604,72.2234672,69.96357565884679,65.90352038627537,63.61695827068176,"[0.8861460484325137,0.8385145988850042,0.779775494672755,0.7206206302078345]","[0.8622237569060773,0.8096065317467211,0.7435762978500262,0.6795356608917421]",12329,12490,10654,11584,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))",6.2.1 ( have-03 :ARG0 ( valve_0 :ARG1-of ( follow-01 ) ) :ARG1 ( rating_0 :mod ( energy_0 ) :ARG2-of ( have-degree-91 :ARG1 rating_0 :ARG3 ( more ) :ARG4 ( rating_1 :mod ( energy_1 :ARG0-of ( heat-01 :ARG1 ( water ) ) ) ) )) ),"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.0,0.9452317585754608,1.0843428223518904e-76,0.9599058457508122,19.0,19.0,1.0,1.0,0.005684548,0.9606885508406724,0.0,98.11021753293142,0.0,98.64256335714532,0.0,97.58358670415126,"[0,0,0,0]","[0.991332611050921,0.9870892018779344,0.98262629670237,0.9778550823010352]",12490.0,12490.0,71.0,11999.0,,
t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_43,68.98128194457759,0.6943854814341501,66.38804210287135,0.711716044,finished,-,stefanfuchs164,,2023-04-05T08:59:36.000Z,2847,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 3.3.1 All gully traps shall have (see Figures 2 and 3): Wastepipes that discharge to the gullytrap arranged to permit easy cleaning of the gullytrap. if( exist( gully trap)), then( obligation( and( has( gully trap, wastepipe), towards( wastepipe. discharge, gullytrap)), is( wastepipe. arrangement, easy cleaning)))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( towards( waste pipe, gully trap)), then( obligation( and( for( waste pipe. arrangement, easily cleaned), is( gully trap, easily cleaned))))","[""if( expression( function( towards), atom( variable( waste pipe)), data( gully trap))), then( obligation( and( expression( function( for), atom( relation( arrangement), variable( waste pipe)), data( easily cleaned)), expression( function( is), atom( variable( gully trap)), data( easily cleaned)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( exist( gully trap)), then( obligation( and( has( gully trap, wastepipe), towards( wastepipe. discharge, gullytrap)), is( wastepipe. arrangement, easy cleaning)))","if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( has), atom( variable( gully trap)), data( wastepipe)), expression( function( towards), atom( relation( discharge), variable( wastepipe)), data( gullytrap))), expression( function( is), atom( relation( arrangement), variable( wastepipe)), data( easy cleaning))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))",0.8607200188744231,0.9243385160197318,7,19,1,1,0.8695757969016141,0.9270616493194556,72.18653113917127,69.80615525088487,66.04857233862239,63.2890444,"[0.8879768678294935,0.8419718309859155,0.7831553076850364,0.7234488009135897]","[0.8619051731583038,0.8091762252346194,0.7429395820582321,0.6783389055076544]",12329,12490,10721,11579,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( water supply)))), then( obligation( and( expression( function( has), atom( variable( water supply)), data( energy rating)), expression( function( greater than equal), atom( variable( energy rating)), data( energy source)), expression( function( heating water)))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))","if( exist( water supply)), then( obligation( and( has( water supply, energy rating), greater than equal( energy rating, energy source), heating water)))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.483450928,0.9661446250256164,0.667010573,0.9778200727911543,19.0,19.0,1.0,1.0,0.7117694155324259,0.97806245,53.69071738785702,98.58990638,60.35247888419555,99.18658933449473,48.35342263118745,98.00035950770123,"[0.856355455568054,0.7782061458215217,0.686671239140375,0.6030886251008413]","[0.9950884086444008,0.9905310827501028,0.9857545138313732,0.9809214363075898]",12490.0,12490.0,8890.0,12216.0,,
t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_43,68.90186661590653,0.685822607,66.38804210287135,0.711716044,finished,-,stefanfuchs164,,2023-04-05T08:40:31.000Z,1074,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-oracle_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E1AS1 2.0.1 Suspended floors and slabs on ground shall be at least 150 mm above the finished level of the surrounding ground immediately adjacent to the building. if( and( is( floor. type, suspended), on( slab, ground))), then( obligation( and( define( ground. finished level, x0), greater than equal( floor. elevation, 'x0 + 150 mm'), adjacent( slab. elevation, building))))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( or( is( floor. type, suspended), on( slab, ground))), then( obligation( and( adjacent( ground, building), define( ground. elevation, x0), greater than equal( floor. elevation, 'x0 + 150 mm'), greater than equal( slab. elevation, 'x0 + 150 mm'))))","[""if( or( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( on), atom( variable( slab)), data( ground)))), then( obligation( and( expression( function( adjacent), atom( variable( ground)), data( building)), expression( function( define), atom( relation( elevation), variable( ground)), data( x0)), expression( function( greater than equal), atom( relation( elevation), variable( floor)), data( 'x0 + 150 mm')), expression( function( greater than equal), atom( relation( elevation), variable( slab)), data( 'x0 + 150 mm')))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( floor. type, suspended), on( slab, ground))), then( obligation( and( define( ground. finished level, x0), greater than equal( floor. elevation, 'x0 + 150 mm'), adjacent( slab. elevation, building))))","if( and( expression( function( is), atom( relation( type), variable( floor)), data( suspended)), expression( function( on), atom( variable( slab)), data( ground)))), then( obligation( and( expression( function( define), atom( relation( finished level), variable( ground)), data( x0)), expression( function( greater than equal), atom( relation( elevation), variable( floor)), data( 'x0 + 150 mm')), expression( function( adjacent), atom( relation( elevation), variable( slab)), data( building)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))",0.8504267768193735,0.9243385160197318,5,19,1,1,0.8605726336280315,0.9270616493194556,72.23767510988479,69.80615525088487,65.86054284799502,63.2890444,"[0.8873704052780396,0.8414460575007117,0.7828620557890714,0.723574107915745]","[0.8619051731583038,0.8091762252346194,0.7429395820582321,0.6783389055076544]",12329,12490,10610,11579,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))",ENGLISH to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy source heating the water: temperature/pressure relief valve.,"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.0,0.9684459586820292,1.0843428223518904e-76,0.9836142050798125,19.0,19.0,1.0,1.0,0.005684548,0.9837469975980784,0.0,98.45245580801004,0.0,98.75998149,0.0,98.14683937492336,"[0,0,0,0]","[0.9915357695124928,0.9870661427635888,0.9822149032523672,0.9775550770250124]",12490.0,12490.0,71.0,12287.0,,
t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_43,70.37554671578388,0.7076651028921618,67.87542433,0.6960078234113322,finished,-,stefanfuchs164,,2023-04-05T08:21:51.000Z,1117,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr_ir,"[""models/t5-amr_0_ir-consi_ir_random_split_esp20_e20_43_0""]",9,3,0,__main__.post_process,1.2,True,t5-amr_ir_0_ir-consi_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: G13AS2 5.10.1 Where a drain or part of a drain is no longer required, it shall be disconnected from the foul water drainage system at the junction with the live drain or at the property boundary. if( and( has( drain, part), is( part. part, drain))), then( obligation( or( and( has( drain, foul water drainage system), is( drain. junction, live drain), and( has( drain. junction, property boundary))))))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( or( not( is( drain, required)), not( is( drain. part, required)))), then( obligation( or( disconnect( drain, or( live drain junction, property boundary)), disconnect( drain. part, or( live drain junction, property boundary)))))","[""if( or( not( expression( function( is), atom( variable( drain)), data( required))), not( expression( function( is), atom( relation( part), variable( drain)), data( required))))), then( obligation( or( expression( function( disconnect), atom( variable( drain)), data( live drain junction)), expression( function( disconnect), atom( variable( drain)), data( property boundary)), expression( function( disconnect), atom( relation( part), variable( drain)), data( live drain junction)), expression( function( disconnect), atom( relation( part), variable( drain)), data( property boundary)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( or( has( drain, part), is( part. part, drain))), then( obligation( or( and( has( drain, foul water drain), is( drain. junction, and( live drain, property boundary)), and( has( drain, disconnect), from( disconnect, foul water drain)))))","if( or( expression( function( has), atom( variable( drain)), data( part)), expression( function( is), atom( relation( part), variable( part)), data( drain)))), then( obligation( or( and( expression( function( has), atom( variable( drain)), data( foul water drain)), expression( function( is), atom( relation( junction), variable( drain)), data( live drain)), expression( function( is), atom( relation( junction), variable( drain)), data( property boundary)), and( expression( function( has), atom( variable( drain)), data( disconnect)), expression( function( from), atom( variable( disconnect)), data( foul water drain)))))))","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( new zealand backflow testing standard))))))","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, new zealand backflow testing standard)))))",0.8789482084441347,0.844569369,16,19,1,1,0.8857166031308298,0.855484388,73.29813232519167,71.58337960906354,67.67708669521264,64.53268856774952,"[0.8774725274725275,0.8369434970965066,0.7839116719242902,0.7298963295040628]","[0.916331305568554,0.8632937629545883,0.7963577729299061,0.7321428571428571]",12329,12490,10920,10685,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","if( expression( function( exist), atom( variable( valve)))), then( obligation( and( expression( function( has), atom( variable( valve)), data( energy rating)), expression( function( greater than), atom( variable( energy rating)), data( energy source)), expression( function( heating), atom( variable( water))))))","if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( less than equal), atom( relation( pressure rating), variable( valve)), data( x1)))))","if( exist( valve)), then( obligation( and( has( valve, energy rating), greater than( energy rating, energy source), heating( water))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x1), less than equal( valve. pressure rating, x1))))",0.7066106192732338,0.8541499715216715,0.8729582147927356,0.9565696206912973,19.0,19.0,1.0,1.0,0.8803843074459567,0.9574859887910327,66.49113305146999,85.98158730074661,70.07409602,86.89884334355945,63.25674831356272,85.08349308939646,"[0.903419425245544,0.8489702517162472,0.78127879122904,0.7164054530279144]","[0.9362822978509908,0.9091520861372812,0.8788186510958789,0.8498212157330155]",12490.0,12490.0,10996.0,11959.0,,
t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_43,69.06856715369743,0.6900124583604264,66.57933352,0.7059451391575333,finished,-,stefanfuchs164,,2023-04-05T08:04:33.000Z,1035,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_train-pred_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has two or three edges supported by structural sealant joints or continuous clamps, and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened))), then( obligation( and( has( safety barrier, edge), is( edge. support, or( structural sealant joint, continuous clamp)), not( and( has( edge, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. 0.2 kN), less than equal( pane. deflection, 250 mm)))))","translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), equal( count( safety barrier. edge), or( 2, 3)), is( edge. support, or( sealant joint, continuous clamp)), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))","[""if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), or( expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 2)), expression( function( equal), expression( function( count), atom( relation( edge), variable( safety barrier))), data( 3))), or( expression( function( is), atom( relation( support), variable( edge)), data( sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass. type, or( heat strengthened, toughened))), then( obligation( and( has( safety barrier, edge), is( edge. support, or( structural sealant joint, continuous clamp)), not( and( has( edge, pane), is( pane. resistance, concentrated load), less than equal( concentrated load. 0.2 kN), less than equal( pane. deflection, 250 mm))))","if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( relation( type), variable( glass)), data( heat strengthened)), expression( function( is), atom( relation( type), variable( glass)), data( toughened))))), then( obligation( and( expression( function( has), atom( variable( safety barrier)), data( edge)), or( expression( function( is), atom( relation( support), variable( edge)), data( structural sealant joint)), expression( function( is), atom( relation( support), variable( edge)), data( continuous clamp))), not( and( expression( function( has), atom( variable( edge)), data( pane)), expression( function( is), atom( relation( resistance), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( relation( 0.2 kN), variable( concentrated load))), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard))))",0.8533105689482181,0.891473165,0,19,1,1,0.8630870305783113,0.8969575660528423,72.44567994294138,70.23054182,65.99228450748338,63.289007897652425,"[0.8890141903956396,0.8440870387890256,0.7854081341080102,0.7254507096279248]","[0.8844059626885655,0.8312971613366871,0.7644878401591176,0.6996360327570519]",12329,12490,10641,11203,translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve.,"translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))","[""if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))""]","[""if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))""]","if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))","if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",roo,"if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))",ML: G12AS1 6.6.4 :ARG1-of ( have-03 :ARG0 ( valve :ARG0-of ( relieve-01 :ARG1 ( temperature ) ) ) :ARG1 ( rating :mod ( energy ) :ARG2-of ( have-degree-91 :ARG1 rating :ARG3 ( more ) :ARG4 ( source :ARG0-of ( heat-01 :ARG1 ( water ) ) ) ) :example valve ) ) ),"if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))",0.0,0.9385008332569502,1.0843428223518904e-76,0.9474241113278832,19.0,19.0,1.0,1.0,0.005684548,0.9487590072057646,0.0,97.94768542830906,0.0,99.12457548909236,0.0,96.79841351263612,"[0,0,0,0]","[0.9951054852320677,0.9923592834705832,0.989323539460198,0.9855632895076052]",12490.0,12490.0,71.0,11850.0,,
t5-amr_0_ir-consi_ir_random_split_esp20_e20_43,68.87491816255238,0.6878326263126541,66.38804210287135,0.711716044,finished,-,stefanfuchs164,,2023-04-05T07:46:37.000Z,1073,,False,8,lrml,5,False,20,20,500,epoch,False,test,[],False,1,False,0,0.0001,linear,0,512,lrml_f_score,"[""lrml"",""bleu""]",t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",9,3,0,__main__.post_process,1.2,True,t5-amr_0_ir-consi_ir_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,False,,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( and( by( timber. moisture content, measurement))), then( obligation( and( is( measurement. recommended procedure, measurement of moisture content of wood), as per( measurement. recommended procedure, scion publication), by( measurement, moisture meter), is( moisture meter. type, electrical resistance), has( moisture meter, insulated probe), as per( moisture meter. calibration, nzs 1080 1 appendix e), by( measurement. sampling, probe), into( probe, timber), define( timber. depth, x0), greater than equal( probe. depth, '1/3 * x0'), has( timber, board), define( board. end, x1), greater than( probe. location, 'x1 + 200 mm'), include( measurement. correction factor, and( timber species, temperature, treatment type)), as per( measurement. correction factor, scion publication))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))","if( is( timber. material, moisture content)), then( obligation( and( as per( moisture content. measurement, publication :name ( name, name, name, and( scion, new zealand forest research institute)))), is( moisture content. measurement, and( electrical resistance type, moisture meters), is( moisture meters. type, insulated probes), is( moisture meters. type, electrical resistance), comply with( moisture meters, nzs 1080.1 appendix e), define( timber. depth, x0), greater than equal( timber. depth, 1/3), less than equal( timber. depth, '1/3), greater than equal( timber. depth, 200 mm)), and( has( timber. treatment type, correction factor)), as per( correction factor, and( species, temperature, treatment)), as per( correction factor, publication, scion))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( and( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication :name ( name, name, name, and( scion, new zealand forest research institute))))), expression( function( is), atom( relation( measurement), variable( moisture content)), data( electrical resistance type))), obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication :name ( name, name, name, and( scion, new zealand forest research institute))))), expression( function( is), atom( relation( measurement), variable( moisture content)), data( moisture meters)))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3 nz backflow testing standard))))))","if( is( piped water supply system. type, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. test, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verify, or( as 2845 3 nz backflow testing standard)))))",0.8571137749536013,0.9243385160197318,18,19,1,1,0.866412523,0.9270616493194556,72.14159671907413,69.80615525088487,65.89126394925128,63.2890444,"[0.8854147163452537,0.8374328527000283,0.7781783681214421,0.7187888050434617]","[0.8619051731583038,0.8091762252346194,0.7429395820582321,0.6783389055076544]",12329,12490,10682,11579,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
